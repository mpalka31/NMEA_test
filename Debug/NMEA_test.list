
NMEA_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800c478  0800c478  0001c478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c850  0800c850  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c850  0800c850  0001c850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c858  0800c858  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c858  0800c858  0001c858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c85c  0800c85c  0001c85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f64  200001dc  0800ca3c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001140  0800ca3c  00021140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de67  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036f0  00000000  00000000  0003e073  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001778  00000000  00000000  00041768  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015d0  00000000  00000000  00042ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002914e  00000000  00000000  000444b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012fd6  00000000  00000000  0006d5fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f404f  00000000  00000000  000805d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00174623  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070b8  00000000  00000000  001746a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c45c 	.word	0x0800c45c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800c45c 	.word	0x0800c45c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <lcd_send_cmd>:
#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

uint8_t i2c_Tx_flag=0;

void lcd_send_cmd (char cmd)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f023 030f 	bic.w	r3, r3, #15
 8000fb8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	f043 030c 	orr.w	r3, r3, #12
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	f043 030c 	orr.w	r3, r3, #12
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000fde:	7bbb      	ldrb	r3, [r7, #14]
 8000fe0:	f043 0308 	orr.w	r3, r3, #8
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000fe8:	f107 0208 	add.w	r2, r7, #8
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	214e      	movs	r1, #78	; 0x4e
 8000ff4:	4803      	ldr	r0, [pc, #12]	; (8001004 <lcd_send_cmd+0x5c>)
 8000ff6:	f002 ff93 	bl	8003f20 <HAL_I2C_Master_Transmit>
}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000ae4 	.word	0x20000ae4

08001008 <lcd_send_data>:
char data_to_sent[32*4]={0};	/**< i2c Tx buffer*/
uint8_t id;		/**< counter of sending message characters. It increments after every 4 sign added to Tx buffer, and zeros when all characters are added*/
void lcd_send_data (char data)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	f023 030f 	bic.w	r3, r3, #15
 8001018:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	f043 030d 	orr.w	r3, r3, #13
 8001026:	b2db      	uxtb	r3, r3
 8001028:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	f043 0309 	orr.w	r3, r3, #9
 8001030:	b2db      	uxtb	r3, r3
 8001032:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	f043 030d 	orr.w	r3, r3, #13
 800103a:	b2db      	uxtb	r3, r3
 800103c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	f043 0309 	orr.w	r3, r3, #9
 8001044:	b2db      	uxtb	r3, r3
 8001046:	72fb      	strb	r3, [r7, #11]
	data_to_sent[0+id*4]=data_t[0];
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <lcd_send_data+0x90>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	7a39      	ldrb	r1, [r7, #8]
 8001050:	4a12      	ldr	r2, [pc, #72]	; (800109c <lcd_send_data+0x94>)
 8001052:	54d1      	strb	r1, [r2, r3]
	data_to_sent[1+id*4]=data_t[1];
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <lcd_send_data+0x90>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	3301      	adds	r3, #1
 800105c:	7a79      	ldrb	r1, [r7, #9]
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <lcd_send_data+0x94>)
 8001060:	54d1      	strb	r1, [r2, r3]
	data_to_sent[2+id*4]=data_t[2];
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <lcd_send_data+0x90>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	7ab9      	ldrb	r1, [r7, #10]
 800106c:	4a0b      	ldr	r2, [pc, #44]	; (800109c <lcd_send_data+0x94>)
 800106e:	54d1      	strb	r1, [r2, r3]
	data_to_sent[3+id*4]=data_t[3];
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <lcd_send_data+0x90>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	3303      	adds	r3, #3
 8001078:	7af9      	ldrb	r1, [r7, #11]
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <lcd_send_data+0x94>)
 800107c:	54d1      	strb	r1, [r2, r3]
	++id;
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <lcd_send_data+0x90>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <lcd_send_data+0x90>)
 8001088:	701a      	strb	r2, [r3, #0]
	//HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	2000099c 	.word	0x2000099c
 800109c:	200001fc 	.word	0x200001fc

080010a0 <lcd_put_cur>:
	lcd_send_cmd (0x80);
	lcd_send_cmd(1);
}

void lcd_put_cur(int row, int col)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
    switch (row)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <lcd_put_cur+0x16>
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d005      	beq.n	80010c0 <lcd_put_cur+0x20>
 80010b4:	e009      	b.n	80010ca <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010bc:	603b      	str	r3, [r7, #0]
            break;
 80010be:	e004      	b.n	80010ca <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010c6:	603b      	str	r3, [r7, #0]
            break;
 80010c8:	bf00      	nop
    }

    lcd_send_cmd (col);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff6a 	bl	8000fa8 <lcd_send_cmd>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <lcd_init>:


void lcd_init (void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80010e0:	2032      	movs	r0, #50	; 0x32
 80010e2:	f001 ffdb 	bl	800309c <HAL_Delay>
	lcd_send_cmd (0x30);
 80010e6:	2030      	movs	r0, #48	; 0x30
 80010e8:	f7ff ff5e 	bl	8000fa8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80010ec:	2005      	movs	r0, #5
 80010ee:	f001 ffd5 	bl	800309c <HAL_Delay>
	lcd_send_cmd (0x30);
 80010f2:	2030      	movs	r0, #48	; 0x30
 80010f4:	f7ff ff58 	bl	8000fa8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80010f8:	2001      	movs	r0, #1
 80010fa:	f001 ffcf 	bl	800309c <HAL_Delay>
	lcd_send_cmd (0x30);
 80010fe:	2030      	movs	r0, #48	; 0x30
 8001100:	f7ff ff52 	bl	8000fa8 <lcd_send_cmd>
	HAL_Delay(10);
 8001104:	200a      	movs	r0, #10
 8001106:	f001 ffc9 	bl	800309c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800110a:	2020      	movs	r0, #32
 800110c:	f7ff ff4c 	bl	8000fa8 <lcd_send_cmd>
	HAL_Delay(10);
 8001110:	200a      	movs	r0, #10
 8001112:	f001 ffc3 	bl	800309c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001116:	2028      	movs	r0, #40	; 0x28
 8001118:	f7ff ff46 	bl	8000fa8 <lcd_send_cmd>
	HAL_Delay(1);
 800111c:	2001      	movs	r0, #1
 800111e:	f001 ffbd 	bl	800309c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001122:	2008      	movs	r0, #8
 8001124:	f7ff ff40 	bl	8000fa8 <lcd_send_cmd>
	HAL_Delay(1);
 8001128:	2001      	movs	r0, #1
 800112a:	f001 ffb7 	bl	800309c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800112e:	2001      	movs	r0, #1
 8001130:	f7ff ff3a 	bl	8000fa8 <lcd_send_cmd>
	HAL_Delay(1);
 8001134:	2001      	movs	r0, #1
 8001136:	f001 ffb1 	bl	800309c <HAL_Delay>
	HAL_Delay(1);
 800113a:	2001      	movs	r0, #1
 800113c:	f001 ffae 	bl	800309c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001140:	2006      	movs	r0, #6
 8001142:	f7ff ff31 	bl	8000fa8 <lcd_send_cmd>
	HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f001 ffa8 	bl	800309c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800114c:	200c      	movs	r0, #12
 800114e:	f7ff ff2b 	bl	8000fa8 <lcd_send_cmd>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <lcd_send_string>:
void lcd_send_string (char *str)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	id=0;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <lcd_send_string+0x48>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
	while (*str) lcd_send_data (*str++);
 8001166:	e006      	b.n	8001176 <lcd_send_string+0x1e>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff49 	bl	8001008 <lcd_send_data>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f4      	bne.n	8001168 <lcd_send_string+0x10>
	HAL_I2C_Master_Transmit_IT (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_to_sent, strlen(data_to_sent));
 800117e:	4809      	ldr	r0, [pc, #36]	; (80011a4 <lcd_send_string+0x4c>)
 8001180:	f7ff f830 	bl	80001e4 <strlen>
 8001184:	4603      	mov	r3, r0
 8001186:	b29b      	uxth	r3, r3
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <lcd_send_string+0x4c>)
 800118a:	214e      	movs	r1, #78	; 0x4e
 800118c:	4806      	ldr	r0, [pc, #24]	; (80011a8 <lcd_send_string+0x50>)
 800118e:	f002 ffbb 	bl	8004108 <HAL_I2C_Master_Transmit_IT>
	i2c_Tx_flag=1;
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <lcd_send_string+0x54>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2000099c 	.word	0x2000099c
 80011a4:	200001fc 	.word	0x200001fc
 80011a8:	20000ae4 	.word	0x20000ae4
 80011ac:	200001f8 	.word	0x200001f8

080011b0 <HAL_I2C_MasterTxCpltCallback>:

/**
 * HAL_I2C_MasterTxCpltCallback is called when i2c transmission is completed and zeros Tx buffer.
 * @param[in]	hi2c	pointer to i2c handle structure
 */
void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef * hi2c){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	if (hi2c==&hi2c1){
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d107      	bne.n	80011d0 <HAL_I2C_MasterTxCpltCallback+0x20>
		memset(&data_to_sent,0,32*4);
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	2100      	movs	r1, #0
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_I2C_MasterTxCpltCallback+0x2c>)
 80011c6:	f007 fddd 	bl	8008d84 <memset>
		i2c_Tx_flag=0;
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_I2C_MasterTxCpltCallback+0x30>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
	}
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000ae4 	.word	0x20000ae4
 80011dc:	200001fc 	.word	0x200001fc
 80011e0:	200001f8 	.word	0x200001f8

080011e4 <default_CB>:
static float speed_fall_barrier;	/**< Barrier of decreasing speed*/
/**
 * default_CB() is a default function for all the CB pointers which do nothing.\n
 * The unregistering CB pointer is setting to pointer of this function.  
 */
static void default_CB(void){}
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <NMEA_CB_register>:

NMEA_status NMEA_CB_register(void (*CB_fun)(void),NMEA_CB_ID CB_id,float barrier){
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	460b      	mov	r3, r1
 80011fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001202:	72fb      	strb	r3, [r7, #11]
	switch (CB_id) {
 8001204:	7afb      	ldrb	r3, [r7, #11]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d014      	beq.n	8001234 <NMEA_CB_register+0x40>
 800120a:	2b02      	cmp	r3, #2
 800120c:	d023      	beq.n	8001256 <NMEA_CB_register+0x62>
 800120e:	2b00      	cmp	r3, #0
 8001210:	d132      	bne.n	8001278 <NMEA_CB_register+0x84>
		case SPEED_CHANGE_CB:
			if (barrier < 0) return NMEA_WRONG_DATA;
 8001212:	edd7 7a01 	vldr	s15, [r7, #4]
 8001216:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121e:	d501      	bpl.n	8001224 <NMEA_CB_register+0x30>
 8001220:	2303      	movs	r3, #3
 8001222:	e02a      	b.n	800127a <NMEA_CB_register+0x86>
			speed_change_CB_fun_ptr = CB_fun;
 8001224:	4a18      	ldr	r2, [pc, #96]	; (8001288 <NMEA_CB_register+0x94>)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6013      	str	r3, [r2, #0]
			speed_change_tolerance = barrier;
 800122a:	4a18      	ldr	r2, [pc, #96]	; (800128c <NMEA_CB_register+0x98>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6013      	str	r3, [r2, #0]
			return NMEA_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	e022      	b.n	800127a <NMEA_CB_register+0x86>
		case SPEED_RISE_BARRIER_CB:
			if (barrier < 0) return NMEA_WRONG_DATA;
 8001234:	edd7 7a01 	vldr	s15, [r7, #4]
 8001238:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	d501      	bpl.n	8001246 <NMEA_CB_register+0x52>
 8001242:	2303      	movs	r3, #3
 8001244:	e019      	b.n	800127a <NMEA_CB_register+0x86>
			speed_raise_barrier_CB_fun_ptr = CB_fun;
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <NMEA_CB_register+0x9c>)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6013      	str	r3, [r2, #0]
			speed_raise_barrier = barrier;
 800124c:	4a11      	ldr	r2, [pc, #68]	; (8001294 <NMEA_CB_register+0xa0>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
			return NMEA_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e011      	b.n	800127a <NMEA_CB_register+0x86>
		case SPEED_FALL_BARRIER_CB:
			if (barrier < 0) return NMEA_WRONG_DATA;
 8001256:	edd7 7a01 	vldr	s15, [r7, #4]
 800125a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800125e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001262:	d501      	bpl.n	8001268 <NMEA_CB_register+0x74>
 8001264:	2303      	movs	r3, #3
 8001266:	e008      	b.n	800127a <NMEA_CB_register+0x86>
			speed_fall_barrier_CB_fun_ptr = CB_fun;
 8001268:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <NMEA_CB_register+0xa4>)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6013      	str	r3, [r2, #0]
			speed_fall_barrier = barrier;
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <NMEA_CB_register+0xa8>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6013      	str	r3, [r2, #0]
			return NMEA_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	e000      	b.n	800127a <NMEA_CB_register+0x86>
		default:
			return NMEA_WRONG_CB_ID;
 8001278:	2304      	movs	r3, #4
	}
	return NMEA_ERROR;
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000908 	.word	0x20000908
 800128c:	2000090c 	.word	0x2000090c
 8001290:	20000910 	.word	0x20000910
 8001294:	20000914 	.word	0x20000914
 8001298:	20000918 	.word	0x20000918
 800129c:	2000091c 	.word	0x2000091c

080012a0 <NMEA_CB_unregister>:

NMEA_status NMEA_CB_unregister(NMEA_CB_ID CB_id){
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	switch (CB_id) {
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d00c      	beq.n	80012ca <NMEA_CB_unregister+0x2a>
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d013      	beq.n	80012dc <NMEA_CB_unregister+0x3c>
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d11a      	bne.n	80012ee <NMEA_CB_unregister+0x4e>
		case SPEED_CHANGE_CB:
			speed_change_tolerance = 0;
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <NMEA_CB_unregister+0x5c>)
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
			speed_change_CB_fun_ptr = default_CB;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <NMEA_CB_unregister+0x60>)
 80012c2:	4a10      	ldr	r2, [pc, #64]	; (8001304 <NMEA_CB_unregister+0x64>)
 80012c4:	601a      	str	r2, [r3, #0]
			return NMEA_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e012      	b.n	80012f0 <NMEA_CB_unregister+0x50>
		case SPEED_RISE_BARRIER_CB:
			speed_raise_barrier = 0;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <NMEA_CB_unregister+0x68>)
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
			speed_raise_barrier_CB_fun_ptr = default_CB;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <NMEA_CB_unregister+0x6c>)
 80012d4:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <NMEA_CB_unregister+0x64>)
 80012d6:	601a      	str	r2, [r3, #0]
			return NMEA_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	e009      	b.n	80012f0 <NMEA_CB_unregister+0x50>
		case SPEED_FALL_BARRIER_CB:
			speed_fall_barrier = 0;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <NMEA_CB_unregister+0x70>)
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
			speed_fall_barrier_CB_fun_ptr = default_CB;
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <NMEA_CB_unregister+0x74>)
 80012e6:	4a07      	ldr	r2, [pc, #28]	; (8001304 <NMEA_CB_unregister+0x64>)
 80012e8:	601a      	str	r2, [r3, #0]
			return NMEA_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e000      	b.n	80012f0 <NMEA_CB_unregister+0x50>
		default:
			return NMEA_WRONG_CB_ID;
 80012ee:	2304      	movs	r3, #4
	}
	return NMEA_ERROR;
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	2000090c 	.word	0x2000090c
 8001300:	20000908 	.word	0x20000908
 8001304:	080011e5 	.word	0x080011e5
 8001308:	20000914 	.word	0x20000914
 800130c:	20000910 	.word	0x20000910
 8001310:	2000091c 	.word	0x2000091c
 8001314:	20000918 	.word	0x20000918

08001318 <NMEA_parser>:
 * NMEA_parser is function which parses single correct NMEA message.\n
 * Inside this function all known types of NMEA message are recognized and nmea_data structure fields are set.\n
 * There is also implemented mechanism of recognizing specified events and calling corresponding to them callbacks.
 * @param[in]	message	pointer to buffer storing NMEA message.
 */
static void 	NMEA_parser(char *message){
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b0b2      	sub	sp, #200	; 0xc8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

	NMEA_data previous_data = nmea_data;
 8001320:	4bb8      	ldr	r3, [pc, #736]	; (8001604 <NMEA_parser+0x2ec>)
 8001322:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001326:	461d      	mov	r5, r3
 8001328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001334:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001338:	e884 0003 	stmia.w	r4, {r0, r1}

	int num = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	char *fields[32]={NULL};
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f007 fd1a 	bl	8008d84 <memset>
	fields[num++]=message;
 8001350:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001360:	4413      	add	r3, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 8001368:	e010      	b.n	800138c <NMEA_parser+0x74>
		*message++ = 0;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
		fields[num++]=message;
 8001374:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001384:	4413      	add	r3, r2
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 800138c:	212c      	movs	r1, #44	; 0x2c
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f008 f97c 	bl	800968c <strchr>
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1e6      	bne.n	800136a <NMEA_parser+0x52>
	}

	if(strcmp(fields[0],"$GPGLL")==0){
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	499a      	ldr	r1, [pc, #616]	; (8001608 <NMEA_parser+0x2f0>)
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7fe ff15 	bl	80001d0 <strcmp>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d122      	bne.n	80013f2 <NMEA_parser+0xda>

		nmea_data.latitude = atof(fields[1]);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f007 fcb6 	bl	8008d20 <atof>
 80013b4:	ec54 3b10 	vmov	r3, r4, d0
 80013b8:	4618      	mov	r0, r3
 80013ba:	4621      	mov	r1, r4
 80013bc:	f7ff fc24 	bl	8000c08 <__aeabi_d2f>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b90      	ldr	r3, [pc, #576]	; (8001604 <NMEA_parser+0x2ec>)
 80013c4:	609a      	str	r2, [r3, #8]
		nmea_data.latitude_direction = *fields[2];
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	781a      	ldrb	r2, [r3, #0]
 80013ca:	4b8e      	ldr	r3, [pc, #568]	; (8001604 <NMEA_parser+0x2ec>)
 80013cc:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[3]);
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f007 fca5 	bl	8008d20 <atof>
 80013d6:	ec54 3b10 	vmov	r3, r4, d0
 80013da:	4618      	mov	r0, r3
 80013dc:	4621      	mov	r1, r4
 80013de:	f7ff fc13 	bl	8000c08 <__aeabi_d2f>
 80013e2:	4602      	mov	r2, r0
 80013e4:	4b87      	ldr	r3, [pc, #540]	; (8001604 <NMEA_parser+0x2ec>)
 80013e6:	611a      	str	r2, [r3, #16]
		nmea_data.longitude_direction = *fields[4];
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	781a      	ldrb	r2, [r3, #0]
 80013ec:	4b85      	ldr	r3, [pc, #532]	; (8001604 <NMEA_parser+0x2ec>)
 80013ee:	751a      	strb	r2, [r3, #20]
 80013f0:	e125      	b.n	800163e <NMEA_parser+0x326>

	}else if(strcmp(fields[0],"$GPRMC")==0){
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4985      	ldr	r1, [pc, #532]	; (800160c <NMEA_parser+0x2f4>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe feea 	bl	80001d0 <strcmp>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d136      	bne.n	8001470 <NMEA_parser+0x158>

		nmea_data.UTC_time = atof(fields[1]);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4618      	mov	r0, r3
 8001406:	f007 fc8b 	bl	8008d20 <atof>
 800140a:	ec54 3b10 	vmov	r3, r4, d0
 800140e:	4618      	mov	r0, r3
 8001410:	4621      	mov	r1, r4
 8001412:	f7ff fbf9 	bl	8000c08 <__aeabi_d2f>
 8001416:	4602      	mov	r2, r0
 8001418:	4b7a      	ldr	r3, [pc, #488]	; (8001604 <NMEA_parser+0x2ec>)
 800141a:	601a      	str	r2, [r3, #0]
		nmea_data.UT_date = atoi(fields[9]);
 800141c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141e:	4618      	mov	r0, r3
 8001420:	f007 fc81 	bl	8008d26 <atoi>
 8001424:	4602      	mov	r2, r0
 8001426:	4b77      	ldr	r3, [pc, #476]	; (8001604 <NMEA_parser+0x2ec>)
 8001428:	605a      	str	r2, [r3, #4]

		nmea_data.latitude = atof(fields[3]);
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4618      	mov	r0, r3
 800142e:	f007 fc77 	bl	8008d20 <atof>
 8001432:	ec54 3b10 	vmov	r3, r4, d0
 8001436:	4618      	mov	r0, r3
 8001438:	4621      	mov	r1, r4
 800143a:	f7ff fbe5 	bl	8000c08 <__aeabi_d2f>
 800143e:	4602      	mov	r2, r0
 8001440:	4b70      	ldr	r3, [pc, #448]	; (8001604 <NMEA_parser+0x2ec>)
 8001442:	609a      	str	r2, [r3, #8]
		nmea_data.latitude_direction = *fields[4];
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	781a      	ldrb	r2, [r3, #0]
 8001448:	4b6e      	ldr	r3, [pc, #440]	; (8001604 <NMEA_parser+0x2ec>)
 800144a:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[5]);
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	4618      	mov	r0, r3
 8001450:	f007 fc66 	bl	8008d20 <atof>
 8001454:	ec54 3b10 	vmov	r3, r4, d0
 8001458:	4618      	mov	r0, r3
 800145a:	4621      	mov	r1, r4
 800145c:	f7ff fbd4 	bl	8000c08 <__aeabi_d2f>
 8001460:	4602      	mov	r2, r0
 8001462:	4b68      	ldr	r3, [pc, #416]	; (8001604 <NMEA_parser+0x2ec>)
 8001464:	611a      	str	r2, [r3, #16]
		nmea_data.longitude_direction = *fields[6];
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	781a      	ldrb	r2, [r3, #0]
 800146a:	4b66      	ldr	r3, [pc, #408]	; (8001604 <NMEA_parser+0x2ec>)
 800146c:	751a      	strb	r2, [r3, #20]
 800146e:	e0e6      	b.n	800163e <NMEA_parser+0x326>


	}else if(strcmp(fields[0],"$GPVTG")==0){
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4967      	ldr	r1, [pc, #412]	; (8001610 <NMEA_parser+0x2f8>)
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe feab 	bl	80001d0 <strcmp>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d116      	bne.n	80014ae <NMEA_parser+0x196>

		nmea_data.speed_knots =  atoi(fields[5]);
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	4618      	mov	r0, r3
 8001484:	f007 fc4f 	bl	8008d26 <atoi>
 8001488:	ee07 0a90 	vmov	s15, r0
 800148c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001490:	4b5c      	ldr	r3, [pc, #368]	; (8001604 <NMEA_parser+0x2ec>)
 8001492:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		nmea_data.speed_kmph =  atoi(fields[7]);
 8001496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001498:	4618      	mov	r0, r3
 800149a:	f007 fc44 	bl	8008d26 <atoi>
 800149e:	ee07 0a90 	vmov	s15, r0
 80014a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a6:	4b57      	ldr	r3, [pc, #348]	; (8001604 <NMEA_parser+0x2ec>)
 80014a8:	edc3 7a08 	vstr	s15, [r3, #32]
 80014ac:	e0c7      	b.n	800163e <NMEA_parser+0x326>

	}else if(strcmp(fields[0],"$GPGGA")==0){
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4958      	ldr	r1, [pc, #352]	; (8001614 <NMEA_parser+0x2fc>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe fe8c 	bl	80001d0 <strcmp>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d168      	bne.n	8001590 <NMEA_parser+0x278>

		nmea_data.UTC_time = atof(fields[1]);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f007 fc2d 	bl	8008d20 <atof>
 80014c6:	ec54 3b10 	vmov	r3, r4, d0
 80014ca:	4618      	mov	r0, r3
 80014cc:	4621      	mov	r1, r4
 80014ce:	f7ff fb9b 	bl	8000c08 <__aeabi_d2f>
 80014d2:	4602      	mov	r2, r0
 80014d4:	4b4b      	ldr	r3, [pc, #300]	; (8001604 <NMEA_parser+0x2ec>)
 80014d6:	601a      	str	r2, [r3, #0]

		nmea_data.latitude = atof(fields[2]);
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	4618      	mov	r0, r3
 80014dc:	f007 fc20 	bl	8008d20 <atof>
 80014e0:	ec54 3b10 	vmov	r3, r4, d0
 80014e4:	4618      	mov	r0, r3
 80014e6:	4621      	mov	r1, r4
 80014e8:	f7ff fb8e 	bl	8000c08 <__aeabi_d2f>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b45      	ldr	r3, [pc, #276]	; (8001604 <NMEA_parser+0x2ec>)
 80014f0:	609a      	str	r2, [r3, #8]
		nmea_data.latitude_direction = *fields[3];
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	781a      	ldrb	r2, [r3, #0]
 80014f6:	4b43      	ldr	r3, [pc, #268]	; (8001604 <NMEA_parser+0x2ec>)
 80014f8:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[4]);
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f007 fc0f 	bl	8008d20 <atof>
 8001502:	ec54 3b10 	vmov	r3, r4, d0
 8001506:	4618      	mov	r0, r3
 8001508:	4621      	mov	r1, r4
 800150a:	f7ff fb7d 	bl	8000c08 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <NMEA_parser+0x2ec>)
 8001512:	611a      	str	r2, [r3, #16]
		nmea_data.longitude_direction = *fields[5];
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	781a      	ldrb	r2, [r3, #0]
 8001518:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <NMEA_parser+0x2ec>)
 800151a:	751a      	strb	r2, [r3, #20]

		nmea_data.fix = atoi(fields[6]);
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	4618      	mov	r0, r3
 8001520:	f007 fc01 	bl	8008d26 <atoi>
 8001524:	4603      	mov	r3, r0
 8001526:	b2da      	uxtb	r2, r3
 8001528:	4b36      	ldr	r3, [pc, #216]	; (8001604 <NMEA_parser+0x2ec>)
 800152a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		nmea_data.sat_in_use = atoi(fields[7]);
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001530:	4618      	mov	r0, r3
 8001532:	f007 fbf8 	bl	8008d26 <atoi>
 8001536:	4603      	mov	r3, r0
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b32      	ldr	r3, [pc, #200]	; (8001604 <NMEA_parser+0x2ec>)
 800153c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		nmea_data.HDOP = atof(fields[8]);
 8001540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001542:	4618      	mov	r0, r3
 8001544:	f007 fbec 	bl	8008d20 <atof>
 8001548:	ec54 3b10 	vmov	r3, r4, d0
 800154c:	4618      	mov	r0, r3
 800154e:	4621      	mov	r1, r4
 8001550:	f7ff fb5a 	bl	8000c08 <__aeabi_d2f>
 8001554:	4602      	mov	r2, r0
 8001556:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <NMEA_parser+0x2ec>)
 8001558:	631a      	str	r2, [r3, #48]	; 0x30

		nmea_data.altitude = atof(fields[9]);
 800155a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155c:	4618      	mov	r0, r3
 800155e:	f007 fbdf 	bl	8008d20 <atof>
 8001562:	ec54 3b10 	vmov	r3, r4, d0
 8001566:	4618      	mov	r0, r3
 8001568:	4621      	mov	r1, r4
 800156a:	f7ff fb4d 	bl	8000c08 <__aeabi_d2f>
 800156e:	4602      	mov	r2, r0
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <NMEA_parser+0x2ec>)
 8001572:	619a      	str	r2, [r3, #24]
		nmea_data.geoidal_separation = atof(fields[11]);
 8001574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001576:	4618      	mov	r0, r3
 8001578:	f007 fbd2 	bl	8008d20 <atof>
 800157c:	ec54 3b10 	vmov	r3, r4, d0
 8001580:	4618      	mov	r0, r3
 8001582:	4621      	mov	r1, r4
 8001584:	f7ff fb40 	bl	8000c08 <__aeabi_d2f>
 8001588:	4602      	mov	r2, r0
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <NMEA_parser+0x2ec>)
 800158c:	61da      	str	r2, [r3, #28]
 800158e:	e056      	b.n	800163e <NMEA_parser+0x326>

	}else if(strcmp(fields[0],"$GPGSA")==0){
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4921      	ldr	r1, [pc, #132]	; (8001618 <NMEA_parser+0x300>)
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe fe1b 	bl	80001d0 <strcmp>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d13d      	bne.n	800161c <NMEA_parser+0x304>

		nmea_data.fix_mode = atoi(fields[2]);
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f007 fbbf 	bl	8008d26 <atoi>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <NMEA_parser+0x2ec>)
 80015ae:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

		nmea_data.PDOP = atof(fields[15]);
 80015b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015b4:	4618      	mov	r0, r3
 80015b6:	f007 fbb3 	bl	8008d20 <atof>
 80015ba:	ec54 3b10 	vmov	r3, r4, d0
 80015be:	4618      	mov	r0, r3
 80015c0:	4621      	mov	r1, r4
 80015c2:	f7ff fb21 	bl	8000c08 <__aeabi_d2f>
 80015c6:	4602      	mov	r2, r0
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <NMEA_parser+0x2ec>)
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
		nmea_data.HDOP = atof(fields[16]);
 80015cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015ce:	4618      	mov	r0, r3
 80015d0:	f007 fba6 	bl	8008d20 <atof>
 80015d4:	ec54 3b10 	vmov	r3, r4, d0
 80015d8:	4618      	mov	r0, r3
 80015da:	4621      	mov	r1, r4
 80015dc:	f7ff fb14 	bl	8000c08 <__aeabi_d2f>
 80015e0:	4602      	mov	r2, r0
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <NMEA_parser+0x2ec>)
 80015e4:	631a      	str	r2, [r3, #48]	; 0x30
		nmea_data.VDOP = atof(fields[17]);
 80015e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015e8:	4618      	mov	r0, r3
 80015ea:	f007 fb99 	bl	8008d20 <atof>
 80015ee:	ec54 3b10 	vmov	r3, r4, d0
 80015f2:	4618      	mov	r0, r3
 80015f4:	4621      	mov	r1, r4
 80015f6:	f7ff fb07 	bl	8000c08 <__aeabi_d2f>
 80015fa:	4602      	mov	r2, r0
 80015fc:	4b01      	ldr	r3, [pc, #4]	; (8001604 <NMEA_parser+0x2ec>)
 80015fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001600:	e01d      	b.n	800163e <NMEA_parser+0x326>
 8001602:	bf00      	nop
 8001604:	200009a8 	.word	0x200009a8
 8001608:	0800c478 	.word	0x0800c478
 800160c:	0800c480 	.word	0x0800c480
 8001610:	0800c488 	.word	0x0800c488
 8001614:	0800c490 	.word	0x0800c490
 8001618:	0800c498 	.word	0x0800c498

	}else if(strcmp(fields[0],"$GPGSV")==0){
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4931      	ldr	r1, [pc, #196]	; (80016e4 <NMEA_parser+0x3cc>)
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe fdd5 	bl	80001d0 <strcmp>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d108      	bne.n	800163e <NMEA_parser+0x326>
		nmea_data.sat_in_view = atoi(fields[3]);
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	4618      	mov	r0, r3
 8001630:	f007 fb79 	bl	8008d26 <atoi>
 8001634:	4603      	mov	r3, r0
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <NMEA_parser+0x3d0>)
 800163a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}

	if (abs(nmea_data.speed_kmph - previous_data.speed_kmph) > speed_change_tolerance){
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <NMEA_parser+0x3d0>)
 8001640:	ed93 7a08 	vldr	s14, [r3, #32]
 8001644:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001650:	ee17 3a90 	vmov	r3, s15
 8001654:	2b00      	cmp	r3, #0
 8001656:	bfb8      	it	lt
 8001658:	425b      	neglt	r3, r3
 800165a:	ee07 3a90 	vmov	s15, r3
 800165e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001662:	4b22      	ldr	r3, [pc, #136]	; (80016ec <NMEA_parser+0x3d4>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	dd02      	ble.n	8001678 <NMEA_parser+0x360>
		speed_change_CB_fun_ptr();
 8001672:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <NMEA_parser+0x3d8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph > speed_raise_barrier && previous_data.speed_kmph <= speed_raise_barrier){
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <NMEA_parser+0x3d0>)
 800167a:	ed93 7a08 	vldr	s14, [r3, #32]
 800167e:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <NMEA_parser+0x3dc>)
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168c:	dd0c      	ble.n	80016a8 <NMEA_parser+0x390>
 800168e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <NMEA_parser+0x3dc>)
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a0:	d802      	bhi.n	80016a8 <NMEA_parser+0x390>
		speed_raise_barrier_CB_fun_ptr();
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <NMEA_parser+0x3e0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <NMEA_parser+0x3d0>)
 80016aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <NMEA_parser+0x3dc>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016bc:	d400      	bmi.n	80016c0 <NMEA_parser+0x3a8>
		speed_fall_barrier_CB_fun_ptr();
	}
}
 80016be:	e00d      	b.n	80016dc <NMEA_parser+0x3c4>
	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 80016c0:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <NMEA_parser+0x3dc>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d2:	da00      	bge.n	80016d6 <NMEA_parser+0x3be>
}
 80016d4:	e002      	b.n	80016dc <NMEA_parser+0x3c4>
		speed_fall_barrier_CB_fun_ptr();
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <NMEA_parser+0x3e4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4798      	blx	r3
}
 80016dc:	bf00      	nop
 80016de:	37c8      	adds	r7, #200	; 0xc8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bdb0      	pop	{r4, r5, r7, pc}
 80016e4:	0800c4a0 	.word	0x0800c4a0
 80016e8:	200009a8 	.word	0x200009a8
 80016ec:	2000090c 	.word	0x2000090c
 80016f0:	20000908 	.word	0x20000908
 80016f4:	20000914 	.word	0x20000914
 80016f8:	20000910 	.word	0x20000910
 80016fc:	20000918 	.word	0x20000918

08001700 <hx2int>:
 * hx2int is function which converts hex number written using characters to corresponding integer.
 * @param[in]	n2		is older position ix hex code
 * @param[in]	n1		is younger position ix hex code
 * @param[out]	uint8_t	is integer corresponding to input hex
 */
static uint8_t hx2int(uint8_t n2, uint8_t n1){
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	460a      	mov	r2, r1
 800170a:	71fb      	strb	r3, [r7, #7]
 800170c:	4613      	mov	r3, r2
 800170e:	71bb      	strb	r3, [r7, #6]
	if (n2 <= '9') n2-='0';
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2b39      	cmp	r3, #57	; 0x39
 8001714:	d803      	bhi.n	800171e <hx2int+0x1e>
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	3b30      	subs	r3, #48	; 0x30
 800171a:	71fb      	strb	r3, [r7, #7]
 800171c:	e002      	b.n	8001724 <hx2int+0x24>
	else n2=n2-'A'+10;
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	3b37      	subs	r3, #55	; 0x37
 8001722:	71fb      	strb	r3, [r7, #7]

	if (n1 <= '9') n1-='0';
 8001724:	79bb      	ldrb	r3, [r7, #6]
 8001726:	2b39      	cmp	r3, #57	; 0x39
 8001728:	d803      	bhi.n	8001732 <hx2int+0x32>
 800172a:	79bb      	ldrb	r3, [r7, #6]
 800172c:	3b30      	subs	r3, #48	; 0x30
 800172e:	71bb      	strb	r3, [r7, #6]
 8001730:	e002      	b.n	8001738 <hx2int+0x38>
	else n1=n1-'A'+10;
 8001732:	79bb      	ldrb	r3, [r7, #6]
 8001734:	3b37      	subs	r3, #55	; 0x37
 8001736:	71bb      	strb	r3, [r7, #6]

	return n2*16+n1;
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	b2da      	uxtb	r2, r3
 800173e:	79bb      	ldrb	r3, [r7, #6]
 8001740:	4413      	add	r3, r2
 8001742:	b2db      	uxtb	r3, r3

}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <NMEA_checksum_clc>:
 * NMEA_checksum_clc is function which calculates checksum of the message and compares it to checksum value given in NMEA message.\n
 * To convert given checksum it uses hx2int function.
 * @param[in]	message	pointer to buffer storing NMEA message.
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_checksum_clc(uint8_t * message){
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	uint8_t index = 1;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum_clc =0;
 800175c:	2300      	movs	r3, #0
 800175e:	73bb      	strb	r3, [r7, #14]

	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8001760:	e009      	b.n	8001776 <NMEA_checksum_clc+0x26>
		checksum_clc^=message[index++];
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	73fa      	strb	r2, [r7, #15]
 8001768:	461a      	mov	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	781a      	ldrb	r2, [r3, #0]
 8001770:	7bbb      	ldrb	r3, [r7, #14]
 8001772:	4053      	eors	r3, r2
 8001774:	73bb      	strb	r3, [r7, #14]
	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	4413      	add	r3, r2
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b2a      	cmp	r3, #42	; 0x2a
 8001780:	d002      	beq.n	8001788 <NMEA_checksum_clc+0x38>
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	2b7d      	cmp	r3, #125	; 0x7d
 8001786:	d9ec      	bls.n	8001762 <NMEA_checksum_clc+0x12>
	}

	uint8_t checksum = hx2int(message[index+1],message[index+2]);
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	3301      	adds	r3, #1
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	7818      	ldrb	r0, [r3, #0]
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	3302      	adds	r3, #2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f7ff ffaf 	bl	8001700 <hx2int>
 80017a2:	4603      	mov	r3, r0
 80017a4:	737b      	strb	r3, [r7, #13]
	if (checksum!=checksum_clc){
 80017a6:	7b7a      	ldrb	r2, [r7, #13]
 80017a8:	7bbb      	ldrb	r3, [r7, #14]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d001      	beq.n	80017b2 <NMEA_checksum_clc+0x62>
		return NMEA_CHECKSUM_ERROR;
 80017ae:	2302      	movs	r3, #2
 80017b0:	e000      	b.n	80017b4 <NMEA_checksum_clc+0x64>
	}
	return NMEA_OK;
 80017b2:	2300      	movs	r3, #0


}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <NMEA_read_line>:

/**
 * NMEA_read_line is function which reads one NMEA message line from NMEA_UART_buffer circular buffer to NMEA_working_buffer.
 */
static void NMEA_read_line(void){
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
	int index = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
	while (index < NMEA_WORKING_BUFFER_SIZE) NMEA_working_buffer[index++]=0;	// Clean up working buffer.
 80017c6:	e005      	b.n	80017d4 <NMEA_read_line+0x18>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	4a2b      	ldr	r2, [pc, #172]	; (800187c <NMEA_read_line+0xc0>)
 80017d0:	2100      	movs	r1, #0
 80017d2:	54d1      	strb	r1, [r2, r3]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b7f      	cmp	r3, #127	; 0x7f
 80017d8:	ddf6      	ble.n	80017c8 <NMEA_read_line+0xc>

	index = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 80017de:	e01c      	b.n	800181a <NMEA_read_line+0x5e>
		NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <NMEA_read_line+0xc4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a27      	ldr	r2, [pc, #156]	; (8001884 <NMEA_read_line+0xc8>)
 80017e6:	5cd1      	ldrb	r1, [r2, r3]
 80017e8:	4a24      	ldr	r2, [pc, #144]	; (800187c <NMEA_read_line+0xc0>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	460a      	mov	r2, r1
 80017f0:	701a      	strb	r2, [r3, #0]
		NMEA_UART_buffer[UART_buffer_tail] = 0;
 80017f2:	4b23      	ldr	r3, [pc, #140]	; (8001880 <NMEA_read_line+0xc4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a23      	ldr	r2, [pc, #140]	; (8001884 <NMEA_read_line+0xc8>)
 80017f8:	2100      	movs	r1, #0
 80017fa:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <NMEA_read_line+0xc4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	425a      	negs	r2, r3
 8001804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001808:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800180c:	bf58      	it	pl
 800180e:	4253      	negpl	r3, r2
 8001810:	4a1b      	ldr	r2, [pc, #108]	; (8001880 <NMEA_read_line+0xc4>)
 8001812:	6013      	str	r3, [r2, #0]
		++index;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3301      	adds	r3, #1
 8001818:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <NMEA_read_line+0xc4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a19      	ldr	r2, [pc, #100]	; (8001884 <NMEA_read_line+0xc8>)
 8001820:	5cd3      	ldrb	r3, [r2, r3]
 8001822:	2b0a      	cmp	r3, #10
 8001824:	d002      	beq.n	800182c <NMEA_read_line+0x70>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b7d      	cmp	r3, #125	; 0x7d
 800182a:	ddd9      	ble.n	80017e0 <NMEA_read_line+0x24>
	}
	NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <NMEA_read_line+0xc4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <NMEA_read_line+0xc8>)
 8001832:	5cd1      	ldrb	r1, [r2, r3]
 8001834:	4a11      	ldr	r2, [pc, #68]	; (800187c <NMEA_read_line+0xc0>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	460a      	mov	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
	NMEA_UART_buffer[UART_buffer_tail] = 0;
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <NMEA_read_line+0xc4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a10      	ldr	r2, [pc, #64]	; (8001884 <NMEA_read_line+0xc8>)
 8001844:	2100      	movs	r1, #0
 8001846:	54d1      	strb	r1, [r2, r3]
	UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <NMEA_read_line+0xc4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	425a      	negs	r2, r3
 8001850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001854:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001858:	bf58      	it	pl
 800185a:	4253      	negpl	r3, r2
 800185c:	4a08      	ldr	r2, [pc, #32]	; (8001880 <NMEA_read_line+0xc4>)
 800185e:	6013      	str	r3, [r2, #0]
	++index;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3301      	adds	r3, #1
 8001864:	607b      	str	r3, [r7, #4]
	--UART_buffer_lines;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <NMEA_read_line+0xcc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	3b01      	subs	r3, #1
 800186c:	4a06      	ldr	r2, [pc, #24]	; (8001888 <NMEA_read_line+0xcc>)
 800186e:	6013      	str	r3, [r2, #0]

}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	2000087c 	.word	0x2000087c
 8001880:	20000900 	.word	0x20000900
 8001884:	2000047c 	.word	0x2000047c
 8001888:	20000904 	.word	0x20000904

0800188c <NMEA_init>:

void NMEA_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *DMA){
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
	HAL_Delay(10);
 8001896:	200a      	movs	r0, #10
 8001898:	f001 fc00 	bl	800309c <HAL_Delay>
	NMEA_huart=huart;
 800189c:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <NMEA_init+0x5c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
	NMEA_DMA=DMA;
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <NMEA_init+0x60>)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(NMEA_huart,UART_IT_IDLE);
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <NMEA_init+0x5c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <NMEA_init+0x5c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0210 	orr.w	r2, r2, #16
 80018ba:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <NMEA_init+0x5c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c4:	490a      	ldr	r1, [pc, #40]	; (80018f0 <NMEA_init+0x64>)
 80018c6:	4618      	mov	r0, r3
 80018c8:	f005 ff54 	bl	8007774 <HAL_UART_Receive_DMA>


	speed_change_CB_fun_ptr = &default_CB;
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <NMEA_init+0x68>)
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <NMEA_init+0x6c>)
 80018d0:	601a      	str	r2, [r3, #0]
	speed_raise_barrier_CB_fun_ptr = &default_CB;
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <NMEA_init+0x70>)
 80018d4:	4a08      	ldr	r2, [pc, #32]	; (80018f8 <NMEA_init+0x6c>)
 80018d6:	601a      	str	r2, [r3, #0]
	speed_fall_barrier_CB_fun_ptr = &default_CB;
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <NMEA_init+0x74>)
 80018da:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <NMEA_init+0x6c>)
 80018dc:	601a      	str	r2, [r3, #0]
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200009a4 	.word	0x200009a4
 80018ec:	200009a0 	.word	0x200009a0
 80018f0:	2000027c 	.word	0x2000027c
 80018f4:	20000908 	.word	0x20000908
 80018f8:	080011e5 	.word	0x080011e5
 80018fc:	20000910 	.word	0x20000910
 8001900:	20000918 	.word	0x20000918

08001904 <NMEA_UART_DMA_get_char>:
 * If buffer overflowes, the oldest NMEA message will be deleted to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 800190e:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <NMEA_UART_DMA_get_char+0xc0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	425a      	negs	r2, r3
 8001916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800191a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800191e:	bf58      	it	pl
 8001920:	4253      	negpl	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <NMEA_UART_DMA_get_char+0xc4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	429a      	cmp	r2, r3
 8001930:	d130      	bne.n	8001994 <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8001932:	e010      	b.n	8001956 <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <NMEA_UART_DMA_get_char+0xc4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a24      	ldr	r2, [pc, #144]	; (80019cc <NMEA_UART_DMA_get_char+0xc8>)
 800193a:	2100      	movs	r1, #0
 800193c:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <NMEA_UART_DMA_get_char+0xc4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	425a      	negs	r2, r3
 8001946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800194a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800194e:	bf58      	it	pl
 8001950:	4253      	negpl	r3, r2
 8001952:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <NMEA_UART_DMA_get_char+0xc4>)
 8001954:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <NMEA_UART_DMA_get_char+0xc4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <NMEA_UART_DMA_get_char+0xc8>)
 800195c:	5cd3      	ldrb	r3, [r2, r3]
 800195e:	2b0a      	cmp	r3, #10
 8001960:	d005      	beq.n	800196e <NMEA_UART_DMA_get_char+0x6a>
 8001962:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <NMEA_UART_DMA_get_char+0xc4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a19      	ldr	r2, [pc, #100]	; (80019cc <NMEA_UART_DMA_get_char+0xc8>)
 8001968:	5cd3      	ldrb	r3, [r2, r3]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1e2      	bne.n	8001934 <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <NMEA_UART_DMA_get_char+0xc4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a16      	ldr	r2, [pc, #88]	; (80019cc <NMEA_UART_DMA_get_char+0xc8>)
 8001974:	2100      	movs	r1, #0
 8001976:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <NMEA_UART_DMA_get_char+0xc4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	425a      	negs	r2, r3
 8001980:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001984:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001988:	bf58      	it	pl
 800198a:	4253      	negpl	r3, r2
 800198c:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <NMEA_UART_DMA_get_char+0xc4>)
 800198e:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <NMEA_UART_DMA_get_char+0xc0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <NMEA_UART_DMA_get_char+0xc8>)
 800199a:	79fa      	ldrb	r2, [r7, #7]
 800199c:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <NMEA_UART_DMA_get_char+0xc0>)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2b0a      	cmp	r3, #10
 80019a8:	d104      	bne.n	80019b4 <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <NMEA_UART_DMA_get_char+0xcc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <NMEA_UART_DMA_get_char+0xcc>)
 80019b2:	6013      	str	r3, [r2, #0]
	}

	return stat;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200008fc 	.word	0x200008fc
 80019c8:	20000900 	.word	0x20000900
 80019cc:	2000047c 	.word	0x2000047c
 80019d0:	20000904 	.word	0x20000904

080019d4 <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <NMEA_UART_DMA_copy_buffer+0x68>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80019ea:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	e013      	b.n	8001a1a <NMEA_UART_DMA_copy_buffer+0x46>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 80019f2:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <NMEA_UART_DMA_copy_buffer+0x6c>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4413      	add	r3, r2
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff82 	bl	8001904 <NMEA_UART_DMA_get_char>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <NMEA_UART_DMA_copy_buffer+0x36>
			stat=NMEA_BUFFER_OVERFLOWED;
 8001a06:	2301      	movs	r3, #1
 8001a08:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <NMEA_UART_DMA_copy_buffer+0x6c>)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	4413      	add	r3, r2
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	3301      	adds	r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	dbe7      	blt.n	80019f2 <NMEA_UART_DMA_copy_buffer+0x1e>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <NMEA_UART_DMA_copy_buffer+0x70>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a2a:	4905      	ldr	r1, [pc, #20]	; (8001a40 <NMEA_UART_DMA_copy_buffer+0x6c>)
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f005 fea1 	bl	8007774 <HAL_UART_Receive_DMA>
	return stat;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200009a0 	.word	0x200009a0
 8001a40:	2000027c 	.word	0x2000027c
 8001a44:	200009a4 	.word	0x200009a4

08001a48 <NMEA_process_task>:

NMEA_status NMEA_process_task(void){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8001a52:	e00d      	b.n	8001a70 <NMEA_process_task+0x28>
		NMEA_read_line();
 8001a54:	f7ff feb2 	bl	80017bc <NMEA_read_line>
		if (NMEA_checksum_clc(NMEA_working_buffer) == NMEA_OK){
 8001a58:	480a      	ldr	r0, [pc, #40]	; (8001a84 <NMEA_process_task+0x3c>)
 8001a5a:	f7ff fe79 	bl	8001750 <NMEA_checksum_clc>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d103      	bne.n	8001a6c <NMEA_process_task+0x24>
			NMEA_parser((char *)NMEA_working_buffer);
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <NMEA_process_task+0x3c>)
 8001a66:	f7ff fc57 	bl	8001318 <NMEA_parser>
 8001a6a:	e001      	b.n	8001a70 <NMEA_process_task+0x28>
		}else stat = NMEA_CHECKSUM_ERROR;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <NMEA_process_task+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	dced      	bgt.n	8001a54 <NMEA_process_task+0xc>
	}
	return stat;
 8001a78:	79fb      	ldrb	r3, [r7, #7]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	2000087c 	.word	0x2000087c
 8001a88:	20000904 	.word	0x20000904

08001a8c <user_UART_IDLE_IT_handler>:

NMEA_status user_UART_IDLE_IT_handler(void){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <user_UART_IDLE_IT_handler+0x40>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b10      	cmp	r3, #16
 8001aa4:	d10d      	bne.n	8001ac2 <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <user_UART_IDLE_IT_handler+0x40>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2210      	movs	r2, #16
 8001aae:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <user_UART_IDLE_IT_handler+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f005 fee1 	bl	800787c <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 8001aba:	f7ff ff8b 	bl	80019d4 <NMEA_UART_DMA_copy_buffer>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200009a4 	.word	0x200009a4

08001ad0 <HAL_UART_RxCpltCallback>:
/**
 * HAL_UART_RxCpltCallback is triggered after end of UART Rx transmission. It calls uatr_comport_read_data() from uart-comport driver.
 * @param[in]	huart	is a pointer to UART handle structure
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) uatr_comport_read_data();
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <HAL_UART_RxCpltCallback+0x1c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d101      	bne.n	8001ae4 <HAL_UART_RxCpltCallback+0x14>
 8001ae0:	f001 f9d0 	bl	8002e84 <uatr_comport_read_data>
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000ff0 	.word	0x20000ff0

08001af0 <HAL_UART_TxCpltCallback>:
/**
 * HAL_UART_TxCpltCallback is triggered after end of UART Tx transmission. It zeros sent message buffer.
 * @param[in]	huart	is a pointer to UART handle structure
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <HAL_UART_TxCpltCallback+0x28>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d107      	bne.n	8001b10 <HAL_UART_TxCpltCallback+0x20>
		memset((char*)message,0,50);
 8001b00:	2232      	movs	r2, #50	; 0x32
 8001b02:	2100      	movs	r1, #0
 8001b04:	4805      	ldr	r0, [pc, #20]	; (8001b1c <HAL_UART_TxCpltCallback+0x2c>)
 8001b06:	f007 f93d 	bl	8008d84 <memset>
		uart_Tx_flag=0;
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_UART_TxCpltCallback+0x30>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
	}
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000ff0 	.word	0x20000ff0
 8001b1c:	20000928 	.word	0x20000928
 8001b20:	2000096e 	.word	0x2000096e

08001b24 <stop_measure_speed_CB>:
/**
 * stop_measure_speed_CB is a callback function which ends acceleration measurement and unregister CB when speed will exceed given value.
 *
 * It unregisters callback, calculates acceleration time, displays result on LCD and sends it to comport.
 */
void stop_measure_speed_CB(void){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af02      	add	r7, sp, #8
	time = nmea_data.UTC_time - time;
 8001b2a:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <stop_measure_speed_CB+0xa8>)
 8001b2c:	ed93 7a00 	vldr	s14, [r3]
 8001b30:	4b27      	ldr	r3, [pc, #156]	; (8001bd0 <stop_measure_speed_CB+0xac>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b44:	ee17 2a90 	vmov	r2, s15
 8001b48:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <stop_measure_speed_CB+0xac>)
 8001b4a:	601a      	str	r2, [r3, #0]
	NMEA_CB_unregister(SPEED_RISE_BARRIER_CB);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f7ff fba7 	bl	80012a0 <NMEA_CB_unregister>
	while(uart_Tx_flag){}
 8001b52:	bf00      	nop
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <stop_measure_speed_CB+0xb0>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1fb      	bne.n	8001b54 <stop_measure_speed_CB+0x30>
	sprintf((char*)message,"%d-%d: %d s\n",start,stop,time);
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <stop_measure_speed_CB+0xb4>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <stop_measure_speed_CB+0xb8>)
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <stop_measure_speed_CB+0xac>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	491c      	ldr	r1, [pc, #112]	; (8001be0 <stop_measure_speed_CB+0xbc>)
 8001b6e:	481d      	ldr	r0, [pc, #116]	; (8001be4 <stop_measure_speed_CB+0xc0>)
 8001b70:	f007 fd6c 	bl	800964c <siprintf>
	uatr_comport_send_data(message, strlen((char*)message));
 8001b74:	481b      	ldr	r0, [pc, #108]	; (8001be4 <stop_measure_speed_CB+0xc0>)
 8001b76:	f7fe fb35 	bl	80001e4 <strlen>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4818      	ldr	r0, [pc, #96]	; (8001be4 <stop_measure_speed_CB+0xc0>)
 8001b82:	f001 f9bf 	bl	8002f04 <uatr_comport_send_data>
	char data[16]={0};
 8001b86:	463b      	mov	r3, r7
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
	sprintf(data,"%d-%d: %d s",start,stop,time);
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <stop_measure_speed_CB+0xb4>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <stop_measure_speed_CB+0xb8>)
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <stop_measure_speed_CB+0xac>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4638      	mov	r0, r7
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4910      	ldr	r1, [pc, #64]	; (8001be8 <stop_measure_speed_CB+0xc4>)
 8001ba6:	f007 fd51 	bl	800964c <siprintf>
	while(i2c_Tx_flag){}
 8001baa:	bf00      	nop
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <stop_measure_speed_CB+0xc8>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1fb      	bne.n	8001bac <stop_measure_speed_CB+0x88>
	lcd_put_cur(1, 0);
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f7ff fa72 	bl	80010a0 <lcd_put_cur>
	lcd_send_string(data);
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff faca 	bl	8001158 <lcd_send_string>
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200009a8 	.word	0x200009a8
 8001bd0:	20001070 	.word	0x20001070
 8001bd4:	2000096e 	.word	0x2000096e
 8001bd8:	20000920 	.word	0x20000920
 8001bdc:	20000924 	.word	0x20000924
 8001be0:	0800c4a8 	.word	0x0800c4a8
 8001be4:	20000928 	.word	0x20000928
 8001be8:	0800c4b8 	.word	0x0800c4b8
 8001bec:	200001f8 	.word	0x200001f8

08001bf0 <start_measure_speed_CB>:
/**
 * start_measure_speed_CB is a callback function which starts acceleration measurement and register stop_measure_speed_CB callback function when speed will exceed given value.
 *
 * It sets time of start measurement and registers stop_measure_speed_CB().
 */
void start_measure_speed_CB(void){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	time = nmea_data.UTC_time;
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <start_measure_speed_CB+0x34>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bfe:	ee17 2a90 	vmov	r2, s15
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <start_measure_speed_CB+0x38>)
 8001c04:	601a      	str	r2, [r3, #0]
	NMEA_CB_register(&stop_measure_speed_CB, SPEED_RISE_BARRIER_CB, stop);
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <start_measure_speed_CB+0x3c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c12:	eeb0 0a67 	vmov.f32	s0, s15
 8001c16:	2101      	movs	r1, #1
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <start_measure_speed_CB+0x40>)
 8001c1a:	f7ff faeb 	bl	80011f4 <NMEA_CB_register>
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200009a8 	.word	0x200009a8
 8001c28:	20001070 	.word	0x20001070
 8001c2c:	20000924 	.word	0x20000924
 8001c30:	08001b25 	.word	0x08001b25

08001c34 <task>:
 *
 * If stop_tmp==start_tmp it unregisters SPEED_RISE_BARRIER_CB and sends suitable message to the comport.
 *
 * Else it do nothing except sending suitable message to the comport.
 */
void task(void){
 8001c34:	b5b0      	push	{r4, r5, r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
  int start_tmp = atoi((char*)start_speed);
 8001c3a:	4841      	ldr	r0, [pc, #260]	; (8001d40 <task+0x10c>)
 8001c3c:	f007 f873 	bl	8008d26 <atoi>
 8001c40:	6178      	str	r0, [r7, #20]
  int stop_tmp = atoi((char*)stop_speed);
 8001c42:	4840      	ldr	r0, [pc, #256]	; (8001d44 <task+0x110>)
 8001c44:	f007 f86f 	bl	8008d26 <atoi>
 8001c48:	6138      	str	r0, [r7, #16]
  if(start_tmp < stop_tmp){
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	da3c      	bge.n	8001ccc <task+0x98>
	  start=start_tmp;
 8001c52:	4a3d      	ldr	r2, [pc, #244]	; (8001d48 <task+0x114>)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	6013      	str	r3, [r2, #0]
	  stop=stop_tmp;
 8001c58:	4a3c      	ldr	r2, [pc, #240]	; (8001d4c <task+0x118>)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	6013      	str	r3, [r2, #0]
	  NMEA_CB_register(&start_measure_speed_CB, SPEED_RISE_BARRIER_CB, start);
 8001c5e:	4b3a      	ldr	r3, [pc, #232]	; (8001d48 <task+0x114>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4837      	ldr	r0, [pc, #220]	; (8001d50 <task+0x11c>)
 8001c72:	f7ff fabf 	bl	80011f4 <NMEA_CB_register>

	  sprintf((char *)message, "measurement accepted\n");
 8001c76:	4a37      	ldr	r2, [pc, #220]	; (8001d54 <task+0x120>)
 8001c78:	4b37      	ldr	r3, [pc, #220]	; (8001d58 <task+0x124>)
 8001c7a:	4614      	mov	r4, r2
 8001c7c:	461d      	mov	r5, r3
 8001c7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c82:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c86:	6020      	str	r0, [r4, #0]
 8001c88:	3404      	adds	r4, #4
 8001c8a:	8021      	strh	r1, [r4, #0]
	  uatr_comport_send_data(message, strlen((char *)message));
 8001c8c:	4831      	ldr	r0, [pc, #196]	; (8001d54 <task+0x120>)
 8001c8e:	f7fe faa9 	bl	80001e4 <strlen>
 8001c92:	4603      	mov	r3, r0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	4619      	mov	r1, r3
 8001c98:	482e      	ldr	r0, [pc, #184]	; (8001d54 <task+0x120>)
 8001c9a:	f001 f933 	bl	8002f04 <uatr_comport_send_data>

	  char data[16]={0};
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
	  sprintf(data,"%d-%d:",start,stop);
 8001caa:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <task+0x114>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <task+0x118>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4638      	mov	r0, r7
 8001cb4:	4929      	ldr	r1, [pc, #164]	; (8001d5c <task+0x128>)
 8001cb6:	f007 fcc9 	bl	800964c <siprintf>
	  lcd_put_cur(1, 0);
 8001cba:	2100      	movs	r1, #0
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f7ff f9ef 	bl	80010a0 <lcd_put_cur>
	  lcd_send_string(data);
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fa47 	bl	8001158 <lcd_send_string>
	  lcd_send_string("                ");
  }else {
	  sprintf((char *)message, "stop %d less then start %d\n",stop_tmp,start_tmp);
	  uatr_comport_send_data(message, strlen((char *)message));
  }
}
 8001cca:	e034      	b.n	8001d36 <task+0x102>
  }else if (stop_tmp==start_tmp){
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d121      	bne.n	8001d18 <task+0xe4>
	  NMEA_CB_unregister(SPEED_RISE_BARRIER_CB);
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f7ff fae3 	bl	80012a0 <NMEA_CB_unregister>
	  sprintf((char *)message, "measurement cancelled\n");
 8001cda:	4a1e      	ldr	r2, [pc, #120]	; (8001d54 <task+0x120>)
 8001cdc:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <task+0x12c>)
 8001cde:	4614      	mov	r4, r2
 8001ce0:	461d      	mov	r5, r3
 8001ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cea:	6020      	str	r0, [r4, #0]
 8001cec:	3404      	adds	r4, #4
 8001cee:	8021      	strh	r1, [r4, #0]
 8001cf0:	3402      	adds	r4, #2
 8001cf2:	0c0b      	lsrs	r3, r1, #16
 8001cf4:	7023      	strb	r3, [r4, #0]
	  uatr_comport_send_data(message, strlen((char *)message));
 8001cf6:	4817      	ldr	r0, [pc, #92]	; (8001d54 <task+0x120>)
 8001cf8:	f7fe fa74 	bl	80001e4 <strlen>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	4619      	mov	r1, r3
 8001d02:	4814      	ldr	r0, [pc, #80]	; (8001d54 <task+0x120>)
 8001d04:	f001 f8fe 	bl	8002f04 <uatr_comport_send_data>
	  lcd_put_cur(1, 0);
 8001d08:	2100      	movs	r1, #0
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f7ff f9c8 	bl	80010a0 <lcd_put_cur>
	  lcd_send_string("                ");
 8001d10:	4814      	ldr	r0, [pc, #80]	; (8001d64 <task+0x130>)
 8001d12:	f7ff fa21 	bl	8001158 <lcd_send_string>
}
 8001d16:	e00e      	b.n	8001d36 <task+0x102>
	  sprintf((char *)message, "stop %d less then start %d\n",stop_tmp,start_tmp);
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4912      	ldr	r1, [pc, #72]	; (8001d68 <task+0x134>)
 8001d1e:	480d      	ldr	r0, [pc, #52]	; (8001d54 <task+0x120>)
 8001d20:	f007 fc94 	bl	800964c <siprintf>
	  uatr_comport_send_data(message, strlen((char *)message));
 8001d24:	480b      	ldr	r0, [pc, #44]	; (8001d54 <task+0x120>)
 8001d26:	f7fe fa5d 	bl	80001e4 <strlen>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4808      	ldr	r0, [pc, #32]	; (8001d54 <task+0x120>)
 8001d32:	f001 f8e7 	bl	8002f04 <uatr_comport_send_data>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000fec 	.word	0x20000fec
 8001d44:	20000f84 	.word	0x20000f84
 8001d48:	20000920 	.word	0x20000920
 8001d4c:	20000924 	.word	0x20000924
 8001d50:	08001bf1 	.word	0x08001bf1
 8001d54:	20000928 	.word	0x20000928
 8001d58:	0800c4c4 	.word	0x0800c4c4
 8001d5c:	0800c4dc 	.word	0x0800c4dc
 8001d60:	0800c4e4 	.word	0x0800c4e4
 8001d64:	0800c4fc 	.word	0x0800c4fc
 8001d68:	0800c510 	.word	0x0800c510

08001d6c <speedometer_CB>:
/**
 * speedometer_CB is a callback to change of speed event.
 *
 * It displays current speed on LCD and sends it to comport.
 */
void speedometer_CB(void){
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
	char speed[5]={0};
 8001d72:	463b      	mov	r3, r7
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	711a      	strb	r2, [r3, #4]
	sprintf((char*)message,"speed: %3.0f km/h \n",nmea_data.speed_kmph);
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <speedometer_CB+0x6c>)
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fbf2 	bl	8000568 <__aeabi_f2d>
 8001d84:	4603      	mov	r3, r0
 8001d86:	460c      	mov	r4, r1
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	4913      	ldr	r1, [pc, #76]	; (8001ddc <speedometer_CB+0x70>)
 8001d8e:	4814      	ldr	r0, [pc, #80]	; (8001de0 <speedometer_CB+0x74>)
 8001d90:	f007 fc5c 	bl	800964c <siprintf>
	uatr_comport_send_data(message, strlen((char*)message));
 8001d94:	4812      	ldr	r0, [pc, #72]	; (8001de0 <speedometer_CB+0x74>)
 8001d96:	f7fe fa25 	bl	80001e4 <strlen>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480f      	ldr	r0, [pc, #60]	; (8001de0 <speedometer_CB+0x74>)
 8001da2:	f001 f8af 	bl	8002f04 <uatr_comport_send_data>
	sprintf(speed,"%3.0f",nmea_data.speed_kmph);
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <speedometer_CB+0x6c>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbdc 	bl	8000568 <__aeabi_f2d>
 8001db0:	4603      	mov	r3, r0
 8001db2:	460c      	mov	r4, r1
 8001db4:	4638      	mov	r0, r7
 8001db6:	461a      	mov	r2, r3
 8001db8:	4623      	mov	r3, r4
 8001dba:	490a      	ldr	r1, [pc, #40]	; (8001de4 <speedometer_CB+0x78>)
 8001dbc:	f007 fc46 	bl	800964c <siprintf>
	lcd_put_cur(0, 7);
 8001dc0:	2107      	movs	r1, #7
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7ff f96c 	bl	80010a0 <lcd_put_cur>
	lcd_send_string(speed);
 8001dc8:	463b      	mov	r3, r7
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f9c4 	bl	8001158 <lcd_send_string>
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd90      	pop	{r4, r7, pc}
 8001dd8:	200009a8 	.word	0x200009a8
 8001ddc:	0800c52c 	.word	0x0800c52c
 8001de0:	20000928 	.word	0x20000928
 8001de4:	0800c540 	.word	0x0800c540

08001de8 <main>:
  * @brief  The application entry point.
  * @retval int
  *
  */
int main(void)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dee:	f001 f8e0 	bl	8002fb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df2:	f000 f853 	bl	8001e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df6:	f000 faf1 	bl	80023dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001dfa:	f000 fad1 	bl	80023a0 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8001dfe:	f000 f8f5 	bl	8001fec <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001e02:	f000 f96b 	bl	80020dc <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001e06:	f000 f9a9 	bl	800215c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001e0a:	f000 f9cd 	bl	80021a8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001e0e:	f000 fa39 	bl	8002284 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001e12:	f000 fa67 	bl	80022e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001e16:	f000 fa95 	bl	8002344 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8001e1a:	f000 fa03 	bl	8002224 <MX_UART4_Init>
  MX_I2C1_Init();
 8001e1e:	f000 f91d 	bl	800205c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();		//LCD initialization
 8001e22:	f7ff f95b 	bl	80010dc <lcd_init>
  uatr_comport_comunication_init(&huart1);	//uart-comport driver initialization
 8001e26:	4815      	ldr	r0, [pc, #84]	; (8001e7c <main+0x94>)
 8001e28:	f001 f816 	bl	8002e58 <uatr_comport_comunication_init>
  NMEA_init(&huart4, &hdma_uart4_rx);	//NMEA library initialization
 8001e2c:	4914      	ldr	r1, [pc, #80]	; (8001e80 <main+0x98>)
 8001e2e:	4815      	ldr	r0, [pc, #84]	; (8001e84 <main+0x9c>)
 8001e30:	f7ff fd2c 	bl	800188c <NMEA_init>
  char lcd_buf[16] = {0};
 8001e34:	463b      	mov	r3, r7
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
  sprintf(lcd_buf,"SPEED: %3.0f km/h",nmea_data.speed_kmph);
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <main+0xa0>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fb8f 	bl	8000568 <__aeabi_f2d>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	460c      	mov	r4, r1
 8001e4e:	4638      	mov	r0, r7
 8001e50:	461a      	mov	r2, r3
 8001e52:	4623      	mov	r3, r4
 8001e54:	490d      	ldr	r1, [pc, #52]	; (8001e8c <main+0xa4>)
 8001e56:	f007 fbf9 	bl	800964c <siprintf>
  lcd_send_string(lcd_buf);
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff f97b 	bl	8001158 <lcd_send_string>

  NMEA_CB_register(&speedometer_CB, SPEED_CHANGE_CB, 1e-3);	//speedometer_CB registration
 8001e62:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001e90 <main+0xa8>
 8001e66:	2100      	movs	r1, #0
 8001e68:	480a      	ldr	r0, [pc, #40]	; (8001e94 <main+0xac>)
 8001e6a:	f7ff f9c3 	bl	80011f4 <NMEA_CB_register>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  NMEA_process_task();
 8001e6e:	f7ff fdeb 	bl	8001a48 <NMEA_process_task>
	  uart_comport_task(&task);
 8001e72:	4809      	ldr	r0, [pc, #36]	; (8001e98 <main+0xb0>)
 8001e74:	f001 f860 	bl	8002f38 <uart_comport_task>
	  NMEA_process_task();
 8001e78:	e7f9      	b.n	8001e6e <main+0x86>
 8001e7a:	bf00      	nop
 8001e7c:	20000ff0 	.word	0x20000ff0
 8001e80:	20000a1c 	.word	0x20000a1c
 8001e84:	20001074 	.word	0x20001074
 8001e88:	200009a8 	.word	0x200009a8
 8001e8c:	0800c548 	.word	0x0800c548
 8001e90:	3a83126f 	.word	0x3a83126f
 8001e94:	08001d6d 	.word	0x08001d6d
 8001e98:	08001c35 	.word	0x08001c35

08001e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b0b8      	sub	sp, #224	; 0xe0
 8001ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ea2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ea6:	2244      	movs	r2, #68	; 0x44
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f006 ff6a 	bl	8008d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eb0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec0:	463b      	mov	r3, r7
 8001ec2:	2288      	movs	r2, #136	; 0x88
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f006 ff5c 	bl	8008d84 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ecc:	f003 fe78 	bl	8005bc0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ed0:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <SystemClock_Config+0x148>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed6:	4a43      	ldr	r2, [pc, #268]	; (8001fe4 <SystemClock_Config+0x148>)
 8001ed8:	f023 0318 	bic.w	r3, r3, #24
 8001edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001ee0:	2314      	movs	r3, #20
 8001ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001eec:	2301      	movs	r3, #1
 8001eee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ef8:	2360      	movs	r3, #96	; 0x60
 8001efa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001efe:	2302      	movs	r3, #2
 8001f00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001f10:	2328      	movs	r3, #40	; 0x28
 8001f12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f16:	2307      	movs	r3, #7
 8001f18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f22:	2302      	movs	r3, #2
 8001f24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 ff87 	bl	8005e40 <HAL_RCC_OscConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001f38:	f000 fbda 	bl	80026f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f3c:	230f      	movs	r3, #15
 8001f3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f42:	2303      	movs	r3, #3
 8001f44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f5a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001f5e:	2104      	movs	r1, #4
 8001f60:	4618      	mov	r0, r3
 8001f62:	f004 fb53 	bl	800660c <HAL_RCC_ClockConfig>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001f6c:	f000 fbc0 	bl	80026f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <SystemClock_Config+0x14c>)
 8001f72:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f74:	2300      	movs	r3, #0
 8001f76:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f84:	2300      	movs	r3, #0
 8001f86:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001f8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f92:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f94:	2301      	movs	r3, #1
 8001f96:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001f9c:	2318      	movs	r3, #24
 8001f9e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001fa0:	2307      	movs	r3, #7
 8001fa2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001fac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fb0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 fd2d 	bl	8006a14 <HAL_RCCEx_PeriphCLKConfig>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8001fc0:	f000 fb96 	bl	80026f0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001fc4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001fc8:	f003 fe18 	bl	8005bfc <HAL_PWREx_ControlVoltageScaling>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8001fd2:	f000 fb8d 	bl	80026f0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001fd6:	f005 f803 	bl	8006fe0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001fda:	bf00      	nop
 8001fdc:	37e0      	adds	r7, #224	; 0xe0
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	000120cd 	.word	0x000120cd

08001fec <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <MX_DFSDM1_Init+0x68>)
 8001ff2:	4a19      	ldr	r2, [pc, #100]	; (8002058 <MX_DFSDM1_Init+0x6c>)
 8001ff4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001ff6:	4b17      	ldr	r3, [pc, #92]	; (8002054 <MX_DFSDM1_Init+0x68>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001ffc:	4b15      	ldr	r3, [pc, #84]	; (8002054 <MX_DFSDM1_Init+0x68>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <MX_DFSDM1_Init+0x68>)
 8002004:	2202      	movs	r2, #2
 8002006:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <MX_DFSDM1_Init+0x68>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <MX_DFSDM1_Init+0x68>)
 8002010:	2200      	movs	r2, #0
 8002012:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <MX_DFSDM1_Init+0x68>)
 8002016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800201a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <MX_DFSDM1_Init+0x68>)
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MX_DFSDM1_Init+0x68>)
 8002024:	2204      	movs	r2, #4
 8002026:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <MX_DFSDM1_Init+0x68>)
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <MX_DFSDM1_Init+0x68>)
 8002030:	2201      	movs	r2, #1
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <MX_DFSDM1_Init+0x68>)
 8002036:	2200      	movs	r2, #0
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <MX_DFSDM1_Init+0x68>)
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8002040:	4804      	ldr	r0, [pc, #16]	; (8002054 <MX_DFSDM1_Init+0x68>)
 8002042:	f001 f95f 	bl	8003304 <HAL_DFSDM_ChannelInit>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800204c:	f000 fb50 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	200009e4 	.word	0x200009e4
 8002058:	40016020 	.word	0x40016020

0800205c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <MX_I2C1_Init+0x74>)
 8002062:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <MX_I2C1_Init+0x78>)
 8002064:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <MX_I2C1_Init+0x74>)
 8002068:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <MX_I2C1_Init+0x7c>)
 800206a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <MX_I2C1_Init+0x74>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <MX_I2C1_Init+0x74>)
 8002074:	2201      	movs	r2, #1
 8002076:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002078:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <MX_I2C1_Init+0x74>)
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <MX_I2C1_Init+0x74>)
 8002080:	2200      	movs	r2, #0
 8002082:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <MX_I2C1_Init+0x74>)
 8002086:	2200      	movs	r2, #0
 8002088:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <MX_I2C1_Init+0x74>)
 800208c:	2200      	movs	r2, #0
 800208e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <MX_I2C1_Init+0x74>)
 8002092:	2200      	movs	r2, #0
 8002094:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002096:	480e      	ldr	r0, [pc, #56]	; (80020d0 <MX_I2C1_Init+0x74>)
 8002098:	f001 feb3 	bl	8003e02 <HAL_I2C_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020a2:	f000 fb25 	bl	80026f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020a6:	2100      	movs	r1, #0
 80020a8:	4809      	ldr	r0, [pc, #36]	; (80020d0 <MX_I2C1_Init+0x74>)
 80020aa:	f003 fba9 	bl	8005800 <HAL_I2CEx_ConfigAnalogFilter>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020b4:	f000 fb1c 	bl	80026f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020b8:	2100      	movs	r1, #0
 80020ba:	4805      	ldr	r0, [pc, #20]	; (80020d0 <MX_I2C1_Init+0x74>)
 80020bc:	f003 fbeb 	bl	8005896 <HAL_I2CEx_ConfigDigitalFilter>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020c6:	f000 fb13 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000ae4 	.word	0x20000ae4
 80020d4:	40005400 	.word	0x40005400
 80020d8:	10909cec 	.word	0x10909cec

080020dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80020e0:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <MX_I2C2_Init+0x74>)
 80020e2:	4a1c      	ldr	r2, [pc, #112]	; (8002154 <MX_I2C2_Init+0x78>)
 80020e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80020e6:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <MX_I2C2_Init+0x74>)
 80020e8:	4a1b      	ldr	r2, [pc, #108]	; (8002158 <MX_I2C2_Init+0x7c>)
 80020ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <MX_I2C2_Init+0x74>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020f2:	4b17      	ldr	r3, [pc, #92]	; (8002150 <MX_I2C2_Init+0x74>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <MX_I2C2_Init+0x74>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <MX_I2C2_Init+0x74>)
 8002100:	2200      	movs	r2, #0
 8002102:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <MX_I2C2_Init+0x74>)
 8002106:	2200      	movs	r2, #0
 8002108:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <MX_I2C2_Init+0x74>)
 800210c:	2200      	movs	r2, #0
 800210e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <MX_I2C2_Init+0x74>)
 8002112:	2200      	movs	r2, #0
 8002114:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002116:	480e      	ldr	r0, [pc, #56]	; (8002150 <MX_I2C2_Init+0x74>)
 8002118:	f001 fe73 	bl	8003e02 <HAL_I2C_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002122:	f000 fae5 	bl	80026f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002126:	2100      	movs	r1, #0
 8002128:	4809      	ldr	r0, [pc, #36]	; (8002150 <MX_I2C2_Init+0x74>)
 800212a:	f003 fb69 	bl	8005800 <HAL_I2CEx_ConfigAnalogFilter>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002134:	f000 fadc 	bl	80026f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002138:	2100      	movs	r1, #0
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <MX_I2C2_Init+0x74>)
 800213c:	f003 fbab 	bl	8005896 <HAL_I2CEx_ConfigDigitalFilter>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002146:	f000 fad3 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000f38 	.word	0x20000f38
 8002154:	40005800 	.word	0x40005800
 8002158:	10909cec 	.word	0x10909cec

0800215c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <MX_QUADSPI_Init+0x44>)
 8002162:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <MX_QUADSPI_Init+0x48>)
 8002164:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <MX_QUADSPI_Init+0x44>)
 8002168:	22ff      	movs	r2, #255	; 0xff
 800216a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <MX_QUADSPI_Init+0x44>)
 800216e:	2201      	movs	r2, #1
 8002170:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <MX_QUADSPI_Init+0x44>)
 8002174:	2200      	movs	r2, #0
 8002176:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <MX_QUADSPI_Init+0x44>)
 800217a:	2201      	movs	r2, #1
 800217c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <MX_QUADSPI_Init+0x44>)
 8002180:	2200      	movs	r2, #0
 8002182:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <MX_QUADSPI_Init+0x44>)
 8002186:	2200      	movs	r2, #0
 8002188:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800218a:	4805      	ldr	r0, [pc, #20]	; (80021a0 <MX_QUADSPI_Init+0x44>)
 800218c:	f003 fd9c 	bl	8005cc8 <HAL_QSPI_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8002196:	f000 faab 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200010f4 	.word	0x200010f4
 80021a4:	a0001000 	.word	0xa0001000

080021a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80021ac:	4b1b      	ldr	r3, [pc, #108]	; (800221c <MX_SPI3_Init+0x74>)
 80021ae:	4a1c      	ldr	r2, [pc, #112]	; (8002220 <MX_SPI3_Init+0x78>)
 80021b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80021b2:	4b1a      	ldr	r3, [pc, #104]	; (800221c <MX_SPI3_Init+0x74>)
 80021b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80021ba:	4b18      	ldr	r3, [pc, #96]	; (800221c <MX_SPI3_Init+0x74>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80021c0:	4b16      	ldr	r3, [pc, #88]	; (800221c <MX_SPI3_Init+0x74>)
 80021c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80021c6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <MX_SPI3_Init+0x74>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <MX_SPI3_Init+0x74>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <MX_SPI3_Init+0x74>)
 80021d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021da:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <MX_SPI3_Init+0x74>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <MX_SPI3_Init+0x74>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <MX_SPI3_Init+0x74>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <MX_SPI3_Init+0x74>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <MX_SPI3_Init+0x74>)
 80021f6:	2207      	movs	r2, #7
 80021f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <MX_SPI3_Init+0x74>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <MX_SPI3_Init+0x74>)
 8002202:	2208      	movs	r2, #8
 8002204:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002206:	4805      	ldr	r0, [pc, #20]	; (800221c <MX_SPI3_Init+0x74>)
 8002208:	f005 f8c4 	bl	8007394 <HAL_SPI_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002212:	f000 fa6d 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000f88 	.word	0x20000f88
 8002220:	40003c00 	.word	0x40003c00

08002224 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002228:	4b14      	ldr	r3, [pc, #80]	; (800227c <MX_UART4_Init+0x58>)
 800222a:	4a15      	ldr	r2, [pc, #84]	; (8002280 <MX_UART4_Init+0x5c>)
 800222c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <MX_UART4_Init+0x58>)
 8002230:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002234:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <MX_UART4_Init+0x58>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <MX_UART4_Init+0x58>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <MX_UART4_Init+0x58>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <MX_UART4_Init+0x58>)
 800224a:	220c      	movs	r2, #12
 800224c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <MX_UART4_Init+0x58>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <MX_UART4_Init+0x58>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <MX_UART4_Init+0x58>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <MX_UART4_Init+0x58>)
 8002262:	2200      	movs	r2, #0
 8002264:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002266:	4805      	ldr	r0, [pc, #20]	; (800227c <MX_UART4_Init+0x58>)
 8002268:	f005 f937 	bl	80074da <HAL_UART_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002272:	f000 fa3d 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20001074 	.word	0x20001074
 8002280:	40004c00 	.word	0x40004c00

08002284 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <MX_USART1_UART_Init+0x58>)
 800228a:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <MX_USART1_UART_Init+0x5c>)
 800228c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <MX_USART1_UART_Init+0x58>)
 8002290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002294:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_USART1_UART_Init+0x58>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_USART1_UART_Init+0x58>)
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_USART1_UART_Init+0x58>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <MX_USART1_UART_Init+0x58>)
 80022aa:	220c      	movs	r2, #12
 80022ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <MX_USART1_UART_Init+0x58>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_USART1_UART_Init+0x58>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <MX_USART1_UART_Init+0x58>)
 80022bc:	2200      	movs	r2, #0
 80022be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_USART1_UART_Init+0x58>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022c6:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_USART1_UART_Init+0x58>)
 80022c8:	f005 f907 	bl	80074da <HAL_UART_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80022d2:	f000 fa0d 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000ff0 	.word	0x20000ff0
 80022e0:	40013800 	.word	0x40013800

080022e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <MX_USART3_UART_Init+0x58>)
 80022ea:	4a15      	ldr	r2, [pc, #84]	; (8002340 <MX_USART3_UART_Init+0x5c>)
 80022ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <MX_USART3_UART_Init+0x58>)
 80022f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022f6:	4b11      	ldr	r3, [pc, #68]	; (800233c <MX_USART3_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <MX_USART3_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <MX_USART3_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <MX_USART3_UART_Init+0x58>)
 800230a:	220c      	movs	r2, #12
 800230c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <MX_USART3_UART_Init+0x58>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <MX_USART3_UART_Init+0x58>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <MX_USART3_UART_Init+0x58>)
 800231c:	2200      	movs	r2, #0
 800231e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <MX_USART3_UART_Init+0x58>)
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <MX_USART3_UART_Init+0x58>)
 8002328:	f005 f8d7 	bl	80074da <HAL_UART_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002332:	f000 f9dd 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000a64 	.word	0x20000a64
 8002340:	40004800 	.word	0x40004800

08002344 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800234a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800234e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002352:	2206      	movs	r2, #6
 8002354:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002356:	4b11      	ldr	r3, [pc, #68]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002358:	2202      	movs	r2, #2
 800235a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800235e:	2202      	movs	r2, #2
 8002360:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002364:	2200      	movs	r2, #0
 8002366:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800236a:	2200      	movs	r2, #0
 800236c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002370:	2200      	movs	r2, #0
 8002372:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002376:	2200      	movs	r2, #0
 8002378:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800237c:	2200      	movs	r2, #0
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002382:	2200      	movs	r2, #0
 8002384:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002386:	4805      	ldr	r0, [pc, #20]	; (800239c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002388:	f003 fad1 	bl	800592e <HAL_PCD_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002392:	f000 f9ad 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000b30 	.word	0x20000b30

080023a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <MX_DMA_Init+0x38>)
 80023a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023aa:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <MX_DMA_Init+0x38>)
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	6493      	str	r3, [r2, #72]	; 0x48
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <MX_DMA_Init+0x38>)
 80023b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	2100      	movs	r1, #0
 80023c2:	203c      	movs	r0, #60	; 0x3c
 80023c4:	f000 ff67 	bl	8003296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80023c8:	203c      	movs	r0, #60	; 0x3c
 80023ca:	f000 ff80 	bl	80032ce <HAL_NVIC_EnableIRQ>

}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000

080023dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
 80023f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023f2:	4bb8      	ldr	r3, [pc, #736]	; (80026d4 <MX_GPIO_Init+0x2f8>)
 80023f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f6:	4ab7      	ldr	r2, [pc, #732]	; (80026d4 <MX_GPIO_Init+0x2f8>)
 80023f8:	f043 0310 	orr.w	r3, r3, #16
 80023fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023fe:	4bb5      	ldr	r3, [pc, #724]	; (80026d4 <MX_GPIO_Init+0x2f8>)
 8002400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800240a:	4bb2      	ldr	r3, [pc, #712]	; (80026d4 <MX_GPIO_Init+0x2f8>)
 800240c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240e:	4ab1      	ldr	r2, [pc, #708]	; (80026d4 <MX_GPIO_Init+0x2f8>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002416:	4baf      	ldr	r3, [pc, #700]	; (80026d4 <MX_GPIO_Init+0x2f8>)
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	4bac      	ldr	r3, [pc, #688]	; (80026d4 <MX_GPIO_Init+0x2f8>)
 8002424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002426:	4aab      	ldr	r2, [pc, #684]	; (80026d4 <MX_GPIO_Init+0x2f8>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800242e:	4ba9      	ldr	r3, [pc, #676]	; (80026d4 <MX_GPIO_Init+0x2f8>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800243a:	4ba6      	ldr	r3, [pc, #664]	; (80026d4 <MX_GPIO_Init+0x2f8>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	4aa5      	ldr	r2, [pc, #660]	; (80026d4 <MX_GPIO_Init+0x2f8>)
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002446:	4ba3      	ldr	r3, [pc, #652]	; (80026d4 <MX_GPIO_Init+0x2f8>)
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002452:	4ba0      	ldr	r3, [pc, #640]	; (80026d4 <MX_GPIO_Init+0x2f8>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002456:	4a9f      	ldr	r2, [pc, #636]	; (80026d4 <MX_GPIO_Init+0x2f8>)
 8002458:	f043 0308 	orr.w	r3, r3, #8
 800245c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800245e:	4b9d      	ldr	r3, [pc, #628]	; (80026d4 <MX_GPIO_Init+0x2f8>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800246a:	2200      	movs	r2, #0
 800246c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002470:	4899      	ldr	r0, [pc, #612]	; (80026d8 <MX_GPIO_Init+0x2fc>)
 8002472:	f001 fc8b 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8002476:	2200      	movs	r2, #0
 8002478:	f248 1104 	movw	r1, #33028	; 0x8104
 800247c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002480:	f001 fc84 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002484:	2200      	movs	r2, #0
 8002486:	f24f 0114 	movw	r1, #61460	; 0xf014
 800248a:	4894      	ldr	r0, [pc, #592]	; (80026dc <MX_GPIO_Init+0x300>)
 800248c:	f001 fc7e 	bl	8003d8c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002490:	2200      	movs	r2, #0
 8002492:	f241 0181 	movw	r1, #4225	; 0x1081
 8002496:	4892      	ldr	r0, [pc, #584]	; (80026e0 <MX_GPIO_Init+0x304>)
 8002498:	f001 fc78 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800249c:	2201      	movs	r2, #1
 800249e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024a2:	488f      	ldr	r0, [pc, #572]	; (80026e0 <MX_GPIO_Init+0x304>)
 80024a4:	f001 fc72 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80024a8:	2200      	movs	r2, #0
 80024aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80024ae:	488d      	ldr	r0, [pc, #564]	; (80026e4 <MX_GPIO_Init+0x308>)
 80024b0:	f001 fc6c 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80024b4:	2201      	movs	r2, #1
 80024b6:	2120      	movs	r1, #32
 80024b8:	4888      	ldr	r0, [pc, #544]	; (80026dc <MX_GPIO_Init+0x300>)
 80024ba:	f001 fc67 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80024be:	2201      	movs	r2, #1
 80024c0:	2101      	movs	r1, #1
 80024c2:	4885      	ldr	r0, [pc, #532]	; (80026d8 <MX_GPIO_Init+0x2fc>)
 80024c4:	f001 fc62 	bl	8003d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80024c8:	f240 1315 	movw	r3, #277	; 0x115
 80024cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ce:	2301      	movs	r3, #1
 80024d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	487d      	ldr	r0, [pc, #500]	; (80026d8 <MX_GPIO_Init+0x2fc>)
 80024e2:	f001 faab 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80024e6:	236a      	movs	r3, #106	; 0x6a
 80024e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024ea:	4b7f      	ldr	r3, [pc, #508]	; (80026e8 <MX_GPIO_Init+0x30c>)
 80024ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	4619      	mov	r1, r3
 80024f8:	4877      	ldr	r0, [pc, #476]	; (80026d8 <MX_GPIO_Init+0x2fc>)
 80024fa:	f001 fa9f 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80024fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002504:	4b79      	ldr	r3, [pc, #484]	; (80026ec <MX_GPIO_Init+0x310>)
 8002506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4619      	mov	r1, r3
 8002512:	4874      	ldr	r0, [pc, #464]	; (80026e4 <MX_GPIO_Init+0x308>)
 8002514:	f001 fa92 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002518:	233f      	movs	r3, #63	; 0x3f
 800251a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800251c:	230b      	movs	r3, #11
 800251e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002524:	f107 0314 	add.w	r3, r7, #20
 8002528:	4619      	mov	r1, r3
 800252a:	486e      	ldr	r0, [pc, #440]	; (80026e4 <MX_GPIO_Init+0x308>)
 800252c:	f001 fa86 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8002530:	f248 1304 	movw	r3, #33028	; 0x8104
 8002534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002536:	2301      	movs	r3, #1
 8002538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	2300      	movs	r3, #0
 8002540:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800254c:	f001 fa76 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8002550:	2308      	movs	r3, #8
 8002552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255c:	2300      	movs	r3, #0
 800255e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002560:	2301      	movs	r3, #1
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	4619      	mov	r1, r3
 800256a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800256e:	f001 fa65 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8002572:	2310      	movs	r3, #16
 8002574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002576:	230b      	movs	r3, #11
 8002578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002588:	f001 fa58 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800258c:	23e0      	movs	r3, #224	; 0xe0
 800258e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002598:	2303      	movs	r3, #3
 800259a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800259c:	2305      	movs	r3, #5
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	4619      	mov	r1, r3
 80025a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025aa:	f001 fa47 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80025ae:	2301      	movs	r3, #1
 80025b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025b2:	4b4d      	ldr	r3, [pc, #308]	; (80026e8 <MX_GPIO_Init+0x30c>)
 80025b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4619      	mov	r1, r3
 80025c0:	4846      	ldr	r0, [pc, #280]	; (80026dc <MX_GPIO_Init+0x300>)
 80025c2:	f001 fa3b 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80025c6:	2302      	movs	r3, #2
 80025c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80025ca:	230b      	movs	r3, #11
 80025cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	4840      	ldr	r0, [pc, #256]	; (80026dc <MX_GPIO_Init+0x300>)
 80025da:	f001 fa2f 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80025de:	f24f 0334 	movw	r3, #61492	; 0xf034
 80025e2:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e4:	2301      	movs	r3, #1
 80025e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4619      	mov	r1, r3
 80025f6:	4839      	ldr	r0, [pc, #228]	; (80026dc <MX_GPIO_Init+0x300>)
 80025f8:	f001 fa20 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80025fc:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8002600:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002602:	4b39      	ldr	r3, [pc, #228]	; (80026e8 <MX_GPIO_Init+0x30c>)
 8002604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	4833      	ldr	r0, [pc, #204]	; (80026e0 <MX_GPIO_Init+0x304>)
 8002612:	f001 fa13 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002616:	f243 0381 	movw	r3, #12417	; 0x3081
 800261a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261c:	2301      	movs	r3, #1
 800261e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	2300      	movs	r3, #0
 8002626:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4619      	mov	r1, r3
 800262e:	482c      	ldr	r0, [pc, #176]	; (80026e0 <MX_GPIO_Init+0x304>)
 8002630:	f001 fa04 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002634:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263a:	2301      	movs	r3, #1
 800263c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	4619      	mov	r1, r3
 800264c:	4825      	ldr	r0, [pc, #148]	; (80026e4 <MX_GPIO_Init+0x308>)
 800264e:	f001 f9f5 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002652:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002658:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <MX_GPIO_Init+0x30c>)
 800265a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	4619      	mov	r1, r3
 8002666:	481f      	ldr	r0, [pc, #124]	; (80026e4 <MX_GPIO_Init+0x308>)
 8002668:	f001 f9e8 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800266c:	2302      	movs	r3, #2
 800266e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002670:	2302      	movs	r3, #2
 8002672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002678:	2303      	movs	r3, #3
 800267a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800267c:	2305      	movs	r3, #5
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002680:	f107 0314 	add.w	r3, r7, #20
 8002684:	4619      	mov	r1, r3
 8002686:	4816      	ldr	r0, [pc, #88]	; (80026e0 <MX_GPIO_Init+0x304>)
 8002688:	f001 f9d8 	bl	8003a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800268c:	2378      	movs	r3, #120	; 0x78
 800268e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002698:	2303      	movs	r3, #3
 800269a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800269c:	2307      	movs	r3, #7
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	4619      	mov	r1, r3
 80026a6:	480e      	ldr	r0, [pc, #56]	; (80026e0 <MX_GPIO_Init+0x304>)
 80026a8:	f001 f9c8 	bl	8003a3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	2100      	movs	r1, #0
 80026b0:	2017      	movs	r0, #23
 80026b2:	f000 fdf0 	bl	8003296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80026b6:	2017      	movs	r0, #23
 80026b8:	f000 fe09 	bl	80032ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80026bc:	2200      	movs	r2, #0
 80026be:	2100      	movs	r1, #0
 80026c0:	2028      	movs	r0, #40	; 0x28
 80026c2:	f000 fde8 	bl	8003296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026c6:	2028      	movs	r0, #40	; 0x28
 80026c8:	f000 fe01 	bl	80032ce <HAL_NVIC_EnableIRQ>

}
 80026cc:	bf00      	nop
 80026ce:	3728      	adds	r7, #40	; 0x28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000
 80026d8:	48001000 	.word	0x48001000
 80026dc:	48000400 	.word	0x48000400
 80026e0:	48000c00 	.word	0x48000c00
 80026e4:	48000800 	.word	0x48000800
 80026e8:	10110000 	.word	0x10110000
 80026ec:	10210000 	.word	0x10210000

080026f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002706:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <HAL_MspInit+0x44>)
 8002708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270a:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <HAL_MspInit+0x44>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	6613      	str	r3, [r2, #96]	; 0x60
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <HAL_MspInit+0x44>)
 8002714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_MspInit+0x44>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	4a08      	ldr	r2, [pc, #32]	; (8002744 <HAL_MspInit+0x44>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	6593      	str	r3, [r2, #88]	; 0x58
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_MspInit+0x44>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000

08002748 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8002760:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d128      	bne.n	80027ba <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <HAL_DFSDM_ChannelMspInit+0x80>)
 800276a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276c:	4a16      	ldr	r2, [pc, #88]	; (80027c8 <HAL_DFSDM_ChannelMspInit+0x80>)
 800276e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002772:	6613      	str	r3, [r2, #96]	; 0x60
 8002774:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002784:	4a10      	ldr	r2, [pc, #64]	; (80027c8 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002786:	f043 0310 	orr.w	r3, r3, #16
 800278a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800278c:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_DFSDM_ChannelMspInit+0x80>)
 800278e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002798:	f44f 7320 	mov.w	r3, #640	; 0x280
 800279c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80027aa:	2306      	movs	r3, #6
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027ae:	f107 0314 	add.w	r3, r7, #20
 80027b2:	4619      	mov	r1, r3
 80027b4:	4805      	ldr	r0, [pc, #20]	; (80027cc <HAL_DFSDM_ChannelMspInit+0x84>)
 80027b6:	f001 f941 	bl	8003a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 80027ba:	bf00      	nop
 80027bc:	3728      	adds	r7, #40	; 0x28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	2000095c 	.word	0x2000095c
 80027c8:	40021000 	.word	0x40021000
 80027cc:	48001000 	.word	0x48001000

080027d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 031c 	add.w	r3, r7, #28
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a33      	ldr	r2, [pc, #204]	; (80028bc <HAL_I2C_MspInit+0xec>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d131      	bne.n	8002856 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f2:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <HAL_I2C_MspInit+0xf0>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	4a32      	ldr	r2, [pc, #200]	; (80028c0 <HAL_I2C_MspInit+0xf0>)
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027fe:	4b30      	ldr	r3, [pc, #192]	; (80028c0 <HAL_I2C_MspInit+0xf0>)
 8002800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800280a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800280e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002810:	2312      	movs	r3, #18
 8002812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002814:	2301      	movs	r3, #1
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002818:	2303      	movs	r3, #3
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800281c:	2304      	movs	r3, #4
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	f107 031c 	add.w	r3, r7, #28
 8002824:	4619      	mov	r1, r3
 8002826:	4827      	ldr	r0, [pc, #156]	; (80028c4 <HAL_I2C_MspInit+0xf4>)
 8002828:	f001 f908 	bl	8003a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800282c:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_I2C_MspInit+0xf0>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <HAL_I2C_MspInit+0xf0>)
 8002832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002836:	6593      	str	r3, [r2, #88]	; 0x58
 8002838:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_I2C_MspInit+0xf0>)
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2100      	movs	r1, #0
 8002848:	201f      	movs	r0, #31
 800284a:	f000 fd24 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800284e:	201f      	movs	r0, #31
 8002850:	f000 fd3d 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002854:	e02d      	b.n	80028b2 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <HAL_I2C_MspInit+0xf8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d128      	bne.n	80028b2 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002860:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <HAL_I2C_MspInit+0xf0>)
 8002862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002864:	4a16      	ldr	r2, [pc, #88]	; (80028c0 <HAL_I2C_MspInit+0xf0>)
 8002866:	f043 0302 	orr.w	r3, r3, #2
 800286a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800286c:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_I2C_MspInit+0xf0>)
 800286e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002878:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800287c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800287e:	2312      	movs	r3, #18
 8002880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002882:	2301      	movs	r3, #1
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800288a:	2304      	movs	r3, #4
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288e:	f107 031c 	add.w	r3, r7, #28
 8002892:	4619      	mov	r1, r3
 8002894:	480b      	ldr	r0, [pc, #44]	; (80028c4 <HAL_I2C_MspInit+0xf4>)
 8002896:	f001 f8d1 	bl	8003a3c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_I2C_MspInit+0xf0>)
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	4a08      	ldr	r2, [pc, #32]	; (80028c0 <HAL_I2C_MspInit+0xf0>)
 80028a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028a4:	6593      	str	r3, [r2, #88]	; 0x58
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_I2C_MspInit+0xf0>)
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
}
 80028b2:	bf00      	nop
 80028b4:	3730      	adds	r7, #48	; 0x30
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40005400 	.word	0x40005400
 80028c0:	40021000 	.word	0x40021000
 80028c4:	48000400 	.word	0x48000400
 80028c8:	40005800 	.word	0x40005800

080028cc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a17      	ldr	r2, [pc, #92]	; (8002948 <HAL_QSPI_MspInit+0x7c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d128      	bne.n	8002940 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80028ee:	4b17      	ldr	r3, [pc, #92]	; (800294c <HAL_QSPI_MspInit+0x80>)
 80028f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f2:	4a16      	ldr	r2, [pc, #88]	; (800294c <HAL_QSPI_MspInit+0x80>)
 80028f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f8:	6513      	str	r3, [r2, #80]	; 0x50
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <HAL_QSPI_MspInit+0x80>)
 80028fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <HAL_QSPI_MspInit+0x80>)
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	4a10      	ldr	r2, [pc, #64]	; (800294c <HAL_QSPI_MspInit+0x80>)
 800290c:	f043 0310 	orr.w	r3, r3, #16
 8002910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002912:	4b0e      	ldr	r3, [pc, #56]	; (800294c <HAL_QSPI_MspInit+0x80>)
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	f003 0310 	and.w	r3, r3, #16
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800291e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002922:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292c:	2303      	movs	r3, #3
 800292e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002930:	230a      	movs	r3, #10
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	4619      	mov	r1, r3
 800293a:	4805      	ldr	r0, [pc, #20]	; (8002950 <HAL_QSPI_MspInit+0x84>)
 800293c:	f001 f87e 	bl	8003a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002940:	bf00      	nop
 8002942:	3728      	adds	r7, #40	; 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	a0001000 	.word	0xa0001000
 800294c:	40021000 	.word	0x40021000
 8002950:	48001000 	.word	0x48001000

08002954 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	; 0x28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <HAL_SPI_MspInit+0x7c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d128      	bne.n	80029c8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002976:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <HAL_SPI_MspInit+0x80>)
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <HAL_SPI_MspInit+0x80>)
 800297c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002980:	6593      	str	r3, [r2, #88]	; 0x58
 8002982:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <HAL_SPI_MspInit+0x80>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <HAL_SPI_MspInit+0x80>)
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <HAL_SPI_MspInit+0x80>)
 8002994:	f043 0304 	orr.w	r3, r3, #4
 8002998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800299a:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <HAL_SPI_MspInit+0x80>)
 800299c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80029a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80029aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	2302      	movs	r3, #2
 80029ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b4:	2303      	movs	r3, #3
 80029b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029b8:	2306      	movs	r3, #6
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	4619      	mov	r1, r3
 80029c2:	4805      	ldr	r0, [pc, #20]	; (80029d8 <HAL_SPI_MspInit+0x84>)
 80029c4:	f001 f83a 	bl	8003a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80029c8:	bf00      	nop
 80029ca:	3728      	adds	r7, #40	; 0x28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40003c00 	.word	0x40003c00
 80029d4:	40021000 	.word	0x40021000
 80029d8:	48000800 	.word	0x48000800

080029dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08e      	sub	sp, #56	; 0x38
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a62      	ldr	r2, [pc, #392]	; (8002b84 <HAL_UART_MspInit+0x1a8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d15a      	bne.n	8002ab4 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029fe:	4b62      	ldr	r3, [pc, #392]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	4a61      	ldr	r2, [pc, #388]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002a04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a08:	6593      	str	r3, [r2, #88]	; 0x58
 8002a0a:	4b5f      	ldr	r3, [pc, #380]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a12:	623b      	str	r3, [r7, #32]
 8002a14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a16:	4b5c      	ldr	r3, [pc, #368]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	4a5b      	ldr	r2, [pc, #364]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a22:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a3e:	2308      	movs	r3, #8
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4c:	f000 fff6 	bl	8003a3c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8002a50:	4b4e      	ldr	r3, [pc, #312]	; (8002b8c <HAL_UART_MspInit+0x1b0>)
 8002a52:	4a4f      	ldr	r2, [pc, #316]	; (8002b90 <HAL_UART_MspInit+0x1b4>)
 8002a54:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8002a56:	4b4d      	ldr	r3, [pc, #308]	; (8002b8c <HAL_UART_MspInit+0x1b0>)
 8002a58:	2202      	movs	r2, #2
 8002a5a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a5c:	4b4b      	ldr	r3, [pc, #300]	; (8002b8c <HAL_UART_MspInit+0x1b0>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a62:	4b4a      	ldr	r3, [pc, #296]	; (8002b8c <HAL_UART_MspInit+0x1b0>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a68:	4b48      	ldr	r3, [pc, #288]	; (8002b8c <HAL_UART_MspInit+0x1b0>)
 8002a6a:	2280      	movs	r2, #128	; 0x80
 8002a6c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_UART_MspInit+0x1b0>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a74:	4b45      	ldr	r3, [pc, #276]	; (8002b8c <HAL_UART_MspInit+0x1b0>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002a7a:	4b44      	ldr	r3, [pc, #272]	; (8002b8c <HAL_UART_MspInit+0x1b0>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a80:	4b42      	ldr	r3, [pc, #264]	; (8002b8c <HAL_UART_MspInit+0x1b0>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002a86:	4841      	ldr	r0, [pc, #260]	; (8002b8c <HAL_UART_MspInit+0x1b0>)
 8002a88:	f000 fd48 	bl	800351c <HAL_DMA_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8002a92:	f7ff fe2d 	bl	80026f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a3c      	ldr	r2, [pc, #240]	; (8002b8c <HAL_UART_MspInit+0x1b0>)
 8002a9a:	66da      	str	r2, [r3, #108]	; 0x6c
 8002a9c:	4a3b      	ldr	r2, [pc, #236]	; (8002b8c <HAL_UART_MspInit+0x1b0>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	2034      	movs	r0, #52	; 0x34
 8002aa8:	f000 fbf5 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002aac:	2034      	movs	r0, #52	; 0x34
 8002aae:	f000 fc0e 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ab2:	e063      	b.n	8002b7c <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a36      	ldr	r2, [pc, #216]	; (8002b94 <HAL_UART_MspInit+0x1b8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d130      	bne.n	8002b20 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002abe:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac2:	4a31      	ldr	r2, [pc, #196]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac8:	6613      	str	r3, [r2, #96]	; 0x60
 8002aca:	4b2f      	ldr	r3, [pc, #188]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad6:	4b2c      	ldr	r3, [pc, #176]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ada:	4a2b      	ldr	r2, [pc, #172]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae2:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002aee:	23c0      	movs	r3, #192	; 0xc0
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afa:	2303      	movs	r3, #3
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002afe:	2307      	movs	r3, #7
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b06:	4619      	mov	r1, r3
 8002b08:	4823      	ldr	r0, [pc, #140]	; (8002b98 <HAL_UART_MspInit+0x1bc>)
 8002b0a:	f000 ff97 	bl	8003a3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2100      	movs	r1, #0
 8002b12:	2025      	movs	r0, #37	; 0x25
 8002b14:	f000 fbbf 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b18:	2025      	movs	r0, #37	; 0x25
 8002b1a:	f000 fbd8 	bl	80032ce <HAL_NVIC_EnableIRQ>
}
 8002b1e:	e02d      	b.n	8002b7c <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART3)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1d      	ldr	r2, [pc, #116]	; (8002b9c <HAL_UART_MspInit+0x1c0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d128      	bne.n	8002b7c <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b2a:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	4a16      	ldr	r2, [pc, #88]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b34:	6593      	str	r3, [r2, #88]	; 0x58
 8002b36:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	4a10      	ldr	r2, [pc, #64]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002b48:	f043 0308 	orr.w	r3, r3, #8
 8002b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <HAL_UART_MspInit+0x1ac>)
 8002b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002b5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b6c:	2307      	movs	r3, #7
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b74:	4619      	mov	r1, r3
 8002b76:	480a      	ldr	r0, [pc, #40]	; (8002ba0 <HAL_UART_MspInit+0x1c4>)
 8002b78:	f000 ff60 	bl	8003a3c <HAL_GPIO_Init>
}
 8002b7c:	bf00      	nop
 8002b7e:	3738      	adds	r7, #56	; 0x38
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40004c00 	.word	0x40004c00
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	20000a1c 	.word	0x20000a1c
 8002b90:	40020458 	.word	0x40020458
 8002b94:	40013800 	.word	0x40013800
 8002b98:	48000400 	.word	0x48000400
 8002b9c:	40004800 	.word	0x40004800
 8002ba0:	48000c00 	.word	0x48000c00

08002ba4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	; 0x28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc4:	d154      	bne.n	8002c70 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc6:	4b2c      	ldr	r3, [pc, #176]	; (8002c78 <HAL_PCD_MspInit+0xd4>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	4a2b      	ldr	r2, [pc, #172]	; (8002c78 <HAL_PCD_MspInit+0xd4>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bd2:	4b29      	ldr	r3, [pc, #164]	; (8002c78 <HAL_PCD_MspInit+0xd4>)
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf6:	f000 ff21 	bl	8003a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002bfa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	2302      	movs	r3, #2
 8002c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002c0c:	230a      	movs	r3, #10
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	4619      	mov	r1, r3
 8002c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c1a:	f000 ff0f 	bl	8003a3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002c1e:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <HAL_PCD_MspInit+0xd4>)
 8002c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c22:	4a15      	ldr	r2, [pc, #84]	; (8002c78 <HAL_PCD_MspInit+0xd4>)
 8002c24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_PCD_MspInit+0xd4>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c36:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <HAL_PCD_MspInit+0xd4>)
 8002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d114      	bne.n	8002c6c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_PCD_MspInit+0xd4>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	4a0c      	ldr	r2, [pc, #48]	; (8002c78 <HAL_PCD_MspInit+0xd4>)
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_PCD_MspInit+0xd4>)
 8002c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002c5a:	f003 f825 	bl	8005ca8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_PCD_MspInit+0xd4>)
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <HAL_PCD_MspInit+0xd4>)
 8002c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c68:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002c6a:	e001      	b.n	8002c70 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8002c6c:	f003 f81c 	bl	8005ca8 <HAL_PWREx_EnableVddUSB>
}
 8002c70:	bf00      	nop
 8002c72:	3728      	adds	r7, #40	; 0x28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000

08002c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c8e:	e7fe      	b.n	8002c8e <HardFault_Handler+0x4>

08002c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <MemManage_Handler+0x4>

08002c96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c9a:	e7fe      	b.n	8002c9a <BusFault_Handler+0x4>

08002c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca0:	e7fe      	b.n	8002ca0 <UsageFault_Handler+0x4>

08002ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd0:	f000 f9c4 	bl	800305c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002cdc:	2020      	movs	r0, #32
 8002cde:	f001 f86d 	bl	8003dbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002ce2:	2040      	movs	r0, #64	; 0x40
 8002ce4:	f001 f86a 	bl	8003dbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002ce8:	2080      	movs	r0, #128	; 0x80
 8002cea:	f001 f867 	bl	8003dbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002cee:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002cf2:	f001 f863 	bl	8003dbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <I2C1_EV_IRQHandler+0x10>)
 8002d02:	f001 fa71 	bl	80041e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000ae4 	.word	0x20000ae4

08002d10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d14:	4802      	ldr	r0, [pc, #8]	; (8002d20 <USART1_IRQHandler+0x10>)
 8002d16:	f004 fe1d 	bl	8007954 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000ff0 	.word	0x20000ff0

08002d24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002d28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d2c:	f001 f846 	bl	8003dbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002d30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002d34:	f001 f842 	bl	8003dbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002d38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d3c:	f001 f83e 	bl	8003dbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002d40:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d44:	f001 f83a 	bl	8003dbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002d48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002d4c:	f001 f836 	bl	8003dbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  user_UART_IDLE_IT_handler();
 8002d58:	f7fe fe98 	bl	8001a8c <user_UART_IDLE_IT_handler>

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002d5c:	4802      	ldr	r0, [pc, #8]	; (8002d68 <UART4_IRQHandler+0x14>)
 8002d5e:	f004 fdf9 	bl	8007954 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20001074 	.word	0x20001074

08002d6c <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002d70:	4802      	ldr	r0, [pc, #8]	; (8002d7c <DMA2_Channel5_IRQHandler+0x10>)
 8002d72:	f000 fd6a 	bl	800384a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000a1c 	.word	0x20000a1c

08002d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d88:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <_sbrk+0x5c>)
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <_sbrk+0x60>)
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d94:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <_sbrk+0x64>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <_sbrk+0x64>)
 8002d9e:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <_sbrk+0x68>)
 8002da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <_sbrk+0x64>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d207      	bcs.n	8002dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db0:	f005 ffbe 	bl	8008d30 <__errno>
 8002db4:	4602      	mov	r2, r0
 8002db6:	230c      	movs	r3, #12
 8002db8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dbe:	e009      	b.n	8002dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <_sbrk+0x64>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dc6:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <_sbrk+0x64>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	4a05      	ldr	r2, [pc, #20]	; (8002de4 <_sbrk+0x64>)
 8002dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20018000 	.word	0x20018000
 8002de0:	00000400 	.word	0x00000400
 8002de4:	20000960 	.word	0x20000960
 8002de8:	20001140 	.word	0x20001140

08002dec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002df0:	4b17      	ldr	r3, [pc, #92]	; (8002e50 <SystemInit+0x64>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	4a16      	ldr	r2, [pc, #88]	; (8002e50 <SystemInit+0x64>)
 8002df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e00:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <SystemInit+0x68>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a13      	ldr	r2, [pc, #76]	; (8002e54 <SystemInit+0x68>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <SystemInit+0x68>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <SystemInit+0x68>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a0f      	ldr	r2, [pc, #60]	; (8002e54 <SystemInit+0x68>)
 8002e18:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002e1c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002e20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002e22:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <SystemInit+0x68>)
 8002e24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e28:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <SystemInit+0x68>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a09      	ldr	r2, [pc, #36]	; (8002e54 <SystemInit+0x68>)
 8002e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <SystemInit+0x68>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <SystemInit+0x64>)
 8002e3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e42:	609a      	str	r2, [r3, #8]
#endif
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000ed00 	.word	0xe000ed00
 8002e54:	40021000 	.word	0x40021000

08002e58 <uatr_comport_comunication_init>:

static bool DAV_flag = false;	/**< data valid flag. When true, uart_comport_task will triggered task() function.*/

uint8_t uart_Tx_flag = 0;

void uatr_comport_comunication_init(UART_HandleTypeDef *huart){
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	com_huart = huart;
 8002e60:	4a06      	ldr	r2, [pc, #24]	; (8002e7c <uatr_comport_comunication_init+0x24>)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(com_huart, comand_RX, COM_LEN);
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <uatr_comport_comunication_init+0x24>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2209      	movs	r2, #9
 8002e6c:	4904      	ldr	r1, [pc, #16]	; (8002e80 <uatr_comport_comunication_init+0x28>)
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f004 fbde 	bl	8007630 <HAL_UART_Receive_IT>
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	200009e0 	.word	0x200009e0
 8002e80:	20000964 	.word	0x20000964

08002e84 <uatr_comport_read_data>:

void uatr_comport_read_data(){
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
	DAV_flag = true;
 8002e8a:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <uatr_comport_read_data+0x6c>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<3; i++){
 8002e90:	2300      	movs	r3, #0
 8002e92:	607b      	str	r3, [r7, #4]
 8002e94:	e00b      	b.n	8002eae <uatr_comport_read_data+0x2a>
		start_speed[i]=comand_RX[i];
 8002e96:	4a17      	ldr	r2, [pc, #92]	; (8002ef4 <uatr_comport_read_data+0x70>)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	7819      	ldrb	r1, [r3, #0]
 8002e9e:	4a16      	ldr	r2, [pc, #88]	; (8002ef8 <uatr_comport_read_data+0x74>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	460a      	mov	r2, r1
 8002ea6:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<3; i++){
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	607b      	str	r3, [r7, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	ddf0      	ble.n	8002e96 <uatr_comport_read_data+0x12>
	}
	for (int i=0; i<3; i++){
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	e00b      	b.n	8002ed2 <uatr_comport_read_data+0x4e>
		stop_speed[i]=comand_RX[i+4];
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <uatr_comport_read_data+0x70>)
 8002ec0:	5cd1      	ldrb	r1, [r2, r3]
 8002ec2:	4a0e      	ldr	r2, [pc, #56]	; (8002efc <uatr_comport_read_data+0x78>)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	460a      	mov	r2, r1
 8002eca:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<3; i++){
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	ddf0      	ble.n	8002eba <uatr_comport_read_data+0x36>
	}
	HAL_UART_Receive_IT(com_huart, comand_RX, COM_LEN);
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <uatr_comport_read_data+0x7c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2209      	movs	r2, #9
 8002ede:	4905      	ldr	r1, [pc, #20]	; (8002ef4 <uatr_comport_read_data+0x70>)
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f004 fba5 	bl	8007630 <HAL_UART_Receive_IT>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	2000096d 	.word	0x2000096d
 8002ef4:	20000964 	.word	0x20000964
 8002ef8:	20000fec 	.word	0x20000fec
 8002efc:	20000f84 	.word	0x20000f84
 8002f00:	200009e0 	.word	0x200009e0

08002f04 <uatr_comport_send_data>:

void uatr_comport_send_data(uint8_t* data, uint8_t data_len){
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit_IT(com_huart, data, data_len);
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <uatr_comport_send_data+0x2c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	b292      	uxth	r2, r2
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f004 fb2c 	bl	8007578 <HAL_UART_Transmit_IT>
	uart_Tx_flag=1;
 8002f20:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <uatr_comport_send_data+0x30>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200009e0 	.word	0x200009e0
 8002f34:	2000096e 	.word	0x2000096e

08002f38 <uart_comport_task>:

void uart_comport_task(void (*task)(void)){
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	if (DAV_flag){
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <uart_comport_task+0x24>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d004      	beq.n	8002f52 <uart_comport_task+0x1a>
		task();
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4798      	blx	r3
		DAV_flag=false;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <uart_comport_task+0x24>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
	}
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	2000096d 	.word	0x2000096d

08002f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f64:	f7ff ff42 	bl	8002dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f6a:	e003      	b.n	8002f74 <LoopCopyDataInit>

08002f6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f72:	3104      	adds	r1, #4

08002f74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f74:	480a      	ldr	r0, [pc, #40]	; (8002fa0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f76:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f7c:	d3f6      	bcc.n	8002f6c <CopyDataInit>
	ldr	r2, =_sbss
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002f80:	e002      	b.n	8002f88 <LoopFillZerobss>

08002f82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f84:	f842 3b04 	str.w	r3, [r2], #4

08002f88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f88:	4b08      	ldr	r3, [pc, #32]	; (8002fac <LoopForever+0x16>)
	cmp	r2, r3
 8002f8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002f8c:	d3f9      	bcc.n	8002f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f8e:	f005 fed5 	bl	8008d3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f92:	f7fe ff29 	bl	8001de8 <main>

08002f96 <LoopForever>:

LoopForever:
    b LoopForever
 8002f96:	e7fe      	b.n	8002f96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f98:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002f9c:	0800c860 	.word	0x0800c860
	ldr	r0, =_sdata
 8002fa0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002fa4:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8002fa8:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8002fac:	20001140 	.word	0x20001140

08002fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fb0:	e7fe      	b.n	8002fb0 <ADC1_2_IRQHandler>

08002fb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fbc:	2003      	movs	r0, #3
 8002fbe:	f000 f95f 	bl	8003280 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f000 f80e 	bl	8002fe4 <HAL_InitTick>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	71fb      	strb	r3, [r7, #7]
 8002fd2:	e001      	b.n	8002fd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fd4:	f7ff fb94 	bl	8002700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ff0:	4b17      	ldr	r3, [pc, #92]	; (8003050 <HAL_InitTick+0x6c>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d023      	beq.n	8003040 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ff8:	4b16      	ldr	r3, [pc, #88]	; (8003054 <HAL_InitTick+0x70>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b14      	ldr	r3, [pc, #80]	; (8003050 <HAL_InitTick+0x6c>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4619      	mov	r1, r3
 8003002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003006:	fbb3 f3f1 	udiv	r3, r3, r1
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f96b 	bl	80032ea <HAL_SYSTICK_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b0f      	cmp	r3, #15
 800301e:	d809      	bhi.n	8003034 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003020:	2200      	movs	r2, #0
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003028:	f000 f935 	bl	8003296 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800302c:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <HAL_InitTick+0x74>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e007      	b.n	8003044 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
 8003038:	e004      	b.n	8003044 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	e001      	b.n	8003044 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003044:	7bfb      	ldrb	r3, [r7, #15]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000008 	.word	0x20000008
 8003054:	20000000 	.word	0x20000000
 8003058:	20000004 	.word	0x20000004

0800305c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_IncTick+0x20>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_IncTick+0x24>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4413      	add	r3, r2
 800306c:	4a04      	ldr	r2, [pc, #16]	; (8003080 <HAL_IncTick+0x24>)
 800306e:	6013      	str	r3, [r2, #0]
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000008 	.word	0x20000008
 8003080:	20001138 	.word	0x20001138

08003084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return uwTick;
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <HAL_GetTick+0x14>)
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20001138 	.word	0x20001138

0800309c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030a4:	f7ff ffee 	bl	8003084 <HAL_GetTick>
 80030a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b4:	d005      	beq.n	80030c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_Delay+0x40>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4413      	add	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030c2:	bf00      	nop
 80030c4:	f7ff ffde 	bl	8003084 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d8f7      	bhi.n	80030c4 <HAL_Delay+0x28>
  {
  }
}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000008 	.word	0x20000008

080030e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <__NVIC_SetPriorityGrouping+0x44>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030fc:	4013      	ands	r3, r2
 80030fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800310c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003112:	4a04      	ldr	r2, [pc, #16]	; (8003124 <__NVIC_SetPriorityGrouping+0x44>)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	60d3      	str	r3, [r2, #12]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <__NVIC_GetPriorityGrouping+0x18>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	0a1b      	lsrs	r3, r3, #8
 8003132:	f003 0307 	and.w	r3, r3, #7
}
 8003136:	4618      	mov	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	2b00      	cmp	r3, #0
 8003154:	db0b      	blt.n	800316e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	f003 021f 	and.w	r2, r3, #31
 800315c:	4907      	ldr	r1, [pc, #28]	; (800317c <__NVIC_EnableIRQ+0x38>)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2001      	movs	r0, #1
 8003166:	fa00 f202 	lsl.w	r2, r0, r2
 800316a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	e000e100 	.word	0xe000e100

08003180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	6039      	str	r1, [r7, #0]
 800318a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003190:	2b00      	cmp	r3, #0
 8003192:	db0a      	blt.n	80031aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	b2da      	uxtb	r2, r3
 8003198:	490c      	ldr	r1, [pc, #48]	; (80031cc <__NVIC_SetPriority+0x4c>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	0112      	lsls	r2, r2, #4
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	440b      	add	r3, r1
 80031a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031a8:	e00a      	b.n	80031c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4908      	ldr	r1, [pc, #32]	; (80031d0 <__NVIC_SetPriority+0x50>)
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	3b04      	subs	r3, #4
 80031b8:	0112      	lsls	r2, r2, #4
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	440b      	add	r3, r1
 80031be:	761a      	strb	r2, [r3, #24]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000e100 	.word	0xe000e100
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	; 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f1c3 0307 	rsb	r3, r3, #7
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	bf28      	it	cs
 80031f2:	2304      	movcs	r3, #4
 80031f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3304      	adds	r3, #4
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d902      	bls.n	8003204 <NVIC_EncodePriority+0x30>
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3b03      	subs	r3, #3
 8003202:	e000      	b.n	8003206 <NVIC_EncodePriority+0x32>
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43da      	mvns	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	401a      	ands	r2, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800321c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	fa01 f303 	lsl.w	r3, r1, r3
 8003226:	43d9      	mvns	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800322c:	4313      	orrs	r3, r2
         );
}
 800322e:	4618      	mov	r0, r3
 8003230:	3724      	adds	r7, #36	; 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800324c:	d301      	bcc.n	8003252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800324e:	2301      	movs	r3, #1
 8003250:	e00f      	b.n	8003272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003252:	4a0a      	ldr	r2, [pc, #40]	; (800327c <SysTick_Config+0x40>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3b01      	subs	r3, #1
 8003258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800325a:	210f      	movs	r1, #15
 800325c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003260:	f7ff ff8e 	bl	8003180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <SysTick_Config+0x40>)
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800326a:	4b04      	ldr	r3, [pc, #16]	; (800327c <SysTick_Config+0x40>)
 800326c:	2207      	movs	r2, #7
 800326e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	e000e010 	.word	0xe000e010

08003280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff ff29 	bl	80030e0 <__NVIC_SetPriorityGrouping>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032a8:	f7ff ff3e 	bl	8003128 <__NVIC_GetPriorityGrouping>
 80032ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	6978      	ldr	r0, [r7, #20]
 80032b4:	f7ff ff8e 	bl	80031d4 <NVIC_EncodePriority>
 80032b8:	4602      	mov	r2, r0
 80032ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff5d 	bl	8003180 <__NVIC_SetPriority>
}
 80032c6:	bf00      	nop
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	4603      	mov	r3, r0
 80032d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff31 	bl	8003144 <__NVIC_EnableIRQ>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ffa2 	bl	800323c <SysTick_Config>
 80032f8:	4603      	mov	r3, r0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e0ac      	b.n	8003470 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f8b2 	bl	8003484 <DFSDM_GetChannelFromInstance>
 8003320:	4602      	mov	r2, r0
 8003322:	4b55      	ldr	r3, [pc, #340]	; (8003478 <HAL_DFSDM_ChannelInit+0x174>)
 8003324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e09f      	b.n	8003470 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff fa09 	bl	8002748 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003336:	4b51      	ldr	r3, [pc, #324]	; (800347c <HAL_DFSDM_ChannelInit+0x178>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3301      	adds	r3, #1
 800333c:	4a4f      	ldr	r2, [pc, #316]	; (800347c <HAL_DFSDM_ChannelInit+0x178>)
 800333e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003340:	4b4e      	ldr	r3, [pc, #312]	; (800347c <HAL_DFSDM_ChannelInit+0x178>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d125      	bne.n	8003394 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003348:	4b4d      	ldr	r3, [pc, #308]	; (8003480 <HAL_DFSDM_ChannelInit+0x17c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a4c      	ldr	r2, [pc, #304]	; (8003480 <HAL_DFSDM_ChannelInit+0x17c>)
 800334e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003352:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003354:	4b4a      	ldr	r3, [pc, #296]	; (8003480 <HAL_DFSDM_ChannelInit+0x17c>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4948      	ldr	r1, [pc, #288]	; (8003480 <HAL_DFSDM_ChannelInit+0x17c>)
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003362:	4b47      	ldr	r3, [pc, #284]	; (8003480 <HAL_DFSDM_ChannelInit+0x17c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a46      	ldr	r2, [pc, #280]	; (8003480 <HAL_DFSDM_ChannelInit+0x17c>)
 8003368:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800336c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	791b      	ldrb	r3, [r3, #4]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d108      	bne.n	8003388 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003376:	4b42      	ldr	r3, [pc, #264]	; (8003480 <HAL_DFSDM_ChannelInit+0x17c>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	3b01      	subs	r3, #1
 8003380:	041b      	lsls	r3, r3, #16
 8003382:	493f      	ldr	r1, [pc, #252]	; (8003480 <HAL_DFSDM_ChannelInit+0x17c>)
 8003384:	4313      	orrs	r3, r2
 8003386:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003388:	4b3d      	ldr	r3, [pc, #244]	; (8003480 <HAL_DFSDM_ChannelInit+0x17c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a3c      	ldr	r2, [pc, #240]	; (8003480 <HAL_DFSDM_ChannelInit+0x17c>)
 800338e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003392:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80033a2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6819      	ldr	r1, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80033b2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80033b8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 020f 	bic.w	r2, r2, #15
 80033d0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6819      	ldr	r1, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80033f8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6899      	ldr	r1, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003408:	3b01      	subs	r3, #1
 800340a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f002 0207 	and.w	r2, r2, #7
 8003424:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003450:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f810 	bl	8003484 <DFSDM_GetChannelFromInstance>
 8003464:	4601      	mov	r1, r0
 8003466:	4a04      	ldr	r2, [pc, #16]	; (8003478 <HAL_DFSDM_ChannelInit+0x174>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20000974 	.word	0x20000974
 800347c:	20000970 	.word	0x20000970
 8003480:	40016000 	.word	0x40016000

08003484 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a1c      	ldr	r2, [pc, #112]	; (8003500 <DFSDM_GetChannelFromInstance+0x7c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d102      	bne.n	800349a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	e02b      	b.n	80034f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a19      	ldr	r2, [pc, #100]	; (8003504 <DFSDM_GetChannelFromInstance+0x80>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d102      	bne.n	80034a8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80034a2:	2301      	movs	r3, #1
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	e024      	b.n	80034f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a17      	ldr	r2, [pc, #92]	; (8003508 <DFSDM_GetChannelFromInstance+0x84>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d102      	bne.n	80034b6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80034b0:	2302      	movs	r3, #2
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	e01d      	b.n	80034f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a14      	ldr	r2, [pc, #80]	; (800350c <DFSDM_GetChannelFromInstance+0x88>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d102      	bne.n	80034c4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80034be:	2304      	movs	r3, #4
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e016      	b.n	80034f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a12      	ldr	r2, [pc, #72]	; (8003510 <DFSDM_GetChannelFromInstance+0x8c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d102      	bne.n	80034d2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80034cc:	2305      	movs	r3, #5
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e00f      	b.n	80034f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a0f      	ldr	r2, [pc, #60]	; (8003514 <DFSDM_GetChannelFromInstance+0x90>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d102      	bne.n	80034e0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80034da:	2306      	movs	r3, #6
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e008      	b.n	80034f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a0d      	ldr	r2, [pc, #52]	; (8003518 <DFSDM_GetChannelFromInstance+0x94>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d102      	bne.n	80034ee <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80034e8:	2307      	movs	r3, #7
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	e001      	b.n	80034f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80034ee:	2303      	movs	r3, #3
 80034f0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80034f2:	68fb      	ldr	r3, [r7, #12]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40016000 	.word	0x40016000
 8003504:	40016020 	.word	0x40016020
 8003508:	40016040 	.word	0x40016040
 800350c:	40016080 	.word	0x40016080
 8003510:	400160a0 	.word	0x400160a0
 8003514:	400160c0 	.word	0x400160c0
 8003518:	400160e0 	.word	0x400160e0

0800351c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e098      	b.n	8003660 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	4b4d      	ldr	r3, [pc, #308]	; (800366c <HAL_DMA_Init+0x150>)
 8003536:	429a      	cmp	r2, r3
 8003538:	d80f      	bhi.n	800355a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	4b4b      	ldr	r3, [pc, #300]	; (8003670 <HAL_DMA_Init+0x154>)
 8003542:	4413      	add	r3, r2
 8003544:	4a4b      	ldr	r2, [pc, #300]	; (8003674 <HAL_DMA_Init+0x158>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	009a      	lsls	r2, r3, #2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a48      	ldr	r2, [pc, #288]	; (8003678 <HAL_DMA_Init+0x15c>)
 8003556:	641a      	str	r2, [r3, #64]	; 0x40
 8003558:	e00e      	b.n	8003578 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	461a      	mov	r2, r3
 8003560:	4b46      	ldr	r3, [pc, #280]	; (800367c <HAL_DMA_Init+0x160>)
 8003562:	4413      	add	r3, r2
 8003564:	4a43      	ldr	r2, [pc, #268]	; (8003674 <HAL_DMA_Init+0x158>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	009a      	lsls	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a42      	ldr	r2, [pc, #264]	; (8003680 <HAL_DMA_Init+0x164>)
 8003576:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800358e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003592:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800359c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035d2:	d039      	beq.n	8003648 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	4a27      	ldr	r2, [pc, #156]	; (8003678 <HAL_DMA_Init+0x15c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d11a      	bne.n	8003614 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035de:	4b29      	ldr	r3, [pc, #164]	; (8003684 <HAL_DMA_Init+0x168>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	f003 031c 	and.w	r3, r3, #28
 80035ea:	210f      	movs	r1, #15
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	4924      	ldr	r1, [pc, #144]	; (8003684 <HAL_DMA_Init+0x168>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80035f8:	4b22      	ldr	r3, [pc, #136]	; (8003684 <HAL_DMA_Init+0x168>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003604:	f003 031c 	and.w	r3, r3, #28
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	491d      	ldr	r1, [pc, #116]	; (8003684 <HAL_DMA_Init+0x168>)
 800360e:	4313      	orrs	r3, r2
 8003610:	600b      	str	r3, [r1, #0]
 8003612:	e019      	b.n	8003648 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003614:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <HAL_DMA_Init+0x16c>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361c:	f003 031c 	and.w	r3, r3, #28
 8003620:	210f      	movs	r1, #15
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	4917      	ldr	r1, [pc, #92]	; (8003688 <HAL_DMA_Init+0x16c>)
 800362a:	4013      	ands	r3, r2
 800362c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800362e:	4b16      	ldr	r3, [pc, #88]	; (8003688 <HAL_DMA_Init+0x16c>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6859      	ldr	r1, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	f003 031c 	and.w	r3, r3, #28
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	4911      	ldr	r1, [pc, #68]	; (8003688 <HAL_DMA_Init+0x16c>)
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	40020407 	.word	0x40020407
 8003670:	bffdfff8 	.word	0xbffdfff8
 8003674:	cccccccd 	.word	0xcccccccd
 8003678:	40020000 	.word	0x40020000
 800367c:	bffdfbf8 	.word	0xbffdfbf8
 8003680:	40020400 	.word	0x40020400
 8003684:	400200a8 	.word	0x400200a8
 8003688:	400204a8 	.word	0x400204a8

0800368c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_DMA_Start_IT+0x20>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e04b      	b.n	8003744 <HAL_DMA_Start_IT+0xb8>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d13a      	bne.n	8003736 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f979 	bl	80039dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 020e 	orr.w	r2, r2, #14
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e00f      	b.n	8003724 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0204 	bic.w	r2, r2, #4
 8003712:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 020a 	orr.w	r2, r2, #10
 8003722:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e005      	b.n	8003742 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800373e:	2302      	movs	r3, #2
 8003740:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003742:	7dfb      	ldrb	r3, [r7, #23]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d008      	beq.n	8003776 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2204      	movs	r2, #4
 8003768:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e022      	b.n	80037bc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 020e 	bic.w	r2, r2, #14
 8003784:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	f003 021c 	and.w	r2, r3, #28
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	2101      	movs	r1, #1
 80037a4:	fa01 f202 	lsl.w	r2, r1, r2
 80037a8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d005      	beq.n	80037ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2204      	movs	r2, #4
 80037e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
 80037ea:	e029      	b.n	8003840 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 020e 	bic.w	r2, r2, #14
 80037fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	f003 021c 	and.w	r2, r3, #28
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	2101      	movs	r1, #1
 800381a:	fa01 f202 	lsl.w	r2, r1, r2
 800381e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
    }
  }
  return status;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	f003 031c 	and.w	r3, r3, #28
 800386a:	2204      	movs	r2, #4
 800386c:	409a      	lsls	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d026      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x7a>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d021      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d107      	bne.n	800389e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0204 	bic.w	r2, r2, #4
 800389c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f003 021c 	and.w	r2, r3, #28
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	2104      	movs	r1, #4
 80038ac:	fa01 f202 	lsl.w	r2, r1, r2
 80038b0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d071      	beq.n	800399e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80038c2:	e06c      	b.n	800399e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c8:	f003 031c 	and.w	r3, r3, #28
 80038cc:	2202      	movs	r2, #2
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d02e      	beq.n	8003936 <HAL_DMA_IRQHandler+0xec>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d029      	beq.n	8003936 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10b      	bne.n	8003908 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 020a 	bic.w	r2, r2, #10
 80038fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	f003 021c 	and.w	r2, r3, #28
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	2102      	movs	r1, #2
 8003916:	fa01 f202 	lsl.w	r2, r1, r2
 800391a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d038      	beq.n	800399e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003934:	e033      	b.n	800399e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f003 031c 	and.w	r3, r3, #28
 800393e:	2208      	movs	r2, #8
 8003940:	409a      	lsls	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d02a      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x156>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d025      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 020e 	bic.w	r2, r2, #14
 8003962:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003968:	f003 021c 	and.w	r2, r3, #28
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	2101      	movs	r1, #1
 8003972:	fa01 f202 	lsl.w	r2, r1, r2
 8003976:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003992:	2b00      	cmp	r3, #0
 8003994:	d004      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800399e:	bf00      	nop
 80039a0:	bf00      	nop
}
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039b6:	b2db      	uxtb	r3, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	f003 021c 	and.w	r2, r3, #28
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	2101      	movs	r1, #1
 80039f8:	fa01 f202 	lsl.w	r2, r1, r2
 80039fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b10      	cmp	r3, #16
 8003a0c:	d108      	bne.n	8003a20 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a1e:	e007      	b.n	8003a30 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	60da      	str	r2, [r3, #12]
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a4a:	e17f      	b.n	8003d4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	2101      	movs	r1, #1
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 8171 	beq.w	8003d46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d00b      	beq.n	8003a84 <HAL_GPIO_Init+0x48>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d007      	beq.n	8003a84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a78:	2b11      	cmp	r3, #17
 8003a7a:	d003      	beq.n	8003a84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b12      	cmp	r3, #18
 8003a82:	d130      	bne.n	8003ae6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	2203      	movs	r2, #3
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aba:	2201      	movs	r2, #1
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	f003 0201 	and.w	r2, r3, #1
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d118      	bne.n	8003b24 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003af8:	2201      	movs	r2, #1
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	08db      	lsrs	r3, r3, #3
 8003b0e:	f003 0201 	and.w	r2, r3, #1
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	2203      	movs	r2, #3
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d003      	beq.n	8003b64 <HAL_GPIO_Init+0x128>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b12      	cmp	r3, #18
 8003b62:	d123      	bne.n	8003bac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	08da      	lsrs	r2, r3, #3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3208      	adds	r2, #8
 8003b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	220f      	movs	r2, #15
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	08da      	lsrs	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3208      	adds	r2, #8
 8003ba6:	6939      	ldr	r1, [r7, #16]
 8003ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0203 	and.w	r2, r3, #3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80ac 	beq.w	8003d46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bee:	4b5e      	ldr	r3, [pc, #376]	; (8003d68 <HAL_GPIO_Init+0x32c>)
 8003bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf2:	4a5d      	ldr	r2, [pc, #372]	; (8003d68 <HAL_GPIO_Init+0x32c>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	6613      	str	r3, [r2, #96]	; 0x60
 8003bfa:	4b5b      	ldr	r3, [pc, #364]	; (8003d68 <HAL_GPIO_Init+0x32c>)
 8003bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	60bb      	str	r3, [r7, #8]
 8003c04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c06:	4a59      	ldr	r2, [pc, #356]	; (8003d6c <HAL_GPIO_Init+0x330>)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	089b      	lsrs	r3, r3, #2
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	220f      	movs	r2, #15
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4013      	ands	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c30:	d025      	beq.n	8003c7e <HAL_GPIO_Init+0x242>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a4e      	ldr	r2, [pc, #312]	; (8003d70 <HAL_GPIO_Init+0x334>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01f      	beq.n	8003c7a <HAL_GPIO_Init+0x23e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4d      	ldr	r2, [pc, #308]	; (8003d74 <HAL_GPIO_Init+0x338>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d019      	beq.n	8003c76 <HAL_GPIO_Init+0x23a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a4c      	ldr	r2, [pc, #304]	; (8003d78 <HAL_GPIO_Init+0x33c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d013      	beq.n	8003c72 <HAL_GPIO_Init+0x236>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a4b      	ldr	r2, [pc, #300]	; (8003d7c <HAL_GPIO_Init+0x340>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00d      	beq.n	8003c6e <HAL_GPIO_Init+0x232>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a4a      	ldr	r2, [pc, #296]	; (8003d80 <HAL_GPIO_Init+0x344>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d007      	beq.n	8003c6a <HAL_GPIO_Init+0x22e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a49      	ldr	r2, [pc, #292]	; (8003d84 <HAL_GPIO_Init+0x348>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d101      	bne.n	8003c66 <HAL_GPIO_Init+0x22a>
 8003c62:	2306      	movs	r3, #6
 8003c64:	e00c      	b.n	8003c80 <HAL_GPIO_Init+0x244>
 8003c66:	2307      	movs	r3, #7
 8003c68:	e00a      	b.n	8003c80 <HAL_GPIO_Init+0x244>
 8003c6a:	2305      	movs	r3, #5
 8003c6c:	e008      	b.n	8003c80 <HAL_GPIO_Init+0x244>
 8003c6e:	2304      	movs	r3, #4
 8003c70:	e006      	b.n	8003c80 <HAL_GPIO_Init+0x244>
 8003c72:	2303      	movs	r3, #3
 8003c74:	e004      	b.n	8003c80 <HAL_GPIO_Init+0x244>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e002      	b.n	8003c80 <HAL_GPIO_Init+0x244>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <HAL_GPIO_Init+0x244>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	f002 0203 	and.w	r2, r2, #3
 8003c86:	0092      	lsls	r2, r2, #2
 8003c88:	4093      	lsls	r3, r2
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c90:	4936      	ldr	r1, [pc, #216]	; (8003d6c <HAL_GPIO_Init+0x330>)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	089b      	lsrs	r3, r3, #2
 8003c96:	3302      	adds	r3, #2
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c9e:	4b3a      	ldr	r3, [pc, #232]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4013      	ands	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cc2:	4a31      	ldr	r2, [pc, #196]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003cc8:	4b2f      	ldr	r3, [pc, #188]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cec:	4a26      	ldr	r2, [pc, #152]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cf2:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d16:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d1c:	4b1a      	ldr	r3, [pc, #104]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d40:	4a11      	ldr	r2, [pc, #68]	; (8003d88 <HAL_GPIO_Init+0x34c>)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa22 f303 	lsr.w	r3, r2, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f47f ae78 	bne.w	8003a4c <HAL_GPIO_Init+0x10>
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40010000 	.word	0x40010000
 8003d70:	48000400 	.word	0x48000400
 8003d74:	48000800 	.word	0x48000800
 8003d78:	48000c00 	.word	0x48000c00
 8003d7c:	48001000 	.word	0x48001000
 8003d80:	48001400 	.word	0x48001400
 8003d84:	48001800 	.word	0x48001800
 8003d88:	40010400 	.word	0x40010400

08003d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	807b      	strh	r3, [r7, #2]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d9c:	787b      	ldrb	r3, [r7, #1]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003da2:	887a      	ldrh	r2, [r7, #2]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003da8:	e002      	b.n	8003db0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003daa:	887a      	ldrh	r2, [r7, #2]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003dc6:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d006      	beq.n	8003de0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dd2:	4a05      	ldr	r2, [pc, #20]	; (8003de8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dd4:	88fb      	ldrh	r3, [r7, #6]
 8003dd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dd8:	88fb      	ldrh	r3, [r7, #6]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f806 	bl	8003dec <HAL_GPIO_EXTI_Callback>
  }
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40010400 	.word	0x40010400

08003dec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	4603      	mov	r3, r0
 8003df4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e081      	b.n	8003f18 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d106      	bne.n	8003e2e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7fe fcd1 	bl	80027d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2224      	movs	r2, #36	; 0x24
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0201 	bic.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e52:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d107      	bne.n	8003e7c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e78:	609a      	str	r2, [r3, #8]
 8003e7a:	e006      	b.n	8003e8a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d104      	bne.n	8003e9c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e9a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6812      	ldr	r2, [r2, #0]
 8003ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eae:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ebe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	ea42 0103 	orr.w	r1, r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	021a      	lsls	r2, r3, #8
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69d9      	ldr	r1, [r3, #28]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1a      	ldr	r2, [r3, #32]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0201 	orr.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	817b      	strh	r3, [r7, #10]
 8003f30:	4613      	mov	r3, r2
 8003f32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	f040 80da 	bne.w	80040f6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_I2C_Master_Transmit+0x30>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e0d3      	b.n	80040f8 <HAL_I2C_Master_Transmit+0x1d8>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f58:	f7ff f894 	bl	8003084 <HAL_GetTick>
 8003f5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	2319      	movs	r3, #25
 8003f64:	2201      	movs	r2, #1
 8003f66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f001 fa35 	bl	80053da <I2C_WaitOnFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e0be      	b.n	80040f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2221      	movs	r2, #33	; 0x21
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2210      	movs	r2, #16
 8003f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	893a      	ldrh	r2, [r7, #8]
 8003f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2bff      	cmp	r3, #255	; 0xff
 8003faa:	d90e      	bls.n	8003fca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	22ff      	movs	r2, #255	; 0xff
 8003fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	8979      	ldrh	r1, [r7, #10]
 8003fba:	4b51      	ldr	r3, [pc, #324]	; (8004100 <HAL_I2C_Master_Transmit+0x1e0>)
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f001 fb2c 	bl	8005620 <I2C_TransferConfig>
 8003fc8:	e06c      	b.n	80040a4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	8979      	ldrh	r1, [r7, #10]
 8003fdc:	4b48      	ldr	r3, [pc, #288]	; (8004100 <HAL_I2C_Master_Transmit+0x1e0>)
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f001 fb1b 	bl	8005620 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003fea:	e05b      	b.n	80040a4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	6a39      	ldr	r1, [r7, #32]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f001 fa32 	bl	800545a <I2C_WaitOnTXISFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e07b      	b.n	80040f8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	781a      	ldrb	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d034      	beq.n	80040a4 <HAL_I2C_Master_Transmit+0x184>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403e:	2b00      	cmp	r3, #0
 8004040:	d130      	bne.n	80040a4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	2200      	movs	r2, #0
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f001 f9c4 	bl	80053da <I2C_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e04d      	b.n	80040f8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	2bff      	cmp	r3, #255	; 0xff
 8004064:	d90e      	bls.n	8004084 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	22ff      	movs	r2, #255	; 0xff
 800406a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004070:	b2da      	uxtb	r2, r3
 8004072:	8979      	ldrh	r1, [r7, #10]
 8004074:	2300      	movs	r3, #0
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f001 facf 	bl	8005620 <I2C_TransferConfig>
 8004082:	e00f      	b.n	80040a4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004092:	b2da      	uxtb	r2, r3
 8004094:	8979      	ldrh	r1, [r7, #10]
 8004096:	2300      	movs	r3, #0
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f001 fabe 	bl	8005620 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d19e      	bne.n	8003fec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	6a39      	ldr	r1, [r7, #32]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f001 fa11 	bl	80054da <I2C_WaitOnSTOPFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e01a      	b.n	80040f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2220      	movs	r2, #32
 80040c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6859      	ldr	r1, [r3, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_I2C_Master_Transmit+0x1e4>)
 80040d6:	400b      	ands	r3, r1
 80040d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e000      	b.n	80040f8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80040f6:	2302      	movs	r3, #2
  }
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	80002000 	.word	0x80002000
 8004104:	fe00e800 	.word	0xfe00e800

08004108 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	461a      	mov	r2, r3
 8004114:	460b      	mov	r3, r1
 8004116:	817b      	strh	r3, [r7, #10]
 8004118:	4613      	mov	r3, r2
 800411a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b20      	cmp	r3, #32
 8004126:	d153      	bne.n	80041d0 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004136:	d101      	bne.n	800413c <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
 800413a:	e04a      	b.n	80041d2 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_I2C_Master_Transmit_IT+0x42>
 8004146:	2302      	movs	r3, #2
 8004148:	e043      	b.n	80041d2 <HAL_I2C_Master_Transmit_IT+0xca>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2221      	movs	r2, #33	; 0x21
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2210      	movs	r2, #16
 800415e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	893a      	ldrh	r2, [r7, #8]
 8004172:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a19      	ldr	r2, [pc, #100]	; (80041dc <HAL_I2C_Master_Transmit_IT+0xd4>)
 8004178:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_I2C_Master_Transmit_IT+0xd8>)
 800417e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	2bff      	cmp	r3, #255	; 0xff
 8004188:	d906      	bls.n	8004198 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	22ff      	movs	r2, #255	; 0xff
 800418e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	e007      	b.n	80041a8 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80041a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041a6:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	8979      	ldrh	r1, [r7, #10]
 80041b0:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <HAL_I2C_Master_Transmit_IT+0xdc>)
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f001 fa32 	bl	8005620 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80041c4:	2101      	movs	r1, #1
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f001 fa58 	bl	800567c <I2C_Enable_IRQ>

    return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e000      	b.n	80041d2 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	ffff0000 	.word	0xffff0000
 80041e0:	080042d9 	.word	0x080042d9
 80041e4:	80002000 	.word	0x80002000

080041e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	68f9      	ldr	r1, [r7, #12]
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	4798      	blx	r3
  }
}
 8004214:	bf00      	nop
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	70fb      	strb	r3, [r7, #3]
 8004264:	4613      	mov	r3, r2
 8004266:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af02      	add	r7, sp, #8
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <I2C_Master_ISR_IT+0x1e>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e115      	b.n	8004522 <I2C_Master_ISR_IT+0x24a>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	091b      	lsrs	r3, r3, #4
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d013      	beq.n	8004332 <I2C_Master_ISR_IT+0x5a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	091b      	lsrs	r3, r3, #4
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00d      	beq.n	8004332 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2210      	movs	r2, #16
 800431c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	f043 0204 	orr.w	r2, r3, #4
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f001 f813 	bl	8005356 <I2C_Flush_TXDR>
 8004330:	e0e2      	b.n	80044f8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	089b      	lsrs	r3, r3, #2
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d023      	beq.n	8004386 <I2C_Master_ISR_IT+0xae>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	089b      	lsrs	r3, r3, #2
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d01d      	beq.n	8004386 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f023 0304 	bic.w	r3, r3, #4
 8004350:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004384:	e0b8      	b.n	80044f8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d01e      	beq.n	80043d0 <I2C_Master_ISR_IT+0xf8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d018      	beq.n	80043d0 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	781a      	ldrb	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043ce:	e093      	b.n	80044f8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	09db      	lsrs	r3, r3, #7
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d05e      	beq.n	800449a <I2C_Master_ISR_IT+0x1c2>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	099b      	lsrs	r3, r3, #6
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d058      	beq.n	800449a <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d041      	beq.n	8004476 <I2C_Master_ISR_IT+0x19e>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d13d      	bne.n	8004476 <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	b29b      	uxth	r3, r3
 8004402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004406:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	2bff      	cmp	r3, #255	; 0xff
 8004410:	d90e      	bls.n	8004430 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	22ff      	movs	r2, #255	; 0xff
 8004416:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441c:	b2da      	uxtb	r2, r3
 800441e:	8a79      	ldrh	r1, [r7, #18]
 8004420:	2300      	movs	r3, #0
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f001 f8f9 	bl	8005620 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800442e:	e033      	b.n	8004498 <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004442:	d00c      	beq.n	800445e <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004448:	b2da      	uxtb	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800444e:	8a79      	ldrh	r1, [r7, #18]
 8004450:	2300      	movs	r3, #0
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	4603      	mov	r3, r0
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f001 f8e2 	bl	8005620 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800445c:	e01c      	b.n	8004498 <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004462:	b2da      	uxtb	r2, r3
 8004464:	8a79      	ldrh	r1, [r7, #18]
 8004466:	2300      	movs	r3, #0
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f001 f8d6 	bl	8005620 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004474:	e010      	b.n	8004498 <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004480:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004484:	d003      	beq.n	800448e <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fba9 	bl	8004bde <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800448c:	e034      	b.n	80044f8 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800448e:	2140      	movs	r1, #64	; 0x40
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 fe69 	bl	8005168 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004496:	e02f      	b.n	80044f8 <I2C_Master_ISR_IT+0x220>
 8004498:	e02e      	b.n	80044f8 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	099b      	lsrs	r3, r3, #6
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d028      	beq.n	80044f8 <I2C_Master_ISR_IT+0x220>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	099b      	lsrs	r3, r3, #6
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d022      	beq.n	80044f8 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d119      	bne.n	80044f0 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044ca:	d015      	beq.n	80044f8 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044d4:	d108      	bne.n	80044e8 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	e007      	b.n	80044f8 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fb78 	bl	8004bde <I2C_ITMasterSeqCplt>
 80044ee:	e003      	b.n	80044f8 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80044f0:	2140      	movs	r1, #64	; 0x40
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 fe38 	bl	8005168 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <I2C_Master_ISR_IT+0x240>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004510:	6979      	ldr	r1, [r7, #20]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 fbfe 	bl	8004d14 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b086      	sub	sp, #24
 800452e:	af00      	add	r7, sp, #0
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	60b9      	str	r1, [r7, #8]
 8004534:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <I2C_Slave_ISR_IT+0x24>
 800454a:	2302      	movs	r3, #2
 800454c:	e0ec      	b.n	8004728 <I2C_Slave_ISR_IT+0x1fe>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <I2C_Slave_ISR_IT+0x4c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800456e:	6939      	ldr	r1, [r7, #16]
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 fc99 	bl	8004ea8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	091b      	lsrs	r3, r3, #4
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d04d      	beq.n	800461e <I2C_Slave_ISR_IT+0xf4>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d047      	beq.n	800461e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d128      	bne.n	80045ea <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b28      	cmp	r3, #40	; 0x28
 80045a2:	d108      	bne.n	80045b6 <I2C_Slave_ISR_IT+0x8c>
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045aa:	d104      	bne.n	80045b6 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80045ac:	6939      	ldr	r1, [r7, #16]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fd84 	bl	80050bc <I2C_ITListenCplt>
 80045b4:	e032      	b.n	800461c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b29      	cmp	r3, #41	; 0x29
 80045c0:	d10e      	bne.n	80045e0 <I2C_Slave_ISR_IT+0xb6>
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045c8:	d00a      	beq.n	80045e0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2210      	movs	r2, #16
 80045d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 febf 	bl	8005356 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 fb3d 	bl	8004c58 <I2C_ITSlaveSeqCplt>
 80045de:	e01d      	b.n	800461c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2210      	movs	r2, #16
 80045e6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80045e8:	e096      	b.n	8004718 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2210      	movs	r2, #16
 80045f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	f043 0204 	orr.w	r2, r3, #4
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d004      	beq.n	800460e <I2C_Slave_ISR_IT+0xe4>
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800460a:	f040 8085 	bne.w	8004718 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	4619      	mov	r1, r3
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 fda7 	bl	8005168 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800461a:	e07d      	b.n	8004718 <I2C_Slave_ISR_IT+0x1ee>
 800461c:	e07c      	b.n	8004718 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	089b      	lsrs	r3, r3, #2
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d030      	beq.n	800468c <I2C_Slave_ISR_IT+0x162>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	089b      	lsrs	r3, r3, #2
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d02a      	beq.n	800468c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d018      	beq.n	8004672 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d14f      	bne.n	800471c <I2C_Slave_ISR_IT+0x1f2>
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004682:	d04b      	beq.n	800471c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 fae7 	bl	8004c58 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800468a:	e047      	b.n	800471c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	08db      	lsrs	r3, r3, #3
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	08db      	lsrs	r3, r3, #3
 800469c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d004      	beq.n	80046ae <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80046a4:	6939      	ldr	r1, [r7, #16]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fa15 	bl	8004ad6 <I2C_ITAddrCplt>
 80046ac:	e037      	b.n	800471e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d031      	beq.n	800471e <I2C_Slave_ISR_IT+0x1f4>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d02b      	beq.n	800471e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d018      	beq.n	8004702 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	781a      	ldrb	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	851a      	strh	r2, [r3, #40]	; 0x28
 8004700:	e00d      	b.n	800471e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004708:	d002      	beq.n	8004710 <I2C_Slave_ISR_IT+0x1e6>
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d106      	bne.n	800471e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 faa1 	bl	8004c58 <I2C_ITSlaveSeqCplt>
 8004716:	e002      	b.n	800471e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004718:	bf00      	nop
 800471a:	e000      	b.n	800471e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800471c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <I2C_Master_ISR_DMA+0x1a>
 8004746:	2302      	movs	r3, #2
 8004748:	e0e1      	b.n	800490e <I2C_Master_ISR_DMA+0x1de>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d017      	beq.n	800478e <I2C_Master_ISR_DMA+0x5e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d011      	beq.n	800478e <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2210      	movs	r2, #16
 8004770:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	f043 0204 	orr.w	r2, r3, #4
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800477e:	2120      	movs	r1, #32
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 ff7b 	bl	800567c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fde5 	bl	8005356 <I2C_Flush_TXDR>
 800478c:	e0ba      	b.n	8004904 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	09db      	lsrs	r3, r3, #7
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d072      	beq.n	8004880 <I2C_Master_ISR_DMA+0x150>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	099b      	lsrs	r3, r3, #6
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d06c      	beq.n	8004880 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047b4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d04e      	beq.n	800485e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047cc:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2bff      	cmp	r3, #255	; 0xff
 80047d6:	d906      	bls.n	80047e6 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	22ff      	movs	r2, #255	; 0xff
 80047dc:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80047de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	e010      	b.n	8004808 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047f8:	d003      	beq.n	8004802 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	e002      	b.n	8004808 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004806:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480c:	b2da      	uxtb	r2, r3
 800480e:	8a79      	ldrh	r1, [r7, #18]
 8004810:	2300      	movs	r3, #0
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 ff02 	bl	8005620 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b22      	cmp	r3, #34	; 0x22
 8004838:	d108      	bne.n	800484c <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004848:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800484a:	e05b      	b.n	8004904 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800485a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800485c:	e052      	b.n	8004904 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800486c:	d003      	beq.n	8004876 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f9b5 	bl	8004bde <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004874:	e046      	b.n	8004904 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004876:	2140      	movs	r1, #64	; 0x40
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fc75 	bl	8005168 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800487e:	e041      	b.n	8004904 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	099b      	lsrs	r3, r3, #6
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d029      	beq.n	80048e0 <I2C_Master_ISR_DMA+0x1b0>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	099b      	lsrs	r3, r3, #6
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d023      	beq.n	80048e0 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d119      	bne.n	80048d6 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048b0:	d027      	beq.n	8004902 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048ba:	d108      	bne.n	80048ce <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ca:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80048cc:	e019      	b.n	8004902 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 f985 	bl	8004bde <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80048d4:	e015      	b.n	8004902 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80048d6:	2140      	movs	r1, #64	; 0x40
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 fc45 	bl	8005168 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80048de:	e010      	b.n	8004902 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00b      	beq.n	8004904 <I2C_Master_ISR_DMA+0x1d4>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fa0a 	bl	8004d14 <I2C_ITMasterCplt>
 8004900:	e000      	b.n	8004904 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004902:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b088      	sub	sp, #32
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <I2C_Slave_ISR_DMA+0x24>
 8004936:	2302      	movs	r3, #2
 8004938:	e0c9      	b.n	8004ace <I2C_Slave_ISR_DMA+0x1b8>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	095b      	lsrs	r3, r3, #5
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <I2C_Slave_ISR_DMA+0x4c>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 faa3 	bl	8004ea8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	091b      	lsrs	r3, r3, #4
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 809a 	beq.w	8004aa4 <I2C_Slave_ISR_DMA+0x18e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	091b      	lsrs	r3, r3, #4
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8093 	beq.w	8004aa4 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0b9b      	lsrs	r3, r3, #14
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d105      	bne.n	8004996 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	0bdb      	lsrs	r3, r3, #15
 800498e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004992:	2b00      	cmp	r3, #0
 8004994:	d07f      	beq.n	8004a96 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00d      	beq.n	80049ba <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	0bdb      	lsrs	r3, r3, #15
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d007      	beq.n	80049ba <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80049b6:	2301      	movs	r3, #1
 80049b8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00d      	beq.n	80049de <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	0b9b      	lsrs	r3, r3, #14
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80049da:	2301      	movs	r3, #1
 80049dc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d128      	bne.n	8004a36 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b28      	cmp	r3, #40	; 0x28
 80049ee:	d108      	bne.n	8004a02 <I2C_Slave_ISR_DMA+0xec>
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049f6:	d104      	bne.n	8004a02 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 fb5e 	bl	80050bc <I2C_ITListenCplt>
 8004a00:	e048      	b.n	8004a94 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b29      	cmp	r3, #41	; 0x29
 8004a0c:	d10e      	bne.n	8004a2c <I2C_Slave_ISR_DMA+0x116>
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a14:	d00a      	beq.n	8004a2c <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2210      	movs	r2, #16
 8004a1c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 fc99 	bl	8005356 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f917 	bl	8004c58 <I2C_ITSlaveSeqCplt>
 8004a2a:	e033      	b.n	8004a94 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2210      	movs	r2, #16
 8004a32:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004a34:	e034      	b.n	8004aa0 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2210      	movs	r2, #16
 8004a3c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a42:	f043 0204 	orr.w	r2, r3, #4
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a50:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <I2C_Slave_ISR_DMA+0x14a>
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a5e:	d11f      	bne.n	8004aa0 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a60:	7dfb      	ldrb	r3, [r7, #23]
 8004a62:	2b21      	cmp	r3, #33	; 0x21
 8004a64:	d002      	beq.n	8004a6c <I2C_Slave_ISR_DMA+0x156>
 8004a66:	7dfb      	ldrb	r3, [r7, #23]
 8004a68:	2b29      	cmp	r3, #41	; 0x29
 8004a6a:	d103      	bne.n	8004a74 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2221      	movs	r2, #33	; 0x21
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
 8004a72:	e008      	b.n	8004a86 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
 8004a76:	2b22      	cmp	r3, #34	; 0x22
 8004a78:	d002      	beq.n	8004a80 <I2C_Slave_ISR_DMA+0x16a>
 8004a7a:	7dfb      	ldrb	r3, [r7, #23]
 8004a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a7e:	d102      	bne.n	8004a86 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2222      	movs	r2, #34	; 0x22
 8004a84:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fb6b 	bl	8005168 <I2C_ITError>
      if (treatdmanack == 1U)
 8004a92:	e005      	b.n	8004aa0 <I2C_Slave_ISR_DMA+0x18a>
 8004a94:	e004      	b.n	8004aa0 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2210      	movs	r2, #16
 8004a9c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004a9e:	e011      	b.n	8004ac4 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8004aa0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004aa2:	e00f      	b.n	8004ac4 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	08db      	lsrs	r3, r3, #3
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <I2C_Slave_ISR_DMA+0x1ae>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	08db      	lsrs	r3, r3, #3
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f809 	bl	8004ad6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004aec:	2b28      	cmp	r3, #40	; 0x28
 8004aee:	d16a      	bne.n	8004bc6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	0c1b      	lsrs	r3, r3, #16
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	0c1b      	lsrs	r3, r3, #16
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b0e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b1c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b2a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d138      	bne.n	8004ba6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004b34:	897b      	ldrh	r3, [r7, #10]
 8004b36:	09db      	lsrs	r3, r3, #7
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	89bb      	ldrh	r3, [r7, #12]
 8004b3c:	4053      	eors	r3, r2
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f003 0306 	and.w	r3, r3, #6
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d11c      	bne.n	8004b82 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004b48:	897b      	ldrh	r3, [r7, #10]
 8004b4a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d13b      	bne.n	8004bd6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2208      	movs	r2, #8
 8004b6a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b74:	89ba      	ldrh	r2, [r7, #12]
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	4619      	mov	r1, r3
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7ff fb6c 	bl	8004258 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b80:	e029      	b.n	8004bd6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004b82:	893b      	ldrh	r3, [r7, #8]
 8004b84:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fdda 	bl	8005744 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b98:	89ba      	ldrh	r2, [r7, #12]
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff fb5a 	bl	8004258 <HAL_I2C_AddrCallback>
}
 8004ba4:	e017      	b.n	8004bd6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ba6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fdca 	bl	8005744 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004bb8:	89ba      	ldrh	r2, [r7, #12]
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff fb4a 	bl	8004258 <HAL_I2C_AddrCallback>
}
 8004bc4:	e007      	b.n	8004bd6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2208      	movs	r2, #8
 8004bcc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004bd6:	bf00      	nop
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b21      	cmp	r3, #33	; 0x21
 8004bf8:	d115      	bne.n	8004c26 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2211      	movs	r2, #17
 8004c06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c0e:	2101      	movs	r1, #1
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 fd97 	bl	8005744 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fc fac6 	bl	80011b0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c24:	e014      	b.n	8004c50 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2212      	movs	r2, #18
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c3a:	2102      	movs	r1, #2
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fd81 	bl	8005744 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff fae6 	bl	800421c <HAL_I2C_MasterRxCpltCallback>
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	0b9b      	lsrs	r3, r3, #14
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d008      	beq.n	8004c8e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e00d      	b.n	8004caa <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	0bdb      	lsrs	r3, r3, #15
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ca8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b29      	cmp	r3, #41	; 0x29
 8004cb4:	d112      	bne.n	8004cdc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2228      	movs	r2, #40	; 0x28
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2221      	movs	r2, #33	; 0x21
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fd3c 	bl	8005744 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff faab 	bl	8004230 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004cda:	e017      	b.n	8004d0c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ce6:	d111      	bne.n	8004d0c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2228      	movs	r2, #40	; 0x28
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2222      	movs	r2, #34	; 0x22
 8004cf4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004cf6:	2102      	movs	r1, #2
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fd23 	bl	8005744 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fa9c 	bl	8004244 <HAL_I2C_SlaveRxCpltCallback>
}
 8004d0c:	bf00      	nop
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2220      	movs	r2, #32
 8004d28:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b21      	cmp	r3, #33	; 0x21
 8004d34:	d107      	bne.n	8004d46 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d36:	2101      	movs	r1, #1
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fd03 	bl	8005744 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2211      	movs	r2, #17
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
 8004d44:	e00c      	b.n	8004d60 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b22      	cmp	r3, #34	; 0x22
 8004d50:	d106      	bne.n	8004d60 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004d52:	2102      	movs	r1, #2
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 fcf5 	bl	8005744 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2212      	movs	r2, #18
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6859      	ldr	r1, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4b4d      	ldr	r3, [pc, #308]	; (8004ea0 <I2C_ITMasterCplt+0x18c>)
 8004d6c:	400b      	ands	r3, r1
 8004d6e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a4a      	ldr	r2, [pc, #296]	; (8004ea4 <I2C_ITMasterCplt+0x190>)
 8004d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	091b      	lsrs	r3, r3, #4
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d009      	beq.n	8004d9c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	f043 0204 	orr.w	r2, r3, #4
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b60      	cmp	r3, #96	; 0x60
 8004da6:	d10b      	bne.n	8004dc0 <I2C_ITMasterCplt+0xac>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	089b      	lsrs	r3, r3, #2
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fac8 	bl	8005356 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dca:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b60      	cmp	r3, #96	; 0x60
 8004dd6:	d002      	beq.n	8004dde <I2C_ITMasterCplt+0xca>
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d006      	beq.n	8004dec <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de2:	4619      	mov	r1, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f9bf 	bl	8005168 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004dea:	e054      	b.n	8004e96 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b21      	cmp	r3, #33	; 0x21
 8004df6:	d124      	bne.n	8004e42 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b40      	cmp	r3, #64	; 0x40
 8004e10:	d10b      	bne.n	8004e2a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff fa30 	bl	8004288 <HAL_I2C_MemTxCpltCallback>
}
 8004e28:	e035      	b.n	8004e96 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fc f9b8 	bl	80011b0 <HAL_I2C_MasterTxCpltCallback>
}
 8004e40:	e029      	b.n	8004e96 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b22      	cmp	r3, #34	; 0x22
 8004e4c:	d123      	bne.n	8004e96 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b40      	cmp	r3, #64	; 0x40
 8004e66:	d10b      	bne.n	8004e80 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff fa0f 	bl	800429c <HAL_I2C_MemRxCpltCallback>
}
 8004e7e:	e00a      	b.n	8004e96 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff f9c3 	bl	800421c <HAL_I2C_MasterRxCpltCallback>
}
 8004e96:	bf00      	nop
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	fe00e800 	.word	0xfe00e800
 8004ea4:	ffff0000 	.word	0xffff0000

08004ea8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ec4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
 8004ed0:	2b21      	cmp	r3, #33	; 0x21
 8004ed2:	d002      	beq.n	8004eda <I2C_ITSlaveCplt+0x32>
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	2b29      	cmp	r3, #41	; 0x29
 8004ed8:	d108      	bne.n	8004eec <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004eda:	f248 0101 	movw	r1, #32769	; 0x8001
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fc30 	bl	8005744 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2221      	movs	r2, #33	; 0x21
 8004ee8:	631a      	str	r2, [r3, #48]	; 0x30
 8004eea:	e00d      	b.n	8004f08 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	2b22      	cmp	r3, #34	; 0x22
 8004ef0:	d002      	beq.n	8004ef8 <I2C_ITSlaveCplt+0x50>
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ef6:	d107      	bne.n	8004f08 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004ef8:	f248 0102 	movw	r1, #32770	; 0x8002
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fc21 	bl	8005744 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2222      	movs	r2, #34	; 0x22
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f16:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6859      	ldr	r1, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b64      	ldr	r3, [pc, #400]	; (80050b4 <I2C_ITSlaveCplt+0x20c>)
 8004f24:	400b      	ands	r3, r1
 8004f26:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fa14 	bl	8005356 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	0b9b      	lsrs	r3, r3, #14
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d013      	beq.n	8004f62 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f48:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d020      	beq.n	8004f94 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f60:	e018      	b.n	8004f94 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	0bdb      	lsrs	r3, r3, #15
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d012      	beq.n	8004f94 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f7c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d006      	beq.n	8004f94 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	089b      	lsrs	r3, r3, #2
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d020      	beq.n	8004fe2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f023 0304 	bic.w	r3, r3, #4
 8004fa6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00c      	beq.n	8004fe2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff0:	f043 0204 	orr.w	r2, r3, #4
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500a:	2b00      	cmp	r3, #0
 800500c:	d010      	beq.n	8005030 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	4619      	mov	r1, r3
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f8a7 	bl	8005168 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b28      	cmp	r3, #40	; 0x28
 8005024:	d141      	bne.n	80050aa <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005026:	6979      	ldr	r1, [r7, #20]
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f847 	bl	80050bc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800502e:	e03c      	b.n	80050aa <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005038:	d014      	beq.n	8005064 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff fe0c 	bl	8004c58 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a1d      	ldr	r2, [pc, #116]	; (80050b8 <I2C_ITSlaveCplt+0x210>)
 8005044:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff f909 	bl	8004274 <HAL_I2C_ListenCpltCallback>
}
 8005062:	e022      	b.n	80050aa <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b22      	cmp	r3, #34	; 0x22
 800506e:	d10e      	bne.n	800508e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff f8dc 	bl	8004244 <HAL_I2C_SlaveRxCpltCallback>
}
 800508c:	e00d      	b.n	80050aa <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2220      	movs	r2, #32
 8005092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff f8c3 	bl	8004230 <HAL_I2C_SlaveTxCpltCallback>
}
 80050aa:	bf00      	nop
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	fe00e800 	.word	0xfe00e800
 80050b8:	ffff0000 	.word	0xffff0000

080050bc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a26      	ldr	r2, [pc, #152]	; (8005164 <I2C_ITListenCplt+0xa8>)
 80050ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	089b      	lsrs	r3, r3, #2
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d022      	beq.n	800513a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005110:	2b00      	cmp	r3, #0
 8005112:	d012      	beq.n	800513a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	f043 0204 	orr.w	r2, r3, #4
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800513a:	f248 0103 	movw	r1, #32771	; 0x8003
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fb00 	bl	8005744 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2210      	movs	r2, #16
 800514a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff f88d 	bl	8004274 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	ffff0000 	.word	0xffff0000

08005168 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005178:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a5d      	ldr	r2, [pc, #372]	; (80052fc <I2C_ITError+0x194>)
 8005186:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	2b28      	cmp	r3, #40	; 0x28
 800519e:	d005      	beq.n	80051ac <I2C_ITError+0x44>
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
 80051a2:	2b29      	cmp	r3, #41	; 0x29
 80051a4:	d002      	beq.n	80051ac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	2b2a      	cmp	r3, #42	; 0x2a
 80051aa:	d10b      	bne.n	80051c4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80051ac:	2103      	movs	r1, #3
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fac8 	bl	8005744 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2228      	movs	r2, #40	; 0x28
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a50      	ldr	r2, [pc, #320]	; (8005300 <I2C_ITError+0x198>)
 80051c0:	635a      	str	r2, [r3, #52]	; 0x34
 80051c2:	e011      	b.n	80051e8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80051c4:	f248 0103 	movw	r1, #32771	; 0x8003
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fabb 	bl	8005744 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b60      	cmp	r3, #96	; 0x60
 80051d8:	d003      	beq.n	80051e2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d039      	beq.n	800526a <I2C_ITError+0x102>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b11      	cmp	r3, #17
 80051fa:	d002      	beq.n	8005202 <I2C_ITError+0x9a>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b21      	cmp	r3, #33	; 0x21
 8005200:	d133      	bne.n	800526a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800520c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005210:	d107      	bne.n	8005222 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005220:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe fbbe 	bl	80039a8 <HAL_DMA_GetState>
 800522c:	4603      	mov	r3, r0
 800522e:	2b01      	cmp	r3, #1
 8005230:	d017      	beq.n	8005262 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	4a33      	ldr	r2, [pc, #204]	; (8005304 <I2C_ITError+0x19c>)
 8005238:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe fabe 	bl	80037c8 <HAL_DMA_Abort_IT>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d04d      	beq.n	80052ee <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800525c:	4610      	mov	r0, r2
 800525e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005260:	e045      	b.n	80052ee <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f850 	bl	8005308 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005268:	e041      	b.n	80052ee <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d039      	beq.n	80052e6 <I2C_ITError+0x17e>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b12      	cmp	r3, #18
 8005276:	d002      	beq.n	800527e <I2C_ITError+0x116>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b22      	cmp	r3, #34	; 0x22
 800527c:	d133      	bne.n	80052e6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800528c:	d107      	bne.n	800529e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800529c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe fb80 	bl	80039a8 <HAL_DMA_GetState>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d017      	beq.n	80052de <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b2:	4a14      	ldr	r2, [pc, #80]	; (8005304 <I2C_ITError+0x19c>)
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fe fa80 	bl	80037c8 <HAL_DMA_Abort_IT>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d011      	beq.n	80052f2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80052d8:	4610      	mov	r0, r2
 80052da:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052dc:	e009      	b.n	80052f2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f812 	bl	8005308 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052e4:	e005      	b.n	80052f2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f80e 	bl	8005308 <I2C_TreatErrorCallback>
  }
}
 80052ec:	e002      	b.n	80052f4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052ee:	bf00      	nop
 80052f0:	e000      	b.n	80052f4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052f2:	bf00      	nop
}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	ffff0000 	.word	0xffff0000
 8005300:	0800452b 	.word	0x0800452b
 8005304:	0800539f 	.word	0x0800539f

08005308 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b60      	cmp	r3, #96	; 0x60
 800531a:	d10e      	bne.n	800533a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fe ffc6 	bl	80042c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005338:	e009      	b.n	800534e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7fe ffb1 	bl	80042b0 <HAL_I2C_ErrorCallback>
}
 800534e:	bf00      	nop
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b02      	cmp	r3, #2
 800536a:	d103      	bne.n	8005374 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2200      	movs	r2, #0
 8005372:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b01      	cmp	r3, #1
 8005380:	d007      	beq.n	8005392 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699a      	ldr	r2, [r3, #24]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0201 	orr.w	r2, r2, #1
 8005390:	619a      	str	r2, [r3, #24]
  }
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	2200      	movs	r2, #0
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c8:	2200      	movs	r2, #0
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7ff ff9b 	bl	8005308 <I2C_TreatErrorCallback>
}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	603b      	str	r3, [r7, #0]
 80053e6:	4613      	mov	r3, r2
 80053e8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ea:	e022      	b.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053f2:	d01e      	beq.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f4:	f7fd fe46 	bl	8003084 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d302      	bcc.n	800540a <I2C_WaitOnFlagUntilTimeout+0x30>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d113      	bne.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540e:	f043 0220 	orr.w	r2, r3, #32
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e00f      	b.n	8005452 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699a      	ldr	r2, [r3, #24]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4013      	ands	r3, r2
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	429a      	cmp	r2, r3
 8005440:	bf0c      	ite	eq
 8005442:	2301      	moveq	r3, #1
 8005444:	2300      	movne	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	461a      	mov	r2, r3
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	429a      	cmp	r2, r3
 800544e:	d0cd      	beq.n	80053ec <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005466:	e02c      	b.n	80054c2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 f871 	bl	8005554 <I2C_IsAcknowledgeFailed>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e02a      	b.n	80054d2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005482:	d01e      	beq.n	80054c2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005484:	f7fd fdfe 	bl	8003084 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	429a      	cmp	r2, r3
 8005492:	d302      	bcc.n	800549a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d113      	bne.n	80054c2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549e:	f043 0220 	orr.w	r2, r3, #32
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e007      	b.n	80054d2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d1cb      	bne.n	8005468 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054e6:	e028      	b.n	800553a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 f831 	bl	8005554 <I2C_IsAcknowledgeFailed>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e026      	b.n	800554a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fc:	f7fd fdc2 	bl	8003084 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	429a      	cmp	r2, r3
 800550a:	d302      	bcc.n	8005512 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d113      	bne.n	800553a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005516:	f043 0220 	orr.w	r2, r3, #32
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e007      	b.n	800554a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b20      	cmp	r3, #32
 8005546:	d1cf      	bne.n	80054e8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	2b10      	cmp	r3, #16
 800556c:	d151      	bne.n	8005612 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800556e:	e022      	b.n	80055b6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005576:	d01e      	beq.n	80055b6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005578:	f7fd fd84 	bl	8003084 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	429a      	cmp	r2, r3
 8005586:	d302      	bcc.n	800558e <I2C_IsAcknowledgeFailed+0x3a>
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d113      	bne.n	80055b6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005592:	f043 0220 	orr.w	r2, r3, #32
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e02e      	b.n	8005614 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d1d5      	bne.n	8005570 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2210      	movs	r2, #16
 80055ca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2220      	movs	r2, #32
 80055d2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f7ff febe 	bl	8005356 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6859      	ldr	r1, [r3, #4]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	4b0d      	ldr	r3, [pc, #52]	; (800561c <I2C_IsAcknowledgeFailed+0xc8>)
 80055e6:	400b      	ands	r3, r1
 80055e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ee:	f043 0204 	orr.w	r2, r3, #4
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	fe00e800 	.word	0xfe00e800

08005620 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	607b      	str	r3, [r7, #4]
 800562a:	460b      	mov	r3, r1
 800562c:	817b      	strh	r3, [r7, #10]
 800562e:	4613      	mov	r3, r2
 8005630:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	0d5b      	lsrs	r3, r3, #21
 800563c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005640:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <I2C_TransferConfig+0x58>)
 8005642:	430b      	orrs	r3, r1
 8005644:	43db      	mvns	r3, r3
 8005646:	ea02 0103 	and.w	r1, r2, r3
 800564a:	897b      	ldrh	r3, [r7, #10]
 800564c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005650:	7a7b      	ldrb	r3, [r7, #9]
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	431a      	orrs	r2, r3
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	431a      	orrs	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800566a:	bf00      	nop
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	03ff63ff 	.word	0x03ff63ff

0800567c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005690:	4a2a      	ldr	r2, [pc, #168]	; (800573c <I2C_Enable_IRQ+0xc0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800569a:	4a29      	ldr	r2, [pc, #164]	; (8005740 <I2C_Enable_IRQ+0xc4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d11d      	bne.n	80056dc <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80056a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	da03      	bge.n	80056b0 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80056ae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80056b0:	887b      	ldrh	r3, [r7, #2]
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d103      	bne.n	80056be <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80056bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80056be:	887b      	ldrh	r3, [r7, #2]
 80056c0:	2b20      	cmp	r3, #32
 80056c2:	d103      	bne.n	80056cc <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80056cc:	887b      	ldrh	r3, [r7, #2]
 80056ce:	2b40      	cmp	r3, #64	; 0x40
 80056d0:	d125      	bne.n	800571e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80056da:	e020      	b.n	800571e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80056dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	da03      	bge.n	80056ec <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80056ea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80056ec:	887b      	ldrh	r3, [r7, #2]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80056fc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80056fe:	887b      	ldrh	r3, [r7, #2]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800570e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005710:	887b      	ldrh	r3, [r7, #2]
 8005712:	2b20      	cmp	r3, #32
 8005714:	d103      	bne.n	800571e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f043 0320 	orr.w	r3, r3, #32
 800571c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6819      	ldr	r1, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	430a      	orrs	r2, r1
 800572c:	601a      	str	r2, [r3, #0]
}
 800572e:	bf00      	nop
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	08004731 	.word	0x08004731
 8005740:	08004917 	.word	0x08004917

08005744 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	460b      	mov	r3, r1
 800574e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005754:	887b      	ldrh	r3, [r7, #2]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00f      	beq.n	800577e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005764:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800576c:	b2db      	uxtb	r3, r3
 800576e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005772:	2b28      	cmp	r3, #40	; 0x28
 8005774:	d003      	beq.n	800577e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800577c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800577e:	887b      	ldrh	r3, [r7, #2]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00f      	beq.n	80057a8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800578e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005796:	b2db      	uxtb	r3, r3
 8005798:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800579c:	2b28      	cmp	r3, #40	; 0x28
 800579e:	d003      	beq.n	80057a8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80057a6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80057a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	da03      	bge.n	80057b8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80057b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80057b8:	887b      	ldrh	r3, [r7, #2]
 80057ba:	2b10      	cmp	r3, #16
 80057bc:	d103      	bne.n	80057c6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80057c4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80057c6:	887b      	ldrh	r3, [r7, #2]
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d103      	bne.n	80057d4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f043 0320 	orr.w	r3, r3, #32
 80057d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80057d4:	887b      	ldrh	r3, [r7, #2]
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d103      	bne.n	80057e2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057e0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6819      	ldr	r1, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	43da      	mvns	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	400a      	ands	r2, r1
 80057f2:	601a      	str	r2, [r3, #0]
}
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b20      	cmp	r3, #32
 8005814:	d138      	bne.n	8005888 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005820:	2302      	movs	r3, #2
 8005822:	e032      	b.n	800588a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2224      	movs	r2, #36	; 0x24
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0201 	bic.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005852:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6819      	ldr	r1, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	e000      	b.n	800588a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005888:	2302      	movs	r3, #2
  }
}
 800588a:	4618      	mov	r0, r3
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005896:	b480      	push	{r7}
 8005898:	b085      	sub	sp, #20
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d139      	bne.n	8005920 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058b6:	2302      	movs	r3, #2
 80058b8:	e033      	b.n	8005922 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2224      	movs	r2, #36	; 0x24
 80058c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0201 	bic.w	r2, r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	021b      	lsls	r3, r3, #8
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	e000      	b.n	8005922 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005920:	2302      	movs	r3, #2
  }
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800592e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005930:	b08f      	sub	sp, #60	; 0x3c
 8005932:	af0a      	add	r7, sp, #40	; 0x28
 8005934:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e116      	b.n	8005b6e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fd f922 	bl	8002ba4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2203      	movs	r2, #3
 8005964:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005970:	2b00      	cmp	r3, #0
 8005972:	d102      	bne.n	800597a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4618      	mov	r0, r3
 8005980:	f002 ff90 	bl	80088a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	603b      	str	r3, [r7, #0]
 800598a:	687e      	ldr	r6, [r7, #4]
 800598c:	466d      	mov	r5, sp
 800598e:	f106 0410 	add.w	r4, r6, #16
 8005992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800599a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800599e:	e885 0003 	stmia.w	r5, {r0, r1}
 80059a2:	1d33      	adds	r3, r6, #4
 80059a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059a6:	6838      	ldr	r0, [r7, #0]
 80059a8:	f002 ff2a 	bl	8008800 <USB_CoreInit>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2202      	movs	r2, #2
 80059b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e0d7      	b.n	8005b6e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2100      	movs	r1, #0
 80059c4:	4618      	mov	r0, r3
 80059c6:	f002 ff7e 	bl	80088c6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059ca:	2300      	movs	r3, #0
 80059cc:	73fb      	strb	r3, [r7, #15]
 80059ce:	e04a      	b.n	8005a66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059d0:	7bfa      	ldrb	r2, [r7, #15]
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	4613      	mov	r3, r2
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	1a9b      	subs	r3, r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	440b      	add	r3, r1
 80059de:	333d      	adds	r3, #61	; 0x3d
 80059e0:	2201      	movs	r2, #1
 80059e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059e4:	7bfa      	ldrb	r2, [r7, #15]
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	4613      	mov	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	1a9b      	subs	r3, r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	333c      	adds	r3, #60	; 0x3c
 80059f4:	7bfa      	ldrb	r2, [r7, #15]
 80059f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80059f8:	7bfa      	ldrb	r2, [r7, #15]
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
 80059fc:	b298      	uxth	r0, r3
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	4613      	mov	r3, r2
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	1a9b      	subs	r3, r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	3342      	adds	r3, #66	; 0x42
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a10:	7bfa      	ldrb	r2, [r7, #15]
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	1a9b      	subs	r3, r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	333f      	adds	r3, #63	; 0x3f
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a24:	7bfa      	ldrb	r2, [r7, #15]
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	1a9b      	subs	r3, r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	440b      	add	r3, r1
 8005a32:	3344      	adds	r3, #68	; 0x44
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a38:	7bfa      	ldrb	r2, [r7, #15]
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	3348      	adds	r3, #72	; 0x48
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a4c:	7bfa      	ldrb	r2, [r7, #15]
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	4613      	mov	r3, r2
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	3350      	adds	r3, #80	; 0x50
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	3301      	adds	r3, #1
 8005a64:	73fb      	strb	r3, [r7, #15]
 8005a66:	7bfa      	ldrb	r2, [r7, #15]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d3af      	bcc.n	80059d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a70:	2300      	movs	r3, #0
 8005a72:	73fb      	strb	r3, [r7, #15]
 8005a74:	e044      	b.n	8005b00 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a76:	7bfa      	ldrb	r2, [r7, #15]
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	1a9b      	subs	r3, r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	440b      	add	r3, r1
 8005a84:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a8c:	7bfa      	ldrb	r2, [r7, #15]
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	4613      	mov	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005a9e:	7bfa      	ldrb	r2, [r7, #15]
 8005aa0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005aa2:	7bfa      	ldrb	r2, [r7, #15]
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	1a9b      	subs	r3, r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	440b      	add	r3, r1
 8005ab0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ab8:	7bfa      	ldrb	r2, [r7, #15]
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	4613      	mov	r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	1a9b      	subs	r3, r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ace:	7bfa      	ldrb	r2, [r7, #15]
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ae4:	7bfa      	ldrb	r2, [r7, #15]
 8005ae6:	6879      	ldr	r1, [r7, #4]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	1a9b      	subs	r3, r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	440b      	add	r3, r1
 8005af2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	3301      	adds	r3, #1
 8005afe:	73fb      	strb	r3, [r7, #15]
 8005b00:	7bfa      	ldrb	r2, [r7, #15]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d3b5      	bcc.n	8005a76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	687e      	ldr	r6, [r7, #4]
 8005b12:	466d      	mov	r5, sp
 8005b14:	f106 0410 	add.w	r4, r6, #16
 8005b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b24:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b28:	1d33      	adds	r3, r6, #4
 8005b2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b2c:	6838      	ldr	r0, [r7, #0]
 8005b2e:	f002 fef5 	bl	800891c <USB_DevInit>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d005      	beq.n	8005b44 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e014      	b.n	8005b6e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d102      	bne.n	8005b62 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f80a 	bl	8005b76 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f003 f885 	bl	8008c76 <USB_DevDisconnect>

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b76 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b085      	sub	sp, #20
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba8:	f043 0303 	orr.w	r3, r3, #3
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bc4:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a04      	ldr	r2, [pc, #16]	; (8005bdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bce:	6013      	str	r3, [r2, #0]
}
 8005bd0:	bf00      	nop
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	40007000 	.word	0x40007000

08005be0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005be4:	4b04      	ldr	r3, [pc, #16]	; (8005bf8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40007000 	.word	0x40007000

08005bfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c0a:	d130      	bne.n	8005c6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c0c:	4b23      	ldr	r3, [pc, #140]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c18:	d038      	beq.n	8005c8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c1a:	4b20      	ldr	r3, [pc, #128]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c22:	4a1e      	ldr	r2, [pc, #120]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ca0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2232      	movs	r2, #50	; 0x32
 8005c30:	fb02 f303 	mul.w	r3, r2, r3
 8005c34:	4a1b      	ldr	r2, [pc, #108]	; (8005ca4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005c36:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3a:	0c9b      	lsrs	r3, r3, #18
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c40:	e002      	b.n	8005c48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	3b01      	subs	r3, #1
 8005c46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c48:	4b14      	ldr	r3, [pc, #80]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c54:	d102      	bne.n	8005c5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1f2      	bne.n	8005c42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c5c:	4b0f      	ldr	r3, [pc, #60]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c68:	d110      	bne.n	8005c8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e00f      	b.n	8005c8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c6e:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c7a:	d007      	beq.n	8005c8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c7c:	4b07      	ldr	r3, [pc, #28]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c84:	4a05      	ldr	r2, [pc, #20]	; (8005c9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40007000 	.word	0x40007000
 8005ca0:	20000000 	.word	0x20000000
 8005ca4:	431bde83 	.word	0x431bde83

08005ca8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	4a04      	ldr	r2, [pc, #16]	; (8005cc4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cb6:	6053      	str	r3, [r2, #4]
}
 8005cb8:	bf00      	nop
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40007000 	.word	0x40007000

08005cc8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005cd0:	f7fd f9d8 	bl	8003084 <HAL_GetTick>
 8005cd4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e063      	b.n	8005da8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10b      	bne.n	8005d04 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7fc fde9 	bl	80028cc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005cfa:	f241 3188 	movw	r1, #5000	; 0x1388
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f858 	bl	8005db4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	021a      	lsls	r2, r3, #8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	2120      	movs	r1, #32
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f850 	bl	8005dd0 <QSPI_WaitFlagStateUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005d34:	7afb      	ldrb	r3, [r7, #11]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d131      	bne.n	8005d9e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d44:	f023 0310 	bic.w	r3, r3, #16
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6852      	ldr	r2, [r2, #4]
 8005d4c:	0611      	lsls	r1, r2, #24
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	68d2      	ldr	r2, [r2, #12]
 8005d52:	4311      	orrs	r1, r2
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6812      	ldr	r2, [r2, #0]
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	4b13      	ldr	r3, [pc, #76]	; (8005db0 <HAL_QSPI_Init+0xe8>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6912      	ldr	r2, [r2, #16]
 8005d6a:	0411      	lsls	r1, r2, #16
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6952      	ldr	r2, [r2, #20]
 8005d70:	4311      	orrs	r1, r2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6992      	ldr	r2, [r2, #24]
 8005d76:	4311      	orrs	r1, r2
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6812      	ldr	r2, [r2, #0]
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005da6:	7afb      	ldrb	r3, [r7, #11]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	ffe0f8fe 	.word	0xffe0f8fe

08005db4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005de0:	e01a      	b.n	8005e18 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de8:	d016      	beq.n	8005e18 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dea:	f7fd f94b 	bl	8003084 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d302      	bcc.n	8005e00 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10b      	bne.n	8005e18 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2204      	movs	r2, #4
 8005e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0c:	f043 0201 	orr.w	r2, r3, #1
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e00e      	b.n	8005e36 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	4013      	ands	r3, r2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	bf14      	ite	ne
 8005e26:	2301      	movne	r3, #1
 8005e28:	2300      	moveq	r3, #0
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	79fb      	ldrb	r3, [r7, #7]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d1d6      	bne.n	8005de2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e3d4      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e52:	4ba1      	ldr	r3, [pc, #644]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 030c 	and.w	r3, r3, #12
 8005e5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e5c:	4b9e      	ldr	r3, [pc, #632]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0303 	and.w	r3, r3, #3
 8005e64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0310 	and.w	r3, r3, #16
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 80e4 	beq.w	800603c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d007      	beq.n	8005e8a <HAL_RCC_OscConfig+0x4a>
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b0c      	cmp	r3, #12
 8005e7e:	f040 808b 	bne.w	8005f98 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	f040 8087 	bne.w	8005f98 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e8a:	4b93      	ldr	r3, [pc, #588]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d005      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x62>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e3ac      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1a      	ldr	r2, [r3, #32]
 8005ea6:	4b8c      	ldr	r3, [pc, #560]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d004      	beq.n	8005ebc <HAL_RCC_OscConfig+0x7c>
 8005eb2:	4b89      	ldr	r3, [pc, #548]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eba:	e005      	b.n	8005ec8 <HAL_RCC_OscConfig+0x88>
 8005ebc:	4b86      	ldr	r3, [pc, #536]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ec2:	091b      	lsrs	r3, r3, #4
 8005ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d223      	bcs.n	8005f14 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fd3f 	bl	8006954 <RCC_SetFlashLatencyFromMSIRange>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e38d      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ee0:	4b7d      	ldr	r3, [pc, #500]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a7c      	ldr	r2, [pc, #496]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005ee6:	f043 0308 	orr.w	r3, r3, #8
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	4b7a      	ldr	r3, [pc, #488]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	4977      	ldr	r1, [pc, #476]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005efe:	4b76      	ldr	r3, [pc, #472]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	4972      	ldr	r1, [pc, #456]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	604b      	str	r3, [r1, #4]
 8005f12:	e025      	b.n	8005f60 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f14:	4b70      	ldr	r3, [pc, #448]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a6f      	ldr	r2, [pc, #444]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005f1a:	f043 0308 	orr.w	r3, r3, #8
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	4b6d      	ldr	r3, [pc, #436]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	496a      	ldr	r1, [pc, #424]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f32:	4b69      	ldr	r3, [pc, #420]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	021b      	lsls	r3, r3, #8
 8005f40:	4965      	ldr	r1, [pc, #404]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d109      	bne.n	8005f60 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f000 fcff 	bl	8006954 <RCC_SetFlashLatencyFromMSIRange>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e34d      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f60:	f000 fc36 	bl	80067d0 <HAL_RCC_GetSysClockFreq>
 8005f64:	4601      	mov	r1, r0
 8005f66:	4b5c      	ldr	r3, [pc, #368]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	091b      	lsrs	r3, r3, #4
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	4a5a      	ldr	r2, [pc, #360]	; (80060dc <HAL_RCC_OscConfig+0x29c>)
 8005f72:	5cd3      	ldrb	r3, [r2, r3]
 8005f74:	f003 031f 	and.w	r3, r3, #31
 8005f78:	fa21 f303 	lsr.w	r3, r1, r3
 8005f7c:	4a58      	ldr	r2, [pc, #352]	; (80060e0 <HAL_RCC_OscConfig+0x2a0>)
 8005f7e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005f80:	4b58      	ldr	r3, [pc, #352]	; (80060e4 <HAL_RCC_OscConfig+0x2a4>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fd f82d 	bl	8002fe4 <HAL_InitTick>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d052      	beq.n	800603a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	e331      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d032      	beq.n	8006006 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005fa0:	4b4d      	ldr	r3, [pc, #308]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a4c      	ldr	r2, [pc, #304]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005fa6:	f043 0301 	orr.w	r3, r3, #1
 8005faa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005fac:	f7fd f86a 	bl	8003084 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fb4:	f7fd f866 	bl	8003084 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e31a      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005fc6:	4b44      	ldr	r3, [pc, #272]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fd2:	4b41      	ldr	r3, [pc, #260]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a40      	ldr	r2, [pc, #256]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005fd8:	f043 0308 	orr.w	r3, r3, #8
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	4b3e      	ldr	r3, [pc, #248]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	493b      	ldr	r1, [pc, #236]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ff0:	4b39      	ldr	r3, [pc, #228]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	021b      	lsls	r3, r3, #8
 8005ffe:	4936      	ldr	r1, [pc, #216]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8006000:	4313      	orrs	r3, r2
 8006002:	604b      	str	r3, [r1, #4]
 8006004:	e01a      	b.n	800603c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006006:	4b34      	ldr	r3, [pc, #208]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a33      	ldr	r2, [pc, #204]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006012:	f7fd f837 	bl	8003084 <HAL_GetTick>
 8006016:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006018:	e008      	b.n	800602c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800601a:	f7fd f833 	bl	8003084 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d901      	bls.n	800602c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e2e7      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800602c:	4b2a      	ldr	r3, [pc, #168]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1f0      	bne.n	800601a <HAL_RCC_OscConfig+0x1da>
 8006038:	e000      	b.n	800603c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800603a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d074      	beq.n	8006132 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	2b08      	cmp	r3, #8
 800604c:	d005      	beq.n	800605a <HAL_RCC_OscConfig+0x21a>
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	2b0c      	cmp	r3, #12
 8006052:	d10e      	bne.n	8006072 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2b03      	cmp	r3, #3
 8006058:	d10b      	bne.n	8006072 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800605a:	4b1f      	ldr	r3, [pc, #124]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d064      	beq.n	8006130 <HAL_RCC_OscConfig+0x2f0>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d160      	bne.n	8006130 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e2c4      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800607a:	d106      	bne.n	800608a <HAL_RCC_OscConfig+0x24a>
 800607c:	4b16      	ldr	r3, [pc, #88]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a15      	ldr	r2, [pc, #84]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8006082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	e01d      	b.n	80060c6 <HAL_RCC_OscConfig+0x286>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006092:	d10c      	bne.n	80060ae <HAL_RCC_OscConfig+0x26e>
 8006094:	4b10      	ldr	r3, [pc, #64]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a0f      	ldr	r2, [pc, #60]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 800609a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	4b0d      	ldr	r3, [pc, #52]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a0c      	ldr	r2, [pc, #48]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 80060a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	e00b      	b.n	80060c6 <HAL_RCC_OscConfig+0x286>
 80060ae:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a09      	ldr	r2, [pc, #36]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 80060b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a06      	ldr	r2, [pc, #24]	; (80060d8 <HAL_RCC_OscConfig+0x298>)
 80060c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d01c      	beq.n	8006108 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ce:	f7fc ffd9 	bl	8003084 <HAL_GetTick>
 80060d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060d4:	e011      	b.n	80060fa <HAL_RCC_OscConfig+0x2ba>
 80060d6:	bf00      	nop
 80060d8:	40021000 	.word	0x40021000
 80060dc:	0800c55c 	.word	0x0800c55c
 80060e0:	20000000 	.word	0x20000000
 80060e4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060e8:	f7fc ffcc 	bl	8003084 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b64      	cmp	r3, #100	; 0x64
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e280      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060fa:	4baf      	ldr	r3, [pc, #700]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f0      	beq.n	80060e8 <HAL_RCC_OscConfig+0x2a8>
 8006106:	e014      	b.n	8006132 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006108:	f7fc ffbc 	bl	8003084 <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006110:	f7fc ffb8 	bl	8003084 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b64      	cmp	r3, #100	; 0x64
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e26c      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006122:	4ba5      	ldr	r3, [pc, #660]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1f0      	bne.n	8006110 <HAL_RCC_OscConfig+0x2d0>
 800612e:	e000      	b.n	8006132 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d060      	beq.n	8006200 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b04      	cmp	r3, #4
 8006142:	d005      	beq.n	8006150 <HAL_RCC_OscConfig+0x310>
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	2b0c      	cmp	r3, #12
 8006148:	d119      	bne.n	800617e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d116      	bne.n	800617e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006150:	4b99      	ldr	r3, [pc, #612]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006158:	2b00      	cmp	r3, #0
 800615a:	d005      	beq.n	8006168 <HAL_RCC_OscConfig+0x328>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e249      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006168:	4b93      	ldr	r3, [pc, #588]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	061b      	lsls	r3, r3, #24
 8006176:	4990      	ldr	r1, [pc, #576]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 8006178:	4313      	orrs	r3, r2
 800617a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800617c:	e040      	b.n	8006200 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d023      	beq.n	80061ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006186:	4b8c      	ldr	r3, [pc, #560]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a8b      	ldr	r2, [pc, #556]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 800618c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006192:	f7fc ff77 	bl	8003084 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800619a:	f7fc ff73 	bl	8003084 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e227      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80061ac:	4b82      	ldr	r3, [pc, #520]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0f0      	beq.n	800619a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061b8:	4b7f      	ldr	r3, [pc, #508]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	061b      	lsls	r3, r3, #24
 80061c6:	497c      	ldr	r1, [pc, #496]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	604b      	str	r3, [r1, #4]
 80061cc:	e018      	b.n	8006200 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061ce:	4b7a      	ldr	r3, [pc, #488]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a79      	ldr	r2, [pc, #484]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 80061d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061da:	f7fc ff53 	bl	8003084 <HAL_GetTick>
 80061de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061e0:	e008      	b.n	80061f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061e2:	f7fc ff4f 	bl	8003084 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e203      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061f4:	4b70      	ldr	r3, [pc, #448]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1f0      	bne.n	80061e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d03c      	beq.n	8006286 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d01c      	beq.n	800624e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006214:	4b68      	ldr	r3, [pc, #416]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 8006216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800621a:	4a67      	ldr	r2, [pc, #412]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 800621c:	f043 0301 	orr.w	r3, r3, #1
 8006220:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006224:	f7fc ff2e 	bl	8003084 <HAL_GetTick>
 8006228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800622c:	f7fc ff2a 	bl	8003084 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e1de      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800623e:	4b5e      	ldr	r3, [pc, #376]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 8006240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0ef      	beq.n	800622c <HAL_RCC_OscConfig+0x3ec>
 800624c:	e01b      	b.n	8006286 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800624e:	4b5a      	ldr	r3, [pc, #360]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 8006250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006254:	4a58      	ldr	r2, [pc, #352]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 8006256:	f023 0301 	bic.w	r3, r3, #1
 800625a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800625e:	f7fc ff11 	bl	8003084 <HAL_GetTick>
 8006262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006264:	e008      	b.n	8006278 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006266:	f7fc ff0d 	bl	8003084 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d901      	bls.n	8006278 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e1c1      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006278:	4b4f      	ldr	r3, [pc, #316]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 800627a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1ef      	bne.n	8006266 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0304 	and.w	r3, r3, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 80a6 	beq.w	80063e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006294:	2300      	movs	r3, #0
 8006296:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006298:	4b47      	ldr	r3, [pc, #284]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 800629a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10d      	bne.n	80062c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062a4:	4b44      	ldr	r3, [pc, #272]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 80062a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a8:	4a43      	ldr	r2, [pc, #268]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 80062aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ae:	6593      	str	r3, [r2, #88]	; 0x58
 80062b0:	4b41      	ldr	r3, [pc, #260]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 80062b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062bc:	2301      	movs	r3, #1
 80062be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062c0:	4b3e      	ldr	r3, [pc, #248]	; (80063bc <HAL_RCC_OscConfig+0x57c>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d118      	bne.n	80062fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062cc:	4b3b      	ldr	r3, [pc, #236]	; (80063bc <HAL_RCC_OscConfig+0x57c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a3a      	ldr	r2, [pc, #232]	; (80063bc <HAL_RCC_OscConfig+0x57c>)
 80062d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062d8:	f7fc fed4 	bl	8003084 <HAL_GetTick>
 80062dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062de:	e008      	b.n	80062f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062e0:	f7fc fed0 	bl	8003084 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e184      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062f2:	4b32      	ldr	r3, [pc, #200]	; (80063bc <HAL_RCC_OscConfig+0x57c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0f0      	beq.n	80062e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d108      	bne.n	8006318 <HAL_RCC_OscConfig+0x4d8>
 8006306:	4b2c      	ldr	r3, [pc, #176]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630c:	4a2a      	ldr	r2, [pc, #168]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 800630e:	f043 0301 	orr.w	r3, r3, #1
 8006312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006316:	e024      	b.n	8006362 <HAL_RCC_OscConfig+0x522>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b05      	cmp	r3, #5
 800631e:	d110      	bne.n	8006342 <HAL_RCC_OscConfig+0x502>
 8006320:	4b25      	ldr	r3, [pc, #148]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 8006322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006326:	4a24      	ldr	r2, [pc, #144]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 8006328:	f043 0304 	orr.w	r3, r3, #4
 800632c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006330:	4b21      	ldr	r3, [pc, #132]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 8006332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006336:	4a20      	ldr	r2, [pc, #128]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006340:	e00f      	b.n	8006362 <HAL_RCC_OscConfig+0x522>
 8006342:	4b1d      	ldr	r3, [pc, #116]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 8006344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006348:	4a1b      	ldr	r2, [pc, #108]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 800634a:	f023 0301 	bic.w	r3, r3, #1
 800634e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006352:	4b19      	ldr	r3, [pc, #100]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 8006354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006358:	4a17      	ldr	r2, [pc, #92]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 800635a:	f023 0304 	bic.w	r3, r3, #4
 800635e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d016      	beq.n	8006398 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636a:	f7fc fe8b 	bl	8003084 <HAL_GetTick>
 800636e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006370:	e00a      	b.n	8006388 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006372:	f7fc fe87 	bl	8003084 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006380:	4293      	cmp	r3, r2
 8006382:	d901      	bls.n	8006388 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e139      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006388:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <HAL_RCC_OscConfig+0x578>)
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0ed      	beq.n	8006372 <HAL_RCC_OscConfig+0x532>
 8006396:	e01a      	b.n	80063ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006398:	f7fc fe74 	bl	8003084 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800639e:	e00f      	b.n	80063c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063a0:	f7fc fe70 	bl	8003084 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d906      	bls.n	80063c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e122      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
 80063b6:	bf00      	nop
 80063b8:	40021000 	.word	0x40021000
 80063bc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063c0:	4b90      	ldr	r3, [pc, #576]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e8      	bne.n	80063a0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063ce:	7ffb      	ldrb	r3, [r7, #31]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d105      	bne.n	80063e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063d4:	4b8b      	ldr	r3, [pc, #556]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 80063d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d8:	4a8a      	ldr	r2, [pc, #552]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 80063da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 8108 	beq.w	80065fa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	f040 80d0 	bne.w	8006594 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80063f4:	4b83      	ldr	r3, [pc, #524]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f003 0203 	and.w	r2, r3, #3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	429a      	cmp	r2, r3
 8006406:	d130      	bne.n	800646a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006412:	3b01      	subs	r3, #1
 8006414:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006416:	429a      	cmp	r2, r3
 8006418:	d127      	bne.n	800646a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006424:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006426:	429a      	cmp	r2, r3
 8006428:	d11f      	bne.n	800646a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006434:	2a07      	cmp	r2, #7
 8006436:	bf14      	ite	ne
 8006438:	2201      	movne	r2, #1
 800643a:	2200      	moveq	r2, #0
 800643c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800643e:	4293      	cmp	r3, r2
 8006440:	d113      	bne.n	800646a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644c:	085b      	lsrs	r3, r3, #1
 800644e:	3b01      	subs	r3, #1
 8006450:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006452:	429a      	cmp	r2, r3
 8006454:	d109      	bne.n	800646a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006460:	085b      	lsrs	r3, r3, #1
 8006462:	3b01      	subs	r3, #1
 8006464:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006466:	429a      	cmp	r2, r3
 8006468:	d06e      	beq.n	8006548 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	2b0c      	cmp	r3, #12
 800646e:	d069      	beq.n	8006544 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006470:	4b64      	ldr	r3, [pc, #400]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d105      	bne.n	8006488 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800647c:	4b61      	ldr	r3, [pc, #388]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e0b7      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800648c:	4b5d      	ldr	r3, [pc, #372]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a5c      	ldr	r2, [pc, #368]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 8006492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006496:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006498:	f7fc fdf4 	bl	8003084 <HAL_GetTick>
 800649c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a0:	f7fc fdf0 	bl	8003084 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e0a4      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064b2:	4b54      	ldr	r3, [pc, #336]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1f0      	bne.n	80064a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064be:	4b51      	ldr	r3, [pc, #324]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	4b51      	ldr	r3, [pc, #324]	; (8006608 <HAL_RCC_OscConfig+0x7c8>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80064ce:	3a01      	subs	r2, #1
 80064d0:	0112      	lsls	r2, r2, #4
 80064d2:	4311      	orrs	r1, r2
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064d8:	0212      	lsls	r2, r2, #8
 80064da:	4311      	orrs	r1, r2
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80064e0:	0852      	lsrs	r2, r2, #1
 80064e2:	3a01      	subs	r2, #1
 80064e4:	0552      	lsls	r2, r2, #21
 80064e6:	4311      	orrs	r1, r2
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80064ec:	0852      	lsrs	r2, r2, #1
 80064ee:	3a01      	subs	r2, #1
 80064f0:	0652      	lsls	r2, r2, #25
 80064f2:	4311      	orrs	r1, r2
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064f8:	0912      	lsrs	r2, r2, #4
 80064fa:	0452      	lsls	r2, r2, #17
 80064fc:	430a      	orrs	r2, r1
 80064fe:	4941      	ldr	r1, [pc, #260]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 8006500:	4313      	orrs	r3, r2
 8006502:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006504:	4b3f      	ldr	r3, [pc, #252]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a3e      	ldr	r2, [pc, #248]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 800650a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800650e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006510:	4b3c      	ldr	r3, [pc, #240]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	4a3b      	ldr	r2, [pc, #236]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 8006516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800651a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800651c:	f7fc fdb2 	bl	8003084 <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006522:	e008      	b.n	8006536 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006524:	f7fc fdae 	bl	8003084 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e062      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006536:	4b33      	ldr	r3, [pc, #204]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0f0      	beq.n	8006524 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006542:	e05a      	b.n	80065fa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e059      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006548:	4b2e      	ldr	r3, [pc, #184]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d152      	bne.n	80065fa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006554:	4b2b      	ldr	r3, [pc, #172]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a2a      	ldr	r2, [pc, #168]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 800655a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800655e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006560:	4b28      	ldr	r3, [pc, #160]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	4a27      	ldr	r2, [pc, #156]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 8006566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800656a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800656c:	f7fc fd8a 	bl	8003084 <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006574:	f7fc fd86 	bl	8003084 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e03a      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006586:	4b1f      	ldr	r3, [pc, #124]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0f0      	beq.n	8006574 <HAL_RCC_OscConfig+0x734>
 8006592:	e032      	b.n	80065fa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b0c      	cmp	r3, #12
 8006598:	d02d      	beq.n	80065f6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800659a:	4b1a      	ldr	r3, [pc, #104]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a19      	ldr	r2, [pc, #100]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 80065a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065a4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80065a6:	4b17      	ldr	r3, [pc, #92]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d105      	bne.n	80065be <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80065b2:	4b14      	ldr	r3, [pc, #80]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	4a13      	ldr	r2, [pc, #76]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 80065b8:	f023 0303 	bic.w	r3, r3, #3
 80065bc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80065be:	4b11      	ldr	r3, [pc, #68]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	4a10      	ldr	r2, [pc, #64]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 80065c4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80065c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065cc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ce:	f7fc fd59 	bl	8003084 <HAL_GetTick>
 80065d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065d4:	e008      	b.n	80065e8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d6:	f7fc fd55 	bl	8003084 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e009      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065e8:	4b06      	ldr	r3, [pc, #24]	; (8006604 <HAL_RCC_OscConfig+0x7c4>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1f0      	bne.n	80065d6 <HAL_RCC_OscConfig+0x796>
 80065f4:	e001      	b.n	80065fa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e000      	b.n	80065fc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3720      	adds	r7, #32
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	40021000 	.word	0x40021000
 8006608:	f99d808c 	.word	0xf99d808c

0800660c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e0c8      	b.n	80067b2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006620:	4b66      	ldr	r3, [pc, #408]	; (80067bc <HAL_RCC_ClockConfig+0x1b0>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	d910      	bls.n	8006650 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800662e:	4b63      	ldr	r3, [pc, #396]	; (80067bc <HAL_RCC_ClockConfig+0x1b0>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f023 0207 	bic.w	r2, r3, #7
 8006636:	4961      	ldr	r1, [pc, #388]	; (80067bc <HAL_RCC_ClockConfig+0x1b0>)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	4313      	orrs	r3, r2
 800663c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800663e:	4b5f      	ldr	r3, [pc, #380]	; (80067bc <HAL_RCC_ClockConfig+0x1b0>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	429a      	cmp	r2, r3
 800664a:	d001      	beq.n	8006650 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e0b0      	b.n	80067b2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d04c      	beq.n	80066f6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b03      	cmp	r3, #3
 8006662:	d107      	bne.n	8006674 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006664:	4b56      	ldr	r3, [pc, #344]	; (80067c0 <HAL_RCC_ClockConfig+0x1b4>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d121      	bne.n	80066b4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e09e      	b.n	80067b2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b02      	cmp	r3, #2
 800667a:	d107      	bne.n	800668c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800667c:	4b50      	ldr	r3, [pc, #320]	; (80067c0 <HAL_RCC_ClockConfig+0x1b4>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d115      	bne.n	80066b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e092      	b.n	80067b2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d107      	bne.n	80066a4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006694:	4b4a      	ldr	r3, [pc, #296]	; (80067c0 <HAL_RCC_ClockConfig+0x1b4>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d109      	bne.n	80066b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e086      	b.n	80067b2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066a4:	4b46      	ldr	r3, [pc, #280]	; (80067c0 <HAL_RCC_ClockConfig+0x1b4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e07e      	b.n	80067b2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066b4:	4b42      	ldr	r3, [pc, #264]	; (80067c0 <HAL_RCC_ClockConfig+0x1b4>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f023 0203 	bic.w	r2, r3, #3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	493f      	ldr	r1, [pc, #252]	; (80067c0 <HAL_RCC_ClockConfig+0x1b4>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066c6:	f7fc fcdd 	bl	8003084 <HAL_GetTick>
 80066ca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066cc:	e00a      	b.n	80066e4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066ce:	f7fc fcd9 	bl	8003084 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066dc:	4293      	cmp	r3, r2
 80066de:	d901      	bls.n	80066e4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e066      	b.n	80067b2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066e4:	4b36      	ldr	r3, [pc, #216]	; (80067c0 <HAL_RCC_ClockConfig+0x1b4>)
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f003 020c 	and.w	r2, r3, #12
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d1eb      	bne.n	80066ce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d008      	beq.n	8006714 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006702:	4b2f      	ldr	r3, [pc, #188]	; (80067c0 <HAL_RCC_ClockConfig+0x1b4>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	492c      	ldr	r1, [pc, #176]	; (80067c0 <HAL_RCC_ClockConfig+0x1b4>)
 8006710:	4313      	orrs	r3, r2
 8006712:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006714:	4b29      	ldr	r3, [pc, #164]	; (80067bc <HAL_RCC_ClockConfig+0x1b0>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0307 	and.w	r3, r3, #7
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	429a      	cmp	r2, r3
 8006720:	d210      	bcs.n	8006744 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006722:	4b26      	ldr	r3, [pc, #152]	; (80067bc <HAL_RCC_ClockConfig+0x1b0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f023 0207 	bic.w	r2, r3, #7
 800672a:	4924      	ldr	r1, [pc, #144]	; (80067bc <HAL_RCC_ClockConfig+0x1b0>)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	4313      	orrs	r3, r2
 8006730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006732:	4b22      	ldr	r3, [pc, #136]	; (80067bc <HAL_RCC_ClockConfig+0x1b0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0307 	and.w	r3, r3, #7
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	429a      	cmp	r2, r3
 800673e:	d001      	beq.n	8006744 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e036      	b.n	80067b2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d008      	beq.n	8006762 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006750:	4b1b      	ldr	r3, [pc, #108]	; (80067c0 <HAL_RCC_ClockConfig+0x1b4>)
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	4918      	ldr	r1, [pc, #96]	; (80067c0 <HAL_RCC_ClockConfig+0x1b4>)
 800675e:	4313      	orrs	r3, r2
 8006760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800676e:	4b14      	ldr	r3, [pc, #80]	; (80067c0 <HAL_RCC_ClockConfig+0x1b4>)
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	4910      	ldr	r1, [pc, #64]	; (80067c0 <HAL_RCC_ClockConfig+0x1b4>)
 800677e:	4313      	orrs	r3, r2
 8006780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006782:	f000 f825 	bl	80067d0 <HAL_RCC_GetSysClockFreq>
 8006786:	4601      	mov	r1, r0
 8006788:	4b0d      	ldr	r3, [pc, #52]	; (80067c0 <HAL_RCC_ClockConfig+0x1b4>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	091b      	lsrs	r3, r3, #4
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	4a0c      	ldr	r2, [pc, #48]	; (80067c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006794:	5cd3      	ldrb	r3, [r2, r3]
 8006796:	f003 031f 	and.w	r3, r3, #31
 800679a:	fa21 f303 	lsr.w	r3, r1, r3
 800679e:	4a0a      	ldr	r2, [pc, #40]	; (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 80067a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80067a2:	4b0a      	ldr	r3, [pc, #40]	; (80067cc <HAL_RCC_ClockConfig+0x1c0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fc fc1c 	bl	8002fe4 <HAL_InitTick>
 80067ac:	4603      	mov	r3, r0
 80067ae:	72fb      	strb	r3, [r7, #11]

  return status;
 80067b0:	7afb      	ldrb	r3, [r7, #11]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40022000 	.word	0x40022000
 80067c0:	40021000 	.word	0x40021000
 80067c4:	0800c55c 	.word	0x0800c55c
 80067c8:	20000000 	.word	0x20000000
 80067cc:	20000004 	.word	0x20000004

080067d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b089      	sub	sp, #36	; 0x24
 80067d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	61fb      	str	r3, [r7, #28]
 80067da:	2300      	movs	r3, #0
 80067dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067de:	4b3d      	ldr	r3, [pc, #244]	; (80068d4 <HAL_RCC_GetSysClockFreq+0x104>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 030c 	and.w	r3, r3, #12
 80067e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067e8:	4b3a      	ldr	r3, [pc, #232]	; (80068d4 <HAL_RCC_GetSysClockFreq+0x104>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <HAL_RCC_GetSysClockFreq+0x34>
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2b0c      	cmp	r3, #12
 80067fc:	d121      	bne.n	8006842 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d11e      	bne.n	8006842 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006804:	4b33      	ldr	r3, [pc, #204]	; (80068d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d107      	bne.n	8006820 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006810:	4b30      	ldr	r3, [pc, #192]	; (80068d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006816:	0a1b      	lsrs	r3, r3, #8
 8006818:	f003 030f 	and.w	r3, r3, #15
 800681c:	61fb      	str	r3, [r7, #28]
 800681e:	e005      	b.n	800682c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006820:	4b2c      	ldr	r3, [pc, #176]	; (80068d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	091b      	lsrs	r3, r3, #4
 8006826:	f003 030f 	and.w	r3, r3, #15
 800682a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800682c:	4a2a      	ldr	r2, [pc, #168]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006834:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10d      	bne.n	8006858 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006840:	e00a      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b04      	cmp	r3, #4
 8006846:	d102      	bne.n	800684e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006848:	4b24      	ldr	r3, [pc, #144]	; (80068dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800684a:	61bb      	str	r3, [r7, #24]
 800684c:	e004      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2b08      	cmp	r3, #8
 8006852:	d101      	bne.n	8006858 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006854:	4b22      	ldr	r3, [pc, #136]	; (80068e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006856:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b0c      	cmp	r3, #12
 800685c:	d133      	bne.n	80068c6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800685e:	4b1d      	ldr	r3, [pc, #116]	; (80068d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d002      	beq.n	8006874 <HAL_RCC_GetSysClockFreq+0xa4>
 800686e:	2b03      	cmp	r3, #3
 8006870:	d003      	beq.n	800687a <HAL_RCC_GetSysClockFreq+0xaa>
 8006872:	e005      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006874:	4b19      	ldr	r3, [pc, #100]	; (80068dc <HAL_RCC_GetSysClockFreq+0x10c>)
 8006876:	617b      	str	r3, [r7, #20]
      break;
 8006878:	e005      	b.n	8006886 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800687a:	4b19      	ldr	r3, [pc, #100]	; (80068e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800687c:	617b      	str	r3, [r7, #20]
      break;
 800687e:	e002      	b.n	8006886 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	617b      	str	r3, [r7, #20]
      break;
 8006884:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006886:	4b13      	ldr	r3, [pc, #76]	; (80068d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	091b      	lsrs	r3, r3, #4
 800688c:	f003 0307 	and.w	r3, r3, #7
 8006890:	3301      	adds	r3, #1
 8006892:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006894:	4b0f      	ldr	r3, [pc, #60]	; (80068d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	0a1b      	lsrs	r3, r3, #8
 800689a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	fb02 f203 	mul.w	r2, r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068aa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80068ac:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <HAL_RCC_GetSysClockFreq+0x104>)
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	0e5b      	lsrs	r3, r3, #25
 80068b2:	f003 0303 	and.w	r3, r3, #3
 80068b6:	3301      	adds	r3, #1
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80068c6:	69bb      	ldr	r3, [r7, #24]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3724      	adds	r7, #36	; 0x24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	40021000 	.word	0x40021000
 80068d8:	0800c574 	.word	0x0800c574
 80068dc:	00f42400 	.word	0x00f42400
 80068e0:	007a1200 	.word	0x007a1200

080068e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068e8:	4b03      	ldr	r3, [pc, #12]	; (80068f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80068ea:	681b      	ldr	r3, [r3, #0]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	20000000 	.word	0x20000000

080068fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006900:	f7ff fff0 	bl	80068e4 <HAL_RCC_GetHCLKFreq>
 8006904:	4601      	mov	r1, r0
 8006906:	4b06      	ldr	r3, [pc, #24]	; (8006920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	4a04      	ldr	r2, [pc, #16]	; (8006924 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006912:	5cd3      	ldrb	r3, [r2, r3]
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	fa21 f303 	lsr.w	r3, r1, r3
}
 800691c:	4618      	mov	r0, r3
 800691e:	bd80      	pop	{r7, pc}
 8006920:	40021000 	.word	0x40021000
 8006924:	0800c56c 	.word	0x0800c56c

08006928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800692c:	f7ff ffda 	bl	80068e4 <HAL_RCC_GetHCLKFreq>
 8006930:	4601      	mov	r1, r0
 8006932:	4b06      	ldr	r3, [pc, #24]	; (800694c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	0adb      	lsrs	r3, r3, #11
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	4a04      	ldr	r2, [pc, #16]	; (8006950 <HAL_RCC_GetPCLK2Freq+0x28>)
 800693e:	5cd3      	ldrb	r3, [r2, r3]
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006948:	4618      	mov	r0, r3
 800694a:	bd80      	pop	{r7, pc}
 800694c:	40021000 	.word	0x40021000
 8006950:	0800c56c 	.word	0x0800c56c

08006954 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800695c:	2300      	movs	r3, #0
 800695e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006960:	4b2a      	ldr	r3, [pc, #168]	; (8006a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800696c:	f7ff f938 	bl	8005be0 <HAL_PWREx_GetVoltageRange>
 8006970:	6178      	str	r0, [r7, #20]
 8006972:	e014      	b.n	800699e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006974:	4b25      	ldr	r3, [pc, #148]	; (8006a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006978:	4a24      	ldr	r2, [pc, #144]	; (8006a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800697a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800697e:	6593      	str	r3, [r2, #88]	; 0x58
 8006980:	4b22      	ldr	r3, [pc, #136]	; (8006a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800698c:	f7ff f928 	bl	8005be0 <HAL_PWREx_GetVoltageRange>
 8006990:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006992:	4b1e      	ldr	r3, [pc, #120]	; (8006a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006996:	4a1d      	ldr	r2, [pc, #116]	; (8006a0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800699c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069a4:	d10b      	bne.n	80069be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b80      	cmp	r3, #128	; 0x80
 80069aa:	d919      	bls.n	80069e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2ba0      	cmp	r3, #160	; 0xa0
 80069b0:	d902      	bls.n	80069b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80069b2:	2302      	movs	r3, #2
 80069b4:	613b      	str	r3, [r7, #16]
 80069b6:	e013      	b.n	80069e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80069b8:	2301      	movs	r3, #1
 80069ba:	613b      	str	r3, [r7, #16]
 80069bc:	e010      	b.n	80069e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b80      	cmp	r3, #128	; 0x80
 80069c2:	d902      	bls.n	80069ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80069c4:	2303      	movs	r3, #3
 80069c6:	613b      	str	r3, [r7, #16]
 80069c8:	e00a      	b.n	80069e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b80      	cmp	r3, #128	; 0x80
 80069ce:	d102      	bne.n	80069d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80069d0:	2302      	movs	r3, #2
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	e004      	b.n	80069e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b70      	cmp	r3, #112	; 0x70
 80069da:	d101      	bne.n	80069e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80069dc:	2301      	movs	r3, #1
 80069de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80069e0:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f023 0207 	bic.w	r2, r3, #7
 80069e8:	4909      	ldr	r1, [pc, #36]	; (8006a10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80069f0:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d001      	beq.n	8006a02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e000      	b.n	8006a04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	40021000 	.word	0x40021000
 8006a10:	40022000 	.word	0x40022000

08006a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a20:	2300      	movs	r3, #0
 8006a22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d03f      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a38:	d01c      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a3e:	d802      	bhi.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00e      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006a44:	e01f      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006a46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a4a:	d003      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006a4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a50:	d01c      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006a52:	e018      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a54:	4b85      	ldr	r3, [pc, #532]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	4a84      	ldr	r2, [pc, #528]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a5e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006a60:	e015      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	3304      	adds	r3, #4
 8006a66:	2100      	movs	r1, #0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fac9 	bl	8007000 <RCCEx_PLLSAI1_Config>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006a72:	e00c      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3320      	adds	r3, #32
 8006a78:	2100      	movs	r1, #0
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 fbb0 	bl	80071e0 <RCCEx_PLLSAI2_Config>
 8006a80:	4603      	mov	r3, r0
 8006a82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006a84:	e003      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	74fb      	strb	r3, [r7, #19]
      break;
 8006a8a:	e000      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a8e:	7cfb      	ldrb	r3, [r7, #19]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10b      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a94:	4b75      	ldr	r3, [pc, #468]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aa2:	4972      	ldr	r1, [pc, #456]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006aaa:	e001      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aac:	7cfb      	ldrb	r3, [r7, #19]
 8006aae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d03f      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ac4:	d01c      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006ac6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006aca:	d802      	bhi.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00e      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0xda>
 8006ad0:	e01f      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006ad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ad6:	d003      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8006ad8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006adc:	d01c      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8006ade:	e018      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006ae0:	4b62      	ldr	r3, [pc, #392]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	4a61      	ldr	r2, [pc, #388]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006aec:	e015      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3304      	adds	r3, #4
 8006af2:	2100      	movs	r1, #0
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 fa83 	bl	8007000 <RCCEx_PLLSAI1_Config>
 8006afa:	4603      	mov	r3, r0
 8006afc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006afe:	e00c      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3320      	adds	r3, #32
 8006b04:	2100      	movs	r1, #0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fb6a 	bl	80071e0 <RCCEx_PLLSAI2_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006b10:	e003      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	74fb      	strb	r3, [r7, #19]
      break;
 8006b16:	e000      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b1a:	7cfb      	ldrb	r3, [r7, #19]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10b      	bne.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006b20:	4b52      	ldr	r3, [pc, #328]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b2e:	494f      	ldr	r1, [pc, #316]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006b36:	e001      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b38:	7cfb      	ldrb	r3, [r7, #19]
 8006b3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 80a0 	beq.w	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b4e:	4b47      	ldr	r3, [pc, #284]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e000      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00d      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b64:	4b41      	ldr	r3, [pc, #260]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b68:	4a40      	ldr	r2, [pc, #256]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8006b70:	4b3e      	ldr	r3, [pc, #248]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b78:	60bb      	str	r3, [r7, #8]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b80:	4b3b      	ldr	r3, [pc, #236]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a3a      	ldr	r2, [pc, #232]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b8c:	f7fc fa7a 	bl	8003084 <HAL_GetTick>
 8006b90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b92:	e009      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b94:	f7fc fa76 	bl	8003084 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d902      	bls.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	74fb      	strb	r3, [r7, #19]
        break;
 8006ba6:	e005      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ba8:	4b31      	ldr	r3, [pc, #196]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0ef      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8006bb4:	7cfb      	ldrb	r3, [r7, #19]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d15c      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006bba:	4b2c      	ldr	r3, [pc, #176]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01f      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d019      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006bd8:	4b24      	ldr	r3, [pc, #144]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006be4:	4b21      	ldr	r3, [pc, #132]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bea:	4a20      	ldr	r2, [pc, #128]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bf4:	4b1d      	ldr	r3, [pc, #116]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfa:	4a1c      	ldr	r2, [pc, #112]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c04:	4a19      	ldr	r2, [pc, #100]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d016      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c16:	f7fc fa35 	bl	8003084 <HAL_GetTick>
 8006c1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c1c:	e00b      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c1e:	f7fc fa31 	bl	8003084 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d902      	bls.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	74fb      	strb	r3, [r7, #19]
            break;
 8006c34:	e006      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c36:	4b0d      	ldr	r3, [pc, #52]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0ec      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8006c44:	7cfb      	ldrb	r3, [r7, #19]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10c      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c4a:	4b08      	ldr	r3, [pc, #32]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c5a:	4904      	ldr	r1, [pc, #16]	; (8006c6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006c62:	e009      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c64:	7cfb      	ldrb	r3, [r7, #19]
 8006c66:	74bb      	strb	r3, [r7, #18]
 8006c68:	e006      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8006c6a:	bf00      	nop
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c74:	7cfb      	ldrb	r3, [r7, #19]
 8006c76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c78:	7c7b      	ldrb	r3, [r7, #17]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d105      	bne.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c7e:	4b9e      	ldr	r3, [pc, #632]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c82:	4a9d      	ldr	r2, [pc, #628]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c96:	4b98      	ldr	r3, [pc, #608]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9c:	f023 0203 	bic.w	r2, r3, #3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca4:	4994      	ldr	r1, [pc, #592]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00a      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006cb8:	4b8f      	ldr	r3, [pc, #572]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cbe:	f023 020c 	bic.w	r2, r3, #12
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc6:	498c      	ldr	r1, [pc, #560]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006cda:	4b87      	ldr	r3, [pc, #540]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce8:	4983      	ldr	r1, [pc, #524]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0308 	and.w	r3, r3, #8
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006cfc:	4b7e      	ldr	r3, [pc, #504]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0a:	497b      	ldr	r1, [pc, #492]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0310 	and.w	r3, r3, #16
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006d1e:	4b76      	ldr	r3, [pc, #472]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d2c:	4972      	ldr	r1, [pc, #456]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0320 	and.w	r3, r3, #32
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d40:	4b6d      	ldr	r3, [pc, #436]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d4e:	496a      	ldr	r1, [pc, #424]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00a      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d62:	4b65      	ldr	r3, [pc, #404]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d70:	4961      	ldr	r1, [pc, #388]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00a      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d84:	4b5c      	ldr	r3, [pc, #368]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d92:	4959      	ldr	r1, [pc, #356]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00a      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006da6:	4b54      	ldr	r3, [pc, #336]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db4:	4950      	ldr	r1, [pc, #320]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00a      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006dc8:	4b4b      	ldr	r3, [pc, #300]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd6:	4948      	ldr	r1, [pc, #288]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006dea:	4b43      	ldr	r3, [pc, #268]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df8:	493f      	ldr	r1, [pc, #252]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d028      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e0c:	4b3a      	ldr	r3, [pc, #232]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e1a:	4937      	ldr	r1, [pc, #220]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e2a:	d106      	bne.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e2c:	4b32      	ldr	r3, [pc, #200]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	4a31      	ldr	r2, [pc, #196]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e36:	60d3      	str	r3, [r2, #12]
 8006e38:	e011      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e42:	d10c      	bne.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	3304      	adds	r3, #4
 8006e48:	2101      	movs	r1, #1
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 f8d8 	bl	8007000 <RCCEx_PLLSAI1_Config>
 8006e50:	4603      	mov	r3, r0
 8006e52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006e54:	7cfb      	ldrb	r3, [r7, #19]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8006e5a:	7cfb      	ldrb	r3, [r7, #19]
 8006e5c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d028      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006e6a:	4b23      	ldr	r3, [pc, #140]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e78:	491f      	ldr	r1, [pc, #124]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e88:	d106      	bne.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e8a:	4b1b      	ldr	r3, [pc, #108]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	4a1a      	ldr	r2, [pc, #104]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e94:	60d3      	str	r3, [r2, #12]
 8006e96:	e011      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ea0:	d10c      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 f8a9 	bl	8007000 <RCCEx_PLLSAI1_Config>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006eb2:	7cfb      	ldrb	r3, [r7, #19]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8006eb8:	7cfb      	ldrb	r3, [r7, #19]
 8006eba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d02b      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ec8:	4b0b      	ldr	r3, [pc, #44]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ece:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed6:	4908      	ldr	r1, [pc, #32]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ee6:	d109      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ee8:	4b03      	ldr	r3, [pc, #12]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	4a02      	ldr	r2, [pc, #8]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ef2:	60d3      	str	r3, [r2, #12]
 8006ef4:	e014      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006ef6:	bf00      	nop
 8006ef8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f04:	d10c      	bne.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 f877 	bl	8007000 <RCCEx_PLLSAI1_Config>
 8006f12:	4603      	mov	r3, r0
 8006f14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f16:	7cfb      	ldrb	r3, [r7, #19]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8006f1c:	7cfb      	ldrb	r3, [r7, #19]
 8006f1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d02f      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f2c:	4b2b      	ldr	r3, [pc, #172]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f3a:	4928      	ldr	r1, [pc, #160]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f4a:	d10d      	bne.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3304      	adds	r3, #4
 8006f50:	2102      	movs	r1, #2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 f854 	bl	8007000 <RCCEx_PLLSAI1_Config>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f5c:	7cfb      	ldrb	r3, [r7, #19]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d014      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8006f62:	7cfb      	ldrb	r3, [r7, #19]
 8006f64:	74bb      	strb	r3, [r7, #18]
 8006f66:	e011      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f70:	d10c      	bne.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3320      	adds	r3, #32
 8006f76:	2102      	movs	r1, #2
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 f931 	bl	80071e0 <RCCEx_PLLSAI2_Config>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f82:	7cfb      	ldrb	r3, [r7, #19]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8006f88:	7cfb      	ldrb	r3, [r7, #19]
 8006f8a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f98:	4b10      	ldr	r3, [pc, #64]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f9e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fa6:	490d      	ldr	r1, [pc, #52]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00b      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fba:	4b08      	ldr	r3, [pc, #32]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fca:	4904      	ldr	r1, [pc, #16]	; (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006fd2:	7cbb      	ldrb	r3, [r7, #18]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	40021000 	.word	0x40021000

08006fe0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006fe4:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a04      	ldr	r2, [pc, #16]	; (8006ffc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006fea:	f043 0304 	orr.w	r3, r3, #4
 8006fee:	6013      	str	r3, [r2, #0]
}
 8006ff0:	bf00      	nop
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	40021000 	.word	0x40021000

08007000 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800700e:	4b73      	ldr	r3, [pc, #460]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d018      	beq.n	800704c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800701a:	4b70      	ldr	r3, [pc, #448]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f003 0203 	and.w	r2, r3, #3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	429a      	cmp	r2, r3
 8007028:	d10d      	bne.n	8007046 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
       ||
 800702e:	2b00      	cmp	r3, #0
 8007030:	d009      	beq.n	8007046 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007032:	4b6a      	ldr	r3, [pc, #424]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	091b      	lsrs	r3, r3, #4
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
       ||
 8007042:	429a      	cmp	r2, r3
 8007044:	d044      	beq.n	80070d0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	73fb      	strb	r3, [r7, #15]
 800704a:	e041      	b.n	80070d0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b02      	cmp	r3, #2
 8007052:	d00c      	beq.n	800706e <RCCEx_PLLSAI1_Config+0x6e>
 8007054:	2b03      	cmp	r3, #3
 8007056:	d013      	beq.n	8007080 <RCCEx_PLLSAI1_Config+0x80>
 8007058:	2b01      	cmp	r3, #1
 800705a:	d120      	bne.n	800709e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800705c:	4b5f      	ldr	r3, [pc, #380]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d11d      	bne.n	80070a4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800706c:	e01a      	b.n	80070a4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800706e:	4b5b      	ldr	r3, [pc, #364]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007076:	2b00      	cmp	r3, #0
 8007078:	d116      	bne.n	80070a8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800707e:	e013      	b.n	80070a8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007080:	4b56      	ldr	r3, [pc, #344]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10f      	bne.n	80070ac <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800708c:	4b53      	ldr	r3, [pc, #332]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d109      	bne.n	80070ac <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800709c:	e006      	b.n	80070ac <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	73fb      	strb	r3, [r7, #15]
      break;
 80070a2:	e004      	b.n	80070ae <RCCEx_PLLSAI1_Config+0xae>
      break;
 80070a4:	bf00      	nop
 80070a6:	e002      	b.n	80070ae <RCCEx_PLLSAI1_Config+0xae>
      break;
 80070a8:	bf00      	nop
 80070aa:	e000      	b.n	80070ae <RCCEx_PLLSAI1_Config+0xae>
      break;
 80070ac:	bf00      	nop
    }

    if(status == HAL_OK)
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10d      	bne.n	80070d0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80070b4:	4b49      	ldr	r3, [pc, #292]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6819      	ldr	r1, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	430b      	orrs	r3, r1
 80070ca:	4944      	ldr	r1, [pc, #272]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d17d      	bne.n	80071d2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80070d6:	4b41      	ldr	r3, [pc, #260]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a40      	ldr	r2, [pc, #256]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80070dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070e2:	f7fb ffcf 	bl	8003084 <HAL_GetTick>
 80070e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80070e8:	e009      	b.n	80070fe <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070ea:	f7fb ffcb 	bl	8003084 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d902      	bls.n	80070fe <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	73fb      	strb	r3, [r7, #15]
        break;
 80070fc:	e005      	b.n	800710a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80070fe:	4b37      	ldr	r3, [pc, #220]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1ef      	bne.n	80070ea <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d160      	bne.n	80071d2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d111      	bne.n	800713a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007116:	4b31      	ldr	r3, [pc, #196]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800711e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	6892      	ldr	r2, [r2, #8]
 8007126:	0211      	lsls	r1, r2, #8
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	68d2      	ldr	r2, [r2, #12]
 800712c:	0912      	lsrs	r2, r2, #4
 800712e:	0452      	lsls	r2, r2, #17
 8007130:	430a      	orrs	r2, r1
 8007132:	492a      	ldr	r1, [pc, #168]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007134:	4313      	orrs	r3, r2
 8007136:	610b      	str	r3, [r1, #16]
 8007138:	e027      	b.n	800718a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d112      	bne.n	8007166 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007140:	4b26      	ldr	r3, [pc, #152]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007148:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	6892      	ldr	r2, [r2, #8]
 8007150:	0211      	lsls	r1, r2, #8
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	6912      	ldr	r2, [r2, #16]
 8007156:	0852      	lsrs	r2, r2, #1
 8007158:	3a01      	subs	r2, #1
 800715a:	0552      	lsls	r2, r2, #21
 800715c:	430a      	orrs	r2, r1
 800715e:	491f      	ldr	r1, [pc, #124]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007160:	4313      	orrs	r3, r2
 8007162:	610b      	str	r3, [r1, #16]
 8007164:	e011      	b.n	800718a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007166:	4b1d      	ldr	r3, [pc, #116]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800716e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6892      	ldr	r2, [r2, #8]
 8007176:	0211      	lsls	r1, r2, #8
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	6952      	ldr	r2, [r2, #20]
 800717c:	0852      	lsrs	r2, r2, #1
 800717e:	3a01      	subs	r2, #1
 8007180:	0652      	lsls	r2, r2, #25
 8007182:	430a      	orrs	r2, r1
 8007184:	4915      	ldr	r1, [pc, #84]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007186:	4313      	orrs	r3, r2
 8007188:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800718a:	4b14      	ldr	r3, [pc, #80]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a13      	ldr	r2, [pc, #76]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 8007190:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007194:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007196:	f7fb ff75 	bl	8003084 <HAL_GetTick>
 800719a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800719c:	e009      	b.n	80071b2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800719e:	f7fb ff71 	bl	8003084 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d902      	bls.n	80071b2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	73fb      	strb	r3, [r7, #15]
          break;
 80071b0:	e005      	b.n	80071be <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80071b2:	4b0a      	ldr	r3, [pc, #40]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0ef      	beq.n	800719e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80071be:	7bfb      	ldrb	r3, [r7, #15]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d106      	bne.n	80071d2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80071c4:	4b05      	ldr	r3, [pc, #20]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80071c6:	691a      	ldr	r2, [r3, #16]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	4903      	ldr	r1, [pc, #12]	; (80071dc <RCCEx_PLLSAI1_Config+0x1dc>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	40021000 	.word	0x40021000

080071e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80071ee:	4b68      	ldr	r3, [pc, #416]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d018      	beq.n	800722c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80071fa:	4b65      	ldr	r3, [pc, #404]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	f003 0203 	and.w	r2, r3, #3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d10d      	bne.n	8007226 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
       ||
 800720e:	2b00      	cmp	r3, #0
 8007210:	d009      	beq.n	8007226 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007212:	4b5f      	ldr	r3, [pc, #380]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	091b      	lsrs	r3, r3, #4
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
       ||
 8007222:	429a      	cmp	r2, r3
 8007224:	d044      	beq.n	80072b0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	73fb      	strb	r3, [r7, #15]
 800722a:	e041      	b.n	80072b0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b02      	cmp	r3, #2
 8007232:	d00c      	beq.n	800724e <RCCEx_PLLSAI2_Config+0x6e>
 8007234:	2b03      	cmp	r3, #3
 8007236:	d013      	beq.n	8007260 <RCCEx_PLLSAI2_Config+0x80>
 8007238:	2b01      	cmp	r3, #1
 800723a:	d120      	bne.n	800727e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800723c:	4b54      	ldr	r3, [pc, #336]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d11d      	bne.n	8007284 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800724c:	e01a      	b.n	8007284 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800724e:	4b50      	ldr	r3, [pc, #320]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007256:	2b00      	cmp	r3, #0
 8007258:	d116      	bne.n	8007288 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800725e:	e013      	b.n	8007288 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007260:	4b4b      	ldr	r3, [pc, #300]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10f      	bne.n	800728c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800726c:	4b48      	ldr	r3, [pc, #288]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d109      	bne.n	800728c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800727c:	e006      	b.n	800728c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	73fb      	strb	r3, [r7, #15]
      break;
 8007282:	e004      	b.n	800728e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007284:	bf00      	nop
 8007286:	e002      	b.n	800728e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007288:	bf00      	nop
 800728a:	e000      	b.n	800728e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800728c:	bf00      	nop
    }

    if(status == HAL_OK)
 800728e:	7bfb      	ldrb	r3, [r7, #15]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10d      	bne.n	80072b0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007294:	4b3e      	ldr	r3, [pc, #248]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6819      	ldr	r1, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	3b01      	subs	r3, #1
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	430b      	orrs	r3, r1
 80072aa:	4939      	ldr	r1, [pc, #228]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d167      	bne.n	8007386 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80072b6:	4b36      	ldr	r3, [pc, #216]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a35      	ldr	r2, [pc, #212]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 80072bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072c2:	f7fb fedf 	bl	8003084 <HAL_GetTick>
 80072c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80072c8:	e009      	b.n	80072de <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80072ca:	f7fb fedb 	bl	8003084 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d902      	bls.n	80072de <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	73fb      	strb	r3, [r7, #15]
        break;
 80072dc:	e005      	b.n	80072ea <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80072de:	4b2c      	ldr	r3, [pc, #176]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1ef      	bne.n	80072ca <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d14a      	bne.n	8007386 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d111      	bne.n	800731a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80072f6:	4b26      	ldr	r3, [pc, #152]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80072fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	6892      	ldr	r2, [r2, #8]
 8007306:	0211      	lsls	r1, r2, #8
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	68d2      	ldr	r2, [r2, #12]
 800730c:	0912      	lsrs	r2, r2, #4
 800730e:	0452      	lsls	r2, r2, #17
 8007310:	430a      	orrs	r2, r1
 8007312:	491f      	ldr	r1, [pc, #124]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007314:	4313      	orrs	r3, r2
 8007316:	614b      	str	r3, [r1, #20]
 8007318:	e011      	b.n	800733e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800731a:	4b1d      	ldr	r3, [pc, #116]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007322:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6892      	ldr	r2, [r2, #8]
 800732a:	0211      	lsls	r1, r2, #8
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	6912      	ldr	r2, [r2, #16]
 8007330:	0852      	lsrs	r2, r2, #1
 8007332:	3a01      	subs	r2, #1
 8007334:	0652      	lsls	r2, r2, #25
 8007336:	430a      	orrs	r2, r1
 8007338:	4915      	ldr	r1, [pc, #84]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 800733a:	4313      	orrs	r3, r2
 800733c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800733e:	4b14      	ldr	r3, [pc, #80]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a13      	ldr	r2, [pc, #76]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007348:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800734a:	f7fb fe9b 	bl	8003084 <HAL_GetTick>
 800734e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007350:	e009      	b.n	8007366 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007352:	f7fb fe97 	bl	8003084 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	2b02      	cmp	r3, #2
 800735e:	d902      	bls.n	8007366 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	73fb      	strb	r3, [r7, #15]
          break;
 8007364:	e005      	b.n	8007372 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007366:	4b0a      	ldr	r3, [pc, #40]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d0ef      	beq.n	8007352 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8007372:	7bfb      	ldrb	r3, [r7, #15]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d106      	bne.n	8007386 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007378:	4b05      	ldr	r3, [pc, #20]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 800737a:	695a      	ldr	r2, [r3, #20]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	4903      	ldr	r1, [pc, #12]	; (8007390 <RCCEx_PLLSAI2_Config+0x1b0>)
 8007382:	4313      	orrs	r3, r2
 8007384:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007386:	7bfb      	ldrb	r3, [r7, #15]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	40021000 	.word	0x40021000

08007394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e095      	b.n	80074d2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d108      	bne.n	80073c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073b6:	d009      	beq.n	80073cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	61da      	str	r2, [r3, #28]
 80073be:	e005      	b.n	80073cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d106      	bne.n	80073ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7fb fab4 	bl	8002954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007402:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800740c:	d902      	bls.n	8007414 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800740e:	2300      	movs	r3, #0
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	e002      	b.n	800741a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007418:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007422:	d007      	beq.n	8007434 <HAL_SPI_Init+0xa0>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800742c:	d002      	beq.n	8007434 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007444:	431a      	orrs	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	431a      	orrs	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800746c:	431a      	orrs	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007476:	ea42 0103 	orr.w	r1, r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	0c1b      	lsrs	r3, r3, #16
 8007490:	f003 0204 	and.w	r2, r3, #4
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	f003 0310 	and.w	r3, r3, #16
 800749c:	431a      	orrs	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a2:	f003 0308 	and.w	r3, r3, #8
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80074b0:	ea42 0103 	orr.w	r1, r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b082      	sub	sp, #8
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e040      	b.n	800756e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d106      	bne.n	8007502 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7fb fa6d 	bl	80029dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2224      	movs	r2, #36	; 0x24
 8007506:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0201 	bic.w	r2, r2, #1
 8007516:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fb77 	bl	8007c0c <UART_SetConfig>
 800751e:	4603      	mov	r3, r0
 8007520:	2b01      	cmp	r3, #1
 8007522:	d101      	bne.n	8007528 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e022      	b.n	800756e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fdf5 	bl	8008120 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007544:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007554:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f042 0201 	orr.w	r2, r2, #1
 8007564:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fe7c 	bl	8008264 <UART_CheckIdleState>
 800756c:	4603      	mov	r3, r0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	4613      	mov	r3, r2
 8007584:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800758a:	2b20      	cmp	r3, #32
 800758c:	d144      	bne.n	8007618 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d002      	beq.n	800759a <HAL_UART_Transmit_IT+0x22>
 8007594:	88fb      	ldrh	r3, [r7, #6]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e03d      	b.n	800761a <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d101      	bne.n	80075ac <HAL_UART_Transmit_IT+0x34>
 80075a8:	2302      	movs	r3, #2
 80075aa:	e036      	b.n	800761a <HAL_UART_Transmit_IT+0xa2>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	88fa      	ldrh	r2, [r7, #6]
 80075be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	88fa      	ldrh	r2, [r7, #6]
 80075c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2221      	movs	r2, #33	; 0x21
 80075da:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e4:	d107      	bne.n	80075f6 <HAL_UART_Transmit_IT+0x7e>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d103      	bne.n	80075f6 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	4a0d      	ldr	r2, [pc, #52]	; (8007628 <HAL_UART_Transmit_IT+0xb0>)
 80075f2:	665a      	str	r2, [r3, #100]	; 0x64
 80075f4:	e002      	b.n	80075fc <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	4a0c      	ldr	r2, [pc, #48]	; (800762c <HAL_UART_Transmit_IT+0xb4>)
 80075fa:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007612:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	e000      	b.n	800761a <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8007618:	2302      	movs	r3, #2
  }
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	080085eb 	.word	0x080085eb
 800762c:	08008577 	.word	0x08008577

08007630 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	4613      	mov	r3, r2
 800763c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007642:	2b20      	cmp	r3, #32
 8007644:	f040 808a 	bne.w	800775c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <HAL_UART_Receive_IT+0x24>
 800764e:	88fb      	ldrh	r3, [r7, #6]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e082      	b.n	800775e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <HAL_UART_Receive_IT+0x36>
 8007662:	2302      	movs	r3, #2
 8007664:	e07b      	b.n	800775e <HAL_UART_Receive_IT+0x12e>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	88fa      	ldrh	r2, [r7, #6]
 8007678:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	88fa      	ldrh	r2, [r7, #6]
 8007680:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007692:	d10e      	bne.n	80076b2 <HAL_UART_Receive_IT+0x82>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d105      	bne.n	80076a8 <HAL_UART_Receive_IT+0x78>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80076a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076a6:	e02d      	b.n	8007704 <HAL_UART_Receive_IT+0xd4>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	22ff      	movs	r2, #255	; 0xff
 80076ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076b0:	e028      	b.n	8007704 <HAL_UART_Receive_IT+0xd4>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10d      	bne.n	80076d6 <HAL_UART_Receive_IT+0xa6>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d104      	bne.n	80076cc <HAL_UART_Receive_IT+0x9c>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	22ff      	movs	r2, #255	; 0xff
 80076c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076ca:	e01b      	b.n	8007704 <HAL_UART_Receive_IT+0xd4>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	227f      	movs	r2, #127	; 0x7f
 80076d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076d4:	e016      	b.n	8007704 <HAL_UART_Receive_IT+0xd4>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076de:	d10d      	bne.n	80076fc <HAL_UART_Receive_IT+0xcc>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <HAL_UART_Receive_IT+0xc2>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	227f      	movs	r2, #127	; 0x7f
 80076ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076f0:	e008      	b.n	8007704 <HAL_UART_Receive_IT+0xd4>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	223f      	movs	r2, #63	; 0x3f
 80076f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076fa:	e003      	b.n	8007704 <HAL_UART_Receive_IT+0xd4>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2222      	movs	r2, #34	; 0x22
 800770e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689a      	ldr	r2, [r3, #8]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0201 	orr.w	r2, r2, #1
 800771e:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007728:	d107      	bne.n	800773a <HAL_UART_Receive_IT+0x10a>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d103      	bne.n	800773a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4a0d      	ldr	r2, [pc, #52]	; (800776c <HAL_UART_Receive_IT+0x13c>)
 8007736:	661a      	str	r2, [r3, #96]	; 0x60
 8007738:	e002      	b.n	8007740 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4a0c      	ldr	r2, [pc, #48]	; (8007770 <HAL_UART_Receive_IT+0x140>)
 800773e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007756:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	e000      	b.n	800775e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800775c:	2302      	movs	r3, #2
  }
}
 800775e:	4618      	mov	r0, r3
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	08008743 	.word	0x08008743
 8007770:	08008699 	.word	0x08008699

08007774 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	4613      	mov	r3, r2
 8007780:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007786:	2b20      	cmp	r3, #32
 8007788:	d16c      	bne.n	8007864 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d002      	beq.n	8007796 <HAL_UART_Receive_DMA+0x22>
 8007790:	88fb      	ldrh	r3, [r7, #6]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e065      	b.n	8007866 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <HAL_UART_Receive_DMA+0x34>
 80077a4:	2302      	movs	r3, #2
 80077a6:	e05e      	b.n	8007866 <HAL_UART_Receive_DMA+0xf2>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	88fa      	ldrh	r2, [r7, #6]
 80077ba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2222      	movs	r2, #34	; 0x22
 80077c8:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d02a      	beq.n	8007828 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077d6:	4a26      	ldr	r2, [pc, #152]	; (8007870 <HAL_UART_Receive_DMA+0xfc>)
 80077d8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077de:	4a25      	ldr	r2, [pc, #148]	; (8007874 <HAL_UART_Receive_DMA+0x100>)
 80077e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e6:	4a24      	ldr	r2, [pc, #144]	; (8007878 <HAL_UART_Receive_DMA+0x104>)
 80077e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ee:	2200      	movs	r2, #0
 80077f0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3324      	adds	r3, #36	; 0x24
 80077fc:	4619      	mov	r1, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007802:	461a      	mov	r2, r3
 8007804:	88fb      	ldrh	r3, [r7, #6]
 8007806:	f7fb ff41 	bl	800368c <HAL_DMA_Start_IT>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2210      	movs	r2, #16
 8007814:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2220      	movs	r2, #32
 8007822:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e01e      	b.n	8007866 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800783e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689a      	ldr	r2, [r3, #8]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f042 0201 	orr.w	r2, r2, #1
 800784e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800785e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	e000      	b.n	8007866 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8007864:	2302      	movs	r3, #2
  }
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	0800844f 	.word	0x0800844f
 8007874:	080084b7 	.word	0x080084b7
 8007878:	080084d3 	.word	0x080084d3

0800787c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007888:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800788e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800789a:	2b80      	cmp	r3, #128	; 0x80
 800789c:	d126      	bne.n	80078ec <HAL_UART_DMAStop+0x70>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2b21      	cmp	r3, #33	; 0x21
 80078a2:	d123      	bne.n	80078ec <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078b2:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d014      	beq.n	80078e6 <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fb ff43 	bl	800374c <HAL_DMA_Abort>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00c      	beq.n	80078e6 <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fc f877 	bl	80039c4 <HAL_DMA_GetError>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b20      	cmp	r3, #32
 80078da:	d104      	bne.n	80078e6 <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2210      	movs	r2, #16
 80078e0:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e031      	b.n	800794a <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fd7c 	bl	80083e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f6:	2b40      	cmp	r3, #64	; 0x40
 80078f8:	d126      	bne.n	8007948 <HAL_UART_DMAStop+0xcc>
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2b22      	cmp	r3, #34	; 0x22
 80078fe:	d123      	bne.n	8007948 <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689a      	ldr	r2, [r3, #8]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800790e:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007914:	2b00      	cmp	r3, #0
 8007916:	d014      	beq.n	8007942 <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800791c:	4618      	mov	r0, r3
 800791e:	f7fb ff15 	bl	800374c <HAL_DMA_Abort>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00c      	beq.n	8007942 <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800792c:	4618      	mov	r0, r3
 800792e:	f7fc f849 	bl	80039c4 <HAL_DMA_GetError>
 8007932:	4603      	mov	r3, r0
 8007934:	2b20      	cmp	r3, #32
 8007936:	d104      	bne.n	8007942 <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2210      	movs	r2, #16
 800793c:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e003      	b.n	800794a <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fd63 	bl	800840e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
	...

08007954 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b088      	sub	sp, #32
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	f640 030f 	movw	r3, #2063	; 0x80f
 800797a:	4013      	ands	r3, r2
 800797c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d113      	bne.n	80079ac <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00e      	beq.n	80079ac <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 8114 	beq.w	8007bca <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	4798      	blx	r3
      }
      return;
 80079aa:	e10e      	b.n	8007bca <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 80d6 	beq.w	8007b60 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d105      	bne.n	80079ca <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	4b86      	ldr	r3, [pc, #536]	; (8007bdc <HAL_UART_IRQHandler+0x288>)
 80079c2:	4013      	ands	r3, r2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 80cb 	beq.w	8007b60 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00e      	beq.n	80079f2 <HAL_UART_IRQHandler+0x9e>
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2201      	movs	r2, #1
 80079e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ea:	f043 0201 	orr.w	r2, r3, #1
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00e      	beq.n	8007a1a <HAL_UART_IRQHandler+0xc6>
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d009      	beq.n	8007a1a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a12:	f043 0204 	orr.w	r2, r3, #4
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00e      	beq.n	8007a42 <HAL_UART_IRQHandler+0xee>
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d009      	beq.n	8007a42 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2204      	movs	r2, #4
 8007a34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a3a:	f043 0202 	orr.w	r2, r3, #2
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	f003 0308 	and.w	r3, r3, #8
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d013      	beq.n	8007a74 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d104      	bne.n	8007a60 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d009      	beq.n	8007a74 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2208      	movs	r2, #8
 8007a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a6c:	f043 0208 	orr.w	r2, r3, #8
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00f      	beq.n	8007a9e <HAL_UART_IRQHandler+0x14a>
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00a      	beq.n	8007a9e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a96:	f043 0220 	orr.w	r2, r3, #32
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 8093 	beq.w	8007bce <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00c      	beq.n	8007acc <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	f003 0320 	and.w	r3, r3, #32
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d007      	beq.n	8007acc <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d003      	beq.n	8007acc <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ad0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007adc:	2b40      	cmp	r3, #64	; 0x40
 8007ade:	d004      	beq.n	8007aea <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d031      	beq.n	8007b4e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 fc8f 	bl	800840e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afa:	2b40      	cmp	r3, #64	; 0x40
 8007afc:	d123      	bne.n	8007b46 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b0c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d013      	beq.n	8007b3e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b1a:	4a31      	ldr	r2, [pc, #196]	; (8007be0 <HAL_UART_IRQHandler+0x28c>)
 8007b1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fb fe50 	bl	80037c8 <HAL_DMA_Abort_IT>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d016      	beq.n	8007b5c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007b38:	4610      	mov	r0, r2
 8007b3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b3c:	e00e      	b.n	8007b5c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f85a 	bl	8007bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b44:	e00a      	b.n	8007b5c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f856 	bl	8007bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b4c:	e006      	b.n	8007b5c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f852 	bl	8007bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007b5a:	e038      	b.n	8007bce <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b5c:	bf00      	nop
    return;
 8007b5e:	e036      	b.n	8007bce <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00d      	beq.n	8007b86 <HAL_UART_IRQHandler+0x232>
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d008      	beq.n	8007b86 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fe34 	bl	80087ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b84:	e026      	b.n	8007bd4 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00d      	beq.n	8007bac <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d008      	beq.n	8007bac <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d017      	beq.n	8007bd2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	4798      	blx	r3
    }
    return;
 8007baa:	e012      	b.n	8007bd2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00e      	beq.n	8007bd4 <HAL_UART_IRQHandler+0x280>
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d009      	beq.n	8007bd4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fd50 	bl	8008666 <UART_EndTransmit_IT>
    return;
 8007bc6:	bf00      	nop
 8007bc8:	e004      	b.n	8007bd4 <HAL_UART_IRQHandler+0x280>
      return;
 8007bca:	bf00      	nop
 8007bcc:	e002      	b.n	8007bd4 <HAL_UART_IRQHandler+0x280>
    return;
 8007bce:	bf00      	nop
 8007bd0:	e000      	b.n	8007bd4 <HAL_UART_IRQHandler+0x280>
    return;
 8007bd2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007bd4:	3720      	adds	r7, #32
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	04000120 	.word	0x04000120
 8007be0:	0800854b 	.word	0x0800854b

08007be4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c0c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007c10:	b088      	sub	sp, #32
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689a      	ldr	r2, [r3, #8]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	431a      	orrs	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	4bac      	ldr	r3, [pc, #688]	; (8007eec <UART_SetConfig+0x2e0>)
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6812      	ldr	r2, [r2, #0]
 8007c40:	69f9      	ldr	r1, [r7, #28]
 8007c42:	430b      	orrs	r3, r1
 8007c44:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68da      	ldr	r2, [r3, #12]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4aa2      	ldr	r2, [pc, #648]	; (8007ef0 <UART_SetConfig+0x2e4>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d004      	beq.n	8007c76 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	69fa      	ldr	r2, [r7, #28]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a99      	ldr	r2, [pc, #612]	; (8007ef4 <UART_SetConfig+0x2e8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d121      	bne.n	8007cd8 <UART_SetConfig+0xcc>
 8007c94:	4b98      	ldr	r3, [pc, #608]	; (8007ef8 <UART_SetConfig+0x2ec>)
 8007c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c9a:	f003 0303 	and.w	r3, r3, #3
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d816      	bhi.n	8007cd0 <UART_SetConfig+0xc4>
 8007ca2:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <UART_SetConfig+0x9c>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007cb9 	.word	0x08007cb9
 8007cac:	08007cc5 	.word	0x08007cc5
 8007cb0:	08007cbf 	.word	0x08007cbf
 8007cb4:	08007ccb 	.word	0x08007ccb
 8007cb8:	2301      	movs	r3, #1
 8007cba:	76fb      	strb	r3, [r7, #27]
 8007cbc:	e0e8      	b.n	8007e90 <UART_SetConfig+0x284>
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	76fb      	strb	r3, [r7, #27]
 8007cc2:	e0e5      	b.n	8007e90 <UART_SetConfig+0x284>
 8007cc4:	2304      	movs	r3, #4
 8007cc6:	76fb      	strb	r3, [r7, #27]
 8007cc8:	e0e2      	b.n	8007e90 <UART_SetConfig+0x284>
 8007cca:	2308      	movs	r3, #8
 8007ccc:	76fb      	strb	r3, [r7, #27]
 8007cce:	e0df      	b.n	8007e90 <UART_SetConfig+0x284>
 8007cd0:	2310      	movs	r3, #16
 8007cd2:	76fb      	strb	r3, [r7, #27]
 8007cd4:	bf00      	nop
 8007cd6:	e0db      	b.n	8007e90 <UART_SetConfig+0x284>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a87      	ldr	r2, [pc, #540]	; (8007efc <UART_SetConfig+0x2f0>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d134      	bne.n	8007d4c <UART_SetConfig+0x140>
 8007ce2:	4b85      	ldr	r3, [pc, #532]	; (8007ef8 <UART_SetConfig+0x2ec>)
 8007ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ce8:	f003 030c 	and.w	r3, r3, #12
 8007cec:	2b0c      	cmp	r3, #12
 8007cee:	d829      	bhi.n	8007d44 <UART_SetConfig+0x138>
 8007cf0:	a201      	add	r2, pc, #4	; (adr r2, 8007cf8 <UART_SetConfig+0xec>)
 8007cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf6:	bf00      	nop
 8007cf8:	08007d2d 	.word	0x08007d2d
 8007cfc:	08007d45 	.word	0x08007d45
 8007d00:	08007d45 	.word	0x08007d45
 8007d04:	08007d45 	.word	0x08007d45
 8007d08:	08007d39 	.word	0x08007d39
 8007d0c:	08007d45 	.word	0x08007d45
 8007d10:	08007d45 	.word	0x08007d45
 8007d14:	08007d45 	.word	0x08007d45
 8007d18:	08007d33 	.word	0x08007d33
 8007d1c:	08007d45 	.word	0x08007d45
 8007d20:	08007d45 	.word	0x08007d45
 8007d24:	08007d45 	.word	0x08007d45
 8007d28:	08007d3f 	.word	0x08007d3f
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	76fb      	strb	r3, [r7, #27]
 8007d30:	e0ae      	b.n	8007e90 <UART_SetConfig+0x284>
 8007d32:	2302      	movs	r3, #2
 8007d34:	76fb      	strb	r3, [r7, #27]
 8007d36:	e0ab      	b.n	8007e90 <UART_SetConfig+0x284>
 8007d38:	2304      	movs	r3, #4
 8007d3a:	76fb      	strb	r3, [r7, #27]
 8007d3c:	e0a8      	b.n	8007e90 <UART_SetConfig+0x284>
 8007d3e:	2308      	movs	r3, #8
 8007d40:	76fb      	strb	r3, [r7, #27]
 8007d42:	e0a5      	b.n	8007e90 <UART_SetConfig+0x284>
 8007d44:	2310      	movs	r3, #16
 8007d46:	76fb      	strb	r3, [r7, #27]
 8007d48:	bf00      	nop
 8007d4a:	e0a1      	b.n	8007e90 <UART_SetConfig+0x284>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a6b      	ldr	r2, [pc, #428]	; (8007f00 <UART_SetConfig+0x2f4>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d120      	bne.n	8007d98 <UART_SetConfig+0x18c>
 8007d56:	4b68      	ldr	r3, [pc, #416]	; (8007ef8 <UART_SetConfig+0x2ec>)
 8007d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d60:	2b10      	cmp	r3, #16
 8007d62:	d00f      	beq.n	8007d84 <UART_SetConfig+0x178>
 8007d64:	2b10      	cmp	r3, #16
 8007d66:	d802      	bhi.n	8007d6e <UART_SetConfig+0x162>
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d005      	beq.n	8007d78 <UART_SetConfig+0x16c>
 8007d6c:	e010      	b.n	8007d90 <UART_SetConfig+0x184>
 8007d6e:	2b20      	cmp	r3, #32
 8007d70:	d005      	beq.n	8007d7e <UART_SetConfig+0x172>
 8007d72:	2b30      	cmp	r3, #48	; 0x30
 8007d74:	d009      	beq.n	8007d8a <UART_SetConfig+0x17e>
 8007d76:	e00b      	b.n	8007d90 <UART_SetConfig+0x184>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	76fb      	strb	r3, [r7, #27]
 8007d7c:	e088      	b.n	8007e90 <UART_SetConfig+0x284>
 8007d7e:	2302      	movs	r3, #2
 8007d80:	76fb      	strb	r3, [r7, #27]
 8007d82:	e085      	b.n	8007e90 <UART_SetConfig+0x284>
 8007d84:	2304      	movs	r3, #4
 8007d86:	76fb      	strb	r3, [r7, #27]
 8007d88:	e082      	b.n	8007e90 <UART_SetConfig+0x284>
 8007d8a:	2308      	movs	r3, #8
 8007d8c:	76fb      	strb	r3, [r7, #27]
 8007d8e:	e07f      	b.n	8007e90 <UART_SetConfig+0x284>
 8007d90:	2310      	movs	r3, #16
 8007d92:	76fb      	strb	r3, [r7, #27]
 8007d94:	bf00      	nop
 8007d96:	e07b      	b.n	8007e90 <UART_SetConfig+0x284>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a59      	ldr	r2, [pc, #356]	; (8007f04 <UART_SetConfig+0x2f8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d120      	bne.n	8007de4 <UART_SetConfig+0x1d8>
 8007da2:	4b55      	ldr	r3, [pc, #340]	; (8007ef8 <UART_SetConfig+0x2ec>)
 8007da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007dac:	2b40      	cmp	r3, #64	; 0x40
 8007dae:	d00f      	beq.n	8007dd0 <UART_SetConfig+0x1c4>
 8007db0:	2b40      	cmp	r3, #64	; 0x40
 8007db2:	d802      	bhi.n	8007dba <UART_SetConfig+0x1ae>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d005      	beq.n	8007dc4 <UART_SetConfig+0x1b8>
 8007db8:	e010      	b.n	8007ddc <UART_SetConfig+0x1d0>
 8007dba:	2b80      	cmp	r3, #128	; 0x80
 8007dbc:	d005      	beq.n	8007dca <UART_SetConfig+0x1be>
 8007dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8007dc0:	d009      	beq.n	8007dd6 <UART_SetConfig+0x1ca>
 8007dc2:	e00b      	b.n	8007ddc <UART_SetConfig+0x1d0>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	76fb      	strb	r3, [r7, #27]
 8007dc8:	e062      	b.n	8007e90 <UART_SetConfig+0x284>
 8007dca:	2302      	movs	r3, #2
 8007dcc:	76fb      	strb	r3, [r7, #27]
 8007dce:	e05f      	b.n	8007e90 <UART_SetConfig+0x284>
 8007dd0:	2304      	movs	r3, #4
 8007dd2:	76fb      	strb	r3, [r7, #27]
 8007dd4:	e05c      	b.n	8007e90 <UART_SetConfig+0x284>
 8007dd6:	2308      	movs	r3, #8
 8007dd8:	76fb      	strb	r3, [r7, #27]
 8007dda:	e059      	b.n	8007e90 <UART_SetConfig+0x284>
 8007ddc:	2310      	movs	r3, #16
 8007dde:	76fb      	strb	r3, [r7, #27]
 8007de0:	bf00      	nop
 8007de2:	e055      	b.n	8007e90 <UART_SetConfig+0x284>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a47      	ldr	r2, [pc, #284]	; (8007f08 <UART_SetConfig+0x2fc>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d124      	bne.n	8007e38 <UART_SetConfig+0x22c>
 8007dee:	4b42      	ldr	r3, [pc, #264]	; (8007ef8 <UART_SetConfig+0x2ec>)
 8007df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfc:	d012      	beq.n	8007e24 <UART_SetConfig+0x218>
 8007dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e02:	d802      	bhi.n	8007e0a <UART_SetConfig+0x1fe>
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d007      	beq.n	8007e18 <UART_SetConfig+0x20c>
 8007e08:	e012      	b.n	8007e30 <UART_SetConfig+0x224>
 8007e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e0e:	d006      	beq.n	8007e1e <UART_SetConfig+0x212>
 8007e10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e14:	d009      	beq.n	8007e2a <UART_SetConfig+0x21e>
 8007e16:	e00b      	b.n	8007e30 <UART_SetConfig+0x224>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	76fb      	strb	r3, [r7, #27]
 8007e1c:	e038      	b.n	8007e90 <UART_SetConfig+0x284>
 8007e1e:	2302      	movs	r3, #2
 8007e20:	76fb      	strb	r3, [r7, #27]
 8007e22:	e035      	b.n	8007e90 <UART_SetConfig+0x284>
 8007e24:	2304      	movs	r3, #4
 8007e26:	76fb      	strb	r3, [r7, #27]
 8007e28:	e032      	b.n	8007e90 <UART_SetConfig+0x284>
 8007e2a:	2308      	movs	r3, #8
 8007e2c:	76fb      	strb	r3, [r7, #27]
 8007e2e:	e02f      	b.n	8007e90 <UART_SetConfig+0x284>
 8007e30:	2310      	movs	r3, #16
 8007e32:	76fb      	strb	r3, [r7, #27]
 8007e34:	bf00      	nop
 8007e36:	e02b      	b.n	8007e90 <UART_SetConfig+0x284>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a2c      	ldr	r2, [pc, #176]	; (8007ef0 <UART_SetConfig+0x2e4>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d124      	bne.n	8007e8c <UART_SetConfig+0x280>
 8007e42:	4b2d      	ldr	r3, [pc, #180]	; (8007ef8 <UART_SetConfig+0x2ec>)
 8007e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e50:	d012      	beq.n	8007e78 <UART_SetConfig+0x26c>
 8007e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e56:	d802      	bhi.n	8007e5e <UART_SetConfig+0x252>
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d007      	beq.n	8007e6c <UART_SetConfig+0x260>
 8007e5c:	e012      	b.n	8007e84 <UART_SetConfig+0x278>
 8007e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e62:	d006      	beq.n	8007e72 <UART_SetConfig+0x266>
 8007e64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e68:	d009      	beq.n	8007e7e <UART_SetConfig+0x272>
 8007e6a:	e00b      	b.n	8007e84 <UART_SetConfig+0x278>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	76fb      	strb	r3, [r7, #27]
 8007e70:	e00e      	b.n	8007e90 <UART_SetConfig+0x284>
 8007e72:	2302      	movs	r3, #2
 8007e74:	76fb      	strb	r3, [r7, #27]
 8007e76:	e00b      	b.n	8007e90 <UART_SetConfig+0x284>
 8007e78:	2304      	movs	r3, #4
 8007e7a:	76fb      	strb	r3, [r7, #27]
 8007e7c:	e008      	b.n	8007e90 <UART_SetConfig+0x284>
 8007e7e:	2308      	movs	r3, #8
 8007e80:	76fb      	strb	r3, [r7, #27]
 8007e82:	e005      	b.n	8007e90 <UART_SetConfig+0x284>
 8007e84:	2310      	movs	r3, #16
 8007e86:	76fb      	strb	r3, [r7, #27]
 8007e88:	bf00      	nop
 8007e8a:	e001      	b.n	8007e90 <UART_SetConfig+0x284>
 8007e8c:	2310      	movs	r3, #16
 8007e8e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a16      	ldr	r2, [pc, #88]	; (8007ef0 <UART_SetConfig+0x2e4>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	f040 8087 	bne.w	8007faa <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e9c:	7efb      	ldrb	r3, [r7, #27]
 8007e9e:	2b08      	cmp	r3, #8
 8007ea0:	d836      	bhi.n	8007f10 <UART_SetConfig+0x304>
 8007ea2:	a201      	add	r2, pc, #4	; (adr r2, 8007ea8 <UART_SetConfig+0x29c>)
 8007ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea8:	08007ecd 	.word	0x08007ecd
 8007eac:	08007f11 	.word	0x08007f11
 8007eb0:	08007ed5 	.word	0x08007ed5
 8007eb4:	08007f11 	.word	0x08007f11
 8007eb8:	08007edb 	.word	0x08007edb
 8007ebc:	08007f11 	.word	0x08007f11
 8007ec0:	08007f11 	.word	0x08007f11
 8007ec4:	08007f11 	.word	0x08007f11
 8007ec8:	08007ee3 	.word	0x08007ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ecc:	f7fe fd16 	bl	80068fc <HAL_RCC_GetPCLK1Freq>
 8007ed0:	6178      	str	r0, [r7, #20]
        break;
 8007ed2:	e022      	b.n	8007f1a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ed4:	4b0d      	ldr	r3, [pc, #52]	; (8007f0c <UART_SetConfig+0x300>)
 8007ed6:	617b      	str	r3, [r7, #20]
        break;
 8007ed8:	e01f      	b.n	8007f1a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eda:	f7fe fc79 	bl	80067d0 <HAL_RCC_GetSysClockFreq>
 8007ede:	6178      	str	r0, [r7, #20]
        break;
 8007ee0:	e01b      	b.n	8007f1a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ee6:	617b      	str	r3, [r7, #20]
        break;
 8007ee8:	e017      	b.n	8007f1a <UART_SetConfig+0x30e>
 8007eea:	bf00      	nop
 8007eec:	efff69f3 	.word	0xefff69f3
 8007ef0:	40008000 	.word	0x40008000
 8007ef4:	40013800 	.word	0x40013800
 8007ef8:	40021000 	.word	0x40021000
 8007efc:	40004400 	.word	0x40004400
 8007f00:	40004800 	.word	0x40004800
 8007f04:	40004c00 	.word	0x40004c00
 8007f08:	40005000 	.word	0x40005000
 8007f0c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	76bb      	strb	r3, [r7, #26]
        break;
 8007f18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f000 80f1 	beq.w	8008104 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	4613      	mov	r3, r2
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	4413      	add	r3, r2
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d305      	bcc.n	8007f3e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d902      	bls.n	8007f44 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	76bb      	strb	r3, [r7, #26]
 8007f42:	e0df      	b.n	8008104 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	4619      	mov	r1, r3
 8007f48:	f04f 0200 	mov.w	r2, #0
 8007f4c:	f04f 0300 	mov.w	r3, #0
 8007f50:	f04f 0400 	mov.w	r4, #0
 8007f54:	0214      	lsls	r4, r2, #8
 8007f56:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007f5a:	020b      	lsls	r3, r1, #8
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	6852      	ldr	r2, [r2, #4]
 8007f60:	0852      	lsrs	r2, r2, #1
 8007f62:	4611      	mov	r1, r2
 8007f64:	f04f 0200 	mov.w	r2, #0
 8007f68:	eb13 0b01 	adds.w	fp, r3, r1
 8007f6c:	eb44 0c02 	adc.w	ip, r4, r2
 8007f70:	4658      	mov	r0, fp
 8007f72:	4661      	mov	r1, ip
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	f04f 0400 	mov.w	r4, #0
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	4623      	mov	r3, r4
 8007f80:	f7f8 fe92 	bl	8000ca8 <__aeabi_uldivmod>
 8007f84:	4603      	mov	r3, r0
 8007f86:	460c      	mov	r4, r1
 8007f88:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f90:	d308      	bcc.n	8007fa4 <UART_SetConfig+0x398>
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f98:	d204      	bcs.n	8007fa4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	60da      	str	r2, [r3, #12]
 8007fa2:	e0af      	b.n	8008104 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	76bb      	strb	r3, [r7, #26]
 8007fa8:	e0ac      	b.n	8008104 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fb2:	d15b      	bne.n	800806c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8007fb4:	7efb      	ldrb	r3, [r7, #27]
 8007fb6:	2b08      	cmp	r3, #8
 8007fb8:	d827      	bhi.n	800800a <UART_SetConfig+0x3fe>
 8007fba:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <UART_SetConfig+0x3b4>)
 8007fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc0:	08007fe5 	.word	0x08007fe5
 8007fc4:	08007fed 	.word	0x08007fed
 8007fc8:	08007ff5 	.word	0x08007ff5
 8007fcc:	0800800b 	.word	0x0800800b
 8007fd0:	08007ffb 	.word	0x08007ffb
 8007fd4:	0800800b 	.word	0x0800800b
 8007fd8:	0800800b 	.word	0x0800800b
 8007fdc:	0800800b 	.word	0x0800800b
 8007fe0:	08008003 	.word	0x08008003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fe4:	f7fe fc8a 	bl	80068fc <HAL_RCC_GetPCLK1Freq>
 8007fe8:	6178      	str	r0, [r7, #20]
        break;
 8007fea:	e013      	b.n	8008014 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fec:	f7fe fc9c 	bl	8006928 <HAL_RCC_GetPCLK2Freq>
 8007ff0:	6178      	str	r0, [r7, #20]
        break;
 8007ff2:	e00f      	b.n	8008014 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ff4:	4b49      	ldr	r3, [pc, #292]	; (800811c <UART_SetConfig+0x510>)
 8007ff6:	617b      	str	r3, [r7, #20]
        break;
 8007ff8:	e00c      	b.n	8008014 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ffa:	f7fe fbe9 	bl	80067d0 <HAL_RCC_GetSysClockFreq>
 8007ffe:	6178      	str	r0, [r7, #20]
        break;
 8008000:	e008      	b.n	8008014 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008006:	617b      	str	r3, [r7, #20]
        break;
 8008008:	e004      	b.n	8008014 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	76bb      	strb	r3, [r7, #26]
        break;
 8008012:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d074      	beq.n	8008104 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	005a      	lsls	r2, r3, #1
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	085b      	lsrs	r3, r3, #1
 8008024:	441a      	add	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	fbb2 f3f3 	udiv	r3, r2, r3
 800802e:	b29b      	uxth	r3, r3
 8008030:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	2b0f      	cmp	r3, #15
 8008036:	d916      	bls.n	8008066 <UART_SetConfig+0x45a>
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800803e:	d212      	bcs.n	8008066 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	b29b      	uxth	r3, r3
 8008044:	f023 030f 	bic.w	r3, r3, #15
 8008048:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	085b      	lsrs	r3, r3, #1
 800804e:	b29b      	uxth	r3, r3
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	b29a      	uxth	r2, r3
 8008056:	89fb      	ldrh	r3, [r7, #14]
 8008058:	4313      	orrs	r3, r2
 800805a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	89fa      	ldrh	r2, [r7, #14]
 8008062:	60da      	str	r2, [r3, #12]
 8008064:	e04e      	b.n	8008104 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	76bb      	strb	r3, [r7, #26]
 800806a:	e04b      	b.n	8008104 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800806c:	7efb      	ldrb	r3, [r7, #27]
 800806e:	2b08      	cmp	r3, #8
 8008070:	d827      	bhi.n	80080c2 <UART_SetConfig+0x4b6>
 8008072:	a201      	add	r2, pc, #4	; (adr r2, 8008078 <UART_SetConfig+0x46c>)
 8008074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008078:	0800809d 	.word	0x0800809d
 800807c:	080080a5 	.word	0x080080a5
 8008080:	080080ad 	.word	0x080080ad
 8008084:	080080c3 	.word	0x080080c3
 8008088:	080080b3 	.word	0x080080b3
 800808c:	080080c3 	.word	0x080080c3
 8008090:	080080c3 	.word	0x080080c3
 8008094:	080080c3 	.word	0x080080c3
 8008098:	080080bb 	.word	0x080080bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800809c:	f7fe fc2e 	bl	80068fc <HAL_RCC_GetPCLK1Freq>
 80080a0:	6178      	str	r0, [r7, #20]
        break;
 80080a2:	e013      	b.n	80080cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080a4:	f7fe fc40 	bl	8006928 <HAL_RCC_GetPCLK2Freq>
 80080a8:	6178      	str	r0, [r7, #20]
        break;
 80080aa:	e00f      	b.n	80080cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080ac:	4b1b      	ldr	r3, [pc, #108]	; (800811c <UART_SetConfig+0x510>)
 80080ae:	617b      	str	r3, [r7, #20]
        break;
 80080b0:	e00c      	b.n	80080cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080b2:	f7fe fb8d 	bl	80067d0 <HAL_RCC_GetSysClockFreq>
 80080b6:	6178      	str	r0, [r7, #20]
        break;
 80080b8:	e008      	b.n	80080cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080be:	617b      	str	r3, [r7, #20]
        break;
 80080c0:	e004      	b.n	80080cc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	76bb      	strb	r3, [r7, #26]
        break;
 80080ca:	bf00      	nop
    }

    if (pclk != 0U)
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d018      	beq.n	8008104 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	085a      	lsrs	r2, r3, #1
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	441a      	add	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	2b0f      	cmp	r3, #15
 80080ec:	d908      	bls.n	8008100 <UART_SetConfig+0x4f4>
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080f4:	d204      	bcs.n	8008100 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	60da      	str	r2, [r3, #12]
 80080fe:	e001      	b.n	8008104 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008110:	7ebb      	ldrb	r3, [r7, #26]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3720      	adds	r7, #32
 8008116:	46bd      	mov	sp, r7
 8008118:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800811c:	00f42400 	.word	0x00f42400

08008120 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00a      	beq.n	800814a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	430a      	orrs	r2, r1
 800816a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00a      	beq.n	800818e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	f003 0308 	and.w	r3, r3, #8
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	f003 0310 	and.w	r3, r3, #16
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00a      	beq.n	80081d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d6:	f003 0320 	and.w	r3, r3, #32
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	430a      	orrs	r2, r1
 80081f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d01a      	beq.n	8008236 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	430a      	orrs	r2, r1
 8008214:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800821e:	d10a      	bne.n	8008236 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	605a      	str	r2, [r3, #4]
  }
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af02      	add	r7, sp, #8
 800826a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008272:	f7fa ff07 	bl	8003084 <HAL_GetTick>
 8008276:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0308 	and.w	r3, r3, #8
 8008282:	2b08      	cmp	r3, #8
 8008284:	d10e      	bne.n	80082a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008286:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f82a 	bl	80082ee <UART_WaitOnFlagUntilTimeout>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e020      	b.n	80082e6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0304 	and.w	r3, r3, #4
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	d10e      	bne.n	80082d0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f814 	bl	80082ee <UART_WaitOnFlagUntilTimeout>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e00a      	b.n	80082e6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2220      	movs	r2, #32
 80082d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2220      	movs	r2, #32
 80082da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	60f8      	str	r0, [r7, #12]
 80082f6:	60b9      	str	r1, [r7, #8]
 80082f8:	603b      	str	r3, [r7, #0]
 80082fa:	4613      	mov	r3, r2
 80082fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082fe:	e05d      	b.n	80083bc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008306:	d059      	beq.n	80083bc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008308:	f7fa febc 	bl	8003084 <HAL_GetTick>
 800830c:	4602      	mov	r2, r0
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	429a      	cmp	r2, r3
 8008316:	d302      	bcc.n	800831e <UART_WaitOnFlagUntilTimeout+0x30>
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d11b      	bne.n	8008356 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800832c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0201 	bic.w	r2, r2, #1
 800833c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2220      	movs	r2, #32
 8008342:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2220      	movs	r2, #32
 8008348:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e042      	b.n	80083dc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0304 	and.w	r3, r3, #4
 8008360:	2b00      	cmp	r3, #0
 8008362:	d02b      	beq.n	80083bc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800836e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008372:	d123      	bne.n	80083bc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800837c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800838c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f022 0201 	bic.w	r2, r2, #1
 800839c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2220      	movs	r2, #32
 80083a2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2220      	movs	r2, #32
 80083a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2220      	movs	r2, #32
 80083ae:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e00f      	b.n	80083dc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	69da      	ldr	r2, [r3, #28]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	4013      	ands	r3, r2
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	bf0c      	ite	eq
 80083cc:	2301      	moveq	r3, #1
 80083ce:	2300      	movne	r3, #0
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	461a      	mov	r2, r3
 80083d4:	79fb      	ldrb	r3, [r7, #7]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d092      	beq.n	8008300 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80083fa:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2220      	movs	r2, #32
 8008400:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008424:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689a      	ldr	r2, [r3, #8]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 0201 	bic.w	r2, r2, #1
 8008434:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2220      	movs	r2, #32
 800843a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008442:	bf00      	nop
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0320 	and.w	r3, r3, #32
 8008466:	2b00      	cmp	r3, #0
 8008468:	d11e      	bne.n	80084a8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008480:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	689a      	ldr	r2, [r3, #8]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 0201 	bic.w	r2, r2, #1
 8008490:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084a0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2220      	movs	r2, #32
 80084a6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f7f9 fb11 	bl	8001ad0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084ae:	bf00      	nop
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f7ff fb8d 	bl	8007be4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084ca:	bf00      	nop
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b086      	sub	sp, #24
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f6:	2b80      	cmp	r3, #128	; 0x80
 80084f8:	d109      	bne.n	800850e <UART_DMAError+0x3c>
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2b21      	cmp	r3, #33	; 0x21
 80084fe:	d106      	bne.n	800850e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	2200      	movs	r2, #0
 8008504:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008508:	6978      	ldr	r0, [r7, #20]
 800850a:	f7ff ff6b 	bl	80083e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008518:	2b40      	cmp	r3, #64	; 0x40
 800851a:	d109      	bne.n	8008530 <UART_DMAError+0x5e>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2b22      	cmp	r3, #34	; 0x22
 8008520:	d106      	bne.n	8008530 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	2200      	movs	r2, #0
 8008526:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800852a:	6978      	ldr	r0, [r7, #20]
 800852c:	f7ff ff6f 	bl	800840e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008534:	f043 0210 	orr.w	r2, r3, #16
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800853c:	6978      	ldr	r0, [r7, #20]
 800853e:	f7ff fb5b 	bl	8007bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008542:	bf00      	nop
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b084      	sub	sp, #16
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008556:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f7ff fb45 	bl	8007bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800856e:	bf00      	nop
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008582:	2b21      	cmp	r3, #33	; 0x21
 8008584:	d12b      	bne.n	80085de <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800858c:	b29b      	uxth	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d110      	bne.n	80085b4 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085a0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085b0:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80085b2:	e014      	b.n	80085de <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085b8:	781a      	ldrb	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	b292      	uxth	r2, r2
 80085c0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	3b01      	subs	r3, #1
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085f6:	2b21      	cmp	r3, #33	; 0x21
 80085f8:	d12f      	bne.n	800865a <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008600:	b29b      	uxth	r3, r3
 8008602:	2b00      	cmp	r3, #0
 8008604:	d110      	bne.n	8008628 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008614:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008624:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008626:	e018      	b.n	800865a <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800862c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	881a      	ldrh	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800863a:	b292      	uxth	r2, r2
 800863c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008642:	1c9a      	adds	r2, r3, #2
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800864e:	b29b      	uxth	r3, r3
 8008650:	3b01      	subs	r3, #1
 8008652:	b29a      	uxth	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800865a:	bf00      	nop
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b082      	sub	sp, #8
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800867c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2220      	movs	r2, #32
 8008682:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7f9 fa30 	bl	8001af0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008690:	bf00      	nop
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086a6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086ac:	2b22      	cmp	r3, #34	; 0x22
 80086ae:	d13a      	bne.n	8008726 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80086b6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086b8:	89bb      	ldrh	r3, [r7, #12]
 80086ba:	b2d9      	uxtb	r1, r3
 80086bc:	89fb      	ldrh	r3, [r7, #14]
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c4:	400a      	ands	r2, r1
 80086c6:	b2d2      	uxtb	r2, r2
 80086c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086da:	b29b      	uxth	r3, r3
 80086dc:	3b01      	subs	r3, #1
 80086de:	b29a      	uxth	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d123      	bne.n	800873a <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008700:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689a      	ldr	r2, [r3, #8]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 0201 	bic.w	r2, r2, #1
 8008710:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2220      	movs	r2, #32
 8008716:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7f9 f9d6 	bl	8001ad0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008724:	e009      	b.n	800873a <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	8b1b      	ldrh	r3, [r3, #24]
 800872c:	b29a      	uxth	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f042 0208 	orr.w	r2, r2, #8
 8008736:	b292      	uxth	r2, r2
 8008738:	831a      	strh	r2, [r3, #24]
}
 800873a:	bf00      	nop
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b084      	sub	sp, #16
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008750:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008756:	2b22      	cmp	r3, #34	; 0x22
 8008758:	d13a      	bne.n	80087d0 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008760:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008766:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008768:	89ba      	ldrh	r2, [r7, #12]
 800876a:	89fb      	ldrh	r3, [r7, #14]
 800876c:	4013      	ands	r3, r2
 800876e:	b29a      	uxth	r2, r3
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008778:	1c9a      	adds	r2, r3, #2
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008784:	b29b      	uxth	r3, r3
 8008786:	3b01      	subs	r3, #1
 8008788:	b29a      	uxth	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008796:	b29b      	uxth	r3, r3
 8008798:	2b00      	cmp	r3, #0
 800879a:	d123      	bne.n	80087e4 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80087aa:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f022 0201 	bic.w	r2, r2, #1
 80087ba:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2220      	movs	r2, #32
 80087c0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7f9 f981 	bl	8001ad0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087ce:	e009      	b.n	80087e4 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	8b1b      	ldrh	r3, [r3, #24]
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f042 0208 	orr.w	r2, r2, #8
 80087e0:	b292      	uxth	r2, r2
 80087e2:	831a      	strh	r2, [r3, #24]
}
 80087e4:	bf00      	nop
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008800:	b084      	sub	sp, #16
 8008802:	b580      	push	{r7, lr}
 8008804:	b084      	sub	sp, #16
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	f107 001c 	add.w	r0, r7, #28
 800880e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008814:	2b01      	cmp	r3, #1
 8008816:	d122      	bne.n	800885e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800882c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008842:	2b01      	cmp	r3, #1
 8008844:	d105      	bne.n	8008852 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fa30 	bl	8008cb8 <USB_CoreReset>
 8008858:	4603      	mov	r3, r0
 800885a:	73fb      	strb	r3, [r7, #15]
 800885c:	e01a      	b.n	8008894 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fa24 	bl	8008cb8 <USB_CoreReset>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008876:	2b00      	cmp	r3, #0
 8008878:	d106      	bne.n	8008888 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	639a      	str	r2, [r3, #56]	; 0x38
 8008886:	e005      	b.n	8008894 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8008894:	7bfb      	ldrb	r3, [r7, #15]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088a0:	b004      	add	sp, #16
 80088a2:	4770      	bx	lr

080088a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f023 0201 	bic.w	r2, r3, #1
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	460b      	mov	r3, r1
 80088d0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80088de:	78fb      	ldrb	r3, [r7, #3]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d106      	bne.n	80088f2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	60da      	str	r2, [r3, #12]
 80088f0:	e00b      	b.n	800890a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80088f2:	78fb      	ldrb	r3, [r7, #3]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d106      	bne.n	8008906 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	60da      	str	r2, [r3, #12]
 8008904:	e001      	b.n	800890a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e003      	b.n	8008912 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800890a:	2032      	movs	r0, #50	; 0x32
 800890c:	f7fa fbc6 	bl	800309c <HAL_Delay>

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800891c:	b084      	sub	sp, #16
 800891e:	b580      	push	{r7, lr}
 8008920:	b086      	sub	sp, #24
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800892a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008936:	2300      	movs	r3, #0
 8008938:	613b      	str	r3, [r7, #16]
 800893a:	e009      	b.n	8008950 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	3340      	adds	r3, #64	; 0x40
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	2200      	movs	r2, #0
 8008948:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	3301      	adds	r3, #1
 800894e:	613b      	str	r3, [r7, #16]
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	2b0e      	cmp	r3, #14
 8008954:	d9f2      	bls.n	800893c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008958:	2b00      	cmp	r3, #0
 800895a:	d11c      	bne.n	8008996 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800896a:	f043 0302 	orr.w	r3, r3, #2
 800896e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008974:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	e005      	b.n	80089a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089a8:	461a      	mov	r2, r3
 80089aa:	2300      	movs	r3, #0
 80089ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b4:	4619      	mov	r1, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089bc:	461a      	mov	r2, r3
 80089be:	680b      	ldr	r3, [r1, #0]
 80089c0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80089c2:	2103      	movs	r1, #3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f93d 	bl	8008c44 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80089ca:	2110      	movs	r1, #16
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f8f1 	bl	8008bb4 <USB_FlushTxFifo>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f90f 	bl	8008c00 <USB_FlushRxFifo>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f2:	461a      	mov	r2, r3
 80089f4:	2300      	movs	r3, #0
 80089f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fe:	461a      	mov	r2, r3
 8008a00:	2300      	movs	r3, #0
 8008a02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a10:	2300      	movs	r3, #0
 8008a12:	613b      	str	r3, [r7, #16]
 8008a14:	e043      	b.n	8008a9e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a2c:	d118      	bne.n	8008a60 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10a      	bne.n	8008a4a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a40:	461a      	mov	r2, r3
 8008a42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a46:	6013      	str	r3, [r2, #0]
 8008a48:	e013      	b.n	8008a72 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	015a      	lsls	r2, r3, #5
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	4413      	add	r3, r2
 8008a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a56:	461a      	mov	r2, r3
 8008a58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	e008      	b.n	8008a72 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	015a      	lsls	r2, r3, #5
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4413      	add	r3, r2
 8008a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	2300      	movs	r3, #0
 8008a70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7e:	461a      	mov	r2, r3
 8008a80:	2300      	movs	r3, #0
 8008a82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a90:	461a      	mov	r2, r3
 8008a92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	613b      	str	r3, [r7, #16]
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d3b7      	bcc.n	8008a16 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	613b      	str	r3, [r7, #16]
 8008aaa:	e043      	b.n	8008b34 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	015a      	lsls	r2, r3, #5
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008abe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ac2:	d118      	bne.n	8008af6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10a      	bne.n	8008ae0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	e013      	b.n	8008b08 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	015a      	lsls	r2, r3, #5
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aec:	461a      	mov	r2, r3
 8008aee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	e008      	b.n	8008b08 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	015a      	lsls	r2, r3, #5
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	4413      	add	r3, r2
 8008afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b02:	461a      	mov	r2, r3
 8008b04:	2300      	movs	r3, #0
 8008b06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	015a      	lsls	r2, r3, #5
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4413      	add	r3, r2
 8008b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b14:	461a      	mov	r2, r3
 8008b16:	2300      	movs	r3, #0
 8008b18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b26:	461a      	mov	r2, r3
 8008b28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	3301      	adds	r3, #1
 8008b32:	613b      	str	r3, [r7, #16]
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d3b7      	bcc.n	8008aac <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008b5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	f043 0210 	orr.w	r2, r3, #16
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	699a      	ldr	r2, [r3, #24]
 8008b6e:	4b10      	ldr	r3, [pc, #64]	; (8008bb0 <USB_DevInit+0x294>)
 8008b70:	4313      	orrs	r3, r2
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d005      	beq.n	8008b88 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	f043 0208 	orr.w	r2, r3, #8
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d107      	bne.n	8008b9e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b96:	f043 0304 	orr.w	r3, r3, #4
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008baa:	b004      	add	sp, #16
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	803c3800 	.word	0x803c3800

08008bb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	019b      	lsls	r3, r3, #6
 8008bc6:	f043 0220 	orr.w	r2, r3, #32
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4a09      	ldr	r2, [pc, #36]	; (8008bfc <USB_FlushTxFifo+0x48>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d901      	bls.n	8008be0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e006      	b.n	8008bee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	f003 0320 	and.w	r3, r3, #32
 8008be8:	2b20      	cmp	r3, #32
 8008bea:	d0f0      	beq.n	8008bce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	00030d40 	.word	0x00030d40

08008c00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2210      	movs	r2, #16
 8008c10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3301      	adds	r3, #1
 8008c16:	60fb      	str	r3, [r7, #12]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	4a09      	ldr	r2, [pc, #36]	; (8008c40 <USB_FlushRxFifo+0x40>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d901      	bls.n	8008c24 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e006      	b.n	8008c32 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	f003 0310 	and.w	r3, r3, #16
 8008c2c:	2b10      	cmp	r3, #16
 8008c2e:	d0f0      	beq.n	8008c12 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	00030d40 	.word	0x00030d40

08008c44 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	78fb      	ldrb	r3, [r7, #3]
 8008c5e:	68f9      	ldr	r1, [r7, #12]
 8008c60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c64:	4313      	orrs	r3, r2
 8008c66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c90:	f023 0303 	bic.w	r3, r3, #3
 8008c94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ca4:	f043 0302 	orr.w	r3, r3, #2
 8008ca8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	60fb      	str	r3, [r7, #12]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	4a13      	ldr	r2, [pc, #76]	; (8008d1c <USB_CoreReset+0x64>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d901      	bls.n	8008cd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e01b      	b.n	8008d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	daf2      	bge.n	8008cc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	f043 0201 	orr.w	r2, r3, #1
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4a09      	ldr	r2, [pc, #36]	; (8008d1c <USB_CoreReset+0x64>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d901      	bls.n	8008d00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e006      	b.n	8008d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d0f0      	beq.n	8008cee <USB_CoreReset+0x36>

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	00030d40 	.word	0x00030d40

08008d20 <atof>:
 8008d20:	2100      	movs	r1, #0
 8008d22:	f001 bad1 	b.w	800a2c8 <strtod>

08008d26 <atoi>:
 8008d26:	220a      	movs	r2, #10
 8008d28:	2100      	movs	r1, #0
 8008d2a:	f001 bb5d 	b.w	800a3e8 <strtol>
	...

08008d30 <__errno>:
 8008d30:	4b01      	ldr	r3, [pc, #4]	; (8008d38 <__errno+0x8>)
 8008d32:	6818      	ldr	r0, [r3, #0]
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	2000000c 	.word	0x2000000c

08008d3c <__libc_init_array>:
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	4e0d      	ldr	r6, [pc, #52]	; (8008d74 <__libc_init_array+0x38>)
 8008d40:	4c0d      	ldr	r4, [pc, #52]	; (8008d78 <__libc_init_array+0x3c>)
 8008d42:	1ba4      	subs	r4, r4, r6
 8008d44:	10a4      	asrs	r4, r4, #2
 8008d46:	2500      	movs	r5, #0
 8008d48:	42a5      	cmp	r5, r4
 8008d4a:	d109      	bne.n	8008d60 <__libc_init_array+0x24>
 8008d4c:	4e0b      	ldr	r6, [pc, #44]	; (8008d7c <__libc_init_array+0x40>)
 8008d4e:	4c0c      	ldr	r4, [pc, #48]	; (8008d80 <__libc_init_array+0x44>)
 8008d50:	f003 fb84 	bl	800c45c <_init>
 8008d54:	1ba4      	subs	r4, r4, r6
 8008d56:	10a4      	asrs	r4, r4, #2
 8008d58:	2500      	movs	r5, #0
 8008d5a:	42a5      	cmp	r5, r4
 8008d5c:	d105      	bne.n	8008d6a <__libc_init_array+0x2e>
 8008d5e:	bd70      	pop	{r4, r5, r6, pc}
 8008d60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d64:	4798      	blx	r3
 8008d66:	3501      	adds	r5, #1
 8008d68:	e7ee      	b.n	8008d48 <__libc_init_array+0xc>
 8008d6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d6e:	4798      	blx	r3
 8008d70:	3501      	adds	r5, #1
 8008d72:	e7f2      	b.n	8008d5a <__libc_init_array+0x1e>
 8008d74:	0800c858 	.word	0x0800c858
 8008d78:	0800c858 	.word	0x0800c858
 8008d7c:	0800c858 	.word	0x0800c858
 8008d80:	0800c85c 	.word	0x0800c85c

08008d84 <memset>:
 8008d84:	4402      	add	r2, r0
 8008d86:	4603      	mov	r3, r0
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d100      	bne.n	8008d8e <memset+0xa>
 8008d8c:	4770      	bx	lr
 8008d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d92:	e7f9      	b.n	8008d88 <memset+0x4>

08008d94 <__cvt>:
 8008d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d98:	ec55 4b10 	vmov	r4, r5, d0
 8008d9c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008d9e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008da2:	2d00      	cmp	r5, #0
 8008da4:	460e      	mov	r6, r1
 8008da6:	4691      	mov	r9, r2
 8008da8:	4619      	mov	r1, r3
 8008daa:	bfb8      	it	lt
 8008dac:	4622      	movlt	r2, r4
 8008dae:	462b      	mov	r3, r5
 8008db0:	f027 0720 	bic.w	r7, r7, #32
 8008db4:	bfbb      	ittet	lt
 8008db6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008dba:	461d      	movlt	r5, r3
 8008dbc:	2300      	movge	r3, #0
 8008dbe:	232d      	movlt	r3, #45	; 0x2d
 8008dc0:	bfb8      	it	lt
 8008dc2:	4614      	movlt	r4, r2
 8008dc4:	2f46      	cmp	r7, #70	; 0x46
 8008dc6:	700b      	strb	r3, [r1, #0]
 8008dc8:	d004      	beq.n	8008dd4 <__cvt+0x40>
 8008dca:	2f45      	cmp	r7, #69	; 0x45
 8008dcc:	d100      	bne.n	8008dd0 <__cvt+0x3c>
 8008dce:	3601      	adds	r6, #1
 8008dd0:	2102      	movs	r1, #2
 8008dd2:	e000      	b.n	8008dd6 <__cvt+0x42>
 8008dd4:	2103      	movs	r1, #3
 8008dd6:	ab03      	add	r3, sp, #12
 8008dd8:	9301      	str	r3, [sp, #4]
 8008dda:	ab02      	add	r3, sp, #8
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	4632      	mov	r2, r6
 8008de0:	4653      	mov	r3, sl
 8008de2:	ec45 4b10 	vmov	d0, r4, r5
 8008de6:	f001 fba3 	bl	800a530 <_dtoa_r>
 8008dea:	2f47      	cmp	r7, #71	; 0x47
 8008dec:	4680      	mov	r8, r0
 8008dee:	d102      	bne.n	8008df6 <__cvt+0x62>
 8008df0:	f019 0f01 	tst.w	r9, #1
 8008df4:	d026      	beq.n	8008e44 <__cvt+0xb0>
 8008df6:	2f46      	cmp	r7, #70	; 0x46
 8008df8:	eb08 0906 	add.w	r9, r8, r6
 8008dfc:	d111      	bne.n	8008e22 <__cvt+0x8e>
 8008dfe:	f898 3000 	ldrb.w	r3, [r8]
 8008e02:	2b30      	cmp	r3, #48	; 0x30
 8008e04:	d10a      	bne.n	8008e1c <__cvt+0x88>
 8008e06:	2200      	movs	r2, #0
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	f7f7 fe6b 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e12:	b918      	cbnz	r0, 8008e1c <__cvt+0x88>
 8008e14:	f1c6 0601 	rsb	r6, r6, #1
 8008e18:	f8ca 6000 	str.w	r6, [sl]
 8008e1c:	f8da 3000 	ldr.w	r3, [sl]
 8008e20:	4499      	add	r9, r3
 8008e22:	2200      	movs	r2, #0
 8008e24:	2300      	movs	r3, #0
 8008e26:	4620      	mov	r0, r4
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f7f7 fe5d 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e2e:	b938      	cbnz	r0, 8008e40 <__cvt+0xac>
 8008e30:	2230      	movs	r2, #48	; 0x30
 8008e32:	9b03      	ldr	r3, [sp, #12]
 8008e34:	454b      	cmp	r3, r9
 8008e36:	d205      	bcs.n	8008e44 <__cvt+0xb0>
 8008e38:	1c59      	adds	r1, r3, #1
 8008e3a:	9103      	str	r1, [sp, #12]
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	e7f8      	b.n	8008e32 <__cvt+0x9e>
 8008e40:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e44:	9b03      	ldr	r3, [sp, #12]
 8008e46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e48:	eba3 0308 	sub.w	r3, r3, r8
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	6013      	str	r3, [r2, #0]
 8008e50:	b004      	add	sp, #16
 8008e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008e56 <__exponent>:
 8008e56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e58:	2900      	cmp	r1, #0
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	bfba      	itte	lt
 8008e5e:	4249      	neglt	r1, r1
 8008e60:	232d      	movlt	r3, #45	; 0x2d
 8008e62:	232b      	movge	r3, #43	; 0x2b
 8008e64:	2909      	cmp	r1, #9
 8008e66:	f804 2b02 	strb.w	r2, [r4], #2
 8008e6a:	7043      	strb	r3, [r0, #1]
 8008e6c:	dd20      	ble.n	8008eb0 <__exponent+0x5a>
 8008e6e:	f10d 0307 	add.w	r3, sp, #7
 8008e72:	461f      	mov	r7, r3
 8008e74:	260a      	movs	r6, #10
 8008e76:	fb91 f5f6 	sdiv	r5, r1, r6
 8008e7a:	fb06 1115 	mls	r1, r6, r5, r1
 8008e7e:	3130      	adds	r1, #48	; 0x30
 8008e80:	2d09      	cmp	r5, #9
 8008e82:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008e86:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	dc09      	bgt.n	8008ea2 <__exponent+0x4c>
 8008e8e:	3130      	adds	r1, #48	; 0x30
 8008e90:	3b02      	subs	r3, #2
 8008e92:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008e96:	42bb      	cmp	r3, r7
 8008e98:	4622      	mov	r2, r4
 8008e9a:	d304      	bcc.n	8008ea6 <__exponent+0x50>
 8008e9c:	1a10      	subs	r0, r2, r0
 8008e9e:	b003      	add	sp, #12
 8008ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	e7e7      	b.n	8008e76 <__exponent+0x20>
 8008ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eaa:	f804 2b01 	strb.w	r2, [r4], #1
 8008eae:	e7f2      	b.n	8008e96 <__exponent+0x40>
 8008eb0:	2330      	movs	r3, #48	; 0x30
 8008eb2:	4419      	add	r1, r3
 8008eb4:	7083      	strb	r3, [r0, #2]
 8008eb6:	1d02      	adds	r2, r0, #4
 8008eb8:	70c1      	strb	r1, [r0, #3]
 8008eba:	e7ef      	b.n	8008e9c <__exponent+0x46>

08008ebc <_printf_float>:
 8008ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec0:	b08d      	sub	sp, #52	; 0x34
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008ec8:	4616      	mov	r6, r2
 8008eca:	461f      	mov	r7, r3
 8008ecc:	4605      	mov	r5, r0
 8008ece:	f002 fc13 	bl	800b6f8 <_localeconv_r>
 8008ed2:	6803      	ldr	r3, [r0, #0]
 8008ed4:	9304      	str	r3, [sp, #16]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7f7 f984 	bl	80001e4 <strlen>
 8008edc:	2300      	movs	r3, #0
 8008ede:	930a      	str	r3, [sp, #40]	; 0x28
 8008ee0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ee4:	9005      	str	r0, [sp, #20]
 8008ee6:	3307      	adds	r3, #7
 8008ee8:	f023 0307 	bic.w	r3, r3, #7
 8008eec:	f103 0208 	add.w	r2, r3, #8
 8008ef0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008ef4:	f8d4 b000 	ldr.w	fp, [r4]
 8008ef8:	f8c8 2000 	str.w	r2, [r8]
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008f04:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008f08:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f0c:	9307      	str	r3, [sp, #28]
 8008f0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f16:	4ba7      	ldr	r3, [pc, #668]	; (80091b4 <_printf_float+0x2f8>)
 8008f18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f1c:	f7f7 fe16 	bl	8000b4c <__aeabi_dcmpun>
 8008f20:	bb70      	cbnz	r0, 8008f80 <_printf_float+0xc4>
 8008f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f26:	4ba3      	ldr	r3, [pc, #652]	; (80091b4 <_printf_float+0x2f8>)
 8008f28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f2c:	f7f7 fdf0 	bl	8000b10 <__aeabi_dcmple>
 8008f30:	bb30      	cbnz	r0, 8008f80 <_printf_float+0xc4>
 8008f32:	2200      	movs	r2, #0
 8008f34:	2300      	movs	r3, #0
 8008f36:	4640      	mov	r0, r8
 8008f38:	4649      	mov	r1, r9
 8008f3a:	f7f7 fddf 	bl	8000afc <__aeabi_dcmplt>
 8008f3e:	b110      	cbz	r0, 8008f46 <_printf_float+0x8a>
 8008f40:	232d      	movs	r3, #45	; 0x2d
 8008f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f46:	4a9c      	ldr	r2, [pc, #624]	; (80091b8 <_printf_float+0x2fc>)
 8008f48:	4b9c      	ldr	r3, [pc, #624]	; (80091bc <_printf_float+0x300>)
 8008f4a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008f4e:	bf8c      	ite	hi
 8008f50:	4690      	movhi	r8, r2
 8008f52:	4698      	movls	r8, r3
 8008f54:	2303      	movs	r3, #3
 8008f56:	f02b 0204 	bic.w	r2, fp, #4
 8008f5a:	6123      	str	r3, [r4, #16]
 8008f5c:	6022      	str	r2, [r4, #0]
 8008f5e:	f04f 0900 	mov.w	r9, #0
 8008f62:	9700      	str	r7, [sp, #0]
 8008f64:	4633      	mov	r3, r6
 8008f66:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f000 f9e6 	bl	800933c <_printf_common>
 8008f70:	3001      	adds	r0, #1
 8008f72:	f040 808d 	bne.w	8009090 <_printf_float+0x1d4>
 8008f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f7a:	b00d      	add	sp, #52	; 0x34
 8008f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f80:	4642      	mov	r2, r8
 8008f82:	464b      	mov	r3, r9
 8008f84:	4640      	mov	r0, r8
 8008f86:	4649      	mov	r1, r9
 8008f88:	f7f7 fde0 	bl	8000b4c <__aeabi_dcmpun>
 8008f8c:	b110      	cbz	r0, 8008f94 <_printf_float+0xd8>
 8008f8e:	4a8c      	ldr	r2, [pc, #560]	; (80091c0 <_printf_float+0x304>)
 8008f90:	4b8c      	ldr	r3, [pc, #560]	; (80091c4 <_printf_float+0x308>)
 8008f92:	e7da      	b.n	8008f4a <_printf_float+0x8e>
 8008f94:	6861      	ldr	r1, [r4, #4]
 8008f96:	1c4b      	adds	r3, r1, #1
 8008f98:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008f9c:	a80a      	add	r0, sp, #40	; 0x28
 8008f9e:	d13e      	bne.n	800901e <_printf_float+0x162>
 8008fa0:	2306      	movs	r3, #6
 8008fa2:	6063      	str	r3, [r4, #4]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008faa:	ab09      	add	r3, sp, #36	; 0x24
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	ec49 8b10 	vmov	d0, r8, r9
 8008fb2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008fb6:	6022      	str	r2, [r4, #0]
 8008fb8:	f8cd a004 	str.w	sl, [sp, #4]
 8008fbc:	6861      	ldr	r1, [r4, #4]
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f7ff fee8 	bl	8008d94 <__cvt>
 8008fc4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008fc8:	2b47      	cmp	r3, #71	; 0x47
 8008fca:	4680      	mov	r8, r0
 8008fcc:	d109      	bne.n	8008fe2 <_printf_float+0x126>
 8008fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd0:	1cd8      	adds	r0, r3, #3
 8008fd2:	db02      	blt.n	8008fda <_printf_float+0x11e>
 8008fd4:	6862      	ldr	r2, [r4, #4]
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	dd47      	ble.n	800906a <_printf_float+0x1ae>
 8008fda:	f1aa 0a02 	sub.w	sl, sl, #2
 8008fde:	fa5f fa8a 	uxtb.w	sl, sl
 8008fe2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008fe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fe8:	d824      	bhi.n	8009034 <_printf_float+0x178>
 8008fea:	3901      	subs	r1, #1
 8008fec:	4652      	mov	r2, sl
 8008fee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ff2:	9109      	str	r1, [sp, #36]	; 0x24
 8008ff4:	f7ff ff2f 	bl	8008e56 <__exponent>
 8008ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ffa:	1813      	adds	r3, r2, r0
 8008ffc:	2a01      	cmp	r2, #1
 8008ffe:	4681      	mov	r9, r0
 8009000:	6123      	str	r3, [r4, #16]
 8009002:	dc02      	bgt.n	800900a <_printf_float+0x14e>
 8009004:	6822      	ldr	r2, [r4, #0]
 8009006:	07d1      	lsls	r1, r2, #31
 8009008:	d501      	bpl.n	800900e <_printf_float+0x152>
 800900a:	3301      	adds	r3, #1
 800900c:	6123      	str	r3, [r4, #16]
 800900e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0a5      	beq.n	8008f62 <_printf_float+0xa6>
 8009016:	232d      	movs	r3, #45	; 0x2d
 8009018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800901c:	e7a1      	b.n	8008f62 <_printf_float+0xa6>
 800901e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009022:	f000 8177 	beq.w	8009314 <_printf_float+0x458>
 8009026:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800902a:	d1bb      	bne.n	8008fa4 <_printf_float+0xe8>
 800902c:	2900      	cmp	r1, #0
 800902e:	d1b9      	bne.n	8008fa4 <_printf_float+0xe8>
 8009030:	2301      	movs	r3, #1
 8009032:	e7b6      	b.n	8008fa2 <_printf_float+0xe6>
 8009034:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009038:	d119      	bne.n	800906e <_printf_float+0x1b2>
 800903a:	2900      	cmp	r1, #0
 800903c:	6863      	ldr	r3, [r4, #4]
 800903e:	dd0c      	ble.n	800905a <_printf_float+0x19e>
 8009040:	6121      	str	r1, [r4, #16]
 8009042:	b913      	cbnz	r3, 800904a <_printf_float+0x18e>
 8009044:	6822      	ldr	r2, [r4, #0]
 8009046:	07d2      	lsls	r2, r2, #31
 8009048:	d502      	bpl.n	8009050 <_printf_float+0x194>
 800904a:	3301      	adds	r3, #1
 800904c:	440b      	add	r3, r1
 800904e:	6123      	str	r3, [r4, #16]
 8009050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009052:	65a3      	str	r3, [r4, #88]	; 0x58
 8009054:	f04f 0900 	mov.w	r9, #0
 8009058:	e7d9      	b.n	800900e <_printf_float+0x152>
 800905a:	b913      	cbnz	r3, 8009062 <_printf_float+0x1a6>
 800905c:	6822      	ldr	r2, [r4, #0]
 800905e:	07d0      	lsls	r0, r2, #31
 8009060:	d501      	bpl.n	8009066 <_printf_float+0x1aa>
 8009062:	3302      	adds	r3, #2
 8009064:	e7f3      	b.n	800904e <_printf_float+0x192>
 8009066:	2301      	movs	r3, #1
 8009068:	e7f1      	b.n	800904e <_printf_float+0x192>
 800906a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800906e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009072:	4293      	cmp	r3, r2
 8009074:	db05      	blt.n	8009082 <_printf_float+0x1c6>
 8009076:	6822      	ldr	r2, [r4, #0]
 8009078:	6123      	str	r3, [r4, #16]
 800907a:	07d1      	lsls	r1, r2, #31
 800907c:	d5e8      	bpl.n	8009050 <_printf_float+0x194>
 800907e:	3301      	adds	r3, #1
 8009080:	e7e5      	b.n	800904e <_printf_float+0x192>
 8009082:	2b00      	cmp	r3, #0
 8009084:	bfd4      	ite	le
 8009086:	f1c3 0302 	rsble	r3, r3, #2
 800908a:	2301      	movgt	r3, #1
 800908c:	4413      	add	r3, r2
 800908e:	e7de      	b.n	800904e <_printf_float+0x192>
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	055a      	lsls	r2, r3, #21
 8009094:	d407      	bmi.n	80090a6 <_printf_float+0x1ea>
 8009096:	6923      	ldr	r3, [r4, #16]
 8009098:	4642      	mov	r2, r8
 800909a:	4631      	mov	r1, r6
 800909c:	4628      	mov	r0, r5
 800909e:	47b8      	blx	r7
 80090a0:	3001      	adds	r0, #1
 80090a2:	d12b      	bne.n	80090fc <_printf_float+0x240>
 80090a4:	e767      	b.n	8008f76 <_printf_float+0xba>
 80090a6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80090aa:	f240 80dc 	bls.w	8009266 <_printf_float+0x3aa>
 80090ae:	2200      	movs	r2, #0
 80090b0:	2300      	movs	r3, #0
 80090b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090b6:	f7f7 fd17 	bl	8000ae8 <__aeabi_dcmpeq>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d033      	beq.n	8009126 <_printf_float+0x26a>
 80090be:	2301      	movs	r3, #1
 80090c0:	4a41      	ldr	r2, [pc, #260]	; (80091c8 <_printf_float+0x30c>)
 80090c2:	4631      	mov	r1, r6
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b8      	blx	r7
 80090c8:	3001      	adds	r0, #1
 80090ca:	f43f af54 	beq.w	8008f76 <_printf_float+0xba>
 80090ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090d2:	429a      	cmp	r2, r3
 80090d4:	db02      	blt.n	80090dc <_printf_float+0x220>
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	07d8      	lsls	r0, r3, #31
 80090da:	d50f      	bpl.n	80090fc <_printf_float+0x240>
 80090dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090e0:	4631      	mov	r1, r6
 80090e2:	4628      	mov	r0, r5
 80090e4:	47b8      	blx	r7
 80090e6:	3001      	adds	r0, #1
 80090e8:	f43f af45 	beq.w	8008f76 <_printf_float+0xba>
 80090ec:	f04f 0800 	mov.w	r8, #0
 80090f0:	f104 091a 	add.w	r9, r4, #26
 80090f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f6:	3b01      	subs	r3, #1
 80090f8:	4543      	cmp	r3, r8
 80090fa:	dc09      	bgt.n	8009110 <_printf_float+0x254>
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	079b      	lsls	r3, r3, #30
 8009100:	f100 8103 	bmi.w	800930a <_printf_float+0x44e>
 8009104:	68e0      	ldr	r0, [r4, #12]
 8009106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009108:	4298      	cmp	r0, r3
 800910a:	bfb8      	it	lt
 800910c:	4618      	movlt	r0, r3
 800910e:	e734      	b.n	8008f7a <_printf_float+0xbe>
 8009110:	2301      	movs	r3, #1
 8009112:	464a      	mov	r2, r9
 8009114:	4631      	mov	r1, r6
 8009116:	4628      	mov	r0, r5
 8009118:	47b8      	blx	r7
 800911a:	3001      	adds	r0, #1
 800911c:	f43f af2b 	beq.w	8008f76 <_printf_float+0xba>
 8009120:	f108 0801 	add.w	r8, r8, #1
 8009124:	e7e6      	b.n	80090f4 <_printf_float+0x238>
 8009126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009128:	2b00      	cmp	r3, #0
 800912a:	dc2b      	bgt.n	8009184 <_printf_float+0x2c8>
 800912c:	2301      	movs	r3, #1
 800912e:	4a26      	ldr	r2, [pc, #152]	; (80091c8 <_printf_float+0x30c>)
 8009130:	4631      	mov	r1, r6
 8009132:	4628      	mov	r0, r5
 8009134:	47b8      	blx	r7
 8009136:	3001      	adds	r0, #1
 8009138:	f43f af1d 	beq.w	8008f76 <_printf_float+0xba>
 800913c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800913e:	b923      	cbnz	r3, 800914a <_printf_float+0x28e>
 8009140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009142:	b913      	cbnz	r3, 800914a <_printf_float+0x28e>
 8009144:	6823      	ldr	r3, [r4, #0]
 8009146:	07d9      	lsls	r1, r3, #31
 8009148:	d5d8      	bpl.n	80090fc <_printf_float+0x240>
 800914a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800914e:	4631      	mov	r1, r6
 8009150:	4628      	mov	r0, r5
 8009152:	47b8      	blx	r7
 8009154:	3001      	adds	r0, #1
 8009156:	f43f af0e 	beq.w	8008f76 <_printf_float+0xba>
 800915a:	f04f 0900 	mov.w	r9, #0
 800915e:	f104 0a1a 	add.w	sl, r4, #26
 8009162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009164:	425b      	negs	r3, r3
 8009166:	454b      	cmp	r3, r9
 8009168:	dc01      	bgt.n	800916e <_printf_float+0x2b2>
 800916a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800916c:	e794      	b.n	8009098 <_printf_float+0x1dc>
 800916e:	2301      	movs	r3, #1
 8009170:	4652      	mov	r2, sl
 8009172:	4631      	mov	r1, r6
 8009174:	4628      	mov	r0, r5
 8009176:	47b8      	blx	r7
 8009178:	3001      	adds	r0, #1
 800917a:	f43f aefc 	beq.w	8008f76 <_printf_float+0xba>
 800917e:	f109 0901 	add.w	r9, r9, #1
 8009182:	e7ee      	b.n	8009162 <_printf_float+0x2a6>
 8009184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009186:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009188:	429a      	cmp	r2, r3
 800918a:	bfa8      	it	ge
 800918c:	461a      	movge	r2, r3
 800918e:	2a00      	cmp	r2, #0
 8009190:	4691      	mov	r9, r2
 8009192:	dd07      	ble.n	80091a4 <_printf_float+0x2e8>
 8009194:	4613      	mov	r3, r2
 8009196:	4631      	mov	r1, r6
 8009198:	4642      	mov	r2, r8
 800919a:	4628      	mov	r0, r5
 800919c:	47b8      	blx	r7
 800919e:	3001      	adds	r0, #1
 80091a0:	f43f aee9 	beq.w	8008f76 <_printf_float+0xba>
 80091a4:	f104 031a 	add.w	r3, r4, #26
 80091a8:	f04f 0b00 	mov.w	fp, #0
 80091ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091b0:	9306      	str	r3, [sp, #24]
 80091b2:	e015      	b.n	80091e0 <_printf_float+0x324>
 80091b4:	7fefffff 	.word	0x7fefffff
 80091b8:	0800c5a8 	.word	0x0800c5a8
 80091bc:	0800c5a4 	.word	0x0800c5a4
 80091c0:	0800c5b0 	.word	0x0800c5b0
 80091c4:	0800c5ac 	.word	0x0800c5ac
 80091c8:	0800c5b4 	.word	0x0800c5b4
 80091cc:	2301      	movs	r3, #1
 80091ce:	9a06      	ldr	r2, [sp, #24]
 80091d0:	4631      	mov	r1, r6
 80091d2:	4628      	mov	r0, r5
 80091d4:	47b8      	blx	r7
 80091d6:	3001      	adds	r0, #1
 80091d8:	f43f aecd 	beq.w	8008f76 <_printf_float+0xba>
 80091dc:	f10b 0b01 	add.w	fp, fp, #1
 80091e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80091e4:	ebaa 0309 	sub.w	r3, sl, r9
 80091e8:	455b      	cmp	r3, fp
 80091ea:	dcef      	bgt.n	80091cc <_printf_float+0x310>
 80091ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091f0:	429a      	cmp	r2, r3
 80091f2:	44d0      	add	r8, sl
 80091f4:	db15      	blt.n	8009222 <_printf_float+0x366>
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	07da      	lsls	r2, r3, #31
 80091fa:	d412      	bmi.n	8009222 <_printf_float+0x366>
 80091fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009200:	eba3 020a 	sub.w	r2, r3, sl
 8009204:	eba3 0a01 	sub.w	sl, r3, r1
 8009208:	4592      	cmp	sl, r2
 800920a:	bfa8      	it	ge
 800920c:	4692      	movge	sl, r2
 800920e:	f1ba 0f00 	cmp.w	sl, #0
 8009212:	dc0e      	bgt.n	8009232 <_printf_float+0x376>
 8009214:	f04f 0800 	mov.w	r8, #0
 8009218:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800921c:	f104 091a 	add.w	r9, r4, #26
 8009220:	e019      	b.n	8009256 <_printf_float+0x39a>
 8009222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009226:	4631      	mov	r1, r6
 8009228:	4628      	mov	r0, r5
 800922a:	47b8      	blx	r7
 800922c:	3001      	adds	r0, #1
 800922e:	d1e5      	bne.n	80091fc <_printf_float+0x340>
 8009230:	e6a1      	b.n	8008f76 <_printf_float+0xba>
 8009232:	4653      	mov	r3, sl
 8009234:	4642      	mov	r2, r8
 8009236:	4631      	mov	r1, r6
 8009238:	4628      	mov	r0, r5
 800923a:	47b8      	blx	r7
 800923c:	3001      	adds	r0, #1
 800923e:	d1e9      	bne.n	8009214 <_printf_float+0x358>
 8009240:	e699      	b.n	8008f76 <_printf_float+0xba>
 8009242:	2301      	movs	r3, #1
 8009244:	464a      	mov	r2, r9
 8009246:	4631      	mov	r1, r6
 8009248:	4628      	mov	r0, r5
 800924a:	47b8      	blx	r7
 800924c:	3001      	adds	r0, #1
 800924e:	f43f ae92 	beq.w	8008f76 <_printf_float+0xba>
 8009252:	f108 0801 	add.w	r8, r8, #1
 8009256:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800925a:	1a9b      	subs	r3, r3, r2
 800925c:	eba3 030a 	sub.w	r3, r3, sl
 8009260:	4543      	cmp	r3, r8
 8009262:	dcee      	bgt.n	8009242 <_printf_float+0x386>
 8009264:	e74a      	b.n	80090fc <_printf_float+0x240>
 8009266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009268:	2a01      	cmp	r2, #1
 800926a:	dc01      	bgt.n	8009270 <_printf_float+0x3b4>
 800926c:	07db      	lsls	r3, r3, #31
 800926e:	d53a      	bpl.n	80092e6 <_printf_float+0x42a>
 8009270:	2301      	movs	r3, #1
 8009272:	4642      	mov	r2, r8
 8009274:	4631      	mov	r1, r6
 8009276:	4628      	mov	r0, r5
 8009278:	47b8      	blx	r7
 800927a:	3001      	adds	r0, #1
 800927c:	f43f ae7b 	beq.w	8008f76 <_printf_float+0xba>
 8009280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009284:	4631      	mov	r1, r6
 8009286:	4628      	mov	r0, r5
 8009288:	47b8      	blx	r7
 800928a:	3001      	adds	r0, #1
 800928c:	f108 0801 	add.w	r8, r8, #1
 8009290:	f43f ae71 	beq.w	8008f76 <_printf_float+0xba>
 8009294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009296:	2200      	movs	r2, #0
 8009298:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800929c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092a0:	2300      	movs	r3, #0
 80092a2:	f7f7 fc21 	bl	8000ae8 <__aeabi_dcmpeq>
 80092a6:	b9c8      	cbnz	r0, 80092dc <_printf_float+0x420>
 80092a8:	4653      	mov	r3, sl
 80092aa:	4642      	mov	r2, r8
 80092ac:	4631      	mov	r1, r6
 80092ae:	4628      	mov	r0, r5
 80092b0:	47b8      	blx	r7
 80092b2:	3001      	adds	r0, #1
 80092b4:	d10e      	bne.n	80092d4 <_printf_float+0x418>
 80092b6:	e65e      	b.n	8008f76 <_printf_float+0xba>
 80092b8:	2301      	movs	r3, #1
 80092ba:	4652      	mov	r2, sl
 80092bc:	4631      	mov	r1, r6
 80092be:	4628      	mov	r0, r5
 80092c0:	47b8      	blx	r7
 80092c2:	3001      	adds	r0, #1
 80092c4:	f43f ae57 	beq.w	8008f76 <_printf_float+0xba>
 80092c8:	f108 0801 	add.w	r8, r8, #1
 80092cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092ce:	3b01      	subs	r3, #1
 80092d0:	4543      	cmp	r3, r8
 80092d2:	dcf1      	bgt.n	80092b8 <_printf_float+0x3fc>
 80092d4:	464b      	mov	r3, r9
 80092d6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80092da:	e6de      	b.n	800909a <_printf_float+0x1de>
 80092dc:	f04f 0800 	mov.w	r8, #0
 80092e0:	f104 0a1a 	add.w	sl, r4, #26
 80092e4:	e7f2      	b.n	80092cc <_printf_float+0x410>
 80092e6:	2301      	movs	r3, #1
 80092e8:	e7df      	b.n	80092aa <_printf_float+0x3ee>
 80092ea:	2301      	movs	r3, #1
 80092ec:	464a      	mov	r2, r9
 80092ee:	4631      	mov	r1, r6
 80092f0:	4628      	mov	r0, r5
 80092f2:	47b8      	blx	r7
 80092f4:	3001      	adds	r0, #1
 80092f6:	f43f ae3e 	beq.w	8008f76 <_printf_float+0xba>
 80092fa:	f108 0801 	add.w	r8, r8, #1
 80092fe:	68e3      	ldr	r3, [r4, #12]
 8009300:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	4543      	cmp	r3, r8
 8009306:	dcf0      	bgt.n	80092ea <_printf_float+0x42e>
 8009308:	e6fc      	b.n	8009104 <_printf_float+0x248>
 800930a:	f04f 0800 	mov.w	r8, #0
 800930e:	f104 0919 	add.w	r9, r4, #25
 8009312:	e7f4      	b.n	80092fe <_printf_float+0x442>
 8009314:	2900      	cmp	r1, #0
 8009316:	f43f ae8b 	beq.w	8009030 <_printf_float+0x174>
 800931a:	2300      	movs	r3, #0
 800931c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009320:	ab09      	add	r3, sp, #36	; 0x24
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	ec49 8b10 	vmov	d0, r8, r9
 8009328:	6022      	str	r2, [r4, #0]
 800932a:	f8cd a004 	str.w	sl, [sp, #4]
 800932e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009332:	4628      	mov	r0, r5
 8009334:	f7ff fd2e 	bl	8008d94 <__cvt>
 8009338:	4680      	mov	r8, r0
 800933a:	e648      	b.n	8008fce <_printf_float+0x112>

0800933c <_printf_common>:
 800933c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009340:	4691      	mov	r9, r2
 8009342:	461f      	mov	r7, r3
 8009344:	688a      	ldr	r2, [r1, #8]
 8009346:	690b      	ldr	r3, [r1, #16]
 8009348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800934c:	4293      	cmp	r3, r2
 800934e:	bfb8      	it	lt
 8009350:	4613      	movlt	r3, r2
 8009352:	f8c9 3000 	str.w	r3, [r9]
 8009356:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800935a:	4606      	mov	r6, r0
 800935c:	460c      	mov	r4, r1
 800935e:	b112      	cbz	r2, 8009366 <_printf_common+0x2a>
 8009360:	3301      	adds	r3, #1
 8009362:	f8c9 3000 	str.w	r3, [r9]
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	0699      	lsls	r1, r3, #26
 800936a:	bf42      	ittt	mi
 800936c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009370:	3302      	addmi	r3, #2
 8009372:	f8c9 3000 	strmi.w	r3, [r9]
 8009376:	6825      	ldr	r5, [r4, #0]
 8009378:	f015 0506 	ands.w	r5, r5, #6
 800937c:	d107      	bne.n	800938e <_printf_common+0x52>
 800937e:	f104 0a19 	add.w	sl, r4, #25
 8009382:	68e3      	ldr	r3, [r4, #12]
 8009384:	f8d9 2000 	ldr.w	r2, [r9]
 8009388:	1a9b      	subs	r3, r3, r2
 800938a:	42ab      	cmp	r3, r5
 800938c:	dc28      	bgt.n	80093e0 <_printf_common+0xa4>
 800938e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009392:	6822      	ldr	r2, [r4, #0]
 8009394:	3300      	adds	r3, #0
 8009396:	bf18      	it	ne
 8009398:	2301      	movne	r3, #1
 800939a:	0692      	lsls	r2, r2, #26
 800939c:	d42d      	bmi.n	80093fa <_printf_common+0xbe>
 800939e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093a2:	4639      	mov	r1, r7
 80093a4:	4630      	mov	r0, r6
 80093a6:	47c0      	blx	r8
 80093a8:	3001      	adds	r0, #1
 80093aa:	d020      	beq.n	80093ee <_printf_common+0xb2>
 80093ac:	6823      	ldr	r3, [r4, #0]
 80093ae:	68e5      	ldr	r5, [r4, #12]
 80093b0:	f8d9 2000 	ldr.w	r2, [r9]
 80093b4:	f003 0306 	and.w	r3, r3, #6
 80093b8:	2b04      	cmp	r3, #4
 80093ba:	bf08      	it	eq
 80093bc:	1aad      	subeq	r5, r5, r2
 80093be:	68a3      	ldr	r3, [r4, #8]
 80093c0:	6922      	ldr	r2, [r4, #16]
 80093c2:	bf0c      	ite	eq
 80093c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093c8:	2500      	movne	r5, #0
 80093ca:	4293      	cmp	r3, r2
 80093cc:	bfc4      	itt	gt
 80093ce:	1a9b      	subgt	r3, r3, r2
 80093d0:	18ed      	addgt	r5, r5, r3
 80093d2:	f04f 0900 	mov.w	r9, #0
 80093d6:	341a      	adds	r4, #26
 80093d8:	454d      	cmp	r5, r9
 80093da:	d11a      	bne.n	8009412 <_printf_common+0xd6>
 80093dc:	2000      	movs	r0, #0
 80093de:	e008      	b.n	80093f2 <_printf_common+0xb6>
 80093e0:	2301      	movs	r3, #1
 80093e2:	4652      	mov	r2, sl
 80093e4:	4639      	mov	r1, r7
 80093e6:	4630      	mov	r0, r6
 80093e8:	47c0      	blx	r8
 80093ea:	3001      	adds	r0, #1
 80093ec:	d103      	bne.n	80093f6 <_printf_common+0xba>
 80093ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f6:	3501      	adds	r5, #1
 80093f8:	e7c3      	b.n	8009382 <_printf_common+0x46>
 80093fa:	18e1      	adds	r1, r4, r3
 80093fc:	1c5a      	adds	r2, r3, #1
 80093fe:	2030      	movs	r0, #48	; 0x30
 8009400:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009404:	4422      	add	r2, r4
 8009406:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800940a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800940e:	3302      	adds	r3, #2
 8009410:	e7c5      	b.n	800939e <_printf_common+0x62>
 8009412:	2301      	movs	r3, #1
 8009414:	4622      	mov	r2, r4
 8009416:	4639      	mov	r1, r7
 8009418:	4630      	mov	r0, r6
 800941a:	47c0      	blx	r8
 800941c:	3001      	adds	r0, #1
 800941e:	d0e6      	beq.n	80093ee <_printf_common+0xb2>
 8009420:	f109 0901 	add.w	r9, r9, #1
 8009424:	e7d8      	b.n	80093d8 <_printf_common+0x9c>
	...

08009428 <_printf_i>:
 8009428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800942c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009430:	460c      	mov	r4, r1
 8009432:	7e09      	ldrb	r1, [r1, #24]
 8009434:	b085      	sub	sp, #20
 8009436:	296e      	cmp	r1, #110	; 0x6e
 8009438:	4617      	mov	r7, r2
 800943a:	4606      	mov	r6, r0
 800943c:	4698      	mov	r8, r3
 800943e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009440:	f000 80b3 	beq.w	80095aa <_printf_i+0x182>
 8009444:	d822      	bhi.n	800948c <_printf_i+0x64>
 8009446:	2963      	cmp	r1, #99	; 0x63
 8009448:	d036      	beq.n	80094b8 <_printf_i+0x90>
 800944a:	d80a      	bhi.n	8009462 <_printf_i+0x3a>
 800944c:	2900      	cmp	r1, #0
 800944e:	f000 80b9 	beq.w	80095c4 <_printf_i+0x19c>
 8009452:	2958      	cmp	r1, #88	; 0x58
 8009454:	f000 8083 	beq.w	800955e <_printf_i+0x136>
 8009458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800945c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009460:	e032      	b.n	80094c8 <_printf_i+0xa0>
 8009462:	2964      	cmp	r1, #100	; 0x64
 8009464:	d001      	beq.n	800946a <_printf_i+0x42>
 8009466:	2969      	cmp	r1, #105	; 0x69
 8009468:	d1f6      	bne.n	8009458 <_printf_i+0x30>
 800946a:	6820      	ldr	r0, [r4, #0]
 800946c:	6813      	ldr	r3, [r2, #0]
 800946e:	0605      	lsls	r5, r0, #24
 8009470:	f103 0104 	add.w	r1, r3, #4
 8009474:	d52a      	bpl.n	80094cc <_printf_i+0xa4>
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6011      	str	r1, [r2, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	da03      	bge.n	8009486 <_printf_i+0x5e>
 800947e:	222d      	movs	r2, #45	; 0x2d
 8009480:	425b      	negs	r3, r3
 8009482:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009486:	486f      	ldr	r0, [pc, #444]	; (8009644 <_printf_i+0x21c>)
 8009488:	220a      	movs	r2, #10
 800948a:	e039      	b.n	8009500 <_printf_i+0xd8>
 800948c:	2973      	cmp	r1, #115	; 0x73
 800948e:	f000 809d 	beq.w	80095cc <_printf_i+0x1a4>
 8009492:	d808      	bhi.n	80094a6 <_printf_i+0x7e>
 8009494:	296f      	cmp	r1, #111	; 0x6f
 8009496:	d020      	beq.n	80094da <_printf_i+0xb2>
 8009498:	2970      	cmp	r1, #112	; 0x70
 800949a:	d1dd      	bne.n	8009458 <_printf_i+0x30>
 800949c:	6823      	ldr	r3, [r4, #0]
 800949e:	f043 0320 	orr.w	r3, r3, #32
 80094a2:	6023      	str	r3, [r4, #0]
 80094a4:	e003      	b.n	80094ae <_printf_i+0x86>
 80094a6:	2975      	cmp	r1, #117	; 0x75
 80094a8:	d017      	beq.n	80094da <_printf_i+0xb2>
 80094aa:	2978      	cmp	r1, #120	; 0x78
 80094ac:	d1d4      	bne.n	8009458 <_printf_i+0x30>
 80094ae:	2378      	movs	r3, #120	; 0x78
 80094b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094b4:	4864      	ldr	r0, [pc, #400]	; (8009648 <_printf_i+0x220>)
 80094b6:	e055      	b.n	8009564 <_printf_i+0x13c>
 80094b8:	6813      	ldr	r3, [r2, #0]
 80094ba:	1d19      	adds	r1, r3, #4
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6011      	str	r1, [r2, #0]
 80094c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094c8:	2301      	movs	r3, #1
 80094ca:	e08c      	b.n	80095e6 <_printf_i+0x1be>
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6011      	str	r1, [r2, #0]
 80094d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094d4:	bf18      	it	ne
 80094d6:	b21b      	sxthne	r3, r3
 80094d8:	e7cf      	b.n	800947a <_printf_i+0x52>
 80094da:	6813      	ldr	r3, [r2, #0]
 80094dc:	6825      	ldr	r5, [r4, #0]
 80094de:	1d18      	adds	r0, r3, #4
 80094e0:	6010      	str	r0, [r2, #0]
 80094e2:	0628      	lsls	r0, r5, #24
 80094e4:	d501      	bpl.n	80094ea <_printf_i+0xc2>
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	e002      	b.n	80094f0 <_printf_i+0xc8>
 80094ea:	0668      	lsls	r0, r5, #25
 80094ec:	d5fb      	bpl.n	80094e6 <_printf_i+0xbe>
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	4854      	ldr	r0, [pc, #336]	; (8009644 <_printf_i+0x21c>)
 80094f2:	296f      	cmp	r1, #111	; 0x6f
 80094f4:	bf14      	ite	ne
 80094f6:	220a      	movne	r2, #10
 80094f8:	2208      	moveq	r2, #8
 80094fa:	2100      	movs	r1, #0
 80094fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009500:	6865      	ldr	r5, [r4, #4]
 8009502:	60a5      	str	r5, [r4, #8]
 8009504:	2d00      	cmp	r5, #0
 8009506:	f2c0 8095 	blt.w	8009634 <_printf_i+0x20c>
 800950a:	6821      	ldr	r1, [r4, #0]
 800950c:	f021 0104 	bic.w	r1, r1, #4
 8009510:	6021      	str	r1, [r4, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d13d      	bne.n	8009592 <_printf_i+0x16a>
 8009516:	2d00      	cmp	r5, #0
 8009518:	f040 808e 	bne.w	8009638 <_printf_i+0x210>
 800951c:	4665      	mov	r5, ip
 800951e:	2a08      	cmp	r2, #8
 8009520:	d10b      	bne.n	800953a <_printf_i+0x112>
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	07db      	lsls	r3, r3, #31
 8009526:	d508      	bpl.n	800953a <_printf_i+0x112>
 8009528:	6923      	ldr	r3, [r4, #16]
 800952a:	6862      	ldr	r2, [r4, #4]
 800952c:	429a      	cmp	r2, r3
 800952e:	bfde      	ittt	le
 8009530:	2330      	movle	r3, #48	; 0x30
 8009532:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009536:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800953a:	ebac 0305 	sub.w	r3, ip, r5
 800953e:	6123      	str	r3, [r4, #16]
 8009540:	f8cd 8000 	str.w	r8, [sp]
 8009544:	463b      	mov	r3, r7
 8009546:	aa03      	add	r2, sp, #12
 8009548:	4621      	mov	r1, r4
 800954a:	4630      	mov	r0, r6
 800954c:	f7ff fef6 	bl	800933c <_printf_common>
 8009550:	3001      	adds	r0, #1
 8009552:	d14d      	bne.n	80095f0 <_printf_i+0x1c8>
 8009554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009558:	b005      	add	sp, #20
 800955a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800955e:	4839      	ldr	r0, [pc, #228]	; (8009644 <_printf_i+0x21c>)
 8009560:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009564:	6813      	ldr	r3, [r2, #0]
 8009566:	6821      	ldr	r1, [r4, #0]
 8009568:	1d1d      	adds	r5, r3, #4
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6015      	str	r5, [r2, #0]
 800956e:	060a      	lsls	r2, r1, #24
 8009570:	d50b      	bpl.n	800958a <_printf_i+0x162>
 8009572:	07ca      	lsls	r2, r1, #31
 8009574:	bf44      	itt	mi
 8009576:	f041 0120 	orrmi.w	r1, r1, #32
 800957a:	6021      	strmi	r1, [r4, #0]
 800957c:	b91b      	cbnz	r3, 8009586 <_printf_i+0x15e>
 800957e:	6822      	ldr	r2, [r4, #0]
 8009580:	f022 0220 	bic.w	r2, r2, #32
 8009584:	6022      	str	r2, [r4, #0]
 8009586:	2210      	movs	r2, #16
 8009588:	e7b7      	b.n	80094fa <_printf_i+0xd2>
 800958a:	064d      	lsls	r5, r1, #25
 800958c:	bf48      	it	mi
 800958e:	b29b      	uxthmi	r3, r3
 8009590:	e7ef      	b.n	8009572 <_printf_i+0x14a>
 8009592:	4665      	mov	r5, ip
 8009594:	fbb3 f1f2 	udiv	r1, r3, r2
 8009598:	fb02 3311 	mls	r3, r2, r1, r3
 800959c:	5cc3      	ldrb	r3, [r0, r3]
 800959e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80095a2:	460b      	mov	r3, r1
 80095a4:	2900      	cmp	r1, #0
 80095a6:	d1f5      	bne.n	8009594 <_printf_i+0x16c>
 80095a8:	e7b9      	b.n	800951e <_printf_i+0xf6>
 80095aa:	6813      	ldr	r3, [r2, #0]
 80095ac:	6825      	ldr	r5, [r4, #0]
 80095ae:	6961      	ldr	r1, [r4, #20]
 80095b0:	1d18      	adds	r0, r3, #4
 80095b2:	6010      	str	r0, [r2, #0]
 80095b4:	0628      	lsls	r0, r5, #24
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	d501      	bpl.n	80095be <_printf_i+0x196>
 80095ba:	6019      	str	r1, [r3, #0]
 80095bc:	e002      	b.n	80095c4 <_printf_i+0x19c>
 80095be:	066a      	lsls	r2, r5, #25
 80095c0:	d5fb      	bpl.n	80095ba <_printf_i+0x192>
 80095c2:	8019      	strh	r1, [r3, #0]
 80095c4:	2300      	movs	r3, #0
 80095c6:	6123      	str	r3, [r4, #16]
 80095c8:	4665      	mov	r5, ip
 80095ca:	e7b9      	b.n	8009540 <_printf_i+0x118>
 80095cc:	6813      	ldr	r3, [r2, #0]
 80095ce:	1d19      	adds	r1, r3, #4
 80095d0:	6011      	str	r1, [r2, #0]
 80095d2:	681d      	ldr	r5, [r3, #0]
 80095d4:	6862      	ldr	r2, [r4, #4]
 80095d6:	2100      	movs	r1, #0
 80095d8:	4628      	mov	r0, r5
 80095da:	f7f6 fe11 	bl	8000200 <memchr>
 80095de:	b108      	cbz	r0, 80095e4 <_printf_i+0x1bc>
 80095e0:	1b40      	subs	r0, r0, r5
 80095e2:	6060      	str	r0, [r4, #4]
 80095e4:	6863      	ldr	r3, [r4, #4]
 80095e6:	6123      	str	r3, [r4, #16]
 80095e8:	2300      	movs	r3, #0
 80095ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095ee:	e7a7      	b.n	8009540 <_printf_i+0x118>
 80095f0:	6923      	ldr	r3, [r4, #16]
 80095f2:	462a      	mov	r2, r5
 80095f4:	4639      	mov	r1, r7
 80095f6:	4630      	mov	r0, r6
 80095f8:	47c0      	blx	r8
 80095fa:	3001      	adds	r0, #1
 80095fc:	d0aa      	beq.n	8009554 <_printf_i+0x12c>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	079b      	lsls	r3, r3, #30
 8009602:	d413      	bmi.n	800962c <_printf_i+0x204>
 8009604:	68e0      	ldr	r0, [r4, #12]
 8009606:	9b03      	ldr	r3, [sp, #12]
 8009608:	4298      	cmp	r0, r3
 800960a:	bfb8      	it	lt
 800960c:	4618      	movlt	r0, r3
 800960e:	e7a3      	b.n	8009558 <_printf_i+0x130>
 8009610:	2301      	movs	r3, #1
 8009612:	464a      	mov	r2, r9
 8009614:	4639      	mov	r1, r7
 8009616:	4630      	mov	r0, r6
 8009618:	47c0      	blx	r8
 800961a:	3001      	adds	r0, #1
 800961c:	d09a      	beq.n	8009554 <_printf_i+0x12c>
 800961e:	3501      	adds	r5, #1
 8009620:	68e3      	ldr	r3, [r4, #12]
 8009622:	9a03      	ldr	r2, [sp, #12]
 8009624:	1a9b      	subs	r3, r3, r2
 8009626:	42ab      	cmp	r3, r5
 8009628:	dcf2      	bgt.n	8009610 <_printf_i+0x1e8>
 800962a:	e7eb      	b.n	8009604 <_printf_i+0x1dc>
 800962c:	2500      	movs	r5, #0
 800962e:	f104 0919 	add.w	r9, r4, #25
 8009632:	e7f5      	b.n	8009620 <_printf_i+0x1f8>
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1ac      	bne.n	8009592 <_printf_i+0x16a>
 8009638:	7803      	ldrb	r3, [r0, #0]
 800963a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800963e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009642:	e76c      	b.n	800951e <_printf_i+0xf6>
 8009644:	0800c5b6 	.word	0x0800c5b6
 8009648:	0800c5c7 	.word	0x0800c5c7

0800964c <siprintf>:
 800964c:	b40e      	push	{r1, r2, r3}
 800964e:	b500      	push	{lr}
 8009650:	b09c      	sub	sp, #112	; 0x70
 8009652:	ab1d      	add	r3, sp, #116	; 0x74
 8009654:	9002      	str	r0, [sp, #8]
 8009656:	9006      	str	r0, [sp, #24]
 8009658:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800965c:	4809      	ldr	r0, [pc, #36]	; (8009684 <siprintf+0x38>)
 800965e:	9107      	str	r1, [sp, #28]
 8009660:	9104      	str	r1, [sp, #16]
 8009662:	4909      	ldr	r1, [pc, #36]	; (8009688 <siprintf+0x3c>)
 8009664:	f853 2b04 	ldr.w	r2, [r3], #4
 8009668:	9105      	str	r1, [sp, #20]
 800966a:	6800      	ldr	r0, [r0, #0]
 800966c:	9301      	str	r3, [sp, #4]
 800966e:	a902      	add	r1, sp, #8
 8009670:	f002 fd84 	bl	800c17c <_svfiprintf_r>
 8009674:	9b02      	ldr	r3, [sp, #8]
 8009676:	2200      	movs	r2, #0
 8009678:	701a      	strb	r2, [r3, #0]
 800967a:	b01c      	add	sp, #112	; 0x70
 800967c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009680:	b003      	add	sp, #12
 8009682:	4770      	bx	lr
 8009684:	2000000c 	.word	0x2000000c
 8009688:	ffff0208 	.word	0xffff0208

0800968c <strchr>:
 800968c:	b2c9      	uxtb	r1, r1
 800968e:	4603      	mov	r3, r0
 8009690:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009694:	b11a      	cbz	r2, 800969e <strchr+0x12>
 8009696:	428a      	cmp	r2, r1
 8009698:	d1f9      	bne.n	800968e <strchr+0x2>
 800969a:	4618      	mov	r0, r3
 800969c:	4770      	bx	lr
 800969e:	2900      	cmp	r1, #0
 80096a0:	bf18      	it	ne
 80096a2:	2300      	movne	r3, #0
 80096a4:	e7f9      	b.n	800969a <strchr+0xe>

080096a6 <sulp>:
 80096a6:	b570      	push	{r4, r5, r6, lr}
 80096a8:	4604      	mov	r4, r0
 80096aa:	460d      	mov	r5, r1
 80096ac:	ec45 4b10 	vmov	d0, r4, r5
 80096b0:	4616      	mov	r6, r2
 80096b2:	f002 fb1f 	bl	800bcf4 <__ulp>
 80096b6:	ec51 0b10 	vmov	r0, r1, d0
 80096ba:	b17e      	cbz	r6, 80096dc <sulp+0x36>
 80096bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80096c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	dd09      	ble.n	80096dc <sulp+0x36>
 80096c8:	051b      	lsls	r3, r3, #20
 80096ca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80096ce:	2400      	movs	r4, #0
 80096d0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80096d4:	4622      	mov	r2, r4
 80096d6:	462b      	mov	r3, r5
 80096d8:	f7f6 ff9e 	bl	8000618 <__aeabi_dmul>
 80096dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080096e0 <_strtod_l>:
 80096e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	461f      	mov	r7, r3
 80096e6:	b0a1      	sub	sp, #132	; 0x84
 80096e8:	2300      	movs	r3, #0
 80096ea:	4681      	mov	r9, r0
 80096ec:	4638      	mov	r0, r7
 80096ee:	460e      	mov	r6, r1
 80096f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80096f2:	931c      	str	r3, [sp, #112]	; 0x70
 80096f4:	f001 fffd 	bl	800b6f2 <__localeconv_l>
 80096f8:	4680      	mov	r8, r0
 80096fa:	6800      	ldr	r0, [r0, #0]
 80096fc:	f7f6 fd72 	bl	80001e4 <strlen>
 8009700:	f04f 0a00 	mov.w	sl, #0
 8009704:	4604      	mov	r4, r0
 8009706:	f04f 0b00 	mov.w	fp, #0
 800970a:	961b      	str	r6, [sp, #108]	; 0x6c
 800970c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800970e:	781a      	ldrb	r2, [r3, #0]
 8009710:	2a0d      	cmp	r2, #13
 8009712:	d832      	bhi.n	800977a <_strtod_l+0x9a>
 8009714:	2a09      	cmp	r2, #9
 8009716:	d236      	bcs.n	8009786 <_strtod_l+0xa6>
 8009718:	2a00      	cmp	r2, #0
 800971a:	d03e      	beq.n	800979a <_strtod_l+0xba>
 800971c:	2300      	movs	r3, #0
 800971e:	930d      	str	r3, [sp, #52]	; 0x34
 8009720:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009722:	782b      	ldrb	r3, [r5, #0]
 8009724:	2b30      	cmp	r3, #48	; 0x30
 8009726:	f040 80ac 	bne.w	8009882 <_strtod_l+0x1a2>
 800972a:	786b      	ldrb	r3, [r5, #1]
 800972c:	2b58      	cmp	r3, #88	; 0x58
 800972e:	d001      	beq.n	8009734 <_strtod_l+0x54>
 8009730:	2b78      	cmp	r3, #120	; 0x78
 8009732:	d167      	bne.n	8009804 <_strtod_l+0x124>
 8009734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009736:	9301      	str	r3, [sp, #4]
 8009738:	ab1c      	add	r3, sp, #112	; 0x70
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	9702      	str	r7, [sp, #8]
 800973e:	ab1d      	add	r3, sp, #116	; 0x74
 8009740:	4a88      	ldr	r2, [pc, #544]	; (8009964 <_strtod_l+0x284>)
 8009742:	a91b      	add	r1, sp, #108	; 0x6c
 8009744:	4648      	mov	r0, r9
 8009746:	f001 fcfa 	bl	800b13e <__gethex>
 800974a:	f010 0407 	ands.w	r4, r0, #7
 800974e:	4606      	mov	r6, r0
 8009750:	d005      	beq.n	800975e <_strtod_l+0x7e>
 8009752:	2c06      	cmp	r4, #6
 8009754:	d12b      	bne.n	80097ae <_strtod_l+0xce>
 8009756:	3501      	adds	r5, #1
 8009758:	2300      	movs	r3, #0
 800975a:	951b      	str	r5, [sp, #108]	; 0x6c
 800975c:	930d      	str	r3, [sp, #52]	; 0x34
 800975e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009760:	2b00      	cmp	r3, #0
 8009762:	f040 859a 	bne.w	800a29a <_strtod_l+0xbba>
 8009766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009768:	b1e3      	cbz	r3, 80097a4 <_strtod_l+0xc4>
 800976a:	4652      	mov	r2, sl
 800976c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009770:	ec43 2b10 	vmov	d0, r2, r3
 8009774:	b021      	add	sp, #132	; 0x84
 8009776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977a:	2a2b      	cmp	r2, #43	; 0x2b
 800977c:	d015      	beq.n	80097aa <_strtod_l+0xca>
 800977e:	2a2d      	cmp	r2, #45	; 0x2d
 8009780:	d004      	beq.n	800978c <_strtod_l+0xac>
 8009782:	2a20      	cmp	r2, #32
 8009784:	d1ca      	bne.n	800971c <_strtod_l+0x3c>
 8009786:	3301      	adds	r3, #1
 8009788:	931b      	str	r3, [sp, #108]	; 0x6c
 800978a:	e7bf      	b.n	800970c <_strtod_l+0x2c>
 800978c:	2201      	movs	r2, #1
 800978e:	920d      	str	r2, [sp, #52]	; 0x34
 8009790:	1c5a      	adds	r2, r3, #1
 8009792:	921b      	str	r2, [sp, #108]	; 0x6c
 8009794:	785b      	ldrb	r3, [r3, #1]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1c2      	bne.n	8009720 <_strtod_l+0x40>
 800979a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800979c:	961b      	str	r6, [sp, #108]	; 0x6c
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f040 8579 	bne.w	800a296 <_strtod_l+0xbb6>
 80097a4:	4652      	mov	r2, sl
 80097a6:	465b      	mov	r3, fp
 80097a8:	e7e2      	b.n	8009770 <_strtod_l+0x90>
 80097aa:	2200      	movs	r2, #0
 80097ac:	e7ef      	b.n	800978e <_strtod_l+0xae>
 80097ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80097b0:	b13a      	cbz	r2, 80097c2 <_strtod_l+0xe2>
 80097b2:	2135      	movs	r1, #53	; 0x35
 80097b4:	a81e      	add	r0, sp, #120	; 0x78
 80097b6:	f002 fb95 	bl	800bee4 <__copybits>
 80097ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80097bc:	4648      	mov	r0, r9
 80097be:	f002 f802 	bl	800b7c6 <_Bfree>
 80097c2:	3c01      	subs	r4, #1
 80097c4:	2c04      	cmp	r4, #4
 80097c6:	d806      	bhi.n	80097d6 <_strtod_l+0xf6>
 80097c8:	e8df f004 	tbb	[pc, r4]
 80097cc:	1714030a 	.word	0x1714030a
 80097d0:	0a          	.byte	0x0a
 80097d1:	00          	.byte	0x00
 80097d2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80097d6:	0730      	lsls	r0, r6, #28
 80097d8:	d5c1      	bpl.n	800975e <_strtod_l+0x7e>
 80097da:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80097de:	e7be      	b.n	800975e <_strtod_l+0x7e>
 80097e0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80097e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80097e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80097ea:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80097ee:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80097f2:	e7f0      	b.n	80097d6 <_strtod_l+0xf6>
 80097f4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009968 <_strtod_l+0x288>
 80097f8:	e7ed      	b.n	80097d6 <_strtod_l+0xf6>
 80097fa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80097fe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009802:	e7e8      	b.n	80097d6 <_strtod_l+0xf6>
 8009804:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009806:	1c5a      	adds	r2, r3, #1
 8009808:	921b      	str	r2, [sp, #108]	; 0x6c
 800980a:	785b      	ldrb	r3, [r3, #1]
 800980c:	2b30      	cmp	r3, #48	; 0x30
 800980e:	d0f9      	beq.n	8009804 <_strtod_l+0x124>
 8009810:	2b00      	cmp	r3, #0
 8009812:	d0a4      	beq.n	800975e <_strtod_l+0x7e>
 8009814:	2301      	movs	r3, #1
 8009816:	2500      	movs	r5, #0
 8009818:	9306      	str	r3, [sp, #24]
 800981a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800981c:	9308      	str	r3, [sp, #32]
 800981e:	9507      	str	r5, [sp, #28]
 8009820:	9505      	str	r5, [sp, #20]
 8009822:	220a      	movs	r2, #10
 8009824:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009826:	7807      	ldrb	r7, [r0, #0]
 8009828:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800982c:	b2d9      	uxtb	r1, r3
 800982e:	2909      	cmp	r1, #9
 8009830:	d929      	bls.n	8009886 <_strtod_l+0x1a6>
 8009832:	4622      	mov	r2, r4
 8009834:	f8d8 1000 	ldr.w	r1, [r8]
 8009838:	f002 fda8 	bl	800c38c <strncmp>
 800983c:	2800      	cmp	r0, #0
 800983e:	d031      	beq.n	80098a4 <_strtod_l+0x1c4>
 8009840:	2000      	movs	r0, #0
 8009842:	9c05      	ldr	r4, [sp, #20]
 8009844:	9004      	str	r0, [sp, #16]
 8009846:	463b      	mov	r3, r7
 8009848:	4602      	mov	r2, r0
 800984a:	2b65      	cmp	r3, #101	; 0x65
 800984c:	d001      	beq.n	8009852 <_strtod_l+0x172>
 800984e:	2b45      	cmp	r3, #69	; 0x45
 8009850:	d114      	bne.n	800987c <_strtod_l+0x19c>
 8009852:	b924      	cbnz	r4, 800985e <_strtod_l+0x17e>
 8009854:	b910      	cbnz	r0, 800985c <_strtod_l+0x17c>
 8009856:	9b06      	ldr	r3, [sp, #24]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d09e      	beq.n	800979a <_strtod_l+0xba>
 800985c:	2400      	movs	r4, #0
 800985e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009860:	1c73      	adds	r3, r6, #1
 8009862:	931b      	str	r3, [sp, #108]	; 0x6c
 8009864:	7873      	ldrb	r3, [r6, #1]
 8009866:	2b2b      	cmp	r3, #43	; 0x2b
 8009868:	d078      	beq.n	800995c <_strtod_l+0x27c>
 800986a:	2b2d      	cmp	r3, #45	; 0x2d
 800986c:	d070      	beq.n	8009950 <_strtod_l+0x270>
 800986e:	f04f 0c00 	mov.w	ip, #0
 8009872:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009876:	2f09      	cmp	r7, #9
 8009878:	d97c      	bls.n	8009974 <_strtod_l+0x294>
 800987a:	961b      	str	r6, [sp, #108]	; 0x6c
 800987c:	f04f 0e00 	mov.w	lr, #0
 8009880:	e09a      	b.n	80099b8 <_strtod_l+0x2d8>
 8009882:	2300      	movs	r3, #0
 8009884:	e7c7      	b.n	8009816 <_strtod_l+0x136>
 8009886:	9905      	ldr	r1, [sp, #20]
 8009888:	2908      	cmp	r1, #8
 800988a:	bfdd      	ittte	le
 800988c:	9907      	ldrle	r1, [sp, #28]
 800988e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009892:	9307      	strle	r3, [sp, #28]
 8009894:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009898:	9b05      	ldr	r3, [sp, #20]
 800989a:	3001      	adds	r0, #1
 800989c:	3301      	adds	r3, #1
 800989e:	9305      	str	r3, [sp, #20]
 80098a0:	901b      	str	r0, [sp, #108]	; 0x6c
 80098a2:	e7bf      	b.n	8009824 <_strtod_l+0x144>
 80098a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098a6:	191a      	adds	r2, r3, r4
 80098a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80098aa:	9a05      	ldr	r2, [sp, #20]
 80098ac:	5d1b      	ldrb	r3, [r3, r4]
 80098ae:	2a00      	cmp	r2, #0
 80098b0:	d037      	beq.n	8009922 <_strtod_l+0x242>
 80098b2:	9c05      	ldr	r4, [sp, #20]
 80098b4:	4602      	mov	r2, r0
 80098b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80098ba:	2909      	cmp	r1, #9
 80098bc:	d913      	bls.n	80098e6 <_strtod_l+0x206>
 80098be:	2101      	movs	r1, #1
 80098c0:	9104      	str	r1, [sp, #16]
 80098c2:	e7c2      	b.n	800984a <_strtod_l+0x16a>
 80098c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80098ca:	785b      	ldrb	r3, [r3, #1]
 80098cc:	3001      	adds	r0, #1
 80098ce:	2b30      	cmp	r3, #48	; 0x30
 80098d0:	d0f8      	beq.n	80098c4 <_strtod_l+0x1e4>
 80098d2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80098d6:	2a08      	cmp	r2, #8
 80098d8:	f200 84e4 	bhi.w	800a2a4 <_strtod_l+0xbc4>
 80098dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80098de:	9208      	str	r2, [sp, #32]
 80098e0:	4602      	mov	r2, r0
 80098e2:	2000      	movs	r0, #0
 80098e4:	4604      	mov	r4, r0
 80098e6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80098ea:	f100 0101 	add.w	r1, r0, #1
 80098ee:	d012      	beq.n	8009916 <_strtod_l+0x236>
 80098f0:	440a      	add	r2, r1
 80098f2:	eb00 0c04 	add.w	ip, r0, r4
 80098f6:	4621      	mov	r1, r4
 80098f8:	270a      	movs	r7, #10
 80098fa:	458c      	cmp	ip, r1
 80098fc:	d113      	bne.n	8009926 <_strtod_l+0x246>
 80098fe:	1821      	adds	r1, r4, r0
 8009900:	2908      	cmp	r1, #8
 8009902:	f104 0401 	add.w	r4, r4, #1
 8009906:	4404      	add	r4, r0
 8009908:	dc19      	bgt.n	800993e <_strtod_l+0x25e>
 800990a:	9b07      	ldr	r3, [sp, #28]
 800990c:	210a      	movs	r1, #10
 800990e:	fb01 e303 	mla	r3, r1, r3, lr
 8009912:	9307      	str	r3, [sp, #28]
 8009914:	2100      	movs	r1, #0
 8009916:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009918:	1c58      	adds	r0, r3, #1
 800991a:	901b      	str	r0, [sp, #108]	; 0x6c
 800991c:	785b      	ldrb	r3, [r3, #1]
 800991e:	4608      	mov	r0, r1
 8009920:	e7c9      	b.n	80098b6 <_strtod_l+0x1d6>
 8009922:	9805      	ldr	r0, [sp, #20]
 8009924:	e7d3      	b.n	80098ce <_strtod_l+0x1ee>
 8009926:	2908      	cmp	r1, #8
 8009928:	f101 0101 	add.w	r1, r1, #1
 800992c:	dc03      	bgt.n	8009936 <_strtod_l+0x256>
 800992e:	9b07      	ldr	r3, [sp, #28]
 8009930:	437b      	muls	r3, r7
 8009932:	9307      	str	r3, [sp, #28]
 8009934:	e7e1      	b.n	80098fa <_strtod_l+0x21a>
 8009936:	2910      	cmp	r1, #16
 8009938:	bfd8      	it	le
 800993a:	437d      	mulle	r5, r7
 800993c:	e7dd      	b.n	80098fa <_strtod_l+0x21a>
 800993e:	2c10      	cmp	r4, #16
 8009940:	bfdc      	itt	le
 8009942:	210a      	movle	r1, #10
 8009944:	fb01 e505 	mlale	r5, r1, r5, lr
 8009948:	e7e4      	b.n	8009914 <_strtod_l+0x234>
 800994a:	2301      	movs	r3, #1
 800994c:	9304      	str	r3, [sp, #16]
 800994e:	e781      	b.n	8009854 <_strtod_l+0x174>
 8009950:	f04f 0c01 	mov.w	ip, #1
 8009954:	1cb3      	adds	r3, r6, #2
 8009956:	931b      	str	r3, [sp, #108]	; 0x6c
 8009958:	78b3      	ldrb	r3, [r6, #2]
 800995a:	e78a      	b.n	8009872 <_strtod_l+0x192>
 800995c:	f04f 0c00 	mov.w	ip, #0
 8009960:	e7f8      	b.n	8009954 <_strtod_l+0x274>
 8009962:	bf00      	nop
 8009964:	0800c5d8 	.word	0x0800c5d8
 8009968:	7ff00000 	.word	0x7ff00000
 800996c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800996e:	1c5f      	adds	r7, r3, #1
 8009970:	971b      	str	r7, [sp, #108]	; 0x6c
 8009972:	785b      	ldrb	r3, [r3, #1]
 8009974:	2b30      	cmp	r3, #48	; 0x30
 8009976:	d0f9      	beq.n	800996c <_strtod_l+0x28c>
 8009978:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800997c:	2f08      	cmp	r7, #8
 800997e:	f63f af7d 	bhi.w	800987c <_strtod_l+0x19c>
 8009982:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009986:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009988:	930a      	str	r3, [sp, #40]	; 0x28
 800998a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800998c:	1c5f      	adds	r7, r3, #1
 800998e:	971b      	str	r7, [sp, #108]	; 0x6c
 8009990:	785b      	ldrb	r3, [r3, #1]
 8009992:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8009996:	f1b8 0f09 	cmp.w	r8, #9
 800999a:	d937      	bls.n	8009a0c <_strtod_l+0x32c>
 800999c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800999e:	1a7f      	subs	r7, r7, r1
 80099a0:	2f08      	cmp	r7, #8
 80099a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80099a6:	dc37      	bgt.n	8009a18 <_strtod_l+0x338>
 80099a8:	45be      	cmp	lr, r7
 80099aa:	bfa8      	it	ge
 80099ac:	46be      	movge	lr, r7
 80099ae:	f1bc 0f00 	cmp.w	ip, #0
 80099b2:	d001      	beq.n	80099b8 <_strtod_l+0x2d8>
 80099b4:	f1ce 0e00 	rsb	lr, lr, #0
 80099b8:	2c00      	cmp	r4, #0
 80099ba:	d151      	bne.n	8009a60 <_strtod_l+0x380>
 80099bc:	2800      	cmp	r0, #0
 80099be:	f47f aece 	bne.w	800975e <_strtod_l+0x7e>
 80099c2:	9a06      	ldr	r2, [sp, #24]
 80099c4:	2a00      	cmp	r2, #0
 80099c6:	f47f aeca 	bne.w	800975e <_strtod_l+0x7e>
 80099ca:	9a04      	ldr	r2, [sp, #16]
 80099cc:	2a00      	cmp	r2, #0
 80099ce:	f47f aee4 	bne.w	800979a <_strtod_l+0xba>
 80099d2:	2b4e      	cmp	r3, #78	; 0x4e
 80099d4:	d027      	beq.n	8009a26 <_strtod_l+0x346>
 80099d6:	dc21      	bgt.n	8009a1c <_strtod_l+0x33c>
 80099d8:	2b49      	cmp	r3, #73	; 0x49
 80099da:	f47f aede 	bne.w	800979a <_strtod_l+0xba>
 80099de:	49a0      	ldr	r1, [pc, #640]	; (8009c60 <_strtod_l+0x580>)
 80099e0:	a81b      	add	r0, sp, #108	; 0x6c
 80099e2:	f001 fddf 	bl	800b5a4 <__match>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f43f aed7 	beq.w	800979a <_strtod_l+0xba>
 80099ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099ee:	499d      	ldr	r1, [pc, #628]	; (8009c64 <_strtod_l+0x584>)
 80099f0:	3b01      	subs	r3, #1
 80099f2:	a81b      	add	r0, sp, #108	; 0x6c
 80099f4:	931b      	str	r3, [sp, #108]	; 0x6c
 80099f6:	f001 fdd5 	bl	800b5a4 <__match>
 80099fa:	b910      	cbnz	r0, 8009a02 <_strtod_l+0x322>
 80099fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099fe:	3301      	adds	r3, #1
 8009a00:	931b      	str	r3, [sp, #108]	; 0x6c
 8009a02:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009c78 <_strtod_l+0x598>
 8009a06:	f04f 0a00 	mov.w	sl, #0
 8009a0a:	e6a8      	b.n	800975e <_strtod_l+0x7e>
 8009a0c:	210a      	movs	r1, #10
 8009a0e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009a12:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009a16:	e7b8      	b.n	800998a <_strtod_l+0x2aa>
 8009a18:	46be      	mov	lr, r7
 8009a1a:	e7c8      	b.n	80099ae <_strtod_l+0x2ce>
 8009a1c:	2b69      	cmp	r3, #105	; 0x69
 8009a1e:	d0de      	beq.n	80099de <_strtod_l+0x2fe>
 8009a20:	2b6e      	cmp	r3, #110	; 0x6e
 8009a22:	f47f aeba 	bne.w	800979a <_strtod_l+0xba>
 8009a26:	4990      	ldr	r1, [pc, #576]	; (8009c68 <_strtod_l+0x588>)
 8009a28:	a81b      	add	r0, sp, #108	; 0x6c
 8009a2a:	f001 fdbb 	bl	800b5a4 <__match>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	f43f aeb3 	beq.w	800979a <_strtod_l+0xba>
 8009a34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	2b28      	cmp	r3, #40	; 0x28
 8009a3a:	d10e      	bne.n	8009a5a <_strtod_l+0x37a>
 8009a3c:	aa1e      	add	r2, sp, #120	; 0x78
 8009a3e:	498b      	ldr	r1, [pc, #556]	; (8009c6c <_strtod_l+0x58c>)
 8009a40:	a81b      	add	r0, sp, #108	; 0x6c
 8009a42:	f001 fdc3 	bl	800b5cc <__hexnan>
 8009a46:	2805      	cmp	r0, #5
 8009a48:	d107      	bne.n	8009a5a <_strtod_l+0x37a>
 8009a4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a4c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009a50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009a54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009a58:	e681      	b.n	800975e <_strtod_l+0x7e>
 8009a5a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009c80 <_strtod_l+0x5a0>
 8009a5e:	e7d2      	b.n	8009a06 <_strtod_l+0x326>
 8009a60:	ebae 0302 	sub.w	r3, lr, r2
 8009a64:	9306      	str	r3, [sp, #24]
 8009a66:	9b05      	ldr	r3, [sp, #20]
 8009a68:	9807      	ldr	r0, [sp, #28]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	bf08      	it	eq
 8009a6e:	4623      	moveq	r3, r4
 8009a70:	2c10      	cmp	r4, #16
 8009a72:	9305      	str	r3, [sp, #20]
 8009a74:	46a0      	mov	r8, r4
 8009a76:	bfa8      	it	ge
 8009a78:	f04f 0810 	movge.w	r8, #16
 8009a7c:	f7f6 fd52 	bl	8000524 <__aeabi_ui2d>
 8009a80:	2c09      	cmp	r4, #9
 8009a82:	4682      	mov	sl, r0
 8009a84:	468b      	mov	fp, r1
 8009a86:	dc13      	bgt.n	8009ab0 <_strtod_l+0x3d0>
 8009a88:	9b06      	ldr	r3, [sp, #24]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f43f ae67 	beq.w	800975e <_strtod_l+0x7e>
 8009a90:	9b06      	ldr	r3, [sp, #24]
 8009a92:	dd7a      	ble.n	8009b8a <_strtod_l+0x4aa>
 8009a94:	2b16      	cmp	r3, #22
 8009a96:	dc61      	bgt.n	8009b5c <_strtod_l+0x47c>
 8009a98:	4a75      	ldr	r2, [pc, #468]	; (8009c70 <_strtod_l+0x590>)
 8009a9a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009a9e:	e9de 0100 	ldrd	r0, r1, [lr]
 8009aa2:	4652      	mov	r2, sl
 8009aa4:	465b      	mov	r3, fp
 8009aa6:	f7f6 fdb7 	bl	8000618 <__aeabi_dmul>
 8009aaa:	4682      	mov	sl, r0
 8009aac:	468b      	mov	fp, r1
 8009aae:	e656      	b.n	800975e <_strtod_l+0x7e>
 8009ab0:	4b6f      	ldr	r3, [pc, #444]	; (8009c70 <_strtod_l+0x590>)
 8009ab2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009ab6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009aba:	f7f6 fdad 	bl	8000618 <__aeabi_dmul>
 8009abe:	4606      	mov	r6, r0
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	460f      	mov	r7, r1
 8009ac4:	f7f6 fd2e 	bl	8000524 <__aeabi_ui2d>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	460b      	mov	r3, r1
 8009acc:	4630      	mov	r0, r6
 8009ace:	4639      	mov	r1, r7
 8009ad0:	f7f6 fbec 	bl	80002ac <__adddf3>
 8009ad4:	2c0f      	cmp	r4, #15
 8009ad6:	4682      	mov	sl, r0
 8009ad8:	468b      	mov	fp, r1
 8009ada:	ddd5      	ble.n	8009a88 <_strtod_l+0x3a8>
 8009adc:	9b06      	ldr	r3, [sp, #24]
 8009ade:	eba4 0808 	sub.w	r8, r4, r8
 8009ae2:	4498      	add	r8, r3
 8009ae4:	f1b8 0f00 	cmp.w	r8, #0
 8009ae8:	f340 8096 	ble.w	8009c18 <_strtod_l+0x538>
 8009aec:	f018 030f 	ands.w	r3, r8, #15
 8009af0:	d00a      	beq.n	8009b08 <_strtod_l+0x428>
 8009af2:	495f      	ldr	r1, [pc, #380]	; (8009c70 <_strtod_l+0x590>)
 8009af4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009af8:	4652      	mov	r2, sl
 8009afa:	465b      	mov	r3, fp
 8009afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b00:	f7f6 fd8a 	bl	8000618 <__aeabi_dmul>
 8009b04:	4682      	mov	sl, r0
 8009b06:	468b      	mov	fp, r1
 8009b08:	f038 080f 	bics.w	r8, r8, #15
 8009b0c:	d073      	beq.n	8009bf6 <_strtod_l+0x516>
 8009b0e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009b12:	dd47      	ble.n	8009ba4 <_strtod_l+0x4c4>
 8009b14:	2400      	movs	r4, #0
 8009b16:	46a0      	mov	r8, r4
 8009b18:	9407      	str	r4, [sp, #28]
 8009b1a:	9405      	str	r4, [sp, #20]
 8009b1c:	2322      	movs	r3, #34	; 0x22
 8009b1e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009c78 <_strtod_l+0x598>
 8009b22:	f8c9 3000 	str.w	r3, [r9]
 8009b26:	f04f 0a00 	mov.w	sl, #0
 8009b2a:	9b07      	ldr	r3, [sp, #28]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f43f ae16 	beq.w	800975e <_strtod_l+0x7e>
 8009b32:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b34:	4648      	mov	r0, r9
 8009b36:	f001 fe46 	bl	800b7c6 <_Bfree>
 8009b3a:	9905      	ldr	r1, [sp, #20]
 8009b3c:	4648      	mov	r0, r9
 8009b3e:	f001 fe42 	bl	800b7c6 <_Bfree>
 8009b42:	4641      	mov	r1, r8
 8009b44:	4648      	mov	r0, r9
 8009b46:	f001 fe3e 	bl	800b7c6 <_Bfree>
 8009b4a:	9907      	ldr	r1, [sp, #28]
 8009b4c:	4648      	mov	r0, r9
 8009b4e:	f001 fe3a 	bl	800b7c6 <_Bfree>
 8009b52:	4621      	mov	r1, r4
 8009b54:	4648      	mov	r0, r9
 8009b56:	f001 fe36 	bl	800b7c6 <_Bfree>
 8009b5a:	e600      	b.n	800975e <_strtod_l+0x7e>
 8009b5c:	9a06      	ldr	r2, [sp, #24]
 8009b5e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009b62:	4293      	cmp	r3, r2
 8009b64:	dbba      	blt.n	8009adc <_strtod_l+0x3fc>
 8009b66:	4d42      	ldr	r5, [pc, #264]	; (8009c70 <_strtod_l+0x590>)
 8009b68:	f1c4 040f 	rsb	r4, r4, #15
 8009b6c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009b70:	4652      	mov	r2, sl
 8009b72:	465b      	mov	r3, fp
 8009b74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b78:	f7f6 fd4e 	bl	8000618 <__aeabi_dmul>
 8009b7c:	9b06      	ldr	r3, [sp, #24]
 8009b7e:	1b1c      	subs	r4, r3, r4
 8009b80:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009b84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b88:	e78d      	b.n	8009aa6 <_strtod_l+0x3c6>
 8009b8a:	f113 0f16 	cmn.w	r3, #22
 8009b8e:	dba5      	blt.n	8009adc <_strtod_l+0x3fc>
 8009b90:	4a37      	ldr	r2, [pc, #220]	; (8009c70 <_strtod_l+0x590>)
 8009b92:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009b96:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009b9a:	4650      	mov	r0, sl
 8009b9c:	4659      	mov	r1, fp
 8009b9e:	f7f6 fe65 	bl	800086c <__aeabi_ddiv>
 8009ba2:	e782      	b.n	8009aaa <_strtod_l+0x3ca>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4e33      	ldr	r6, [pc, #204]	; (8009c74 <_strtod_l+0x594>)
 8009ba8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009bac:	4650      	mov	r0, sl
 8009bae:	4659      	mov	r1, fp
 8009bb0:	461d      	mov	r5, r3
 8009bb2:	f1b8 0f01 	cmp.w	r8, #1
 8009bb6:	dc21      	bgt.n	8009bfc <_strtod_l+0x51c>
 8009bb8:	b10b      	cbz	r3, 8009bbe <_strtod_l+0x4de>
 8009bba:	4682      	mov	sl, r0
 8009bbc:	468b      	mov	fp, r1
 8009bbe:	4b2d      	ldr	r3, [pc, #180]	; (8009c74 <_strtod_l+0x594>)
 8009bc0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009bc4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009bc8:	4652      	mov	r2, sl
 8009bca:	465b      	mov	r3, fp
 8009bcc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009bd0:	f7f6 fd22 	bl	8000618 <__aeabi_dmul>
 8009bd4:	4b28      	ldr	r3, [pc, #160]	; (8009c78 <_strtod_l+0x598>)
 8009bd6:	460a      	mov	r2, r1
 8009bd8:	400b      	ands	r3, r1
 8009bda:	4928      	ldr	r1, [pc, #160]	; (8009c7c <_strtod_l+0x59c>)
 8009bdc:	428b      	cmp	r3, r1
 8009bde:	4682      	mov	sl, r0
 8009be0:	d898      	bhi.n	8009b14 <_strtod_l+0x434>
 8009be2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009be6:	428b      	cmp	r3, r1
 8009be8:	bf86      	itte	hi
 8009bea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009c84 <_strtod_l+0x5a4>
 8009bee:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8009bf2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	e077      	b.n	8009cec <_strtod_l+0x60c>
 8009bfc:	f018 0f01 	tst.w	r8, #1
 8009c00:	d006      	beq.n	8009c10 <_strtod_l+0x530>
 8009c02:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	f7f6 fd05 	bl	8000618 <__aeabi_dmul>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	3501      	adds	r5, #1
 8009c12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009c16:	e7cc      	b.n	8009bb2 <_strtod_l+0x4d2>
 8009c18:	d0ed      	beq.n	8009bf6 <_strtod_l+0x516>
 8009c1a:	f1c8 0800 	rsb	r8, r8, #0
 8009c1e:	f018 020f 	ands.w	r2, r8, #15
 8009c22:	d00a      	beq.n	8009c3a <_strtod_l+0x55a>
 8009c24:	4b12      	ldr	r3, [pc, #72]	; (8009c70 <_strtod_l+0x590>)
 8009c26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c2a:	4650      	mov	r0, sl
 8009c2c:	4659      	mov	r1, fp
 8009c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c32:	f7f6 fe1b 	bl	800086c <__aeabi_ddiv>
 8009c36:	4682      	mov	sl, r0
 8009c38:	468b      	mov	fp, r1
 8009c3a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009c3e:	d0da      	beq.n	8009bf6 <_strtod_l+0x516>
 8009c40:	f1b8 0f1f 	cmp.w	r8, #31
 8009c44:	dd20      	ble.n	8009c88 <_strtod_l+0x5a8>
 8009c46:	2400      	movs	r4, #0
 8009c48:	46a0      	mov	r8, r4
 8009c4a:	9407      	str	r4, [sp, #28]
 8009c4c:	9405      	str	r4, [sp, #20]
 8009c4e:	2322      	movs	r3, #34	; 0x22
 8009c50:	f04f 0a00 	mov.w	sl, #0
 8009c54:	f04f 0b00 	mov.w	fp, #0
 8009c58:	f8c9 3000 	str.w	r3, [r9]
 8009c5c:	e765      	b.n	8009b2a <_strtod_l+0x44a>
 8009c5e:	bf00      	nop
 8009c60:	0800c5a9 	.word	0x0800c5a9
 8009c64:	0800c62b 	.word	0x0800c62b
 8009c68:	0800c5b1 	.word	0x0800c5b1
 8009c6c:	0800c5ec 	.word	0x0800c5ec
 8009c70:	0800c668 	.word	0x0800c668
 8009c74:	0800c640 	.word	0x0800c640
 8009c78:	7ff00000 	.word	0x7ff00000
 8009c7c:	7ca00000 	.word	0x7ca00000
 8009c80:	fff80000 	.word	0xfff80000
 8009c84:	7fefffff 	.word	0x7fefffff
 8009c88:	f018 0310 	ands.w	r3, r8, #16
 8009c8c:	bf18      	it	ne
 8009c8e:	236a      	movne	r3, #106	; 0x6a
 8009c90:	4da0      	ldr	r5, [pc, #640]	; (8009f14 <_strtod_l+0x834>)
 8009c92:	9304      	str	r3, [sp, #16]
 8009c94:	4650      	mov	r0, sl
 8009c96:	4659      	mov	r1, fp
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f1b8 0f00 	cmp.w	r8, #0
 8009c9e:	f300 810a 	bgt.w	8009eb6 <_strtod_l+0x7d6>
 8009ca2:	b10b      	cbz	r3, 8009ca8 <_strtod_l+0x5c8>
 8009ca4:	4682      	mov	sl, r0
 8009ca6:	468b      	mov	fp, r1
 8009ca8:	9b04      	ldr	r3, [sp, #16]
 8009caa:	b1bb      	cbz	r3, 8009cdc <_strtod_l+0x5fc>
 8009cac:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009cb0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	4659      	mov	r1, fp
 8009cb8:	dd10      	ble.n	8009cdc <_strtod_l+0x5fc>
 8009cba:	2b1f      	cmp	r3, #31
 8009cbc:	f340 8107 	ble.w	8009ece <_strtod_l+0x7ee>
 8009cc0:	2b34      	cmp	r3, #52	; 0x34
 8009cc2:	bfde      	ittt	le
 8009cc4:	3b20      	suble	r3, #32
 8009cc6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8009cca:	fa02 f303 	lslle.w	r3, r2, r3
 8009cce:	f04f 0a00 	mov.w	sl, #0
 8009cd2:	bfcc      	ite	gt
 8009cd4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009cd8:	ea03 0b01 	andle.w	fp, r3, r1
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2300      	movs	r3, #0
 8009ce0:	4650      	mov	r0, sl
 8009ce2:	4659      	mov	r1, fp
 8009ce4:	f7f6 ff00 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d1ac      	bne.n	8009c46 <_strtod_l+0x566>
 8009cec:	9b07      	ldr	r3, [sp, #28]
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	9a05      	ldr	r2, [sp, #20]
 8009cf2:	9908      	ldr	r1, [sp, #32]
 8009cf4:	4623      	mov	r3, r4
 8009cf6:	4648      	mov	r0, r9
 8009cf8:	f001 fdb7 	bl	800b86a <__s2b>
 8009cfc:	9007      	str	r0, [sp, #28]
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	f43f af08 	beq.w	8009b14 <_strtod_l+0x434>
 8009d04:	9a06      	ldr	r2, [sp, #24]
 8009d06:	9b06      	ldr	r3, [sp, #24]
 8009d08:	2a00      	cmp	r2, #0
 8009d0a:	f1c3 0300 	rsb	r3, r3, #0
 8009d0e:	bfa8      	it	ge
 8009d10:	2300      	movge	r3, #0
 8009d12:	930e      	str	r3, [sp, #56]	; 0x38
 8009d14:	2400      	movs	r4, #0
 8009d16:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009d1a:	9316      	str	r3, [sp, #88]	; 0x58
 8009d1c:	46a0      	mov	r8, r4
 8009d1e:	9b07      	ldr	r3, [sp, #28]
 8009d20:	4648      	mov	r0, r9
 8009d22:	6859      	ldr	r1, [r3, #4]
 8009d24:	f001 fd1b 	bl	800b75e <_Balloc>
 8009d28:	9005      	str	r0, [sp, #20]
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	f43f aef6 	beq.w	8009b1c <_strtod_l+0x43c>
 8009d30:	9b07      	ldr	r3, [sp, #28]
 8009d32:	691a      	ldr	r2, [r3, #16]
 8009d34:	3202      	adds	r2, #2
 8009d36:	f103 010c 	add.w	r1, r3, #12
 8009d3a:	0092      	lsls	r2, r2, #2
 8009d3c:	300c      	adds	r0, #12
 8009d3e:	f001 fd03 	bl	800b748 <memcpy>
 8009d42:	aa1e      	add	r2, sp, #120	; 0x78
 8009d44:	a91d      	add	r1, sp, #116	; 0x74
 8009d46:	ec4b ab10 	vmov	d0, sl, fp
 8009d4a:	4648      	mov	r0, r9
 8009d4c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009d50:	f002 f846 	bl	800bde0 <__d2b>
 8009d54:	901c      	str	r0, [sp, #112]	; 0x70
 8009d56:	2800      	cmp	r0, #0
 8009d58:	f43f aee0 	beq.w	8009b1c <_strtod_l+0x43c>
 8009d5c:	2101      	movs	r1, #1
 8009d5e:	4648      	mov	r0, r9
 8009d60:	f001 fe0f 	bl	800b982 <__i2b>
 8009d64:	4680      	mov	r8, r0
 8009d66:	2800      	cmp	r0, #0
 8009d68:	f43f aed8 	beq.w	8009b1c <_strtod_l+0x43c>
 8009d6c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009d6e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009d70:	2e00      	cmp	r6, #0
 8009d72:	bfab      	itete	ge
 8009d74:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009d76:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009d78:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009d7a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009d7c:	bfac      	ite	ge
 8009d7e:	18f7      	addge	r7, r6, r3
 8009d80:	1b9d      	sublt	r5, r3, r6
 8009d82:	9b04      	ldr	r3, [sp, #16]
 8009d84:	1af6      	subs	r6, r6, r3
 8009d86:	4416      	add	r6, r2
 8009d88:	4b63      	ldr	r3, [pc, #396]	; (8009f18 <_strtod_l+0x838>)
 8009d8a:	3e01      	subs	r6, #1
 8009d8c:	429e      	cmp	r6, r3
 8009d8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009d92:	f280 80af 	bge.w	8009ef4 <_strtod_l+0x814>
 8009d96:	1b9b      	subs	r3, r3, r6
 8009d98:	2b1f      	cmp	r3, #31
 8009d9a:	eba2 0203 	sub.w	r2, r2, r3
 8009d9e:	f04f 0101 	mov.w	r1, #1
 8009da2:	f300 809b 	bgt.w	8009edc <_strtod_l+0x7fc>
 8009da6:	fa01 f303 	lsl.w	r3, r1, r3
 8009daa:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dac:	2300      	movs	r3, #0
 8009dae:	930a      	str	r3, [sp, #40]	; 0x28
 8009db0:	18be      	adds	r6, r7, r2
 8009db2:	9b04      	ldr	r3, [sp, #16]
 8009db4:	42b7      	cmp	r7, r6
 8009db6:	4415      	add	r5, r2
 8009db8:	441d      	add	r5, r3
 8009dba:	463b      	mov	r3, r7
 8009dbc:	bfa8      	it	ge
 8009dbe:	4633      	movge	r3, r6
 8009dc0:	42ab      	cmp	r3, r5
 8009dc2:	bfa8      	it	ge
 8009dc4:	462b      	movge	r3, r5
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	bfc2      	ittt	gt
 8009dca:	1af6      	subgt	r6, r6, r3
 8009dcc:	1aed      	subgt	r5, r5, r3
 8009dce:	1aff      	subgt	r7, r7, r3
 8009dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dd2:	b1bb      	cbz	r3, 8009e04 <_strtod_l+0x724>
 8009dd4:	4641      	mov	r1, r8
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	4648      	mov	r0, r9
 8009dda:	f001 fe71 	bl	800bac0 <__pow5mult>
 8009dde:	4680      	mov	r8, r0
 8009de0:	2800      	cmp	r0, #0
 8009de2:	f43f ae9b 	beq.w	8009b1c <_strtod_l+0x43c>
 8009de6:	4601      	mov	r1, r0
 8009de8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009dea:	4648      	mov	r0, r9
 8009dec:	f001 fdd2 	bl	800b994 <__multiply>
 8009df0:	900c      	str	r0, [sp, #48]	; 0x30
 8009df2:	2800      	cmp	r0, #0
 8009df4:	f43f ae92 	beq.w	8009b1c <_strtod_l+0x43c>
 8009df8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009dfa:	4648      	mov	r0, r9
 8009dfc:	f001 fce3 	bl	800b7c6 <_Bfree>
 8009e00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e02:	931c      	str	r3, [sp, #112]	; 0x70
 8009e04:	2e00      	cmp	r6, #0
 8009e06:	dc7a      	bgt.n	8009efe <_strtod_l+0x81e>
 8009e08:	9b06      	ldr	r3, [sp, #24]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	dd08      	ble.n	8009e20 <_strtod_l+0x740>
 8009e0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009e10:	9905      	ldr	r1, [sp, #20]
 8009e12:	4648      	mov	r0, r9
 8009e14:	f001 fe54 	bl	800bac0 <__pow5mult>
 8009e18:	9005      	str	r0, [sp, #20]
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	f43f ae7e 	beq.w	8009b1c <_strtod_l+0x43c>
 8009e20:	2d00      	cmp	r5, #0
 8009e22:	dd08      	ble.n	8009e36 <_strtod_l+0x756>
 8009e24:	462a      	mov	r2, r5
 8009e26:	9905      	ldr	r1, [sp, #20]
 8009e28:	4648      	mov	r0, r9
 8009e2a:	f001 fe97 	bl	800bb5c <__lshift>
 8009e2e:	9005      	str	r0, [sp, #20]
 8009e30:	2800      	cmp	r0, #0
 8009e32:	f43f ae73 	beq.w	8009b1c <_strtod_l+0x43c>
 8009e36:	2f00      	cmp	r7, #0
 8009e38:	dd08      	ble.n	8009e4c <_strtod_l+0x76c>
 8009e3a:	4641      	mov	r1, r8
 8009e3c:	463a      	mov	r2, r7
 8009e3e:	4648      	mov	r0, r9
 8009e40:	f001 fe8c 	bl	800bb5c <__lshift>
 8009e44:	4680      	mov	r8, r0
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f43f ae68 	beq.w	8009b1c <_strtod_l+0x43c>
 8009e4c:	9a05      	ldr	r2, [sp, #20]
 8009e4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009e50:	4648      	mov	r0, r9
 8009e52:	f001 fef1 	bl	800bc38 <__mdiff>
 8009e56:	4604      	mov	r4, r0
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	f43f ae5f 	beq.w	8009b1c <_strtod_l+0x43c>
 8009e5e:	68c3      	ldr	r3, [r0, #12]
 8009e60:	930c      	str	r3, [sp, #48]	; 0x30
 8009e62:	2300      	movs	r3, #0
 8009e64:	60c3      	str	r3, [r0, #12]
 8009e66:	4641      	mov	r1, r8
 8009e68:	f001 fecc 	bl	800bc04 <__mcmp>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	da55      	bge.n	8009f1c <_strtod_l+0x83c>
 8009e70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e72:	b9e3      	cbnz	r3, 8009eae <_strtod_l+0x7ce>
 8009e74:	f1ba 0f00 	cmp.w	sl, #0
 8009e78:	d119      	bne.n	8009eae <_strtod_l+0x7ce>
 8009e7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e7e:	b9b3      	cbnz	r3, 8009eae <_strtod_l+0x7ce>
 8009e80:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e84:	0d1b      	lsrs	r3, r3, #20
 8009e86:	051b      	lsls	r3, r3, #20
 8009e88:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009e8c:	d90f      	bls.n	8009eae <_strtod_l+0x7ce>
 8009e8e:	6963      	ldr	r3, [r4, #20]
 8009e90:	b913      	cbnz	r3, 8009e98 <_strtod_l+0x7b8>
 8009e92:	6923      	ldr	r3, [r4, #16]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	dd0a      	ble.n	8009eae <_strtod_l+0x7ce>
 8009e98:	4621      	mov	r1, r4
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	4648      	mov	r0, r9
 8009e9e:	f001 fe5d 	bl	800bb5c <__lshift>
 8009ea2:	4641      	mov	r1, r8
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	f001 fead 	bl	800bc04 <__mcmp>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	dc67      	bgt.n	8009f7e <_strtod_l+0x89e>
 8009eae:	9b04      	ldr	r3, [sp, #16]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d171      	bne.n	8009f98 <_strtod_l+0x8b8>
 8009eb4:	e63d      	b.n	8009b32 <_strtod_l+0x452>
 8009eb6:	f018 0f01 	tst.w	r8, #1
 8009eba:	d004      	beq.n	8009ec6 <_strtod_l+0x7e6>
 8009ebc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ec0:	f7f6 fbaa 	bl	8000618 <__aeabi_dmul>
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009eca:	3508      	adds	r5, #8
 8009ecc:	e6e5      	b.n	8009c9a <_strtod_l+0x5ba>
 8009ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed6:	ea03 0a0a 	and.w	sl, r3, sl
 8009eda:	e6ff      	b.n	8009cdc <_strtod_l+0x5fc>
 8009edc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009ee0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009ee4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009ee8:	36e2      	adds	r6, #226	; 0xe2
 8009eea:	fa01 f306 	lsl.w	r3, r1, r6
 8009eee:	930a      	str	r3, [sp, #40]	; 0x28
 8009ef0:	910f      	str	r1, [sp, #60]	; 0x3c
 8009ef2:	e75d      	b.n	8009db0 <_strtod_l+0x6d0>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ef8:	2301      	movs	r3, #1
 8009efa:	930f      	str	r3, [sp, #60]	; 0x3c
 8009efc:	e758      	b.n	8009db0 <_strtod_l+0x6d0>
 8009efe:	4632      	mov	r2, r6
 8009f00:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009f02:	4648      	mov	r0, r9
 8009f04:	f001 fe2a 	bl	800bb5c <__lshift>
 8009f08:	901c      	str	r0, [sp, #112]	; 0x70
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	f47f af7c 	bne.w	8009e08 <_strtod_l+0x728>
 8009f10:	e604      	b.n	8009b1c <_strtod_l+0x43c>
 8009f12:	bf00      	nop
 8009f14:	0800c600 	.word	0x0800c600
 8009f18:	fffffc02 	.word	0xfffffc02
 8009f1c:	465d      	mov	r5, fp
 8009f1e:	f040 8086 	bne.w	800a02e <_strtod_l+0x94e>
 8009f22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f28:	b32a      	cbz	r2, 8009f76 <_strtod_l+0x896>
 8009f2a:	4aaf      	ldr	r2, [pc, #700]	; (800a1e8 <_strtod_l+0xb08>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d153      	bne.n	8009fd8 <_strtod_l+0x8f8>
 8009f30:	9b04      	ldr	r3, [sp, #16]
 8009f32:	4650      	mov	r0, sl
 8009f34:	b1d3      	cbz	r3, 8009f6c <_strtod_l+0x88c>
 8009f36:	4aad      	ldr	r2, [pc, #692]	; (800a1ec <_strtod_l+0xb0c>)
 8009f38:	402a      	ands	r2, r5
 8009f3a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009f3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009f42:	d816      	bhi.n	8009f72 <_strtod_l+0x892>
 8009f44:	0d12      	lsrs	r2, r2, #20
 8009f46:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f4e:	4298      	cmp	r0, r3
 8009f50:	d142      	bne.n	8009fd8 <_strtod_l+0x8f8>
 8009f52:	4ba7      	ldr	r3, [pc, #668]	; (800a1f0 <_strtod_l+0xb10>)
 8009f54:	429d      	cmp	r5, r3
 8009f56:	d102      	bne.n	8009f5e <_strtod_l+0x87e>
 8009f58:	3001      	adds	r0, #1
 8009f5a:	f43f addf 	beq.w	8009b1c <_strtod_l+0x43c>
 8009f5e:	4ba3      	ldr	r3, [pc, #652]	; (800a1ec <_strtod_l+0xb0c>)
 8009f60:	402b      	ands	r3, r5
 8009f62:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009f66:	f04f 0a00 	mov.w	sl, #0
 8009f6a:	e7a0      	b.n	8009eae <_strtod_l+0x7ce>
 8009f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f70:	e7ed      	b.n	8009f4e <_strtod_l+0x86e>
 8009f72:	460b      	mov	r3, r1
 8009f74:	e7eb      	b.n	8009f4e <_strtod_l+0x86e>
 8009f76:	bb7b      	cbnz	r3, 8009fd8 <_strtod_l+0x8f8>
 8009f78:	f1ba 0f00 	cmp.w	sl, #0
 8009f7c:	d12c      	bne.n	8009fd8 <_strtod_l+0x8f8>
 8009f7e:	9904      	ldr	r1, [sp, #16]
 8009f80:	4a9a      	ldr	r2, [pc, #616]	; (800a1ec <_strtod_l+0xb0c>)
 8009f82:	465b      	mov	r3, fp
 8009f84:	b1f1      	cbz	r1, 8009fc4 <_strtod_l+0x8e4>
 8009f86:	ea02 010b 	and.w	r1, r2, fp
 8009f8a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009f8e:	dc19      	bgt.n	8009fc4 <_strtod_l+0x8e4>
 8009f90:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009f94:	f77f ae5b 	ble.w	8009c4e <_strtod_l+0x56e>
 8009f98:	4a96      	ldr	r2, [pc, #600]	; (800a1f4 <_strtod_l+0xb14>)
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009fa0:	4650      	mov	r0, sl
 8009fa2:	4659      	mov	r1, fp
 8009fa4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009fa8:	f7f6 fb36 	bl	8000618 <__aeabi_dmul>
 8009fac:	4682      	mov	sl, r0
 8009fae:	468b      	mov	fp, r1
 8009fb0:	2900      	cmp	r1, #0
 8009fb2:	f47f adbe 	bne.w	8009b32 <_strtod_l+0x452>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	f47f adbb 	bne.w	8009b32 <_strtod_l+0x452>
 8009fbc:	2322      	movs	r3, #34	; 0x22
 8009fbe:	f8c9 3000 	str.w	r3, [r9]
 8009fc2:	e5b6      	b.n	8009b32 <_strtod_l+0x452>
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009fca:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009fce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009fd2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009fd6:	e76a      	b.n	8009eae <_strtod_l+0x7ce>
 8009fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fda:	b193      	cbz	r3, 800a002 <_strtod_l+0x922>
 8009fdc:	422b      	tst	r3, r5
 8009fde:	f43f af66 	beq.w	8009eae <_strtod_l+0x7ce>
 8009fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fe4:	9a04      	ldr	r2, [sp, #16]
 8009fe6:	4650      	mov	r0, sl
 8009fe8:	4659      	mov	r1, fp
 8009fea:	b173      	cbz	r3, 800a00a <_strtod_l+0x92a>
 8009fec:	f7ff fb5b 	bl	80096a6 <sulp>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ff8:	f7f6 f958 	bl	80002ac <__adddf3>
 8009ffc:	4682      	mov	sl, r0
 8009ffe:	468b      	mov	fp, r1
 800a000:	e755      	b.n	8009eae <_strtod_l+0x7ce>
 800a002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a004:	ea13 0f0a 	tst.w	r3, sl
 800a008:	e7e9      	b.n	8009fde <_strtod_l+0x8fe>
 800a00a:	f7ff fb4c 	bl	80096a6 <sulp>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a016:	f7f6 f947 	bl	80002a8 <__aeabi_dsub>
 800a01a:	2200      	movs	r2, #0
 800a01c:	2300      	movs	r3, #0
 800a01e:	4682      	mov	sl, r0
 800a020:	468b      	mov	fp, r1
 800a022:	f7f6 fd61 	bl	8000ae8 <__aeabi_dcmpeq>
 800a026:	2800      	cmp	r0, #0
 800a028:	f47f ae11 	bne.w	8009c4e <_strtod_l+0x56e>
 800a02c:	e73f      	b.n	8009eae <_strtod_l+0x7ce>
 800a02e:	4641      	mov	r1, r8
 800a030:	4620      	mov	r0, r4
 800a032:	f001 ff24 	bl	800be7e <__ratio>
 800a036:	ec57 6b10 	vmov	r6, r7, d0
 800a03a:	2200      	movs	r2, #0
 800a03c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a040:	ee10 0a10 	vmov	r0, s0
 800a044:	4639      	mov	r1, r7
 800a046:	f7f6 fd63 	bl	8000b10 <__aeabi_dcmple>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	d077      	beq.n	800a13e <_strtod_l+0xa5e>
 800a04e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a050:	2b00      	cmp	r3, #0
 800a052:	d04a      	beq.n	800a0ea <_strtod_l+0xa0a>
 800a054:	4b68      	ldr	r3, [pc, #416]	; (800a1f8 <_strtod_l+0xb18>)
 800a056:	2200      	movs	r2, #0
 800a058:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a05c:	4f66      	ldr	r7, [pc, #408]	; (800a1f8 <_strtod_l+0xb18>)
 800a05e:	2600      	movs	r6, #0
 800a060:	4b62      	ldr	r3, [pc, #392]	; (800a1ec <_strtod_l+0xb0c>)
 800a062:	402b      	ands	r3, r5
 800a064:	930f      	str	r3, [sp, #60]	; 0x3c
 800a066:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a068:	4b64      	ldr	r3, [pc, #400]	; (800a1fc <_strtod_l+0xb1c>)
 800a06a:	429a      	cmp	r2, r3
 800a06c:	f040 80ce 	bne.w	800a20c <_strtod_l+0xb2c>
 800a070:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a074:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a078:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800a07c:	ec4b ab10 	vmov	d0, sl, fp
 800a080:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a084:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a088:	f001 fe34 	bl	800bcf4 <__ulp>
 800a08c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a090:	ec53 2b10 	vmov	r2, r3, d0
 800a094:	f7f6 fac0 	bl	8000618 <__aeabi_dmul>
 800a098:	4652      	mov	r2, sl
 800a09a:	465b      	mov	r3, fp
 800a09c:	f7f6 f906 	bl	80002ac <__adddf3>
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	4952      	ldr	r1, [pc, #328]	; (800a1ec <_strtod_l+0xb0c>)
 800a0a4:	4a56      	ldr	r2, [pc, #344]	; (800a200 <_strtod_l+0xb20>)
 800a0a6:	4019      	ands	r1, r3
 800a0a8:	4291      	cmp	r1, r2
 800a0aa:	4682      	mov	sl, r0
 800a0ac:	d95b      	bls.n	800a166 <_strtod_l+0xa86>
 800a0ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d103      	bne.n	800a0c0 <_strtod_l+0x9e0>
 800a0b8:	9b08      	ldr	r3, [sp, #32]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	f43f ad2e 	beq.w	8009b1c <_strtod_l+0x43c>
 800a0c0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800a1f0 <_strtod_l+0xb10>
 800a0c4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a0c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a0ca:	4648      	mov	r0, r9
 800a0cc:	f001 fb7b 	bl	800b7c6 <_Bfree>
 800a0d0:	9905      	ldr	r1, [sp, #20]
 800a0d2:	4648      	mov	r0, r9
 800a0d4:	f001 fb77 	bl	800b7c6 <_Bfree>
 800a0d8:	4641      	mov	r1, r8
 800a0da:	4648      	mov	r0, r9
 800a0dc:	f001 fb73 	bl	800b7c6 <_Bfree>
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	4648      	mov	r0, r9
 800a0e4:	f001 fb6f 	bl	800b7c6 <_Bfree>
 800a0e8:	e619      	b.n	8009d1e <_strtod_l+0x63e>
 800a0ea:	f1ba 0f00 	cmp.w	sl, #0
 800a0ee:	d11a      	bne.n	800a126 <_strtod_l+0xa46>
 800a0f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0f4:	b9eb      	cbnz	r3, 800a132 <_strtod_l+0xa52>
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	4b3f      	ldr	r3, [pc, #252]	; (800a1f8 <_strtod_l+0xb18>)
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	4639      	mov	r1, r7
 800a0fe:	f7f6 fcfd 	bl	8000afc <__aeabi_dcmplt>
 800a102:	b9c8      	cbnz	r0, 800a138 <_strtod_l+0xa58>
 800a104:	4630      	mov	r0, r6
 800a106:	4639      	mov	r1, r7
 800a108:	2200      	movs	r2, #0
 800a10a:	4b3e      	ldr	r3, [pc, #248]	; (800a204 <_strtod_l+0xb24>)
 800a10c:	f7f6 fa84 	bl	8000618 <__aeabi_dmul>
 800a110:	4606      	mov	r6, r0
 800a112:	460f      	mov	r7, r1
 800a114:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a118:	9618      	str	r6, [sp, #96]	; 0x60
 800a11a:	9319      	str	r3, [sp, #100]	; 0x64
 800a11c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a120:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a124:	e79c      	b.n	800a060 <_strtod_l+0x980>
 800a126:	f1ba 0f01 	cmp.w	sl, #1
 800a12a:	d102      	bne.n	800a132 <_strtod_l+0xa52>
 800a12c:	2d00      	cmp	r5, #0
 800a12e:	f43f ad8e 	beq.w	8009c4e <_strtod_l+0x56e>
 800a132:	2200      	movs	r2, #0
 800a134:	4b34      	ldr	r3, [pc, #208]	; (800a208 <_strtod_l+0xb28>)
 800a136:	e78f      	b.n	800a058 <_strtod_l+0x978>
 800a138:	2600      	movs	r6, #0
 800a13a:	4f32      	ldr	r7, [pc, #200]	; (800a204 <_strtod_l+0xb24>)
 800a13c:	e7ea      	b.n	800a114 <_strtod_l+0xa34>
 800a13e:	4b31      	ldr	r3, [pc, #196]	; (800a204 <_strtod_l+0xb24>)
 800a140:	4630      	mov	r0, r6
 800a142:	4639      	mov	r1, r7
 800a144:	2200      	movs	r2, #0
 800a146:	f7f6 fa67 	bl	8000618 <__aeabi_dmul>
 800a14a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a14c:	4606      	mov	r6, r0
 800a14e:	460f      	mov	r7, r1
 800a150:	b933      	cbnz	r3, 800a160 <_strtod_l+0xa80>
 800a152:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a156:	9010      	str	r0, [sp, #64]	; 0x40
 800a158:	9311      	str	r3, [sp, #68]	; 0x44
 800a15a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a15e:	e7df      	b.n	800a120 <_strtod_l+0xa40>
 800a160:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a164:	e7f9      	b.n	800a15a <_strtod_l+0xa7a>
 800a166:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a16a:	9b04      	ldr	r3, [sp, #16]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1ab      	bne.n	800a0c8 <_strtod_l+0x9e8>
 800a170:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a174:	0d1b      	lsrs	r3, r3, #20
 800a176:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a178:	051b      	lsls	r3, r3, #20
 800a17a:	429a      	cmp	r2, r3
 800a17c:	465d      	mov	r5, fp
 800a17e:	d1a3      	bne.n	800a0c8 <_strtod_l+0x9e8>
 800a180:	4639      	mov	r1, r7
 800a182:	4630      	mov	r0, r6
 800a184:	f7f6 fcf8 	bl	8000b78 <__aeabi_d2iz>
 800a188:	f7f6 f9dc 	bl	8000544 <__aeabi_i2d>
 800a18c:	460b      	mov	r3, r1
 800a18e:	4602      	mov	r2, r0
 800a190:	4639      	mov	r1, r7
 800a192:	4630      	mov	r0, r6
 800a194:	f7f6 f888 	bl	80002a8 <__aeabi_dsub>
 800a198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a19a:	4606      	mov	r6, r0
 800a19c:	460f      	mov	r7, r1
 800a19e:	b933      	cbnz	r3, 800a1ae <_strtod_l+0xace>
 800a1a0:	f1ba 0f00 	cmp.w	sl, #0
 800a1a4:	d103      	bne.n	800a1ae <_strtod_l+0xace>
 800a1a6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800a1aa:	2d00      	cmp	r5, #0
 800a1ac:	d06d      	beq.n	800a28a <_strtod_l+0xbaa>
 800a1ae:	a30a      	add	r3, pc, #40	; (adr r3, 800a1d8 <_strtod_l+0xaf8>)
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	4639      	mov	r1, r7
 800a1b8:	f7f6 fca0 	bl	8000afc <__aeabi_dcmplt>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	f47f acb8 	bne.w	8009b32 <_strtod_l+0x452>
 800a1c2:	a307      	add	r3, pc, #28	; (adr r3, 800a1e0 <_strtod_l+0xb00>)
 800a1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	4639      	mov	r1, r7
 800a1cc:	f7f6 fcb4 	bl	8000b38 <__aeabi_dcmpgt>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	f43f af79 	beq.w	800a0c8 <_strtod_l+0x9e8>
 800a1d6:	e4ac      	b.n	8009b32 <_strtod_l+0x452>
 800a1d8:	94a03595 	.word	0x94a03595
 800a1dc:	3fdfffff 	.word	0x3fdfffff
 800a1e0:	35afe535 	.word	0x35afe535
 800a1e4:	3fe00000 	.word	0x3fe00000
 800a1e8:	000fffff 	.word	0x000fffff
 800a1ec:	7ff00000 	.word	0x7ff00000
 800a1f0:	7fefffff 	.word	0x7fefffff
 800a1f4:	39500000 	.word	0x39500000
 800a1f8:	3ff00000 	.word	0x3ff00000
 800a1fc:	7fe00000 	.word	0x7fe00000
 800a200:	7c9fffff 	.word	0x7c9fffff
 800a204:	3fe00000 	.word	0x3fe00000
 800a208:	bff00000 	.word	0xbff00000
 800a20c:	9b04      	ldr	r3, [sp, #16]
 800a20e:	b333      	cbz	r3, 800a25e <_strtod_l+0xb7e>
 800a210:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a212:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a216:	d822      	bhi.n	800a25e <_strtod_l+0xb7e>
 800a218:	a327      	add	r3, pc, #156	; (adr r3, 800a2b8 <_strtod_l+0xbd8>)
 800a21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21e:	4630      	mov	r0, r6
 800a220:	4639      	mov	r1, r7
 800a222:	f7f6 fc75 	bl	8000b10 <__aeabi_dcmple>
 800a226:	b1a0      	cbz	r0, 800a252 <_strtod_l+0xb72>
 800a228:	4639      	mov	r1, r7
 800a22a:	4630      	mov	r0, r6
 800a22c:	f7f6 fccc 	bl	8000bc8 <__aeabi_d2uiz>
 800a230:	2800      	cmp	r0, #0
 800a232:	bf08      	it	eq
 800a234:	2001      	moveq	r0, #1
 800a236:	f7f6 f975 	bl	8000524 <__aeabi_ui2d>
 800a23a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a23c:	4606      	mov	r6, r0
 800a23e:	460f      	mov	r7, r1
 800a240:	bb03      	cbnz	r3, 800a284 <_strtod_l+0xba4>
 800a242:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a246:	9012      	str	r0, [sp, #72]	; 0x48
 800a248:	9313      	str	r3, [sp, #76]	; 0x4c
 800a24a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a24e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a254:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a256:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a25a:	1a9b      	subs	r3, r3, r2
 800a25c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a25e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a262:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800a266:	f001 fd45 	bl	800bcf4 <__ulp>
 800a26a:	4650      	mov	r0, sl
 800a26c:	ec53 2b10 	vmov	r2, r3, d0
 800a270:	4659      	mov	r1, fp
 800a272:	f7f6 f9d1 	bl	8000618 <__aeabi_dmul>
 800a276:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a27a:	f7f6 f817 	bl	80002ac <__adddf3>
 800a27e:	4682      	mov	sl, r0
 800a280:	468b      	mov	fp, r1
 800a282:	e772      	b.n	800a16a <_strtod_l+0xa8a>
 800a284:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800a288:	e7df      	b.n	800a24a <_strtod_l+0xb6a>
 800a28a:	a30d      	add	r3, pc, #52	; (adr r3, 800a2c0 <_strtod_l+0xbe0>)
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	f7f6 fc34 	bl	8000afc <__aeabi_dcmplt>
 800a294:	e79c      	b.n	800a1d0 <_strtod_l+0xaf0>
 800a296:	2300      	movs	r3, #0
 800a298:	930d      	str	r3, [sp, #52]	; 0x34
 800a29a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a29c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a29e:	6013      	str	r3, [r2, #0]
 800a2a0:	f7ff ba61 	b.w	8009766 <_strtod_l+0x86>
 800a2a4:	2b65      	cmp	r3, #101	; 0x65
 800a2a6:	f04f 0200 	mov.w	r2, #0
 800a2aa:	f43f ab4e 	beq.w	800994a <_strtod_l+0x26a>
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	4614      	mov	r4, r2
 800a2b2:	9104      	str	r1, [sp, #16]
 800a2b4:	f7ff bacb 	b.w	800984e <_strtod_l+0x16e>
 800a2b8:	ffc00000 	.word	0xffc00000
 800a2bc:	41dfffff 	.word	0x41dfffff
 800a2c0:	94a03595 	.word	0x94a03595
 800a2c4:	3fcfffff 	.word	0x3fcfffff

0800a2c8 <strtod>:
 800a2c8:	4b07      	ldr	r3, [pc, #28]	; (800a2e8 <strtod+0x20>)
 800a2ca:	4a08      	ldr	r2, [pc, #32]	; (800a2ec <strtod+0x24>)
 800a2cc:	b410      	push	{r4}
 800a2ce:	681c      	ldr	r4, [r3, #0]
 800a2d0:	6a23      	ldr	r3, [r4, #32]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	bf08      	it	eq
 800a2d6:	4613      	moveq	r3, r2
 800a2d8:	460a      	mov	r2, r1
 800a2da:	4601      	mov	r1, r0
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2e2:	f7ff b9fd 	b.w	80096e0 <_strtod_l>
 800a2e6:	bf00      	nop
 800a2e8:	2000000c 	.word	0x2000000c
 800a2ec:	20000070 	.word	0x20000070

0800a2f0 <_strtol_l.isra.0>:
 800a2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f4:	4680      	mov	r8, r0
 800a2f6:	4689      	mov	r9, r1
 800a2f8:	4692      	mov	sl, r2
 800a2fa:	461e      	mov	r6, r3
 800a2fc:	460f      	mov	r7, r1
 800a2fe:	463d      	mov	r5, r7
 800a300:	9808      	ldr	r0, [sp, #32]
 800a302:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a306:	f001 f9f1 	bl	800b6ec <__locale_ctype_ptr_l>
 800a30a:	4420      	add	r0, r4
 800a30c:	7843      	ldrb	r3, [r0, #1]
 800a30e:	f013 0308 	ands.w	r3, r3, #8
 800a312:	d132      	bne.n	800a37a <_strtol_l.isra.0+0x8a>
 800a314:	2c2d      	cmp	r4, #45	; 0x2d
 800a316:	d132      	bne.n	800a37e <_strtol_l.isra.0+0x8e>
 800a318:	787c      	ldrb	r4, [r7, #1]
 800a31a:	1cbd      	adds	r5, r7, #2
 800a31c:	2201      	movs	r2, #1
 800a31e:	2e00      	cmp	r6, #0
 800a320:	d05d      	beq.n	800a3de <_strtol_l.isra.0+0xee>
 800a322:	2e10      	cmp	r6, #16
 800a324:	d109      	bne.n	800a33a <_strtol_l.isra.0+0x4a>
 800a326:	2c30      	cmp	r4, #48	; 0x30
 800a328:	d107      	bne.n	800a33a <_strtol_l.isra.0+0x4a>
 800a32a:	782b      	ldrb	r3, [r5, #0]
 800a32c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a330:	2b58      	cmp	r3, #88	; 0x58
 800a332:	d14f      	bne.n	800a3d4 <_strtol_l.isra.0+0xe4>
 800a334:	786c      	ldrb	r4, [r5, #1]
 800a336:	2610      	movs	r6, #16
 800a338:	3502      	adds	r5, #2
 800a33a:	2a00      	cmp	r2, #0
 800a33c:	bf14      	ite	ne
 800a33e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a342:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a346:	2700      	movs	r7, #0
 800a348:	fbb1 fcf6 	udiv	ip, r1, r6
 800a34c:	4638      	mov	r0, r7
 800a34e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a352:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a356:	2b09      	cmp	r3, #9
 800a358:	d817      	bhi.n	800a38a <_strtol_l.isra.0+0x9a>
 800a35a:	461c      	mov	r4, r3
 800a35c:	42a6      	cmp	r6, r4
 800a35e:	dd23      	ble.n	800a3a8 <_strtol_l.isra.0+0xb8>
 800a360:	1c7b      	adds	r3, r7, #1
 800a362:	d007      	beq.n	800a374 <_strtol_l.isra.0+0x84>
 800a364:	4584      	cmp	ip, r0
 800a366:	d31c      	bcc.n	800a3a2 <_strtol_l.isra.0+0xb2>
 800a368:	d101      	bne.n	800a36e <_strtol_l.isra.0+0x7e>
 800a36a:	45a6      	cmp	lr, r4
 800a36c:	db19      	blt.n	800a3a2 <_strtol_l.isra.0+0xb2>
 800a36e:	fb00 4006 	mla	r0, r0, r6, r4
 800a372:	2701      	movs	r7, #1
 800a374:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a378:	e7eb      	b.n	800a352 <_strtol_l.isra.0+0x62>
 800a37a:	462f      	mov	r7, r5
 800a37c:	e7bf      	b.n	800a2fe <_strtol_l.isra.0+0xe>
 800a37e:	2c2b      	cmp	r4, #43	; 0x2b
 800a380:	bf04      	itt	eq
 800a382:	1cbd      	addeq	r5, r7, #2
 800a384:	787c      	ldrbeq	r4, [r7, #1]
 800a386:	461a      	mov	r2, r3
 800a388:	e7c9      	b.n	800a31e <_strtol_l.isra.0+0x2e>
 800a38a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a38e:	2b19      	cmp	r3, #25
 800a390:	d801      	bhi.n	800a396 <_strtol_l.isra.0+0xa6>
 800a392:	3c37      	subs	r4, #55	; 0x37
 800a394:	e7e2      	b.n	800a35c <_strtol_l.isra.0+0x6c>
 800a396:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a39a:	2b19      	cmp	r3, #25
 800a39c:	d804      	bhi.n	800a3a8 <_strtol_l.isra.0+0xb8>
 800a39e:	3c57      	subs	r4, #87	; 0x57
 800a3a0:	e7dc      	b.n	800a35c <_strtol_l.isra.0+0x6c>
 800a3a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a3a6:	e7e5      	b.n	800a374 <_strtol_l.isra.0+0x84>
 800a3a8:	1c7b      	adds	r3, r7, #1
 800a3aa:	d108      	bne.n	800a3be <_strtol_l.isra.0+0xce>
 800a3ac:	2322      	movs	r3, #34	; 0x22
 800a3ae:	f8c8 3000 	str.w	r3, [r8]
 800a3b2:	4608      	mov	r0, r1
 800a3b4:	f1ba 0f00 	cmp.w	sl, #0
 800a3b8:	d107      	bne.n	800a3ca <_strtol_l.isra.0+0xda>
 800a3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3be:	b102      	cbz	r2, 800a3c2 <_strtol_l.isra.0+0xd2>
 800a3c0:	4240      	negs	r0, r0
 800a3c2:	f1ba 0f00 	cmp.w	sl, #0
 800a3c6:	d0f8      	beq.n	800a3ba <_strtol_l.isra.0+0xca>
 800a3c8:	b10f      	cbz	r7, 800a3ce <_strtol_l.isra.0+0xde>
 800a3ca:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800a3ce:	f8ca 9000 	str.w	r9, [sl]
 800a3d2:	e7f2      	b.n	800a3ba <_strtol_l.isra.0+0xca>
 800a3d4:	2430      	movs	r4, #48	; 0x30
 800a3d6:	2e00      	cmp	r6, #0
 800a3d8:	d1af      	bne.n	800a33a <_strtol_l.isra.0+0x4a>
 800a3da:	2608      	movs	r6, #8
 800a3dc:	e7ad      	b.n	800a33a <_strtol_l.isra.0+0x4a>
 800a3de:	2c30      	cmp	r4, #48	; 0x30
 800a3e0:	d0a3      	beq.n	800a32a <_strtol_l.isra.0+0x3a>
 800a3e2:	260a      	movs	r6, #10
 800a3e4:	e7a9      	b.n	800a33a <_strtol_l.isra.0+0x4a>
	...

0800a3e8 <strtol>:
 800a3e8:	4b08      	ldr	r3, [pc, #32]	; (800a40c <strtol+0x24>)
 800a3ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3ec:	681c      	ldr	r4, [r3, #0]
 800a3ee:	4d08      	ldr	r5, [pc, #32]	; (800a410 <strtol+0x28>)
 800a3f0:	6a23      	ldr	r3, [r4, #32]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	bf08      	it	eq
 800a3f6:	462b      	moveq	r3, r5
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	460a      	mov	r2, r1
 800a3fe:	4601      	mov	r1, r0
 800a400:	4620      	mov	r0, r4
 800a402:	f7ff ff75 	bl	800a2f0 <_strtol_l.isra.0>
 800a406:	b003      	add	sp, #12
 800a408:	bd30      	pop	{r4, r5, pc}
 800a40a:	bf00      	nop
 800a40c:	2000000c 	.word	0x2000000c
 800a410:	20000070 	.word	0x20000070

0800a414 <quorem>:
 800a414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a418:	6903      	ldr	r3, [r0, #16]
 800a41a:	690c      	ldr	r4, [r1, #16]
 800a41c:	42a3      	cmp	r3, r4
 800a41e:	4680      	mov	r8, r0
 800a420:	f2c0 8082 	blt.w	800a528 <quorem+0x114>
 800a424:	3c01      	subs	r4, #1
 800a426:	f101 0714 	add.w	r7, r1, #20
 800a42a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a42e:	f100 0614 	add.w	r6, r0, #20
 800a432:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a436:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a43a:	eb06 030c 	add.w	r3, r6, ip
 800a43e:	3501      	adds	r5, #1
 800a440:	eb07 090c 	add.w	r9, r7, ip
 800a444:	9301      	str	r3, [sp, #4]
 800a446:	fbb0 f5f5 	udiv	r5, r0, r5
 800a44a:	b395      	cbz	r5, 800a4b2 <quorem+0x9e>
 800a44c:	f04f 0a00 	mov.w	sl, #0
 800a450:	4638      	mov	r0, r7
 800a452:	46b6      	mov	lr, r6
 800a454:	46d3      	mov	fp, sl
 800a456:	f850 2b04 	ldr.w	r2, [r0], #4
 800a45a:	b293      	uxth	r3, r2
 800a45c:	fb05 a303 	mla	r3, r5, r3, sl
 800a460:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a464:	b29b      	uxth	r3, r3
 800a466:	ebab 0303 	sub.w	r3, fp, r3
 800a46a:	0c12      	lsrs	r2, r2, #16
 800a46c:	f8de b000 	ldr.w	fp, [lr]
 800a470:	fb05 a202 	mla	r2, r5, r2, sl
 800a474:	fa13 f38b 	uxtah	r3, r3, fp
 800a478:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a47c:	fa1f fb82 	uxth.w	fp, r2
 800a480:	f8de 2000 	ldr.w	r2, [lr]
 800a484:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a488:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a492:	4581      	cmp	r9, r0
 800a494:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a498:	f84e 3b04 	str.w	r3, [lr], #4
 800a49c:	d2db      	bcs.n	800a456 <quorem+0x42>
 800a49e:	f856 300c 	ldr.w	r3, [r6, ip]
 800a4a2:	b933      	cbnz	r3, 800a4b2 <quorem+0x9e>
 800a4a4:	9b01      	ldr	r3, [sp, #4]
 800a4a6:	3b04      	subs	r3, #4
 800a4a8:	429e      	cmp	r6, r3
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	d330      	bcc.n	800a510 <quorem+0xfc>
 800a4ae:	f8c8 4010 	str.w	r4, [r8, #16]
 800a4b2:	4640      	mov	r0, r8
 800a4b4:	f001 fba6 	bl	800bc04 <__mcmp>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	db25      	blt.n	800a508 <quorem+0xf4>
 800a4bc:	3501      	adds	r5, #1
 800a4be:	4630      	mov	r0, r6
 800a4c0:	f04f 0c00 	mov.w	ip, #0
 800a4c4:	f857 2b04 	ldr.w	r2, [r7], #4
 800a4c8:	f8d0 e000 	ldr.w	lr, [r0]
 800a4cc:	b293      	uxth	r3, r2
 800a4ce:	ebac 0303 	sub.w	r3, ip, r3
 800a4d2:	0c12      	lsrs	r2, r2, #16
 800a4d4:	fa13 f38e 	uxtah	r3, r3, lr
 800a4d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a4dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4e6:	45b9      	cmp	r9, r7
 800a4e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a4ec:	f840 3b04 	str.w	r3, [r0], #4
 800a4f0:	d2e8      	bcs.n	800a4c4 <quorem+0xb0>
 800a4f2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a4f6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a4fa:	b92a      	cbnz	r2, 800a508 <quorem+0xf4>
 800a4fc:	3b04      	subs	r3, #4
 800a4fe:	429e      	cmp	r6, r3
 800a500:	461a      	mov	r2, r3
 800a502:	d30b      	bcc.n	800a51c <quorem+0x108>
 800a504:	f8c8 4010 	str.w	r4, [r8, #16]
 800a508:	4628      	mov	r0, r5
 800a50a:	b003      	add	sp, #12
 800a50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a510:	6812      	ldr	r2, [r2, #0]
 800a512:	3b04      	subs	r3, #4
 800a514:	2a00      	cmp	r2, #0
 800a516:	d1ca      	bne.n	800a4ae <quorem+0x9a>
 800a518:	3c01      	subs	r4, #1
 800a51a:	e7c5      	b.n	800a4a8 <quorem+0x94>
 800a51c:	6812      	ldr	r2, [r2, #0]
 800a51e:	3b04      	subs	r3, #4
 800a520:	2a00      	cmp	r2, #0
 800a522:	d1ef      	bne.n	800a504 <quorem+0xf0>
 800a524:	3c01      	subs	r4, #1
 800a526:	e7ea      	b.n	800a4fe <quorem+0xea>
 800a528:	2000      	movs	r0, #0
 800a52a:	e7ee      	b.n	800a50a <quorem+0xf6>
 800a52c:	0000      	movs	r0, r0
	...

0800a530 <_dtoa_r>:
 800a530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a534:	ec57 6b10 	vmov	r6, r7, d0
 800a538:	b097      	sub	sp, #92	; 0x5c
 800a53a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a53c:	9106      	str	r1, [sp, #24]
 800a53e:	4604      	mov	r4, r0
 800a540:	920b      	str	r2, [sp, #44]	; 0x2c
 800a542:	9312      	str	r3, [sp, #72]	; 0x48
 800a544:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a548:	e9cd 6700 	strd	r6, r7, [sp]
 800a54c:	b93d      	cbnz	r5, 800a55e <_dtoa_r+0x2e>
 800a54e:	2010      	movs	r0, #16
 800a550:	f001 f8e0 	bl	800b714 <malloc>
 800a554:	6260      	str	r0, [r4, #36]	; 0x24
 800a556:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a55a:	6005      	str	r5, [r0, #0]
 800a55c:	60c5      	str	r5, [r0, #12]
 800a55e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a560:	6819      	ldr	r1, [r3, #0]
 800a562:	b151      	cbz	r1, 800a57a <_dtoa_r+0x4a>
 800a564:	685a      	ldr	r2, [r3, #4]
 800a566:	604a      	str	r2, [r1, #4]
 800a568:	2301      	movs	r3, #1
 800a56a:	4093      	lsls	r3, r2
 800a56c:	608b      	str	r3, [r1, #8]
 800a56e:	4620      	mov	r0, r4
 800a570:	f001 f929 	bl	800b7c6 <_Bfree>
 800a574:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a576:	2200      	movs	r2, #0
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	1e3b      	subs	r3, r7, #0
 800a57c:	bfbb      	ittet	lt
 800a57e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a582:	9301      	strlt	r3, [sp, #4]
 800a584:	2300      	movge	r3, #0
 800a586:	2201      	movlt	r2, #1
 800a588:	bfac      	ite	ge
 800a58a:	f8c8 3000 	strge.w	r3, [r8]
 800a58e:	f8c8 2000 	strlt.w	r2, [r8]
 800a592:	4baf      	ldr	r3, [pc, #700]	; (800a850 <_dtoa_r+0x320>)
 800a594:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a598:	ea33 0308 	bics.w	r3, r3, r8
 800a59c:	d114      	bne.n	800a5c8 <_dtoa_r+0x98>
 800a59e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a5a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a5a4:	6013      	str	r3, [r2, #0]
 800a5a6:	9b00      	ldr	r3, [sp, #0]
 800a5a8:	b923      	cbnz	r3, 800a5b4 <_dtoa_r+0x84>
 800a5aa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	f000 8542 	beq.w	800b038 <_dtoa_r+0xb08>
 800a5b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5b6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a864 <_dtoa_r+0x334>
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f000 8544 	beq.w	800b048 <_dtoa_r+0xb18>
 800a5c0:	f10b 0303 	add.w	r3, fp, #3
 800a5c4:	f000 bd3e 	b.w	800b044 <_dtoa_r+0xb14>
 800a5c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	4639      	mov	r1, r7
 800a5d4:	f7f6 fa88 	bl	8000ae8 <__aeabi_dcmpeq>
 800a5d8:	4681      	mov	r9, r0
 800a5da:	b168      	cbz	r0, 800a5f8 <_dtoa_r+0xc8>
 800a5dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a5de:	2301      	movs	r3, #1
 800a5e0:	6013      	str	r3, [r2, #0]
 800a5e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 8524 	beq.w	800b032 <_dtoa_r+0xb02>
 800a5ea:	4b9a      	ldr	r3, [pc, #616]	; (800a854 <_dtoa_r+0x324>)
 800a5ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a5ee:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800a5f2:	6013      	str	r3, [r2, #0]
 800a5f4:	f000 bd28 	b.w	800b048 <_dtoa_r+0xb18>
 800a5f8:	aa14      	add	r2, sp, #80	; 0x50
 800a5fa:	a915      	add	r1, sp, #84	; 0x54
 800a5fc:	ec47 6b10 	vmov	d0, r6, r7
 800a600:	4620      	mov	r0, r4
 800a602:	f001 fbed 	bl	800bde0 <__d2b>
 800a606:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a60a:	9004      	str	r0, [sp, #16]
 800a60c:	2d00      	cmp	r5, #0
 800a60e:	d07c      	beq.n	800a70a <_dtoa_r+0x1da>
 800a610:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a614:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a618:	46b2      	mov	sl, r6
 800a61a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a61e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a622:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a626:	2200      	movs	r2, #0
 800a628:	4b8b      	ldr	r3, [pc, #556]	; (800a858 <_dtoa_r+0x328>)
 800a62a:	4650      	mov	r0, sl
 800a62c:	4659      	mov	r1, fp
 800a62e:	f7f5 fe3b 	bl	80002a8 <__aeabi_dsub>
 800a632:	a381      	add	r3, pc, #516	; (adr r3, 800a838 <_dtoa_r+0x308>)
 800a634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a638:	f7f5 ffee 	bl	8000618 <__aeabi_dmul>
 800a63c:	a380      	add	r3, pc, #512	; (adr r3, 800a840 <_dtoa_r+0x310>)
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	f7f5 fe33 	bl	80002ac <__adddf3>
 800a646:	4606      	mov	r6, r0
 800a648:	4628      	mov	r0, r5
 800a64a:	460f      	mov	r7, r1
 800a64c:	f7f5 ff7a 	bl	8000544 <__aeabi_i2d>
 800a650:	a37d      	add	r3, pc, #500	; (adr r3, 800a848 <_dtoa_r+0x318>)
 800a652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a656:	f7f5 ffdf 	bl	8000618 <__aeabi_dmul>
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	4630      	mov	r0, r6
 800a660:	4639      	mov	r1, r7
 800a662:	f7f5 fe23 	bl	80002ac <__adddf3>
 800a666:	4606      	mov	r6, r0
 800a668:	460f      	mov	r7, r1
 800a66a:	f7f6 fa85 	bl	8000b78 <__aeabi_d2iz>
 800a66e:	2200      	movs	r2, #0
 800a670:	4682      	mov	sl, r0
 800a672:	2300      	movs	r3, #0
 800a674:	4630      	mov	r0, r6
 800a676:	4639      	mov	r1, r7
 800a678:	f7f6 fa40 	bl	8000afc <__aeabi_dcmplt>
 800a67c:	b148      	cbz	r0, 800a692 <_dtoa_r+0x162>
 800a67e:	4650      	mov	r0, sl
 800a680:	f7f5 ff60 	bl	8000544 <__aeabi_i2d>
 800a684:	4632      	mov	r2, r6
 800a686:	463b      	mov	r3, r7
 800a688:	f7f6 fa2e 	bl	8000ae8 <__aeabi_dcmpeq>
 800a68c:	b908      	cbnz	r0, 800a692 <_dtoa_r+0x162>
 800a68e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a692:	f1ba 0f16 	cmp.w	sl, #22
 800a696:	d859      	bhi.n	800a74c <_dtoa_r+0x21c>
 800a698:	4970      	ldr	r1, [pc, #448]	; (800a85c <_dtoa_r+0x32c>)
 800a69a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a69e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6a6:	f7f6 fa47 	bl	8000b38 <__aeabi_dcmpgt>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	d050      	beq.n	800a750 <_dtoa_r+0x220>
 800a6ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6b8:	1b5d      	subs	r5, r3, r5
 800a6ba:	f1b5 0801 	subs.w	r8, r5, #1
 800a6be:	bf49      	itett	mi
 800a6c0:	f1c5 0301 	rsbmi	r3, r5, #1
 800a6c4:	2300      	movpl	r3, #0
 800a6c6:	9305      	strmi	r3, [sp, #20]
 800a6c8:	f04f 0800 	movmi.w	r8, #0
 800a6cc:	bf58      	it	pl
 800a6ce:	9305      	strpl	r3, [sp, #20]
 800a6d0:	f1ba 0f00 	cmp.w	sl, #0
 800a6d4:	db3e      	blt.n	800a754 <_dtoa_r+0x224>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	44d0      	add	r8, sl
 800a6da:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a6de:	9307      	str	r3, [sp, #28]
 800a6e0:	9b06      	ldr	r3, [sp, #24]
 800a6e2:	2b09      	cmp	r3, #9
 800a6e4:	f200 8090 	bhi.w	800a808 <_dtoa_r+0x2d8>
 800a6e8:	2b05      	cmp	r3, #5
 800a6ea:	bfc4      	itt	gt
 800a6ec:	3b04      	subgt	r3, #4
 800a6ee:	9306      	strgt	r3, [sp, #24]
 800a6f0:	9b06      	ldr	r3, [sp, #24]
 800a6f2:	f1a3 0302 	sub.w	r3, r3, #2
 800a6f6:	bfcc      	ite	gt
 800a6f8:	2500      	movgt	r5, #0
 800a6fa:	2501      	movle	r5, #1
 800a6fc:	2b03      	cmp	r3, #3
 800a6fe:	f200 808f 	bhi.w	800a820 <_dtoa_r+0x2f0>
 800a702:	e8df f003 	tbb	[pc, r3]
 800a706:	7f7d      	.short	0x7f7d
 800a708:	7131      	.short	0x7131
 800a70a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a70e:	441d      	add	r5, r3
 800a710:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a714:	2820      	cmp	r0, #32
 800a716:	dd13      	ble.n	800a740 <_dtoa_r+0x210>
 800a718:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a71c:	9b00      	ldr	r3, [sp, #0]
 800a71e:	fa08 f800 	lsl.w	r8, r8, r0
 800a722:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a726:	fa23 f000 	lsr.w	r0, r3, r0
 800a72a:	ea48 0000 	orr.w	r0, r8, r0
 800a72e:	f7f5 fef9 	bl	8000524 <__aeabi_ui2d>
 800a732:	2301      	movs	r3, #1
 800a734:	4682      	mov	sl, r0
 800a736:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a73a:	3d01      	subs	r5, #1
 800a73c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a73e:	e772      	b.n	800a626 <_dtoa_r+0xf6>
 800a740:	9b00      	ldr	r3, [sp, #0]
 800a742:	f1c0 0020 	rsb	r0, r0, #32
 800a746:	fa03 f000 	lsl.w	r0, r3, r0
 800a74a:	e7f0      	b.n	800a72e <_dtoa_r+0x1fe>
 800a74c:	2301      	movs	r3, #1
 800a74e:	e7b1      	b.n	800a6b4 <_dtoa_r+0x184>
 800a750:	900f      	str	r0, [sp, #60]	; 0x3c
 800a752:	e7b0      	b.n	800a6b6 <_dtoa_r+0x186>
 800a754:	9b05      	ldr	r3, [sp, #20]
 800a756:	eba3 030a 	sub.w	r3, r3, sl
 800a75a:	9305      	str	r3, [sp, #20]
 800a75c:	f1ca 0300 	rsb	r3, sl, #0
 800a760:	9307      	str	r3, [sp, #28]
 800a762:	2300      	movs	r3, #0
 800a764:	930e      	str	r3, [sp, #56]	; 0x38
 800a766:	e7bb      	b.n	800a6e0 <_dtoa_r+0x1b0>
 800a768:	2301      	movs	r3, #1
 800a76a:	930a      	str	r3, [sp, #40]	; 0x28
 800a76c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a76e:	2b00      	cmp	r3, #0
 800a770:	dd59      	ble.n	800a826 <_dtoa_r+0x2f6>
 800a772:	9302      	str	r3, [sp, #8]
 800a774:	4699      	mov	r9, r3
 800a776:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a778:	2200      	movs	r2, #0
 800a77a:	6072      	str	r2, [r6, #4]
 800a77c:	2204      	movs	r2, #4
 800a77e:	f102 0014 	add.w	r0, r2, #20
 800a782:	4298      	cmp	r0, r3
 800a784:	6871      	ldr	r1, [r6, #4]
 800a786:	d953      	bls.n	800a830 <_dtoa_r+0x300>
 800a788:	4620      	mov	r0, r4
 800a78a:	f000 ffe8 	bl	800b75e <_Balloc>
 800a78e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a790:	6030      	str	r0, [r6, #0]
 800a792:	f1b9 0f0e 	cmp.w	r9, #14
 800a796:	f8d3 b000 	ldr.w	fp, [r3]
 800a79a:	f200 80e6 	bhi.w	800a96a <_dtoa_r+0x43a>
 800a79e:	2d00      	cmp	r5, #0
 800a7a0:	f000 80e3 	beq.w	800a96a <_dtoa_r+0x43a>
 800a7a4:	ed9d 7b00 	vldr	d7, [sp]
 800a7a8:	f1ba 0f00 	cmp.w	sl, #0
 800a7ac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a7b0:	dd74      	ble.n	800a89c <_dtoa_r+0x36c>
 800a7b2:	4a2a      	ldr	r2, [pc, #168]	; (800a85c <_dtoa_r+0x32c>)
 800a7b4:	f00a 030f 	and.w	r3, sl, #15
 800a7b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a7bc:	ed93 7b00 	vldr	d7, [r3]
 800a7c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a7c4:	06f0      	lsls	r0, r6, #27
 800a7c6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a7ca:	d565      	bpl.n	800a898 <_dtoa_r+0x368>
 800a7cc:	4b24      	ldr	r3, [pc, #144]	; (800a860 <_dtoa_r+0x330>)
 800a7ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a7d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a7d6:	f7f6 f849 	bl	800086c <__aeabi_ddiv>
 800a7da:	e9cd 0100 	strd	r0, r1, [sp]
 800a7de:	f006 060f 	and.w	r6, r6, #15
 800a7e2:	2503      	movs	r5, #3
 800a7e4:	4f1e      	ldr	r7, [pc, #120]	; (800a860 <_dtoa_r+0x330>)
 800a7e6:	e04c      	b.n	800a882 <_dtoa_r+0x352>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a7ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7ee:	4453      	add	r3, sl
 800a7f0:	f103 0901 	add.w	r9, r3, #1
 800a7f4:	9302      	str	r3, [sp, #8]
 800a7f6:	464b      	mov	r3, r9
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	bfb8      	it	lt
 800a7fc:	2301      	movlt	r3, #1
 800a7fe:	e7ba      	b.n	800a776 <_dtoa_r+0x246>
 800a800:	2300      	movs	r3, #0
 800a802:	e7b2      	b.n	800a76a <_dtoa_r+0x23a>
 800a804:	2300      	movs	r3, #0
 800a806:	e7f0      	b.n	800a7ea <_dtoa_r+0x2ba>
 800a808:	2501      	movs	r5, #1
 800a80a:	2300      	movs	r3, #0
 800a80c:	9306      	str	r3, [sp, #24]
 800a80e:	950a      	str	r5, [sp, #40]	; 0x28
 800a810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a814:	9302      	str	r3, [sp, #8]
 800a816:	4699      	mov	r9, r3
 800a818:	2200      	movs	r2, #0
 800a81a:	2312      	movs	r3, #18
 800a81c:	920b      	str	r2, [sp, #44]	; 0x2c
 800a81e:	e7aa      	b.n	800a776 <_dtoa_r+0x246>
 800a820:	2301      	movs	r3, #1
 800a822:	930a      	str	r3, [sp, #40]	; 0x28
 800a824:	e7f4      	b.n	800a810 <_dtoa_r+0x2e0>
 800a826:	2301      	movs	r3, #1
 800a828:	9302      	str	r3, [sp, #8]
 800a82a:	4699      	mov	r9, r3
 800a82c:	461a      	mov	r2, r3
 800a82e:	e7f5      	b.n	800a81c <_dtoa_r+0x2ec>
 800a830:	3101      	adds	r1, #1
 800a832:	6071      	str	r1, [r6, #4]
 800a834:	0052      	lsls	r2, r2, #1
 800a836:	e7a2      	b.n	800a77e <_dtoa_r+0x24e>
 800a838:	636f4361 	.word	0x636f4361
 800a83c:	3fd287a7 	.word	0x3fd287a7
 800a840:	8b60c8b3 	.word	0x8b60c8b3
 800a844:	3fc68a28 	.word	0x3fc68a28
 800a848:	509f79fb 	.word	0x509f79fb
 800a84c:	3fd34413 	.word	0x3fd34413
 800a850:	7ff00000 	.word	0x7ff00000
 800a854:	0800c5b5 	.word	0x0800c5b5
 800a858:	3ff80000 	.word	0x3ff80000
 800a85c:	0800c668 	.word	0x0800c668
 800a860:	0800c640 	.word	0x0800c640
 800a864:	0800c631 	.word	0x0800c631
 800a868:	07f1      	lsls	r1, r6, #31
 800a86a:	d508      	bpl.n	800a87e <_dtoa_r+0x34e>
 800a86c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a870:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a874:	f7f5 fed0 	bl	8000618 <__aeabi_dmul>
 800a878:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a87c:	3501      	adds	r5, #1
 800a87e:	1076      	asrs	r6, r6, #1
 800a880:	3708      	adds	r7, #8
 800a882:	2e00      	cmp	r6, #0
 800a884:	d1f0      	bne.n	800a868 <_dtoa_r+0x338>
 800a886:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a88a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a88e:	f7f5 ffed 	bl	800086c <__aeabi_ddiv>
 800a892:	e9cd 0100 	strd	r0, r1, [sp]
 800a896:	e01a      	b.n	800a8ce <_dtoa_r+0x39e>
 800a898:	2502      	movs	r5, #2
 800a89a:	e7a3      	b.n	800a7e4 <_dtoa_r+0x2b4>
 800a89c:	f000 80a0 	beq.w	800a9e0 <_dtoa_r+0x4b0>
 800a8a0:	f1ca 0600 	rsb	r6, sl, #0
 800a8a4:	4b9f      	ldr	r3, [pc, #636]	; (800ab24 <_dtoa_r+0x5f4>)
 800a8a6:	4fa0      	ldr	r7, [pc, #640]	; (800ab28 <_dtoa_r+0x5f8>)
 800a8a8:	f006 020f 	and.w	r2, r6, #15
 800a8ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a8b8:	f7f5 feae 	bl	8000618 <__aeabi_dmul>
 800a8bc:	e9cd 0100 	strd	r0, r1, [sp]
 800a8c0:	1136      	asrs	r6, r6, #4
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	2502      	movs	r5, #2
 800a8c6:	2e00      	cmp	r6, #0
 800a8c8:	d17f      	bne.n	800a9ca <_dtoa_r+0x49a>
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1e1      	bne.n	800a892 <_dtoa_r+0x362>
 800a8ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 8087 	beq.w	800a9e4 <_dtoa_r+0x4b4>
 800a8d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	4b93      	ldr	r3, [pc, #588]	; (800ab2c <_dtoa_r+0x5fc>)
 800a8de:	4630      	mov	r0, r6
 800a8e0:	4639      	mov	r1, r7
 800a8e2:	f7f6 f90b 	bl	8000afc <__aeabi_dcmplt>
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	d07c      	beq.n	800a9e4 <_dtoa_r+0x4b4>
 800a8ea:	f1b9 0f00 	cmp.w	r9, #0
 800a8ee:	d079      	beq.n	800a9e4 <_dtoa_r+0x4b4>
 800a8f0:	9b02      	ldr	r3, [sp, #8]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	dd35      	ble.n	800a962 <_dtoa_r+0x432>
 800a8f6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a8fa:	9308      	str	r3, [sp, #32]
 800a8fc:	4639      	mov	r1, r7
 800a8fe:	2200      	movs	r2, #0
 800a900:	4b8b      	ldr	r3, [pc, #556]	; (800ab30 <_dtoa_r+0x600>)
 800a902:	4630      	mov	r0, r6
 800a904:	f7f5 fe88 	bl	8000618 <__aeabi_dmul>
 800a908:	e9cd 0100 	strd	r0, r1, [sp]
 800a90c:	9f02      	ldr	r7, [sp, #8]
 800a90e:	3501      	adds	r5, #1
 800a910:	4628      	mov	r0, r5
 800a912:	f7f5 fe17 	bl	8000544 <__aeabi_i2d>
 800a916:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a91a:	f7f5 fe7d 	bl	8000618 <__aeabi_dmul>
 800a91e:	2200      	movs	r2, #0
 800a920:	4b84      	ldr	r3, [pc, #528]	; (800ab34 <_dtoa_r+0x604>)
 800a922:	f7f5 fcc3 	bl	80002ac <__adddf3>
 800a926:	4605      	mov	r5, r0
 800a928:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a92c:	2f00      	cmp	r7, #0
 800a92e:	d15d      	bne.n	800a9ec <_dtoa_r+0x4bc>
 800a930:	2200      	movs	r2, #0
 800a932:	4b81      	ldr	r3, [pc, #516]	; (800ab38 <_dtoa_r+0x608>)
 800a934:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a938:	f7f5 fcb6 	bl	80002a8 <__aeabi_dsub>
 800a93c:	462a      	mov	r2, r5
 800a93e:	4633      	mov	r3, r6
 800a940:	e9cd 0100 	strd	r0, r1, [sp]
 800a944:	f7f6 f8f8 	bl	8000b38 <__aeabi_dcmpgt>
 800a948:	2800      	cmp	r0, #0
 800a94a:	f040 8288 	bne.w	800ae5e <_dtoa_r+0x92e>
 800a94e:	462a      	mov	r2, r5
 800a950:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a954:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a958:	f7f6 f8d0 	bl	8000afc <__aeabi_dcmplt>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	f040 827c 	bne.w	800ae5a <_dtoa_r+0x92a>
 800a962:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a966:	e9cd 2300 	strd	r2, r3, [sp]
 800a96a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f2c0 8150 	blt.w	800ac12 <_dtoa_r+0x6e2>
 800a972:	f1ba 0f0e 	cmp.w	sl, #14
 800a976:	f300 814c 	bgt.w	800ac12 <_dtoa_r+0x6e2>
 800a97a:	4b6a      	ldr	r3, [pc, #424]	; (800ab24 <_dtoa_r+0x5f4>)
 800a97c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a980:	ed93 7b00 	vldr	d7, [r3]
 800a984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a986:	2b00      	cmp	r3, #0
 800a988:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a98c:	f280 80d8 	bge.w	800ab40 <_dtoa_r+0x610>
 800a990:	f1b9 0f00 	cmp.w	r9, #0
 800a994:	f300 80d4 	bgt.w	800ab40 <_dtoa_r+0x610>
 800a998:	f040 825e 	bne.w	800ae58 <_dtoa_r+0x928>
 800a99c:	2200      	movs	r2, #0
 800a99e:	4b66      	ldr	r3, [pc, #408]	; (800ab38 <_dtoa_r+0x608>)
 800a9a0:	ec51 0b17 	vmov	r0, r1, d7
 800a9a4:	f7f5 fe38 	bl	8000618 <__aeabi_dmul>
 800a9a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9ac:	f7f6 f8ba 	bl	8000b24 <__aeabi_dcmpge>
 800a9b0:	464f      	mov	r7, r9
 800a9b2:	464e      	mov	r6, r9
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	f040 8234 	bne.w	800ae22 <_dtoa_r+0x8f2>
 800a9ba:	2331      	movs	r3, #49	; 0x31
 800a9bc:	f10b 0501 	add.w	r5, fp, #1
 800a9c0:	f88b 3000 	strb.w	r3, [fp]
 800a9c4:	f10a 0a01 	add.w	sl, sl, #1
 800a9c8:	e22f      	b.n	800ae2a <_dtoa_r+0x8fa>
 800a9ca:	07f2      	lsls	r2, r6, #31
 800a9cc:	d505      	bpl.n	800a9da <_dtoa_r+0x4aa>
 800a9ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9d2:	f7f5 fe21 	bl	8000618 <__aeabi_dmul>
 800a9d6:	3501      	adds	r5, #1
 800a9d8:	2301      	movs	r3, #1
 800a9da:	1076      	asrs	r6, r6, #1
 800a9dc:	3708      	adds	r7, #8
 800a9de:	e772      	b.n	800a8c6 <_dtoa_r+0x396>
 800a9e0:	2502      	movs	r5, #2
 800a9e2:	e774      	b.n	800a8ce <_dtoa_r+0x39e>
 800a9e4:	f8cd a020 	str.w	sl, [sp, #32]
 800a9e8:	464f      	mov	r7, r9
 800a9ea:	e791      	b.n	800a910 <_dtoa_r+0x3e0>
 800a9ec:	4b4d      	ldr	r3, [pc, #308]	; (800ab24 <_dtoa_r+0x5f4>)
 800a9ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a9f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a9f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d047      	beq.n	800aa8c <_dtoa_r+0x55c>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	460b      	mov	r3, r1
 800aa00:	2000      	movs	r0, #0
 800aa02:	494e      	ldr	r1, [pc, #312]	; (800ab3c <_dtoa_r+0x60c>)
 800aa04:	f7f5 ff32 	bl	800086c <__aeabi_ddiv>
 800aa08:	462a      	mov	r2, r5
 800aa0a:	4633      	mov	r3, r6
 800aa0c:	f7f5 fc4c 	bl	80002a8 <__aeabi_dsub>
 800aa10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800aa14:	465d      	mov	r5, fp
 800aa16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa1a:	f7f6 f8ad 	bl	8000b78 <__aeabi_d2iz>
 800aa1e:	4606      	mov	r6, r0
 800aa20:	f7f5 fd90 	bl	8000544 <__aeabi_i2d>
 800aa24:	4602      	mov	r2, r0
 800aa26:	460b      	mov	r3, r1
 800aa28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa2c:	f7f5 fc3c 	bl	80002a8 <__aeabi_dsub>
 800aa30:	3630      	adds	r6, #48	; 0x30
 800aa32:	f805 6b01 	strb.w	r6, [r5], #1
 800aa36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aa3a:	e9cd 0100 	strd	r0, r1, [sp]
 800aa3e:	f7f6 f85d 	bl	8000afc <__aeabi_dcmplt>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d163      	bne.n	800ab0e <_dtoa_r+0x5de>
 800aa46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	4937      	ldr	r1, [pc, #220]	; (800ab2c <_dtoa_r+0x5fc>)
 800aa4e:	f7f5 fc2b 	bl	80002a8 <__aeabi_dsub>
 800aa52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aa56:	f7f6 f851 	bl	8000afc <__aeabi_dcmplt>
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	f040 80b7 	bne.w	800abce <_dtoa_r+0x69e>
 800aa60:	eba5 030b 	sub.w	r3, r5, fp
 800aa64:	429f      	cmp	r7, r3
 800aa66:	f77f af7c 	ble.w	800a962 <_dtoa_r+0x432>
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	4b30      	ldr	r3, [pc, #192]	; (800ab30 <_dtoa_r+0x600>)
 800aa6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa72:	f7f5 fdd1 	bl	8000618 <__aeabi_dmul>
 800aa76:	2200      	movs	r2, #0
 800aa78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800aa7c:	4b2c      	ldr	r3, [pc, #176]	; (800ab30 <_dtoa_r+0x600>)
 800aa7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa82:	f7f5 fdc9 	bl	8000618 <__aeabi_dmul>
 800aa86:	e9cd 0100 	strd	r0, r1, [sp]
 800aa8a:	e7c4      	b.n	800aa16 <_dtoa_r+0x4e6>
 800aa8c:	462a      	mov	r2, r5
 800aa8e:	4633      	mov	r3, r6
 800aa90:	f7f5 fdc2 	bl	8000618 <__aeabi_dmul>
 800aa94:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800aa98:	eb0b 0507 	add.w	r5, fp, r7
 800aa9c:	465e      	mov	r6, fp
 800aa9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aaa2:	f7f6 f869 	bl	8000b78 <__aeabi_d2iz>
 800aaa6:	4607      	mov	r7, r0
 800aaa8:	f7f5 fd4c 	bl	8000544 <__aeabi_i2d>
 800aaac:	3730      	adds	r7, #48	; 0x30
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aab6:	f7f5 fbf7 	bl	80002a8 <__aeabi_dsub>
 800aaba:	f806 7b01 	strb.w	r7, [r6], #1
 800aabe:	42ae      	cmp	r6, r5
 800aac0:	e9cd 0100 	strd	r0, r1, [sp]
 800aac4:	f04f 0200 	mov.w	r2, #0
 800aac8:	d126      	bne.n	800ab18 <_dtoa_r+0x5e8>
 800aaca:	4b1c      	ldr	r3, [pc, #112]	; (800ab3c <_dtoa_r+0x60c>)
 800aacc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aad0:	f7f5 fbec 	bl	80002ac <__adddf3>
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aadc:	f7f6 f82c 	bl	8000b38 <__aeabi_dcmpgt>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d174      	bne.n	800abce <_dtoa_r+0x69e>
 800aae4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aae8:	2000      	movs	r0, #0
 800aaea:	4914      	ldr	r1, [pc, #80]	; (800ab3c <_dtoa_r+0x60c>)
 800aaec:	f7f5 fbdc 	bl	80002a8 <__aeabi_dsub>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aaf8:	f7f6 f800 	bl	8000afc <__aeabi_dcmplt>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	f43f af30 	beq.w	800a962 <_dtoa_r+0x432>
 800ab02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab06:	2b30      	cmp	r3, #48	; 0x30
 800ab08:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ab0c:	d002      	beq.n	800ab14 <_dtoa_r+0x5e4>
 800ab0e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ab12:	e04a      	b.n	800abaa <_dtoa_r+0x67a>
 800ab14:	4615      	mov	r5, r2
 800ab16:	e7f4      	b.n	800ab02 <_dtoa_r+0x5d2>
 800ab18:	4b05      	ldr	r3, [pc, #20]	; (800ab30 <_dtoa_r+0x600>)
 800ab1a:	f7f5 fd7d 	bl	8000618 <__aeabi_dmul>
 800ab1e:	e9cd 0100 	strd	r0, r1, [sp]
 800ab22:	e7bc      	b.n	800aa9e <_dtoa_r+0x56e>
 800ab24:	0800c668 	.word	0x0800c668
 800ab28:	0800c640 	.word	0x0800c640
 800ab2c:	3ff00000 	.word	0x3ff00000
 800ab30:	40240000 	.word	0x40240000
 800ab34:	401c0000 	.word	0x401c0000
 800ab38:	40140000 	.word	0x40140000
 800ab3c:	3fe00000 	.word	0x3fe00000
 800ab40:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ab44:	465d      	mov	r5, fp
 800ab46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	4639      	mov	r1, r7
 800ab4e:	f7f5 fe8d 	bl	800086c <__aeabi_ddiv>
 800ab52:	f7f6 f811 	bl	8000b78 <__aeabi_d2iz>
 800ab56:	4680      	mov	r8, r0
 800ab58:	f7f5 fcf4 	bl	8000544 <__aeabi_i2d>
 800ab5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab60:	f7f5 fd5a 	bl	8000618 <__aeabi_dmul>
 800ab64:	4602      	mov	r2, r0
 800ab66:	460b      	mov	r3, r1
 800ab68:	4630      	mov	r0, r6
 800ab6a:	4639      	mov	r1, r7
 800ab6c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ab70:	f7f5 fb9a 	bl	80002a8 <__aeabi_dsub>
 800ab74:	f805 6b01 	strb.w	r6, [r5], #1
 800ab78:	eba5 060b 	sub.w	r6, r5, fp
 800ab7c:	45b1      	cmp	r9, r6
 800ab7e:	4602      	mov	r2, r0
 800ab80:	460b      	mov	r3, r1
 800ab82:	d139      	bne.n	800abf8 <_dtoa_r+0x6c8>
 800ab84:	f7f5 fb92 	bl	80002ac <__adddf3>
 800ab88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab8c:	4606      	mov	r6, r0
 800ab8e:	460f      	mov	r7, r1
 800ab90:	f7f5 ffd2 	bl	8000b38 <__aeabi_dcmpgt>
 800ab94:	b9c8      	cbnz	r0, 800abca <_dtoa_r+0x69a>
 800ab96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	4639      	mov	r1, r7
 800ab9e:	f7f5 ffa3 	bl	8000ae8 <__aeabi_dcmpeq>
 800aba2:	b110      	cbz	r0, 800abaa <_dtoa_r+0x67a>
 800aba4:	f018 0f01 	tst.w	r8, #1
 800aba8:	d10f      	bne.n	800abca <_dtoa_r+0x69a>
 800abaa:	9904      	ldr	r1, [sp, #16]
 800abac:	4620      	mov	r0, r4
 800abae:	f000 fe0a 	bl	800b7c6 <_Bfree>
 800abb2:	2300      	movs	r3, #0
 800abb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800abb6:	702b      	strb	r3, [r5, #0]
 800abb8:	f10a 0301 	add.w	r3, sl, #1
 800abbc:	6013      	str	r3, [r2, #0]
 800abbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f000 8241 	beq.w	800b048 <_dtoa_r+0xb18>
 800abc6:	601d      	str	r5, [r3, #0]
 800abc8:	e23e      	b.n	800b048 <_dtoa_r+0xb18>
 800abca:	f8cd a020 	str.w	sl, [sp, #32]
 800abce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800abd2:	2a39      	cmp	r2, #57	; 0x39
 800abd4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800abd8:	d108      	bne.n	800abec <_dtoa_r+0x6bc>
 800abda:	459b      	cmp	fp, r3
 800abdc:	d10a      	bne.n	800abf4 <_dtoa_r+0x6c4>
 800abde:	9b08      	ldr	r3, [sp, #32]
 800abe0:	3301      	adds	r3, #1
 800abe2:	9308      	str	r3, [sp, #32]
 800abe4:	2330      	movs	r3, #48	; 0x30
 800abe6:	f88b 3000 	strb.w	r3, [fp]
 800abea:	465b      	mov	r3, fp
 800abec:	781a      	ldrb	r2, [r3, #0]
 800abee:	3201      	adds	r2, #1
 800abf0:	701a      	strb	r2, [r3, #0]
 800abf2:	e78c      	b.n	800ab0e <_dtoa_r+0x5de>
 800abf4:	461d      	mov	r5, r3
 800abf6:	e7ea      	b.n	800abce <_dtoa_r+0x69e>
 800abf8:	2200      	movs	r2, #0
 800abfa:	4b9b      	ldr	r3, [pc, #620]	; (800ae68 <_dtoa_r+0x938>)
 800abfc:	f7f5 fd0c 	bl	8000618 <__aeabi_dmul>
 800ac00:	2200      	movs	r2, #0
 800ac02:	2300      	movs	r3, #0
 800ac04:	4606      	mov	r6, r0
 800ac06:	460f      	mov	r7, r1
 800ac08:	f7f5 ff6e 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	d09a      	beq.n	800ab46 <_dtoa_r+0x616>
 800ac10:	e7cb      	b.n	800abaa <_dtoa_r+0x67a>
 800ac12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac14:	2a00      	cmp	r2, #0
 800ac16:	f000 808b 	beq.w	800ad30 <_dtoa_r+0x800>
 800ac1a:	9a06      	ldr	r2, [sp, #24]
 800ac1c:	2a01      	cmp	r2, #1
 800ac1e:	dc6e      	bgt.n	800acfe <_dtoa_r+0x7ce>
 800ac20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ac22:	2a00      	cmp	r2, #0
 800ac24:	d067      	beq.n	800acf6 <_dtoa_r+0x7c6>
 800ac26:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ac2a:	9f07      	ldr	r7, [sp, #28]
 800ac2c:	9d05      	ldr	r5, [sp, #20]
 800ac2e:	9a05      	ldr	r2, [sp, #20]
 800ac30:	2101      	movs	r1, #1
 800ac32:	441a      	add	r2, r3
 800ac34:	4620      	mov	r0, r4
 800ac36:	9205      	str	r2, [sp, #20]
 800ac38:	4498      	add	r8, r3
 800ac3a:	f000 fea2 	bl	800b982 <__i2b>
 800ac3e:	4606      	mov	r6, r0
 800ac40:	2d00      	cmp	r5, #0
 800ac42:	dd0c      	ble.n	800ac5e <_dtoa_r+0x72e>
 800ac44:	f1b8 0f00 	cmp.w	r8, #0
 800ac48:	dd09      	ble.n	800ac5e <_dtoa_r+0x72e>
 800ac4a:	4545      	cmp	r5, r8
 800ac4c:	9a05      	ldr	r2, [sp, #20]
 800ac4e:	462b      	mov	r3, r5
 800ac50:	bfa8      	it	ge
 800ac52:	4643      	movge	r3, r8
 800ac54:	1ad2      	subs	r2, r2, r3
 800ac56:	9205      	str	r2, [sp, #20]
 800ac58:	1aed      	subs	r5, r5, r3
 800ac5a:	eba8 0803 	sub.w	r8, r8, r3
 800ac5e:	9b07      	ldr	r3, [sp, #28]
 800ac60:	b1eb      	cbz	r3, 800ac9e <_dtoa_r+0x76e>
 800ac62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d067      	beq.n	800ad38 <_dtoa_r+0x808>
 800ac68:	b18f      	cbz	r7, 800ac8e <_dtoa_r+0x75e>
 800ac6a:	4631      	mov	r1, r6
 800ac6c:	463a      	mov	r2, r7
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f000 ff26 	bl	800bac0 <__pow5mult>
 800ac74:	9a04      	ldr	r2, [sp, #16]
 800ac76:	4601      	mov	r1, r0
 800ac78:	4606      	mov	r6, r0
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 fe8a 	bl	800b994 <__multiply>
 800ac80:	9904      	ldr	r1, [sp, #16]
 800ac82:	9008      	str	r0, [sp, #32]
 800ac84:	4620      	mov	r0, r4
 800ac86:	f000 fd9e 	bl	800b7c6 <_Bfree>
 800ac8a:	9b08      	ldr	r3, [sp, #32]
 800ac8c:	9304      	str	r3, [sp, #16]
 800ac8e:	9b07      	ldr	r3, [sp, #28]
 800ac90:	1bda      	subs	r2, r3, r7
 800ac92:	d004      	beq.n	800ac9e <_dtoa_r+0x76e>
 800ac94:	9904      	ldr	r1, [sp, #16]
 800ac96:	4620      	mov	r0, r4
 800ac98:	f000 ff12 	bl	800bac0 <__pow5mult>
 800ac9c:	9004      	str	r0, [sp, #16]
 800ac9e:	2101      	movs	r1, #1
 800aca0:	4620      	mov	r0, r4
 800aca2:	f000 fe6e 	bl	800b982 <__i2b>
 800aca6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aca8:	4607      	mov	r7, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f000 81d0 	beq.w	800b050 <_dtoa_r+0xb20>
 800acb0:	461a      	mov	r2, r3
 800acb2:	4601      	mov	r1, r0
 800acb4:	4620      	mov	r0, r4
 800acb6:	f000 ff03 	bl	800bac0 <__pow5mult>
 800acba:	9b06      	ldr	r3, [sp, #24]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	4607      	mov	r7, r0
 800acc0:	dc40      	bgt.n	800ad44 <_dtoa_r+0x814>
 800acc2:	9b00      	ldr	r3, [sp, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d139      	bne.n	800ad3c <_dtoa_r+0x80c>
 800acc8:	9b01      	ldr	r3, [sp, #4]
 800acca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d136      	bne.n	800ad40 <_dtoa_r+0x810>
 800acd2:	9b01      	ldr	r3, [sp, #4]
 800acd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acd8:	0d1b      	lsrs	r3, r3, #20
 800acda:	051b      	lsls	r3, r3, #20
 800acdc:	b12b      	cbz	r3, 800acea <_dtoa_r+0x7ba>
 800acde:	9b05      	ldr	r3, [sp, #20]
 800ace0:	3301      	adds	r3, #1
 800ace2:	9305      	str	r3, [sp, #20]
 800ace4:	f108 0801 	add.w	r8, r8, #1
 800ace8:	2301      	movs	r3, #1
 800acea:	9307      	str	r3, [sp, #28]
 800acec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d12a      	bne.n	800ad48 <_dtoa_r+0x818>
 800acf2:	2001      	movs	r0, #1
 800acf4:	e030      	b.n	800ad58 <_dtoa_r+0x828>
 800acf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acf8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800acfc:	e795      	b.n	800ac2a <_dtoa_r+0x6fa>
 800acfe:	9b07      	ldr	r3, [sp, #28]
 800ad00:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800ad04:	42bb      	cmp	r3, r7
 800ad06:	bfbf      	itttt	lt
 800ad08:	9b07      	ldrlt	r3, [sp, #28]
 800ad0a:	9707      	strlt	r7, [sp, #28]
 800ad0c:	1afa      	sublt	r2, r7, r3
 800ad0e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ad10:	bfbb      	ittet	lt
 800ad12:	189b      	addlt	r3, r3, r2
 800ad14:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ad16:	1bdf      	subge	r7, r3, r7
 800ad18:	2700      	movlt	r7, #0
 800ad1a:	f1b9 0f00 	cmp.w	r9, #0
 800ad1e:	bfb5      	itete	lt
 800ad20:	9b05      	ldrlt	r3, [sp, #20]
 800ad22:	9d05      	ldrge	r5, [sp, #20]
 800ad24:	eba3 0509 	sublt.w	r5, r3, r9
 800ad28:	464b      	movge	r3, r9
 800ad2a:	bfb8      	it	lt
 800ad2c:	2300      	movlt	r3, #0
 800ad2e:	e77e      	b.n	800ac2e <_dtoa_r+0x6fe>
 800ad30:	9f07      	ldr	r7, [sp, #28]
 800ad32:	9d05      	ldr	r5, [sp, #20]
 800ad34:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ad36:	e783      	b.n	800ac40 <_dtoa_r+0x710>
 800ad38:	9a07      	ldr	r2, [sp, #28]
 800ad3a:	e7ab      	b.n	800ac94 <_dtoa_r+0x764>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	e7d4      	b.n	800acea <_dtoa_r+0x7ba>
 800ad40:	9b00      	ldr	r3, [sp, #0]
 800ad42:	e7d2      	b.n	800acea <_dtoa_r+0x7ba>
 800ad44:	2300      	movs	r3, #0
 800ad46:	9307      	str	r3, [sp, #28]
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ad4e:	6918      	ldr	r0, [r3, #16]
 800ad50:	f000 fdc9 	bl	800b8e6 <__hi0bits>
 800ad54:	f1c0 0020 	rsb	r0, r0, #32
 800ad58:	4440      	add	r0, r8
 800ad5a:	f010 001f 	ands.w	r0, r0, #31
 800ad5e:	d047      	beq.n	800adf0 <_dtoa_r+0x8c0>
 800ad60:	f1c0 0320 	rsb	r3, r0, #32
 800ad64:	2b04      	cmp	r3, #4
 800ad66:	dd3b      	ble.n	800ade0 <_dtoa_r+0x8b0>
 800ad68:	9b05      	ldr	r3, [sp, #20]
 800ad6a:	f1c0 001c 	rsb	r0, r0, #28
 800ad6e:	4403      	add	r3, r0
 800ad70:	9305      	str	r3, [sp, #20]
 800ad72:	4405      	add	r5, r0
 800ad74:	4480      	add	r8, r0
 800ad76:	9b05      	ldr	r3, [sp, #20]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	dd05      	ble.n	800ad88 <_dtoa_r+0x858>
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	9904      	ldr	r1, [sp, #16]
 800ad80:	4620      	mov	r0, r4
 800ad82:	f000 feeb 	bl	800bb5c <__lshift>
 800ad86:	9004      	str	r0, [sp, #16]
 800ad88:	f1b8 0f00 	cmp.w	r8, #0
 800ad8c:	dd05      	ble.n	800ad9a <_dtoa_r+0x86a>
 800ad8e:	4639      	mov	r1, r7
 800ad90:	4642      	mov	r2, r8
 800ad92:	4620      	mov	r0, r4
 800ad94:	f000 fee2 	bl	800bb5c <__lshift>
 800ad98:	4607      	mov	r7, r0
 800ad9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad9c:	b353      	cbz	r3, 800adf4 <_dtoa_r+0x8c4>
 800ad9e:	4639      	mov	r1, r7
 800ada0:	9804      	ldr	r0, [sp, #16]
 800ada2:	f000 ff2f 	bl	800bc04 <__mcmp>
 800ada6:	2800      	cmp	r0, #0
 800ada8:	da24      	bge.n	800adf4 <_dtoa_r+0x8c4>
 800adaa:	2300      	movs	r3, #0
 800adac:	220a      	movs	r2, #10
 800adae:	9904      	ldr	r1, [sp, #16]
 800adb0:	4620      	mov	r0, r4
 800adb2:	f000 fd1f 	bl	800b7f4 <__multadd>
 800adb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adb8:	9004      	str	r0, [sp, #16]
 800adba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f000 814d 	beq.w	800b05e <_dtoa_r+0xb2e>
 800adc4:	2300      	movs	r3, #0
 800adc6:	4631      	mov	r1, r6
 800adc8:	220a      	movs	r2, #10
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 fd12 	bl	800b7f4 <__multadd>
 800add0:	9b02      	ldr	r3, [sp, #8]
 800add2:	2b00      	cmp	r3, #0
 800add4:	4606      	mov	r6, r0
 800add6:	dc4f      	bgt.n	800ae78 <_dtoa_r+0x948>
 800add8:	9b06      	ldr	r3, [sp, #24]
 800adda:	2b02      	cmp	r3, #2
 800addc:	dd4c      	ble.n	800ae78 <_dtoa_r+0x948>
 800adde:	e011      	b.n	800ae04 <_dtoa_r+0x8d4>
 800ade0:	d0c9      	beq.n	800ad76 <_dtoa_r+0x846>
 800ade2:	9a05      	ldr	r2, [sp, #20]
 800ade4:	331c      	adds	r3, #28
 800ade6:	441a      	add	r2, r3
 800ade8:	9205      	str	r2, [sp, #20]
 800adea:	441d      	add	r5, r3
 800adec:	4498      	add	r8, r3
 800adee:	e7c2      	b.n	800ad76 <_dtoa_r+0x846>
 800adf0:	4603      	mov	r3, r0
 800adf2:	e7f6      	b.n	800ade2 <_dtoa_r+0x8b2>
 800adf4:	f1b9 0f00 	cmp.w	r9, #0
 800adf8:	dc38      	bgt.n	800ae6c <_dtoa_r+0x93c>
 800adfa:	9b06      	ldr	r3, [sp, #24]
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	dd35      	ble.n	800ae6c <_dtoa_r+0x93c>
 800ae00:	f8cd 9008 	str.w	r9, [sp, #8]
 800ae04:	9b02      	ldr	r3, [sp, #8]
 800ae06:	b963      	cbnz	r3, 800ae22 <_dtoa_r+0x8f2>
 800ae08:	4639      	mov	r1, r7
 800ae0a:	2205      	movs	r2, #5
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f000 fcf1 	bl	800b7f4 <__multadd>
 800ae12:	4601      	mov	r1, r0
 800ae14:	4607      	mov	r7, r0
 800ae16:	9804      	ldr	r0, [sp, #16]
 800ae18:	f000 fef4 	bl	800bc04 <__mcmp>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	f73f adcc 	bgt.w	800a9ba <_dtoa_r+0x48a>
 800ae22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae24:	465d      	mov	r5, fp
 800ae26:	ea6f 0a03 	mvn.w	sl, r3
 800ae2a:	f04f 0900 	mov.w	r9, #0
 800ae2e:	4639      	mov	r1, r7
 800ae30:	4620      	mov	r0, r4
 800ae32:	f000 fcc8 	bl	800b7c6 <_Bfree>
 800ae36:	2e00      	cmp	r6, #0
 800ae38:	f43f aeb7 	beq.w	800abaa <_dtoa_r+0x67a>
 800ae3c:	f1b9 0f00 	cmp.w	r9, #0
 800ae40:	d005      	beq.n	800ae4e <_dtoa_r+0x91e>
 800ae42:	45b1      	cmp	r9, r6
 800ae44:	d003      	beq.n	800ae4e <_dtoa_r+0x91e>
 800ae46:	4649      	mov	r1, r9
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f000 fcbc 	bl	800b7c6 <_Bfree>
 800ae4e:	4631      	mov	r1, r6
 800ae50:	4620      	mov	r0, r4
 800ae52:	f000 fcb8 	bl	800b7c6 <_Bfree>
 800ae56:	e6a8      	b.n	800abaa <_dtoa_r+0x67a>
 800ae58:	2700      	movs	r7, #0
 800ae5a:	463e      	mov	r6, r7
 800ae5c:	e7e1      	b.n	800ae22 <_dtoa_r+0x8f2>
 800ae5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ae62:	463e      	mov	r6, r7
 800ae64:	e5a9      	b.n	800a9ba <_dtoa_r+0x48a>
 800ae66:	bf00      	nop
 800ae68:	40240000 	.word	0x40240000
 800ae6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae6e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f000 80fa 	beq.w	800b06c <_dtoa_r+0xb3c>
 800ae78:	2d00      	cmp	r5, #0
 800ae7a:	dd05      	ble.n	800ae88 <_dtoa_r+0x958>
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	462a      	mov	r2, r5
 800ae80:	4620      	mov	r0, r4
 800ae82:	f000 fe6b 	bl	800bb5c <__lshift>
 800ae86:	4606      	mov	r6, r0
 800ae88:	9b07      	ldr	r3, [sp, #28]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d04c      	beq.n	800af28 <_dtoa_r+0x9f8>
 800ae8e:	6871      	ldr	r1, [r6, #4]
 800ae90:	4620      	mov	r0, r4
 800ae92:	f000 fc64 	bl	800b75e <_Balloc>
 800ae96:	6932      	ldr	r2, [r6, #16]
 800ae98:	3202      	adds	r2, #2
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	0092      	lsls	r2, r2, #2
 800ae9e:	f106 010c 	add.w	r1, r6, #12
 800aea2:	300c      	adds	r0, #12
 800aea4:	f000 fc50 	bl	800b748 <memcpy>
 800aea8:	2201      	movs	r2, #1
 800aeaa:	4629      	mov	r1, r5
 800aeac:	4620      	mov	r0, r4
 800aeae:	f000 fe55 	bl	800bb5c <__lshift>
 800aeb2:	9b00      	ldr	r3, [sp, #0]
 800aeb4:	f8cd b014 	str.w	fp, [sp, #20]
 800aeb8:	f003 0301 	and.w	r3, r3, #1
 800aebc:	46b1      	mov	r9, r6
 800aebe:	9307      	str	r3, [sp, #28]
 800aec0:	4606      	mov	r6, r0
 800aec2:	4639      	mov	r1, r7
 800aec4:	9804      	ldr	r0, [sp, #16]
 800aec6:	f7ff faa5 	bl	800a414 <quorem>
 800aeca:	4649      	mov	r1, r9
 800aecc:	4605      	mov	r5, r0
 800aece:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800aed2:	9804      	ldr	r0, [sp, #16]
 800aed4:	f000 fe96 	bl	800bc04 <__mcmp>
 800aed8:	4632      	mov	r2, r6
 800aeda:	9000      	str	r0, [sp, #0]
 800aedc:	4639      	mov	r1, r7
 800aede:	4620      	mov	r0, r4
 800aee0:	f000 feaa 	bl	800bc38 <__mdiff>
 800aee4:	68c3      	ldr	r3, [r0, #12]
 800aee6:	4602      	mov	r2, r0
 800aee8:	bb03      	cbnz	r3, 800af2c <_dtoa_r+0x9fc>
 800aeea:	4601      	mov	r1, r0
 800aeec:	9008      	str	r0, [sp, #32]
 800aeee:	9804      	ldr	r0, [sp, #16]
 800aef0:	f000 fe88 	bl	800bc04 <__mcmp>
 800aef4:	9a08      	ldr	r2, [sp, #32]
 800aef6:	4603      	mov	r3, r0
 800aef8:	4611      	mov	r1, r2
 800aefa:	4620      	mov	r0, r4
 800aefc:	9308      	str	r3, [sp, #32]
 800aefe:	f000 fc62 	bl	800b7c6 <_Bfree>
 800af02:	9b08      	ldr	r3, [sp, #32]
 800af04:	b9a3      	cbnz	r3, 800af30 <_dtoa_r+0xa00>
 800af06:	9a06      	ldr	r2, [sp, #24]
 800af08:	b992      	cbnz	r2, 800af30 <_dtoa_r+0xa00>
 800af0a:	9a07      	ldr	r2, [sp, #28]
 800af0c:	b982      	cbnz	r2, 800af30 <_dtoa_r+0xa00>
 800af0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800af12:	d029      	beq.n	800af68 <_dtoa_r+0xa38>
 800af14:	9b00      	ldr	r3, [sp, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	dd01      	ble.n	800af1e <_dtoa_r+0x9ee>
 800af1a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800af1e:	9b05      	ldr	r3, [sp, #20]
 800af20:	1c5d      	adds	r5, r3, #1
 800af22:	f883 8000 	strb.w	r8, [r3]
 800af26:	e782      	b.n	800ae2e <_dtoa_r+0x8fe>
 800af28:	4630      	mov	r0, r6
 800af2a:	e7c2      	b.n	800aeb2 <_dtoa_r+0x982>
 800af2c:	2301      	movs	r3, #1
 800af2e:	e7e3      	b.n	800aef8 <_dtoa_r+0x9c8>
 800af30:	9a00      	ldr	r2, [sp, #0]
 800af32:	2a00      	cmp	r2, #0
 800af34:	db04      	blt.n	800af40 <_dtoa_r+0xa10>
 800af36:	d125      	bne.n	800af84 <_dtoa_r+0xa54>
 800af38:	9a06      	ldr	r2, [sp, #24]
 800af3a:	bb1a      	cbnz	r2, 800af84 <_dtoa_r+0xa54>
 800af3c:	9a07      	ldr	r2, [sp, #28]
 800af3e:	bb0a      	cbnz	r2, 800af84 <_dtoa_r+0xa54>
 800af40:	2b00      	cmp	r3, #0
 800af42:	ddec      	ble.n	800af1e <_dtoa_r+0x9ee>
 800af44:	2201      	movs	r2, #1
 800af46:	9904      	ldr	r1, [sp, #16]
 800af48:	4620      	mov	r0, r4
 800af4a:	f000 fe07 	bl	800bb5c <__lshift>
 800af4e:	4639      	mov	r1, r7
 800af50:	9004      	str	r0, [sp, #16]
 800af52:	f000 fe57 	bl	800bc04 <__mcmp>
 800af56:	2800      	cmp	r0, #0
 800af58:	dc03      	bgt.n	800af62 <_dtoa_r+0xa32>
 800af5a:	d1e0      	bne.n	800af1e <_dtoa_r+0x9ee>
 800af5c:	f018 0f01 	tst.w	r8, #1
 800af60:	d0dd      	beq.n	800af1e <_dtoa_r+0x9ee>
 800af62:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800af66:	d1d8      	bne.n	800af1a <_dtoa_r+0x9ea>
 800af68:	9b05      	ldr	r3, [sp, #20]
 800af6a:	9a05      	ldr	r2, [sp, #20]
 800af6c:	1c5d      	adds	r5, r3, #1
 800af6e:	2339      	movs	r3, #57	; 0x39
 800af70:	7013      	strb	r3, [r2, #0]
 800af72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af76:	2b39      	cmp	r3, #57	; 0x39
 800af78:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800af7c:	d04f      	beq.n	800b01e <_dtoa_r+0xaee>
 800af7e:	3301      	adds	r3, #1
 800af80:	7013      	strb	r3, [r2, #0]
 800af82:	e754      	b.n	800ae2e <_dtoa_r+0x8fe>
 800af84:	9a05      	ldr	r2, [sp, #20]
 800af86:	2b00      	cmp	r3, #0
 800af88:	f102 0501 	add.w	r5, r2, #1
 800af8c:	dd06      	ble.n	800af9c <_dtoa_r+0xa6c>
 800af8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800af92:	d0e9      	beq.n	800af68 <_dtoa_r+0xa38>
 800af94:	f108 0801 	add.w	r8, r8, #1
 800af98:	9b05      	ldr	r3, [sp, #20]
 800af9a:	e7c2      	b.n	800af22 <_dtoa_r+0x9f2>
 800af9c:	9a02      	ldr	r2, [sp, #8]
 800af9e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800afa2:	eba5 030b 	sub.w	r3, r5, fp
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d021      	beq.n	800afee <_dtoa_r+0xabe>
 800afaa:	2300      	movs	r3, #0
 800afac:	220a      	movs	r2, #10
 800afae:	9904      	ldr	r1, [sp, #16]
 800afb0:	4620      	mov	r0, r4
 800afb2:	f000 fc1f 	bl	800b7f4 <__multadd>
 800afb6:	45b1      	cmp	r9, r6
 800afb8:	9004      	str	r0, [sp, #16]
 800afba:	f04f 0300 	mov.w	r3, #0
 800afbe:	f04f 020a 	mov.w	r2, #10
 800afc2:	4649      	mov	r1, r9
 800afc4:	4620      	mov	r0, r4
 800afc6:	d105      	bne.n	800afd4 <_dtoa_r+0xaa4>
 800afc8:	f000 fc14 	bl	800b7f4 <__multadd>
 800afcc:	4681      	mov	r9, r0
 800afce:	4606      	mov	r6, r0
 800afd0:	9505      	str	r5, [sp, #20]
 800afd2:	e776      	b.n	800aec2 <_dtoa_r+0x992>
 800afd4:	f000 fc0e 	bl	800b7f4 <__multadd>
 800afd8:	4631      	mov	r1, r6
 800afda:	4681      	mov	r9, r0
 800afdc:	2300      	movs	r3, #0
 800afde:	220a      	movs	r2, #10
 800afe0:	4620      	mov	r0, r4
 800afe2:	f000 fc07 	bl	800b7f4 <__multadd>
 800afe6:	4606      	mov	r6, r0
 800afe8:	e7f2      	b.n	800afd0 <_dtoa_r+0xaa0>
 800afea:	f04f 0900 	mov.w	r9, #0
 800afee:	2201      	movs	r2, #1
 800aff0:	9904      	ldr	r1, [sp, #16]
 800aff2:	4620      	mov	r0, r4
 800aff4:	f000 fdb2 	bl	800bb5c <__lshift>
 800aff8:	4639      	mov	r1, r7
 800affa:	9004      	str	r0, [sp, #16]
 800affc:	f000 fe02 	bl	800bc04 <__mcmp>
 800b000:	2800      	cmp	r0, #0
 800b002:	dcb6      	bgt.n	800af72 <_dtoa_r+0xa42>
 800b004:	d102      	bne.n	800b00c <_dtoa_r+0xadc>
 800b006:	f018 0f01 	tst.w	r8, #1
 800b00a:	d1b2      	bne.n	800af72 <_dtoa_r+0xa42>
 800b00c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b010:	2b30      	cmp	r3, #48	; 0x30
 800b012:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800b016:	f47f af0a 	bne.w	800ae2e <_dtoa_r+0x8fe>
 800b01a:	4615      	mov	r5, r2
 800b01c:	e7f6      	b.n	800b00c <_dtoa_r+0xadc>
 800b01e:	4593      	cmp	fp, r2
 800b020:	d105      	bne.n	800b02e <_dtoa_r+0xafe>
 800b022:	2331      	movs	r3, #49	; 0x31
 800b024:	f10a 0a01 	add.w	sl, sl, #1
 800b028:	f88b 3000 	strb.w	r3, [fp]
 800b02c:	e6ff      	b.n	800ae2e <_dtoa_r+0x8fe>
 800b02e:	4615      	mov	r5, r2
 800b030:	e79f      	b.n	800af72 <_dtoa_r+0xa42>
 800b032:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b098 <_dtoa_r+0xb68>
 800b036:	e007      	b.n	800b048 <_dtoa_r+0xb18>
 800b038:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b03a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b09c <_dtoa_r+0xb6c>
 800b03e:	b11b      	cbz	r3, 800b048 <_dtoa_r+0xb18>
 800b040:	f10b 0308 	add.w	r3, fp, #8
 800b044:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b046:	6013      	str	r3, [r2, #0]
 800b048:	4658      	mov	r0, fp
 800b04a:	b017      	add	sp, #92	; 0x5c
 800b04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b050:	9b06      	ldr	r3, [sp, #24]
 800b052:	2b01      	cmp	r3, #1
 800b054:	f77f ae35 	ble.w	800acc2 <_dtoa_r+0x792>
 800b058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b05a:	9307      	str	r3, [sp, #28]
 800b05c:	e649      	b.n	800acf2 <_dtoa_r+0x7c2>
 800b05e:	9b02      	ldr	r3, [sp, #8]
 800b060:	2b00      	cmp	r3, #0
 800b062:	dc03      	bgt.n	800b06c <_dtoa_r+0xb3c>
 800b064:	9b06      	ldr	r3, [sp, #24]
 800b066:	2b02      	cmp	r3, #2
 800b068:	f73f aecc 	bgt.w	800ae04 <_dtoa_r+0x8d4>
 800b06c:	465d      	mov	r5, fp
 800b06e:	4639      	mov	r1, r7
 800b070:	9804      	ldr	r0, [sp, #16]
 800b072:	f7ff f9cf 	bl	800a414 <quorem>
 800b076:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b07a:	f805 8b01 	strb.w	r8, [r5], #1
 800b07e:	9a02      	ldr	r2, [sp, #8]
 800b080:	eba5 030b 	sub.w	r3, r5, fp
 800b084:	429a      	cmp	r2, r3
 800b086:	ddb0      	ble.n	800afea <_dtoa_r+0xaba>
 800b088:	2300      	movs	r3, #0
 800b08a:	220a      	movs	r2, #10
 800b08c:	9904      	ldr	r1, [sp, #16]
 800b08e:	4620      	mov	r0, r4
 800b090:	f000 fbb0 	bl	800b7f4 <__multadd>
 800b094:	9004      	str	r0, [sp, #16]
 800b096:	e7ea      	b.n	800b06e <_dtoa_r+0xb3e>
 800b098:	0800c5b4 	.word	0x0800c5b4
 800b09c:	0800c628 	.word	0x0800c628

0800b0a0 <rshift>:
 800b0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0a2:	6906      	ldr	r6, [r0, #16]
 800b0a4:	114b      	asrs	r3, r1, #5
 800b0a6:	429e      	cmp	r6, r3
 800b0a8:	f100 0414 	add.w	r4, r0, #20
 800b0ac:	dd30      	ble.n	800b110 <rshift+0x70>
 800b0ae:	f011 011f 	ands.w	r1, r1, #31
 800b0b2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b0b6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b0ba:	d108      	bne.n	800b0ce <rshift+0x2e>
 800b0bc:	4621      	mov	r1, r4
 800b0be:	42b2      	cmp	r2, r6
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	d211      	bcs.n	800b0e8 <rshift+0x48>
 800b0c4:	f852 3b04 	ldr.w	r3, [r2], #4
 800b0c8:	f841 3b04 	str.w	r3, [r1], #4
 800b0cc:	e7f7      	b.n	800b0be <rshift+0x1e>
 800b0ce:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800b0d2:	f1c1 0c20 	rsb	ip, r1, #32
 800b0d6:	40cd      	lsrs	r5, r1
 800b0d8:	3204      	adds	r2, #4
 800b0da:	4623      	mov	r3, r4
 800b0dc:	42b2      	cmp	r2, r6
 800b0de:	4617      	mov	r7, r2
 800b0e0:	d30c      	bcc.n	800b0fc <rshift+0x5c>
 800b0e2:	601d      	str	r5, [r3, #0]
 800b0e4:	b105      	cbz	r5, 800b0e8 <rshift+0x48>
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	1b1a      	subs	r2, r3, r4
 800b0ea:	42a3      	cmp	r3, r4
 800b0ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b0f0:	bf08      	it	eq
 800b0f2:	2300      	moveq	r3, #0
 800b0f4:	6102      	str	r2, [r0, #16]
 800b0f6:	bf08      	it	eq
 800b0f8:	6143      	streq	r3, [r0, #20]
 800b0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0fc:	683f      	ldr	r7, [r7, #0]
 800b0fe:	fa07 f70c 	lsl.w	r7, r7, ip
 800b102:	433d      	orrs	r5, r7
 800b104:	f843 5b04 	str.w	r5, [r3], #4
 800b108:	f852 5b04 	ldr.w	r5, [r2], #4
 800b10c:	40cd      	lsrs	r5, r1
 800b10e:	e7e5      	b.n	800b0dc <rshift+0x3c>
 800b110:	4623      	mov	r3, r4
 800b112:	e7e9      	b.n	800b0e8 <rshift+0x48>

0800b114 <__hexdig_fun>:
 800b114:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b118:	2b09      	cmp	r3, #9
 800b11a:	d802      	bhi.n	800b122 <__hexdig_fun+0xe>
 800b11c:	3820      	subs	r0, #32
 800b11e:	b2c0      	uxtb	r0, r0
 800b120:	4770      	bx	lr
 800b122:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b126:	2b05      	cmp	r3, #5
 800b128:	d801      	bhi.n	800b12e <__hexdig_fun+0x1a>
 800b12a:	3847      	subs	r0, #71	; 0x47
 800b12c:	e7f7      	b.n	800b11e <__hexdig_fun+0xa>
 800b12e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b132:	2b05      	cmp	r3, #5
 800b134:	d801      	bhi.n	800b13a <__hexdig_fun+0x26>
 800b136:	3827      	subs	r0, #39	; 0x27
 800b138:	e7f1      	b.n	800b11e <__hexdig_fun+0xa>
 800b13a:	2000      	movs	r0, #0
 800b13c:	4770      	bx	lr

0800b13e <__gethex>:
 800b13e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b142:	b08b      	sub	sp, #44	; 0x2c
 800b144:	468a      	mov	sl, r1
 800b146:	9002      	str	r0, [sp, #8]
 800b148:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b14a:	9306      	str	r3, [sp, #24]
 800b14c:	4690      	mov	r8, r2
 800b14e:	f000 fad0 	bl	800b6f2 <__localeconv_l>
 800b152:	6803      	ldr	r3, [r0, #0]
 800b154:	9303      	str	r3, [sp, #12]
 800b156:	4618      	mov	r0, r3
 800b158:	f7f5 f844 	bl	80001e4 <strlen>
 800b15c:	9b03      	ldr	r3, [sp, #12]
 800b15e:	9001      	str	r0, [sp, #4]
 800b160:	4403      	add	r3, r0
 800b162:	f04f 0b00 	mov.w	fp, #0
 800b166:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b16a:	9307      	str	r3, [sp, #28]
 800b16c:	f8da 3000 	ldr.w	r3, [sl]
 800b170:	3302      	adds	r3, #2
 800b172:	461f      	mov	r7, r3
 800b174:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b178:	2830      	cmp	r0, #48	; 0x30
 800b17a:	d06c      	beq.n	800b256 <__gethex+0x118>
 800b17c:	f7ff ffca 	bl	800b114 <__hexdig_fun>
 800b180:	4604      	mov	r4, r0
 800b182:	2800      	cmp	r0, #0
 800b184:	d16a      	bne.n	800b25c <__gethex+0x11e>
 800b186:	9a01      	ldr	r2, [sp, #4]
 800b188:	9903      	ldr	r1, [sp, #12]
 800b18a:	4638      	mov	r0, r7
 800b18c:	f001 f8fe 	bl	800c38c <strncmp>
 800b190:	2800      	cmp	r0, #0
 800b192:	d166      	bne.n	800b262 <__gethex+0x124>
 800b194:	9b01      	ldr	r3, [sp, #4]
 800b196:	5cf8      	ldrb	r0, [r7, r3]
 800b198:	18fe      	adds	r6, r7, r3
 800b19a:	f7ff ffbb 	bl	800b114 <__hexdig_fun>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d062      	beq.n	800b268 <__gethex+0x12a>
 800b1a2:	4633      	mov	r3, r6
 800b1a4:	7818      	ldrb	r0, [r3, #0]
 800b1a6:	2830      	cmp	r0, #48	; 0x30
 800b1a8:	461f      	mov	r7, r3
 800b1aa:	f103 0301 	add.w	r3, r3, #1
 800b1ae:	d0f9      	beq.n	800b1a4 <__gethex+0x66>
 800b1b0:	f7ff ffb0 	bl	800b114 <__hexdig_fun>
 800b1b4:	fab0 f580 	clz	r5, r0
 800b1b8:	096d      	lsrs	r5, r5, #5
 800b1ba:	4634      	mov	r4, r6
 800b1bc:	f04f 0b01 	mov.w	fp, #1
 800b1c0:	463a      	mov	r2, r7
 800b1c2:	4616      	mov	r6, r2
 800b1c4:	3201      	adds	r2, #1
 800b1c6:	7830      	ldrb	r0, [r6, #0]
 800b1c8:	f7ff ffa4 	bl	800b114 <__hexdig_fun>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d1f8      	bne.n	800b1c2 <__gethex+0x84>
 800b1d0:	9a01      	ldr	r2, [sp, #4]
 800b1d2:	9903      	ldr	r1, [sp, #12]
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	f001 f8d9 	bl	800c38c <strncmp>
 800b1da:	b950      	cbnz	r0, 800b1f2 <__gethex+0xb4>
 800b1dc:	b954      	cbnz	r4, 800b1f4 <__gethex+0xb6>
 800b1de:	9b01      	ldr	r3, [sp, #4]
 800b1e0:	18f4      	adds	r4, r6, r3
 800b1e2:	4622      	mov	r2, r4
 800b1e4:	4616      	mov	r6, r2
 800b1e6:	3201      	adds	r2, #1
 800b1e8:	7830      	ldrb	r0, [r6, #0]
 800b1ea:	f7ff ff93 	bl	800b114 <__hexdig_fun>
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d1f8      	bne.n	800b1e4 <__gethex+0xa6>
 800b1f2:	b10c      	cbz	r4, 800b1f8 <__gethex+0xba>
 800b1f4:	1ba4      	subs	r4, r4, r6
 800b1f6:	00a4      	lsls	r4, r4, #2
 800b1f8:	7833      	ldrb	r3, [r6, #0]
 800b1fa:	2b50      	cmp	r3, #80	; 0x50
 800b1fc:	d001      	beq.n	800b202 <__gethex+0xc4>
 800b1fe:	2b70      	cmp	r3, #112	; 0x70
 800b200:	d140      	bne.n	800b284 <__gethex+0x146>
 800b202:	7873      	ldrb	r3, [r6, #1]
 800b204:	2b2b      	cmp	r3, #43	; 0x2b
 800b206:	d031      	beq.n	800b26c <__gethex+0x12e>
 800b208:	2b2d      	cmp	r3, #45	; 0x2d
 800b20a:	d033      	beq.n	800b274 <__gethex+0x136>
 800b20c:	1c71      	adds	r1, r6, #1
 800b20e:	f04f 0900 	mov.w	r9, #0
 800b212:	7808      	ldrb	r0, [r1, #0]
 800b214:	f7ff ff7e 	bl	800b114 <__hexdig_fun>
 800b218:	1e43      	subs	r3, r0, #1
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	2b18      	cmp	r3, #24
 800b21e:	d831      	bhi.n	800b284 <__gethex+0x146>
 800b220:	f1a0 0210 	sub.w	r2, r0, #16
 800b224:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b228:	f7ff ff74 	bl	800b114 <__hexdig_fun>
 800b22c:	1e43      	subs	r3, r0, #1
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	2b18      	cmp	r3, #24
 800b232:	d922      	bls.n	800b27a <__gethex+0x13c>
 800b234:	f1b9 0f00 	cmp.w	r9, #0
 800b238:	d000      	beq.n	800b23c <__gethex+0xfe>
 800b23a:	4252      	negs	r2, r2
 800b23c:	4414      	add	r4, r2
 800b23e:	f8ca 1000 	str.w	r1, [sl]
 800b242:	b30d      	cbz	r5, 800b288 <__gethex+0x14a>
 800b244:	f1bb 0f00 	cmp.w	fp, #0
 800b248:	bf0c      	ite	eq
 800b24a:	2706      	moveq	r7, #6
 800b24c:	2700      	movne	r7, #0
 800b24e:	4638      	mov	r0, r7
 800b250:	b00b      	add	sp, #44	; 0x2c
 800b252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b256:	f10b 0b01 	add.w	fp, fp, #1
 800b25a:	e78a      	b.n	800b172 <__gethex+0x34>
 800b25c:	2500      	movs	r5, #0
 800b25e:	462c      	mov	r4, r5
 800b260:	e7ae      	b.n	800b1c0 <__gethex+0x82>
 800b262:	463e      	mov	r6, r7
 800b264:	2501      	movs	r5, #1
 800b266:	e7c7      	b.n	800b1f8 <__gethex+0xba>
 800b268:	4604      	mov	r4, r0
 800b26a:	e7fb      	b.n	800b264 <__gethex+0x126>
 800b26c:	f04f 0900 	mov.w	r9, #0
 800b270:	1cb1      	adds	r1, r6, #2
 800b272:	e7ce      	b.n	800b212 <__gethex+0xd4>
 800b274:	f04f 0901 	mov.w	r9, #1
 800b278:	e7fa      	b.n	800b270 <__gethex+0x132>
 800b27a:	230a      	movs	r3, #10
 800b27c:	fb03 0202 	mla	r2, r3, r2, r0
 800b280:	3a10      	subs	r2, #16
 800b282:	e7cf      	b.n	800b224 <__gethex+0xe6>
 800b284:	4631      	mov	r1, r6
 800b286:	e7da      	b.n	800b23e <__gethex+0x100>
 800b288:	1bf3      	subs	r3, r6, r7
 800b28a:	3b01      	subs	r3, #1
 800b28c:	4629      	mov	r1, r5
 800b28e:	2b07      	cmp	r3, #7
 800b290:	dc49      	bgt.n	800b326 <__gethex+0x1e8>
 800b292:	9802      	ldr	r0, [sp, #8]
 800b294:	f000 fa63 	bl	800b75e <_Balloc>
 800b298:	9b01      	ldr	r3, [sp, #4]
 800b29a:	f100 0914 	add.w	r9, r0, #20
 800b29e:	f04f 0b00 	mov.w	fp, #0
 800b2a2:	f1c3 0301 	rsb	r3, r3, #1
 800b2a6:	4605      	mov	r5, r0
 800b2a8:	f8cd 9010 	str.w	r9, [sp, #16]
 800b2ac:	46da      	mov	sl, fp
 800b2ae:	9308      	str	r3, [sp, #32]
 800b2b0:	42b7      	cmp	r7, r6
 800b2b2:	d33b      	bcc.n	800b32c <__gethex+0x1ee>
 800b2b4:	9804      	ldr	r0, [sp, #16]
 800b2b6:	f840 ab04 	str.w	sl, [r0], #4
 800b2ba:	eba0 0009 	sub.w	r0, r0, r9
 800b2be:	1080      	asrs	r0, r0, #2
 800b2c0:	6128      	str	r0, [r5, #16]
 800b2c2:	0147      	lsls	r7, r0, #5
 800b2c4:	4650      	mov	r0, sl
 800b2c6:	f000 fb0e 	bl	800b8e6 <__hi0bits>
 800b2ca:	f8d8 6000 	ldr.w	r6, [r8]
 800b2ce:	1a3f      	subs	r7, r7, r0
 800b2d0:	42b7      	cmp	r7, r6
 800b2d2:	dd64      	ble.n	800b39e <__gethex+0x260>
 800b2d4:	1bbf      	subs	r7, r7, r6
 800b2d6:	4639      	mov	r1, r7
 800b2d8:	4628      	mov	r0, r5
 800b2da:	f000 fe1d 	bl	800bf18 <__any_on>
 800b2de:	4682      	mov	sl, r0
 800b2e0:	b178      	cbz	r0, 800b302 <__gethex+0x1c4>
 800b2e2:	1e7b      	subs	r3, r7, #1
 800b2e4:	1159      	asrs	r1, r3, #5
 800b2e6:	f003 021f 	and.w	r2, r3, #31
 800b2ea:	f04f 0a01 	mov.w	sl, #1
 800b2ee:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b2f2:	fa0a f202 	lsl.w	r2, sl, r2
 800b2f6:	420a      	tst	r2, r1
 800b2f8:	d003      	beq.n	800b302 <__gethex+0x1c4>
 800b2fa:	4553      	cmp	r3, sl
 800b2fc:	dc46      	bgt.n	800b38c <__gethex+0x24e>
 800b2fe:	f04f 0a02 	mov.w	sl, #2
 800b302:	4639      	mov	r1, r7
 800b304:	4628      	mov	r0, r5
 800b306:	f7ff fecb 	bl	800b0a0 <rshift>
 800b30a:	443c      	add	r4, r7
 800b30c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b310:	42a3      	cmp	r3, r4
 800b312:	da52      	bge.n	800b3ba <__gethex+0x27c>
 800b314:	4629      	mov	r1, r5
 800b316:	9802      	ldr	r0, [sp, #8]
 800b318:	f000 fa55 	bl	800b7c6 <_Bfree>
 800b31c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b31e:	2300      	movs	r3, #0
 800b320:	6013      	str	r3, [r2, #0]
 800b322:	27a3      	movs	r7, #163	; 0xa3
 800b324:	e793      	b.n	800b24e <__gethex+0x110>
 800b326:	3101      	adds	r1, #1
 800b328:	105b      	asrs	r3, r3, #1
 800b32a:	e7b0      	b.n	800b28e <__gethex+0x150>
 800b32c:	1e73      	subs	r3, r6, #1
 800b32e:	9305      	str	r3, [sp, #20]
 800b330:	9a07      	ldr	r2, [sp, #28]
 800b332:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b336:	4293      	cmp	r3, r2
 800b338:	d018      	beq.n	800b36c <__gethex+0x22e>
 800b33a:	f1bb 0f20 	cmp.w	fp, #32
 800b33e:	d107      	bne.n	800b350 <__gethex+0x212>
 800b340:	9b04      	ldr	r3, [sp, #16]
 800b342:	f8c3 a000 	str.w	sl, [r3]
 800b346:	3304      	adds	r3, #4
 800b348:	f04f 0a00 	mov.w	sl, #0
 800b34c:	9304      	str	r3, [sp, #16]
 800b34e:	46d3      	mov	fp, sl
 800b350:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b354:	f7ff fede 	bl	800b114 <__hexdig_fun>
 800b358:	f000 000f 	and.w	r0, r0, #15
 800b35c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b360:	ea4a 0a00 	orr.w	sl, sl, r0
 800b364:	f10b 0b04 	add.w	fp, fp, #4
 800b368:	9b05      	ldr	r3, [sp, #20]
 800b36a:	e00d      	b.n	800b388 <__gethex+0x24a>
 800b36c:	9b05      	ldr	r3, [sp, #20]
 800b36e:	9a08      	ldr	r2, [sp, #32]
 800b370:	4413      	add	r3, r2
 800b372:	42bb      	cmp	r3, r7
 800b374:	d3e1      	bcc.n	800b33a <__gethex+0x1fc>
 800b376:	4618      	mov	r0, r3
 800b378:	9a01      	ldr	r2, [sp, #4]
 800b37a:	9903      	ldr	r1, [sp, #12]
 800b37c:	9309      	str	r3, [sp, #36]	; 0x24
 800b37e:	f001 f805 	bl	800c38c <strncmp>
 800b382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b384:	2800      	cmp	r0, #0
 800b386:	d1d8      	bne.n	800b33a <__gethex+0x1fc>
 800b388:	461e      	mov	r6, r3
 800b38a:	e791      	b.n	800b2b0 <__gethex+0x172>
 800b38c:	1eb9      	subs	r1, r7, #2
 800b38e:	4628      	mov	r0, r5
 800b390:	f000 fdc2 	bl	800bf18 <__any_on>
 800b394:	2800      	cmp	r0, #0
 800b396:	d0b2      	beq.n	800b2fe <__gethex+0x1c0>
 800b398:	f04f 0a03 	mov.w	sl, #3
 800b39c:	e7b1      	b.n	800b302 <__gethex+0x1c4>
 800b39e:	da09      	bge.n	800b3b4 <__gethex+0x276>
 800b3a0:	1bf7      	subs	r7, r6, r7
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	463a      	mov	r2, r7
 800b3a6:	9802      	ldr	r0, [sp, #8]
 800b3a8:	f000 fbd8 	bl	800bb5c <__lshift>
 800b3ac:	1be4      	subs	r4, r4, r7
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	f100 0914 	add.w	r9, r0, #20
 800b3b4:	f04f 0a00 	mov.w	sl, #0
 800b3b8:	e7a8      	b.n	800b30c <__gethex+0x1ce>
 800b3ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b3be:	42a0      	cmp	r0, r4
 800b3c0:	dd6a      	ble.n	800b498 <__gethex+0x35a>
 800b3c2:	1b04      	subs	r4, r0, r4
 800b3c4:	42a6      	cmp	r6, r4
 800b3c6:	dc2e      	bgt.n	800b426 <__gethex+0x2e8>
 800b3c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b3cc:	2b02      	cmp	r3, #2
 800b3ce:	d022      	beq.n	800b416 <__gethex+0x2d8>
 800b3d0:	2b03      	cmp	r3, #3
 800b3d2:	d024      	beq.n	800b41e <__gethex+0x2e0>
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d115      	bne.n	800b404 <__gethex+0x2c6>
 800b3d8:	42a6      	cmp	r6, r4
 800b3da:	d113      	bne.n	800b404 <__gethex+0x2c6>
 800b3dc:	2e01      	cmp	r6, #1
 800b3de:	dc0b      	bgt.n	800b3f8 <__gethex+0x2ba>
 800b3e0:	9a06      	ldr	r2, [sp, #24]
 800b3e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	612b      	str	r3, [r5, #16]
 800b3ec:	f8c9 3000 	str.w	r3, [r9]
 800b3f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3f2:	2762      	movs	r7, #98	; 0x62
 800b3f4:	601d      	str	r5, [r3, #0]
 800b3f6:	e72a      	b.n	800b24e <__gethex+0x110>
 800b3f8:	1e71      	subs	r1, r6, #1
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	f000 fd8c 	bl	800bf18 <__any_on>
 800b400:	2800      	cmp	r0, #0
 800b402:	d1ed      	bne.n	800b3e0 <__gethex+0x2a2>
 800b404:	4629      	mov	r1, r5
 800b406:	9802      	ldr	r0, [sp, #8]
 800b408:	f000 f9dd 	bl	800b7c6 <_Bfree>
 800b40c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b40e:	2300      	movs	r3, #0
 800b410:	6013      	str	r3, [r2, #0]
 800b412:	2750      	movs	r7, #80	; 0x50
 800b414:	e71b      	b.n	800b24e <__gethex+0x110>
 800b416:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d0e1      	beq.n	800b3e0 <__gethex+0x2a2>
 800b41c:	e7f2      	b.n	800b404 <__gethex+0x2c6>
 800b41e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1dd      	bne.n	800b3e0 <__gethex+0x2a2>
 800b424:	e7ee      	b.n	800b404 <__gethex+0x2c6>
 800b426:	1e67      	subs	r7, r4, #1
 800b428:	f1ba 0f00 	cmp.w	sl, #0
 800b42c:	d131      	bne.n	800b492 <__gethex+0x354>
 800b42e:	b127      	cbz	r7, 800b43a <__gethex+0x2fc>
 800b430:	4639      	mov	r1, r7
 800b432:	4628      	mov	r0, r5
 800b434:	f000 fd70 	bl	800bf18 <__any_on>
 800b438:	4682      	mov	sl, r0
 800b43a:	117a      	asrs	r2, r7, #5
 800b43c:	2301      	movs	r3, #1
 800b43e:	f007 071f 	and.w	r7, r7, #31
 800b442:	fa03 f707 	lsl.w	r7, r3, r7
 800b446:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b44a:	4621      	mov	r1, r4
 800b44c:	421f      	tst	r7, r3
 800b44e:	4628      	mov	r0, r5
 800b450:	bf18      	it	ne
 800b452:	f04a 0a02 	orrne.w	sl, sl, #2
 800b456:	1b36      	subs	r6, r6, r4
 800b458:	f7ff fe22 	bl	800b0a0 <rshift>
 800b45c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b460:	2702      	movs	r7, #2
 800b462:	f1ba 0f00 	cmp.w	sl, #0
 800b466:	d048      	beq.n	800b4fa <__gethex+0x3bc>
 800b468:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	d015      	beq.n	800b49c <__gethex+0x35e>
 800b470:	2b03      	cmp	r3, #3
 800b472:	d017      	beq.n	800b4a4 <__gethex+0x366>
 800b474:	2b01      	cmp	r3, #1
 800b476:	d109      	bne.n	800b48c <__gethex+0x34e>
 800b478:	f01a 0f02 	tst.w	sl, #2
 800b47c:	d006      	beq.n	800b48c <__gethex+0x34e>
 800b47e:	f8d9 3000 	ldr.w	r3, [r9]
 800b482:	ea4a 0a03 	orr.w	sl, sl, r3
 800b486:	f01a 0f01 	tst.w	sl, #1
 800b48a:	d10e      	bne.n	800b4aa <__gethex+0x36c>
 800b48c:	f047 0710 	orr.w	r7, r7, #16
 800b490:	e033      	b.n	800b4fa <__gethex+0x3bc>
 800b492:	f04f 0a01 	mov.w	sl, #1
 800b496:	e7d0      	b.n	800b43a <__gethex+0x2fc>
 800b498:	2701      	movs	r7, #1
 800b49a:	e7e2      	b.n	800b462 <__gethex+0x324>
 800b49c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b49e:	f1c3 0301 	rsb	r3, r3, #1
 800b4a2:	9315      	str	r3, [sp, #84]	; 0x54
 800b4a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d0f0      	beq.n	800b48c <__gethex+0x34e>
 800b4aa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b4ae:	f105 0314 	add.w	r3, r5, #20
 800b4b2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b4b6:	eb03 010a 	add.w	r1, r3, sl
 800b4ba:	f04f 0c00 	mov.w	ip, #0
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4c4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b4c8:	d01c      	beq.n	800b504 <__gethex+0x3c6>
 800b4ca:	3201      	adds	r2, #1
 800b4cc:	6002      	str	r2, [r0, #0]
 800b4ce:	2f02      	cmp	r7, #2
 800b4d0:	f105 0314 	add.w	r3, r5, #20
 800b4d4:	d138      	bne.n	800b548 <__gethex+0x40a>
 800b4d6:	f8d8 2000 	ldr.w	r2, [r8]
 800b4da:	3a01      	subs	r2, #1
 800b4dc:	42b2      	cmp	r2, r6
 800b4de:	d10a      	bne.n	800b4f6 <__gethex+0x3b8>
 800b4e0:	1171      	asrs	r1, r6, #5
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f006 061f 	and.w	r6, r6, #31
 800b4e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4ec:	fa02 f606 	lsl.w	r6, r2, r6
 800b4f0:	421e      	tst	r6, r3
 800b4f2:	bf18      	it	ne
 800b4f4:	4617      	movne	r7, r2
 800b4f6:	f047 0720 	orr.w	r7, r7, #32
 800b4fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4fc:	601d      	str	r5, [r3, #0]
 800b4fe:	9b06      	ldr	r3, [sp, #24]
 800b500:	601c      	str	r4, [r3, #0]
 800b502:	e6a4      	b.n	800b24e <__gethex+0x110>
 800b504:	4299      	cmp	r1, r3
 800b506:	f843 cc04 	str.w	ip, [r3, #-4]
 800b50a:	d8d8      	bhi.n	800b4be <__gethex+0x380>
 800b50c:	68ab      	ldr	r3, [r5, #8]
 800b50e:	4599      	cmp	r9, r3
 800b510:	db12      	blt.n	800b538 <__gethex+0x3fa>
 800b512:	6869      	ldr	r1, [r5, #4]
 800b514:	9802      	ldr	r0, [sp, #8]
 800b516:	3101      	adds	r1, #1
 800b518:	f000 f921 	bl	800b75e <_Balloc>
 800b51c:	692a      	ldr	r2, [r5, #16]
 800b51e:	3202      	adds	r2, #2
 800b520:	f105 010c 	add.w	r1, r5, #12
 800b524:	4683      	mov	fp, r0
 800b526:	0092      	lsls	r2, r2, #2
 800b528:	300c      	adds	r0, #12
 800b52a:	f000 f90d 	bl	800b748 <memcpy>
 800b52e:	4629      	mov	r1, r5
 800b530:	9802      	ldr	r0, [sp, #8]
 800b532:	f000 f948 	bl	800b7c6 <_Bfree>
 800b536:	465d      	mov	r5, fp
 800b538:	692b      	ldr	r3, [r5, #16]
 800b53a:	1c5a      	adds	r2, r3, #1
 800b53c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b540:	612a      	str	r2, [r5, #16]
 800b542:	2201      	movs	r2, #1
 800b544:	615a      	str	r2, [r3, #20]
 800b546:	e7c2      	b.n	800b4ce <__gethex+0x390>
 800b548:	692a      	ldr	r2, [r5, #16]
 800b54a:	454a      	cmp	r2, r9
 800b54c:	dd0b      	ble.n	800b566 <__gethex+0x428>
 800b54e:	2101      	movs	r1, #1
 800b550:	4628      	mov	r0, r5
 800b552:	f7ff fda5 	bl	800b0a0 <rshift>
 800b556:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b55a:	3401      	adds	r4, #1
 800b55c:	42a3      	cmp	r3, r4
 800b55e:	f6ff aed9 	blt.w	800b314 <__gethex+0x1d6>
 800b562:	2701      	movs	r7, #1
 800b564:	e7c7      	b.n	800b4f6 <__gethex+0x3b8>
 800b566:	f016 061f 	ands.w	r6, r6, #31
 800b56a:	d0fa      	beq.n	800b562 <__gethex+0x424>
 800b56c:	449a      	add	sl, r3
 800b56e:	f1c6 0620 	rsb	r6, r6, #32
 800b572:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b576:	f000 f9b6 	bl	800b8e6 <__hi0bits>
 800b57a:	42b0      	cmp	r0, r6
 800b57c:	dbe7      	blt.n	800b54e <__gethex+0x410>
 800b57e:	e7f0      	b.n	800b562 <__gethex+0x424>

0800b580 <L_shift>:
 800b580:	f1c2 0208 	rsb	r2, r2, #8
 800b584:	0092      	lsls	r2, r2, #2
 800b586:	b570      	push	{r4, r5, r6, lr}
 800b588:	f1c2 0620 	rsb	r6, r2, #32
 800b58c:	6843      	ldr	r3, [r0, #4]
 800b58e:	6804      	ldr	r4, [r0, #0]
 800b590:	fa03 f506 	lsl.w	r5, r3, r6
 800b594:	432c      	orrs	r4, r5
 800b596:	40d3      	lsrs	r3, r2
 800b598:	6004      	str	r4, [r0, #0]
 800b59a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b59e:	4288      	cmp	r0, r1
 800b5a0:	d3f4      	bcc.n	800b58c <L_shift+0xc>
 800b5a2:	bd70      	pop	{r4, r5, r6, pc}

0800b5a4 <__match>:
 800b5a4:	b530      	push	{r4, r5, lr}
 800b5a6:	6803      	ldr	r3, [r0, #0]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ae:	b914      	cbnz	r4, 800b5b6 <__match+0x12>
 800b5b0:	6003      	str	r3, [r0, #0]
 800b5b2:	2001      	movs	r0, #1
 800b5b4:	bd30      	pop	{r4, r5, pc}
 800b5b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b5be:	2d19      	cmp	r5, #25
 800b5c0:	bf98      	it	ls
 800b5c2:	3220      	addls	r2, #32
 800b5c4:	42a2      	cmp	r2, r4
 800b5c6:	d0f0      	beq.n	800b5aa <__match+0x6>
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	e7f3      	b.n	800b5b4 <__match+0x10>

0800b5cc <__hexnan>:
 800b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d0:	680b      	ldr	r3, [r1, #0]
 800b5d2:	6801      	ldr	r1, [r0, #0]
 800b5d4:	115f      	asrs	r7, r3, #5
 800b5d6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b5da:	f013 031f 	ands.w	r3, r3, #31
 800b5de:	b087      	sub	sp, #28
 800b5e0:	bf18      	it	ne
 800b5e2:	3704      	addne	r7, #4
 800b5e4:	2500      	movs	r5, #0
 800b5e6:	1f3e      	subs	r6, r7, #4
 800b5e8:	4682      	mov	sl, r0
 800b5ea:	4690      	mov	r8, r2
 800b5ec:	9301      	str	r3, [sp, #4]
 800b5ee:	f847 5c04 	str.w	r5, [r7, #-4]
 800b5f2:	46b1      	mov	r9, r6
 800b5f4:	4634      	mov	r4, r6
 800b5f6:	9502      	str	r5, [sp, #8]
 800b5f8:	46ab      	mov	fp, r5
 800b5fa:	784a      	ldrb	r2, [r1, #1]
 800b5fc:	1c4b      	adds	r3, r1, #1
 800b5fe:	9303      	str	r3, [sp, #12]
 800b600:	b342      	cbz	r2, 800b654 <__hexnan+0x88>
 800b602:	4610      	mov	r0, r2
 800b604:	9105      	str	r1, [sp, #20]
 800b606:	9204      	str	r2, [sp, #16]
 800b608:	f7ff fd84 	bl	800b114 <__hexdig_fun>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	d143      	bne.n	800b698 <__hexnan+0xcc>
 800b610:	9a04      	ldr	r2, [sp, #16]
 800b612:	9905      	ldr	r1, [sp, #20]
 800b614:	2a20      	cmp	r2, #32
 800b616:	d818      	bhi.n	800b64a <__hexnan+0x7e>
 800b618:	9b02      	ldr	r3, [sp, #8]
 800b61a:	459b      	cmp	fp, r3
 800b61c:	dd13      	ble.n	800b646 <__hexnan+0x7a>
 800b61e:	454c      	cmp	r4, r9
 800b620:	d206      	bcs.n	800b630 <__hexnan+0x64>
 800b622:	2d07      	cmp	r5, #7
 800b624:	dc04      	bgt.n	800b630 <__hexnan+0x64>
 800b626:	462a      	mov	r2, r5
 800b628:	4649      	mov	r1, r9
 800b62a:	4620      	mov	r0, r4
 800b62c:	f7ff ffa8 	bl	800b580 <L_shift>
 800b630:	4544      	cmp	r4, r8
 800b632:	d944      	bls.n	800b6be <__hexnan+0xf2>
 800b634:	2300      	movs	r3, #0
 800b636:	f1a4 0904 	sub.w	r9, r4, #4
 800b63a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b63e:	f8cd b008 	str.w	fp, [sp, #8]
 800b642:	464c      	mov	r4, r9
 800b644:	461d      	mov	r5, r3
 800b646:	9903      	ldr	r1, [sp, #12]
 800b648:	e7d7      	b.n	800b5fa <__hexnan+0x2e>
 800b64a:	2a29      	cmp	r2, #41	; 0x29
 800b64c:	d14a      	bne.n	800b6e4 <__hexnan+0x118>
 800b64e:	3102      	adds	r1, #2
 800b650:	f8ca 1000 	str.w	r1, [sl]
 800b654:	f1bb 0f00 	cmp.w	fp, #0
 800b658:	d044      	beq.n	800b6e4 <__hexnan+0x118>
 800b65a:	454c      	cmp	r4, r9
 800b65c:	d206      	bcs.n	800b66c <__hexnan+0xa0>
 800b65e:	2d07      	cmp	r5, #7
 800b660:	dc04      	bgt.n	800b66c <__hexnan+0xa0>
 800b662:	462a      	mov	r2, r5
 800b664:	4649      	mov	r1, r9
 800b666:	4620      	mov	r0, r4
 800b668:	f7ff ff8a 	bl	800b580 <L_shift>
 800b66c:	4544      	cmp	r4, r8
 800b66e:	d928      	bls.n	800b6c2 <__hexnan+0xf6>
 800b670:	4643      	mov	r3, r8
 800b672:	f854 2b04 	ldr.w	r2, [r4], #4
 800b676:	f843 2b04 	str.w	r2, [r3], #4
 800b67a:	42a6      	cmp	r6, r4
 800b67c:	d2f9      	bcs.n	800b672 <__hexnan+0xa6>
 800b67e:	2200      	movs	r2, #0
 800b680:	f843 2b04 	str.w	r2, [r3], #4
 800b684:	429e      	cmp	r6, r3
 800b686:	d2fb      	bcs.n	800b680 <__hexnan+0xb4>
 800b688:	6833      	ldr	r3, [r6, #0]
 800b68a:	b91b      	cbnz	r3, 800b694 <__hexnan+0xc8>
 800b68c:	4546      	cmp	r6, r8
 800b68e:	d127      	bne.n	800b6e0 <__hexnan+0x114>
 800b690:	2301      	movs	r3, #1
 800b692:	6033      	str	r3, [r6, #0]
 800b694:	2005      	movs	r0, #5
 800b696:	e026      	b.n	800b6e6 <__hexnan+0x11a>
 800b698:	3501      	adds	r5, #1
 800b69a:	2d08      	cmp	r5, #8
 800b69c:	f10b 0b01 	add.w	fp, fp, #1
 800b6a0:	dd06      	ble.n	800b6b0 <__hexnan+0xe4>
 800b6a2:	4544      	cmp	r4, r8
 800b6a4:	d9cf      	bls.n	800b646 <__hexnan+0x7a>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6ac:	2501      	movs	r5, #1
 800b6ae:	3c04      	subs	r4, #4
 800b6b0:	6822      	ldr	r2, [r4, #0]
 800b6b2:	f000 000f 	and.w	r0, r0, #15
 800b6b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b6ba:	6020      	str	r0, [r4, #0]
 800b6bc:	e7c3      	b.n	800b646 <__hexnan+0x7a>
 800b6be:	2508      	movs	r5, #8
 800b6c0:	e7c1      	b.n	800b646 <__hexnan+0x7a>
 800b6c2:	9b01      	ldr	r3, [sp, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d0df      	beq.n	800b688 <__hexnan+0xbc>
 800b6c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6cc:	f1c3 0320 	rsb	r3, r3, #32
 800b6d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6d4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b6d8:	401a      	ands	r2, r3
 800b6da:	f847 2c04 	str.w	r2, [r7, #-4]
 800b6de:	e7d3      	b.n	800b688 <__hexnan+0xbc>
 800b6e0:	3e04      	subs	r6, #4
 800b6e2:	e7d1      	b.n	800b688 <__hexnan+0xbc>
 800b6e4:	2004      	movs	r0, #4
 800b6e6:	b007      	add	sp, #28
 800b6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6ec <__locale_ctype_ptr_l>:
 800b6ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b6f0:	4770      	bx	lr

0800b6f2 <__localeconv_l>:
 800b6f2:	30f0      	adds	r0, #240	; 0xf0
 800b6f4:	4770      	bx	lr
	...

0800b6f8 <_localeconv_r>:
 800b6f8:	4b04      	ldr	r3, [pc, #16]	; (800b70c <_localeconv_r+0x14>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	6a18      	ldr	r0, [r3, #32]
 800b6fe:	4b04      	ldr	r3, [pc, #16]	; (800b710 <_localeconv_r+0x18>)
 800b700:	2800      	cmp	r0, #0
 800b702:	bf08      	it	eq
 800b704:	4618      	moveq	r0, r3
 800b706:	30f0      	adds	r0, #240	; 0xf0
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	2000000c 	.word	0x2000000c
 800b710:	20000070 	.word	0x20000070

0800b714 <malloc>:
 800b714:	4b02      	ldr	r3, [pc, #8]	; (800b720 <malloc+0xc>)
 800b716:	4601      	mov	r1, r0
 800b718:	6818      	ldr	r0, [r3, #0]
 800b71a:	f000 bc7b 	b.w	800c014 <_malloc_r>
 800b71e:	bf00      	nop
 800b720:	2000000c 	.word	0x2000000c

0800b724 <__ascii_mbtowc>:
 800b724:	b082      	sub	sp, #8
 800b726:	b901      	cbnz	r1, 800b72a <__ascii_mbtowc+0x6>
 800b728:	a901      	add	r1, sp, #4
 800b72a:	b142      	cbz	r2, 800b73e <__ascii_mbtowc+0x1a>
 800b72c:	b14b      	cbz	r3, 800b742 <__ascii_mbtowc+0x1e>
 800b72e:	7813      	ldrb	r3, [r2, #0]
 800b730:	600b      	str	r3, [r1, #0]
 800b732:	7812      	ldrb	r2, [r2, #0]
 800b734:	1c10      	adds	r0, r2, #0
 800b736:	bf18      	it	ne
 800b738:	2001      	movne	r0, #1
 800b73a:	b002      	add	sp, #8
 800b73c:	4770      	bx	lr
 800b73e:	4610      	mov	r0, r2
 800b740:	e7fb      	b.n	800b73a <__ascii_mbtowc+0x16>
 800b742:	f06f 0001 	mvn.w	r0, #1
 800b746:	e7f8      	b.n	800b73a <__ascii_mbtowc+0x16>

0800b748 <memcpy>:
 800b748:	b510      	push	{r4, lr}
 800b74a:	1e43      	subs	r3, r0, #1
 800b74c:	440a      	add	r2, r1
 800b74e:	4291      	cmp	r1, r2
 800b750:	d100      	bne.n	800b754 <memcpy+0xc>
 800b752:	bd10      	pop	{r4, pc}
 800b754:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b758:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b75c:	e7f7      	b.n	800b74e <memcpy+0x6>

0800b75e <_Balloc>:
 800b75e:	b570      	push	{r4, r5, r6, lr}
 800b760:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b762:	4604      	mov	r4, r0
 800b764:	460e      	mov	r6, r1
 800b766:	b93d      	cbnz	r5, 800b778 <_Balloc+0x1a>
 800b768:	2010      	movs	r0, #16
 800b76a:	f7ff ffd3 	bl	800b714 <malloc>
 800b76e:	6260      	str	r0, [r4, #36]	; 0x24
 800b770:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b774:	6005      	str	r5, [r0, #0]
 800b776:	60c5      	str	r5, [r0, #12]
 800b778:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b77a:	68eb      	ldr	r3, [r5, #12]
 800b77c:	b183      	cbz	r3, 800b7a0 <_Balloc+0x42>
 800b77e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b786:	b9b8      	cbnz	r0, 800b7b8 <_Balloc+0x5a>
 800b788:	2101      	movs	r1, #1
 800b78a:	fa01 f506 	lsl.w	r5, r1, r6
 800b78e:	1d6a      	adds	r2, r5, #5
 800b790:	0092      	lsls	r2, r2, #2
 800b792:	4620      	mov	r0, r4
 800b794:	f000 fbe1 	bl	800bf5a <_calloc_r>
 800b798:	b160      	cbz	r0, 800b7b4 <_Balloc+0x56>
 800b79a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b79e:	e00e      	b.n	800b7be <_Balloc+0x60>
 800b7a0:	2221      	movs	r2, #33	; 0x21
 800b7a2:	2104      	movs	r1, #4
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	f000 fbd8 	bl	800bf5a <_calloc_r>
 800b7aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7ac:	60e8      	str	r0, [r5, #12]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1e4      	bne.n	800b77e <_Balloc+0x20>
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	bd70      	pop	{r4, r5, r6, pc}
 800b7b8:	6802      	ldr	r2, [r0, #0]
 800b7ba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b7be:	2300      	movs	r3, #0
 800b7c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7c4:	e7f7      	b.n	800b7b6 <_Balloc+0x58>

0800b7c6 <_Bfree>:
 800b7c6:	b570      	push	{r4, r5, r6, lr}
 800b7c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b7ca:	4606      	mov	r6, r0
 800b7cc:	460d      	mov	r5, r1
 800b7ce:	b93c      	cbnz	r4, 800b7e0 <_Bfree+0x1a>
 800b7d0:	2010      	movs	r0, #16
 800b7d2:	f7ff ff9f 	bl	800b714 <malloc>
 800b7d6:	6270      	str	r0, [r6, #36]	; 0x24
 800b7d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7dc:	6004      	str	r4, [r0, #0]
 800b7de:	60c4      	str	r4, [r0, #12]
 800b7e0:	b13d      	cbz	r5, 800b7f2 <_Bfree+0x2c>
 800b7e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b7e4:	686a      	ldr	r2, [r5, #4]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7ec:	6029      	str	r1, [r5, #0]
 800b7ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b7f2:	bd70      	pop	{r4, r5, r6, pc}

0800b7f4 <__multadd>:
 800b7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f8:	690d      	ldr	r5, [r1, #16]
 800b7fa:	461f      	mov	r7, r3
 800b7fc:	4606      	mov	r6, r0
 800b7fe:	460c      	mov	r4, r1
 800b800:	f101 0c14 	add.w	ip, r1, #20
 800b804:	2300      	movs	r3, #0
 800b806:	f8dc 0000 	ldr.w	r0, [ip]
 800b80a:	b281      	uxth	r1, r0
 800b80c:	fb02 7101 	mla	r1, r2, r1, r7
 800b810:	0c0f      	lsrs	r7, r1, #16
 800b812:	0c00      	lsrs	r0, r0, #16
 800b814:	fb02 7000 	mla	r0, r2, r0, r7
 800b818:	b289      	uxth	r1, r1
 800b81a:	3301      	adds	r3, #1
 800b81c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b820:	429d      	cmp	r5, r3
 800b822:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b826:	f84c 1b04 	str.w	r1, [ip], #4
 800b82a:	dcec      	bgt.n	800b806 <__multadd+0x12>
 800b82c:	b1d7      	cbz	r7, 800b864 <__multadd+0x70>
 800b82e:	68a3      	ldr	r3, [r4, #8]
 800b830:	42ab      	cmp	r3, r5
 800b832:	dc12      	bgt.n	800b85a <__multadd+0x66>
 800b834:	6861      	ldr	r1, [r4, #4]
 800b836:	4630      	mov	r0, r6
 800b838:	3101      	adds	r1, #1
 800b83a:	f7ff ff90 	bl	800b75e <_Balloc>
 800b83e:	6922      	ldr	r2, [r4, #16]
 800b840:	3202      	adds	r2, #2
 800b842:	f104 010c 	add.w	r1, r4, #12
 800b846:	4680      	mov	r8, r0
 800b848:	0092      	lsls	r2, r2, #2
 800b84a:	300c      	adds	r0, #12
 800b84c:	f7ff ff7c 	bl	800b748 <memcpy>
 800b850:	4621      	mov	r1, r4
 800b852:	4630      	mov	r0, r6
 800b854:	f7ff ffb7 	bl	800b7c6 <_Bfree>
 800b858:	4644      	mov	r4, r8
 800b85a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b85e:	3501      	adds	r5, #1
 800b860:	615f      	str	r7, [r3, #20]
 800b862:	6125      	str	r5, [r4, #16]
 800b864:	4620      	mov	r0, r4
 800b866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b86a <__s2b>:
 800b86a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b86e:	460c      	mov	r4, r1
 800b870:	4615      	mov	r5, r2
 800b872:	461f      	mov	r7, r3
 800b874:	2209      	movs	r2, #9
 800b876:	3308      	adds	r3, #8
 800b878:	4606      	mov	r6, r0
 800b87a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b87e:	2100      	movs	r1, #0
 800b880:	2201      	movs	r2, #1
 800b882:	429a      	cmp	r2, r3
 800b884:	db20      	blt.n	800b8c8 <__s2b+0x5e>
 800b886:	4630      	mov	r0, r6
 800b888:	f7ff ff69 	bl	800b75e <_Balloc>
 800b88c:	9b08      	ldr	r3, [sp, #32]
 800b88e:	6143      	str	r3, [r0, #20]
 800b890:	2d09      	cmp	r5, #9
 800b892:	f04f 0301 	mov.w	r3, #1
 800b896:	6103      	str	r3, [r0, #16]
 800b898:	dd19      	ble.n	800b8ce <__s2b+0x64>
 800b89a:	f104 0809 	add.w	r8, r4, #9
 800b89e:	46c1      	mov	r9, r8
 800b8a0:	442c      	add	r4, r5
 800b8a2:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b8a6:	4601      	mov	r1, r0
 800b8a8:	3b30      	subs	r3, #48	; 0x30
 800b8aa:	220a      	movs	r2, #10
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	f7ff ffa1 	bl	800b7f4 <__multadd>
 800b8b2:	45a1      	cmp	r9, r4
 800b8b4:	d1f5      	bne.n	800b8a2 <__s2b+0x38>
 800b8b6:	eb08 0405 	add.w	r4, r8, r5
 800b8ba:	3c08      	subs	r4, #8
 800b8bc:	1b2d      	subs	r5, r5, r4
 800b8be:	1963      	adds	r3, r4, r5
 800b8c0:	42bb      	cmp	r3, r7
 800b8c2:	db07      	blt.n	800b8d4 <__s2b+0x6a>
 800b8c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8c8:	0052      	lsls	r2, r2, #1
 800b8ca:	3101      	adds	r1, #1
 800b8cc:	e7d9      	b.n	800b882 <__s2b+0x18>
 800b8ce:	340a      	adds	r4, #10
 800b8d0:	2509      	movs	r5, #9
 800b8d2:	e7f3      	b.n	800b8bc <__s2b+0x52>
 800b8d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b8d8:	4601      	mov	r1, r0
 800b8da:	3b30      	subs	r3, #48	; 0x30
 800b8dc:	220a      	movs	r2, #10
 800b8de:	4630      	mov	r0, r6
 800b8e0:	f7ff ff88 	bl	800b7f4 <__multadd>
 800b8e4:	e7eb      	b.n	800b8be <__s2b+0x54>

0800b8e6 <__hi0bits>:
 800b8e6:	0c02      	lsrs	r2, r0, #16
 800b8e8:	0412      	lsls	r2, r2, #16
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	b9b2      	cbnz	r2, 800b91c <__hi0bits+0x36>
 800b8ee:	0403      	lsls	r3, r0, #16
 800b8f0:	2010      	movs	r0, #16
 800b8f2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b8f6:	bf04      	itt	eq
 800b8f8:	021b      	lsleq	r3, r3, #8
 800b8fa:	3008      	addeq	r0, #8
 800b8fc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b900:	bf04      	itt	eq
 800b902:	011b      	lsleq	r3, r3, #4
 800b904:	3004      	addeq	r0, #4
 800b906:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b90a:	bf04      	itt	eq
 800b90c:	009b      	lsleq	r3, r3, #2
 800b90e:	3002      	addeq	r0, #2
 800b910:	2b00      	cmp	r3, #0
 800b912:	db06      	blt.n	800b922 <__hi0bits+0x3c>
 800b914:	005b      	lsls	r3, r3, #1
 800b916:	d503      	bpl.n	800b920 <__hi0bits+0x3a>
 800b918:	3001      	adds	r0, #1
 800b91a:	4770      	bx	lr
 800b91c:	2000      	movs	r0, #0
 800b91e:	e7e8      	b.n	800b8f2 <__hi0bits+0xc>
 800b920:	2020      	movs	r0, #32
 800b922:	4770      	bx	lr

0800b924 <__lo0bits>:
 800b924:	6803      	ldr	r3, [r0, #0]
 800b926:	f013 0207 	ands.w	r2, r3, #7
 800b92a:	4601      	mov	r1, r0
 800b92c:	d00b      	beq.n	800b946 <__lo0bits+0x22>
 800b92e:	07da      	lsls	r2, r3, #31
 800b930:	d423      	bmi.n	800b97a <__lo0bits+0x56>
 800b932:	0798      	lsls	r0, r3, #30
 800b934:	bf49      	itett	mi
 800b936:	085b      	lsrmi	r3, r3, #1
 800b938:	089b      	lsrpl	r3, r3, #2
 800b93a:	2001      	movmi	r0, #1
 800b93c:	600b      	strmi	r3, [r1, #0]
 800b93e:	bf5c      	itt	pl
 800b940:	600b      	strpl	r3, [r1, #0]
 800b942:	2002      	movpl	r0, #2
 800b944:	4770      	bx	lr
 800b946:	b298      	uxth	r0, r3
 800b948:	b9a8      	cbnz	r0, 800b976 <__lo0bits+0x52>
 800b94a:	0c1b      	lsrs	r3, r3, #16
 800b94c:	2010      	movs	r0, #16
 800b94e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b952:	bf04      	itt	eq
 800b954:	0a1b      	lsreq	r3, r3, #8
 800b956:	3008      	addeq	r0, #8
 800b958:	071a      	lsls	r2, r3, #28
 800b95a:	bf04      	itt	eq
 800b95c:	091b      	lsreq	r3, r3, #4
 800b95e:	3004      	addeq	r0, #4
 800b960:	079a      	lsls	r2, r3, #30
 800b962:	bf04      	itt	eq
 800b964:	089b      	lsreq	r3, r3, #2
 800b966:	3002      	addeq	r0, #2
 800b968:	07da      	lsls	r2, r3, #31
 800b96a:	d402      	bmi.n	800b972 <__lo0bits+0x4e>
 800b96c:	085b      	lsrs	r3, r3, #1
 800b96e:	d006      	beq.n	800b97e <__lo0bits+0x5a>
 800b970:	3001      	adds	r0, #1
 800b972:	600b      	str	r3, [r1, #0]
 800b974:	4770      	bx	lr
 800b976:	4610      	mov	r0, r2
 800b978:	e7e9      	b.n	800b94e <__lo0bits+0x2a>
 800b97a:	2000      	movs	r0, #0
 800b97c:	4770      	bx	lr
 800b97e:	2020      	movs	r0, #32
 800b980:	4770      	bx	lr

0800b982 <__i2b>:
 800b982:	b510      	push	{r4, lr}
 800b984:	460c      	mov	r4, r1
 800b986:	2101      	movs	r1, #1
 800b988:	f7ff fee9 	bl	800b75e <_Balloc>
 800b98c:	2201      	movs	r2, #1
 800b98e:	6144      	str	r4, [r0, #20]
 800b990:	6102      	str	r2, [r0, #16]
 800b992:	bd10      	pop	{r4, pc}

0800b994 <__multiply>:
 800b994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b998:	4614      	mov	r4, r2
 800b99a:	690a      	ldr	r2, [r1, #16]
 800b99c:	6923      	ldr	r3, [r4, #16]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	bfb8      	it	lt
 800b9a2:	460b      	movlt	r3, r1
 800b9a4:	4688      	mov	r8, r1
 800b9a6:	bfbc      	itt	lt
 800b9a8:	46a0      	movlt	r8, r4
 800b9aa:	461c      	movlt	r4, r3
 800b9ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b9b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b9b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b9b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b9bc:	eb07 0609 	add.w	r6, r7, r9
 800b9c0:	42b3      	cmp	r3, r6
 800b9c2:	bfb8      	it	lt
 800b9c4:	3101      	addlt	r1, #1
 800b9c6:	f7ff feca 	bl	800b75e <_Balloc>
 800b9ca:	f100 0514 	add.w	r5, r0, #20
 800b9ce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b9d2:	462b      	mov	r3, r5
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	4573      	cmp	r3, lr
 800b9d8:	d316      	bcc.n	800ba08 <__multiply+0x74>
 800b9da:	f104 0214 	add.w	r2, r4, #20
 800b9de:	f108 0114 	add.w	r1, r8, #20
 800b9e2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b9e6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b9ea:	9300      	str	r3, [sp, #0]
 800b9ec:	9b00      	ldr	r3, [sp, #0]
 800b9ee:	9201      	str	r2, [sp, #4]
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d80c      	bhi.n	800ba0e <__multiply+0x7a>
 800b9f4:	2e00      	cmp	r6, #0
 800b9f6:	dd03      	ble.n	800ba00 <__multiply+0x6c>
 800b9f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d05d      	beq.n	800babc <__multiply+0x128>
 800ba00:	6106      	str	r6, [r0, #16]
 800ba02:	b003      	add	sp, #12
 800ba04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba08:	f843 2b04 	str.w	r2, [r3], #4
 800ba0c:	e7e3      	b.n	800b9d6 <__multiply+0x42>
 800ba0e:	f8b2 b000 	ldrh.w	fp, [r2]
 800ba12:	f1bb 0f00 	cmp.w	fp, #0
 800ba16:	d023      	beq.n	800ba60 <__multiply+0xcc>
 800ba18:	4689      	mov	r9, r1
 800ba1a:	46ac      	mov	ip, r5
 800ba1c:	f04f 0800 	mov.w	r8, #0
 800ba20:	f859 4b04 	ldr.w	r4, [r9], #4
 800ba24:	f8dc a000 	ldr.w	sl, [ip]
 800ba28:	b2a3      	uxth	r3, r4
 800ba2a:	fa1f fa8a 	uxth.w	sl, sl
 800ba2e:	fb0b a303 	mla	r3, fp, r3, sl
 800ba32:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ba36:	f8dc 4000 	ldr.w	r4, [ip]
 800ba3a:	4443      	add	r3, r8
 800ba3c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ba40:	fb0b 840a 	mla	r4, fp, sl, r8
 800ba44:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ba48:	46e2      	mov	sl, ip
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ba50:	454f      	cmp	r7, r9
 800ba52:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ba56:	f84a 3b04 	str.w	r3, [sl], #4
 800ba5a:	d82b      	bhi.n	800bab4 <__multiply+0x120>
 800ba5c:	f8cc 8004 	str.w	r8, [ip, #4]
 800ba60:	9b01      	ldr	r3, [sp, #4]
 800ba62:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ba66:	3204      	adds	r2, #4
 800ba68:	f1ba 0f00 	cmp.w	sl, #0
 800ba6c:	d020      	beq.n	800bab0 <__multiply+0x11c>
 800ba6e:	682b      	ldr	r3, [r5, #0]
 800ba70:	4689      	mov	r9, r1
 800ba72:	46a8      	mov	r8, r5
 800ba74:	f04f 0b00 	mov.w	fp, #0
 800ba78:	f8b9 c000 	ldrh.w	ip, [r9]
 800ba7c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ba80:	fb0a 440c 	mla	r4, sl, ip, r4
 800ba84:	445c      	add	r4, fp
 800ba86:	46c4      	mov	ip, r8
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ba8e:	f84c 3b04 	str.w	r3, [ip], #4
 800ba92:	f859 3b04 	ldr.w	r3, [r9], #4
 800ba96:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ba9a:	0c1b      	lsrs	r3, r3, #16
 800ba9c:	fb0a b303 	mla	r3, sl, r3, fp
 800baa0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800baa4:	454f      	cmp	r7, r9
 800baa6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800baaa:	d805      	bhi.n	800bab8 <__multiply+0x124>
 800baac:	f8c8 3004 	str.w	r3, [r8, #4]
 800bab0:	3504      	adds	r5, #4
 800bab2:	e79b      	b.n	800b9ec <__multiply+0x58>
 800bab4:	46d4      	mov	ip, sl
 800bab6:	e7b3      	b.n	800ba20 <__multiply+0x8c>
 800bab8:	46e0      	mov	r8, ip
 800baba:	e7dd      	b.n	800ba78 <__multiply+0xe4>
 800babc:	3e01      	subs	r6, #1
 800babe:	e799      	b.n	800b9f4 <__multiply+0x60>

0800bac0 <__pow5mult>:
 800bac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bac4:	4615      	mov	r5, r2
 800bac6:	f012 0203 	ands.w	r2, r2, #3
 800baca:	4606      	mov	r6, r0
 800bacc:	460f      	mov	r7, r1
 800bace:	d007      	beq.n	800bae0 <__pow5mult+0x20>
 800bad0:	3a01      	subs	r2, #1
 800bad2:	4c21      	ldr	r4, [pc, #132]	; (800bb58 <__pow5mult+0x98>)
 800bad4:	2300      	movs	r3, #0
 800bad6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bada:	f7ff fe8b 	bl	800b7f4 <__multadd>
 800bade:	4607      	mov	r7, r0
 800bae0:	10ad      	asrs	r5, r5, #2
 800bae2:	d035      	beq.n	800bb50 <__pow5mult+0x90>
 800bae4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bae6:	b93c      	cbnz	r4, 800baf8 <__pow5mult+0x38>
 800bae8:	2010      	movs	r0, #16
 800baea:	f7ff fe13 	bl	800b714 <malloc>
 800baee:	6270      	str	r0, [r6, #36]	; 0x24
 800baf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800baf4:	6004      	str	r4, [r0, #0]
 800baf6:	60c4      	str	r4, [r0, #12]
 800baf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bafc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb00:	b94c      	cbnz	r4, 800bb16 <__pow5mult+0x56>
 800bb02:	f240 2171 	movw	r1, #625	; 0x271
 800bb06:	4630      	mov	r0, r6
 800bb08:	f7ff ff3b 	bl	800b982 <__i2b>
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb12:	4604      	mov	r4, r0
 800bb14:	6003      	str	r3, [r0, #0]
 800bb16:	f04f 0800 	mov.w	r8, #0
 800bb1a:	07eb      	lsls	r3, r5, #31
 800bb1c:	d50a      	bpl.n	800bb34 <__pow5mult+0x74>
 800bb1e:	4639      	mov	r1, r7
 800bb20:	4622      	mov	r2, r4
 800bb22:	4630      	mov	r0, r6
 800bb24:	f7ff ff36 	bl	800b994 <__multiply>
 800bb28:	4639      	mov	r1, r7
 800bb2a:	4681      	mov	r9, r0
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	f7ff fe4a 	bl	800b7c6 <_Bfree>
 800bb32:	464f      	mov	r7, r9
 800bb34:	106d      	asrs	r5, r5, #1
 800bb36:	d00b      	beq.n	800bb50 <__pow5mult+0x90>
 800bb38:	6820      	ldr	r0, [r4, #0]
 800bb3a:	b938      	cbnz	r0, 800bb4c <__pow5mult+0x8c>
 800bb3c:	4622      	mov	r2, r4
 800bb3e:	4621      	mov	r1, r4
 800bb40:	4630      	mov	r0, r6
 800bb42:	f7ff ff27 	bl	800b994 <__multiply>
 800bb46:	6020      	str	r0, [r4, #0]
 800bb48:	f8c0 8000 	str.w	r8, [r0]
 800bb4c:	4604      	mov	r4, r0
 800bb4e:	e7e4      	b.n	800bb1a <__pow5mult+0x5a>
 800bb50:	4638      	mov	r0, r7
 800bb52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb56:	bf00      	nop
 800bb58:	0800c730 	.word	0x0800c730

0800bb5c <__lshift>:
 800bb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb60:	460c      	mov	r4, r1
 800bb62:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb66:	6923      	ldr	r3, [r4, #16]
 800bb68:	6849      	ldr	r1, [r1, #4]
 800bb6a:	eb0a 0903 	add.w	r9, sl, r3
 800bb6e:	68a3      	ldr	r3, [r4, #8]
 800bb70:	4607      	mov	r7, r0
 800bb72:	4616      	mov	r6, r2
 800bb74:	f109 0501 	add.w	r5, r9, #1
 800bb78:	42ab      	cmp	r3, r5
 800bb7a:	db32      	blt.n	800bbe2 <__lshift+0x86>
 800bb7c:	4638      	mov	r0, r7
 800bb7e:	f7ff fdee 	bl	800b75e <_Balloc>
 800bb82:	2300      	movs	r3, #0
 800bb84:	4680      	mov	r8, r0
 800bb86:	f100 0114 	add.w	r1, r0, #20
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	4553      	cmp	r3, sl
 800bb8e:	db2b      	blt.n	800bbe8 <__lshift+0x8c>
 800bb90:	6920      	ldr	r0, [r4, #16]
 800bb92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb96:	f104 0314 	add.w	r3, r4, #20
 800bb9a:	f016 021f 	ands.w	r2, r6, #31
 800bb9e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bba2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bba6:	d025      	beq.n	800bbf4 <__lshift+0x98>
 800bba8:	f1c2 0e20 	rsb	lr, r2, #32
 800bbac:	2000      	movs	r0, #0
 800bbae:	681e      	ldr	r6, [r3, #0]
 800bbb0:	468a      	mov	sl, r1
 800bbb2:	4096      	lsls	r6, r2
 800bbb4:	4330      	orrs	r0, r6
 800bbb6:	f84a 0b04 	str.w	r0, [sl], #4
 800bbba:	f853 0b04 	ldr.w	r0, [r3], #4
 800bbbe:	459c      	cmp	ip, r3
 800bbc0:	fa20 f00e 	lsr.w	r0, r0, lr
 800bbc4:	d814      	bhi.n	800bbf0 <__lshift+0x94>
 800bbc6:	6048      	str	r0, [r1, #4]
 800bbc8:	b108      	cbz	r0, 800bbce <__lshift+0x72>
 800bbca:	f109 0502 	add.w	r5, r9, #2
 800bbce:	3d01      	subs	r5, #1
 800bbd0:	4638      	mov	r0, r7
 800bbd2:	f8c8 5010 	str.w	r5, [r8, #16]
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	f7ff fdf5 	bl	800b7c6 <_Bfree>
 800bbdc:	4640      	mov	r0, r8
 800bbde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbe2:	3101      	adds	r1, #1
 800bbe4:	005b      	lsls	r3, r3, #1
 800bbe6:	e7c7      	b.n	800bb78 <__lshift+0x1c>
 800bbe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bbec:	3301      	adds	r3, #1
 800bbee:	e7cd      	b.n	800bb8c <__lshift+0x30>
 800bbf0:	4651      	mov	r1, sl
 800bbf2:	e7dc      	b.n	800bbae <__lshift+0x52>
 800bbf4:	3904      	subs	r1, #4
 800bbf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbfa:	f841 2f04 	str.w	r2, [r1, #4]!
 800bbfe:	459c      	cmp	ip, r3
 800bc00:	d8f9      	bhi.n	800bbf6 <__lshift+0x9a>
 800bc02:	e7e4      	b.n	800bbce <__lshift+0x72>

0800bc04 <__mcmp>:
 800bc04:	6903      	ldr	r3, [r0, #16]
 800bc06:	690a      	ldr	r2, [r1, #16]
 800bc08:	1a9b      	subs	r3, r3, r2
 800bc0a:	b530      	push	{r4, r5, lr}
 800bc0c:	d10c      	bne.n	800bc28 <__mcmp+0x24>
 800bc0e:	0092      	lsls	r2, r2, #2
 800bc10:	3014      	adds	r0, #20
 800bc12:	3114      	adds	r1, #20
 800bc14:	1884      	adds	r4, r0, r2
 800bc16:	4411      	add	r1, r2
 800bc18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bc1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bc20:	4295      	cmp	r5, r2
 800bc22:	d003      	beq.n	800bc2c <__mcmp+0x28>
 800bc24:	d305      	bcc.n	800bc32 <__mcmp+0x2e>
 800bc26:	2301      	movs	r3, #1
 800bc28:	4618      	mov	r0, r3
 800bc2a:	bd30      	pop	{r4, r5, pc}
 800bc2c:	42a0      	cmp	r0, r4
 800bc2e:	d3f3      	bcc.n	800bc18 <__mcmp+0x14>
 800bc30:	e7fa      	b.n	800bc28 <__mcmp+0x24>
 800bc32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc36:	e7f7      	b.n	800bc28 <__mcmp+0x24>

0800bc38 <__mdiff>:
 800bc38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc3c:	460d      	mov	r5, r1
 800bc3e:	4607      	mov	r7, r0
 800bc40:	4611      	mov	r1, r2
 800bc42:	4628      	mov	r0, r5
 800bc44:	4614      	mov	r4, r2
 800bc46:	f7ff ffdd 	bl	800bc04 <__mcmp>
 800bc4a:	1e06      	subs	r6, r0, #0
 800bc4c:	d108      	bne.n	800bc60 <__mdiff+0x28>
 800bc4e:	4631      	mov	r1, r6
 800bc50:	4638      	mov	r0, r7
 800bc52:	f7ff fd84 	bl	800b75e <_Balloc>
 800bc56:	2301      	movs	r3, #1
 800bc58:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bc5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc60:	bfa4      	itt	ge
 800bc62:	4623      	movge	r3, r4
 800bc64:	462c      	movge	r4, r5
 800bc66:	4638      	mov	r0, r7
 800bc68:	6861      	ldr	r1, [r4, #4]
 800bc6a:	bfa6      	itte	ge
 800bc6c:	461d      	movge	r5, r3
 800bc6e:	2600      	movge	r6, #0
 800bc70:	2601      	movlt	r6, #1
 800bc72:	f7ff fd74 	bl	800b75e <_Balloc>
 800bc76:	692b      	ldr	r3, [r5, #16]
 800bc78:	60c6      	str	r6, [r0, #12]
 800bc7a:	6926      	ldr	r6, [r4, #16]
 800bc7c:	f105 0914 	add.w	r9, r5, #20
 800bc80:	f104 0214 	add.w	r2, r4, #20
 800bc84:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800bc88:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800bc8c:	f100 0514 	add.w	r5, r0, #20
 800bc90:	f04f 0e00 	mov.w	lr, #0
 800bc94:	f852 ab04 	ldr.w	sl, [r2], #4
 800bc98:	f859 4b04 	ldr.w	r4, [r9], #4
 800bc9c:	fa1e f18a 	uxtah	r1, lr, sl
 800bca0:	b2a3      	uxth	r3, r4
 800bca2:	1ac9      	subs	r1, r1, r3
 800bca4:	0c23      	lsrs	r3, r4, #16
 800bca6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800bcaa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bcae:	b289      	uxth	r1, r1
 800bcb0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800bcb4:	45c8      	cmp	r8, r9
 800bcb6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bcba:	4694      	mov	ip, r2
 800bcbc:	f845 3b04 	str.w	r3, [r5], #4
 800bcc0:	d8e8      	bhi.n	800bc94 <__mdiff+0x5c>
 800bcc2:	45bc      	cmp	ip, r7
 800bcc4:	d304      	bcc.n	800bcd0 <__mdiff+0x98>
 800bcc6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800bcca:	b183      	cbz	r3, 800bcee <__mdiff+0xb6>
 800bccc:	6106      	str	r6, [r0, #16]
 800bcce:	e7c5      	b.n	800bc5c <__mdiff+0x24>
 800bcd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bcd4:	fa1e f381 	uxtah	r3, lr, r1
 800bcd8:	141a      	asrs	r2, r3, #16
 800bcda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bce4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800bce8:	f845 3b04 	str.w	r3, [r5], #4
 800bcec:	e7e9      	b.n	800bcc2 <__mdiff+0x8a>
 800bcee:	3e01      	subs	r6, #1
 800bcf0:	e7e9      	b.n	800bcc6 <__mdiff+0x8e>
	...

0800bcf4 <__ulp>:
 800bcf4:	4b12      	ldr	r3, [pc, #72]	; (800bd40 <__ulp+0x4c>)
 800bcf6:	ee10 2a90 	vmov	r2, s1
 800bcfa:	401a      	ands	r2, r3
 800bcfc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	dd04      	ble.n	800bd0e <__ulp+0x1a>
 800bd04:	2000      	movs	r0, #0
 800bd06:	4619      	mov	r1, r3
 800bd08:	ec41 0b10 	vmov	d0, r0, r1
 800bd0c:	4770      	bx	lr
 800bd0e:	425b      	negs	r3, r3
 800bd10:	151b      	asrs	r3, r3, #20
 800bd12:	2b13      	cmp	r3, #19
 800bd14:	f04f 0000 	mov.w	r0, #0
 800bd18:	f04f 0100 	mov.w	r1, #0
 800bd1c:	dc04      	bgt.n	800bd28 <__ulp+0x34>
 800bd1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bd22:	fa42 f103 	asr.w	r1, r2, r3
 800bd26:	e7ef      	b.n	800bd08 <__ulp+0x14>
 800bd28:	3b14      	subs	r3, #20
 800bd2a:	2b1e      	cmp	r3, #30
 800bd2c:	f04f 0201 	mov.w	r2, #1
 800bd30:	bfda      	itte	le
 800bd32:	f1c3 031f 	rsble	r3, r3, #31
 800bd36:	fa02 f303 	lslle.w	r3, r2, r3
 800bd3a:	4613      	movgt	r3, r2
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	e7e3      	b.n	800bd08 <__ulp+0x14>
 800bd40:	7ff00000 	.word	0x7ff00000

0800bd44 <__b2d>:
 800bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd46:	6905      	ldr	r5, [r0, #16]
 800bd48:	f100 0714 	add.w	r7, r0, #20
 800bd4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bd50:	1f2e      	subs	r6, r5, #4
 800bd52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bd56:	4620      	mov	r0, r4
 800bd58:	f7ff fdc5 	bl	800b8e6 <__hi0bits>
 800bd5c:	f1c0 0320 	rsb	r3, r0, #32
 800bd60:	280a      	cmp	r0, #10
 800bd62:	600b      	str	r3, [r1, #0]
 800bd64:	f8df c074 	ldr.w	ip, [pc, #116]	; 800bddc <__b2d+0x98>
 800bd68:	dc14      	bgt.n	800bd94 <__b2d+0x50>
 800bd6a:	f1c0 0e0b 	rsb	lr, r0, #11
 800bd6e:	fa24 f10e 	lsr.w	r1, r4, lr
 800bd72:	42b7      	cmp	r7, r6
 800bd74:	ea41 030c 	orr.w	r3, r1, ip
 800bd78:	bf34      	ite	cc
 800bd7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bd7e:	2100      	movcs	r1, #0
 800bd80:	3015      	adds	r0, #21
 800bd82:	fa04 f000 	lsl.w	r0, r4, r0
 800bd86:	fa21 f10e 	lsr.w	r1, r1, lr
 800bd8a:	ea40 0201 	orr.w	r2, r0, r1
 800bd8e:	ec43 2b10 	vmov	d0, r2, r3
 800bd92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd94:	42b7      	cmp	r7, r6
 800bd96:	bf3a      	itte	cc
 800bd98:	f1a5 0608 	subcc.w	r6, r5, #8
 800bd9c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bda0:	2100      	movcs	r1, #0
 800bda2:	380b      	subs	r0, #11
 800bda4:	d015      	beq.n	800bdd2 <__b2d+0x8e>
 800bda6:	4084      	lsls	r4, r0
 800bda8:	f1c0 0520 	rsb	r5, r0, #32
 800bdac:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800bdb0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800bdb4:	42be      	cmp	r6, r7
 800bdb6:	fa21 fc05 	lsr.w	ip, r1, r5
 800bdba:	ea44 030c 	orr.w	r3, r4, ip
 800bdbe:	bf8c      	ite	hi
 800bdc0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bdc4:	2400      	movls	r4, #0
 800bdc6:	fa01 f000 	lsl.w	r0, r1, r0
 800bdca:	40ec      	lsrs	r4, r5
 800bdcc:	ea40 0204 	orr.w	r2, r0, r4
 800bdd0:	e7dd      	b.n	800bd8e <__b2d+0x4a>
 800bdd2:	ea44 030c 	orr.w	r3, r4, ip
 800bdd6:	460a      	mov	r2, r1
 800bdd8:	e7d9      	b.n	800bd8e <__b2d+0x4a>
 800bdda:	bf00      	nop
 800bddc:	3ff00000 	.word	0x3ff00000

0800bde0 <__d2b>:
 800bde0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bde4:	460e      	mov	r6, r1
 800bde6:	2101      	movs	r1, #1
 800bde8:	ec59 8b10 	vmov	r8, r9, d0
 800bdec:	4615      	mov	r5, r2
 800bdee:	f7ff fcb6 	bl	800b75e <_Balloc>
 800bdf2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bdf6:	4607      	mov	r7, r0
 800bdf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bdfc:	bb34      	cbnz	r4, 800be4c <__d2b+0x6c>
 800bdfe:	9301      	str	r3, [sp, #4]
 800be00:	f1b8 0300 	subs.w	r3, r8, #0
 800be04:	d027      	beq.n	800be56 <__d2b+0x76>
 800be06:	a802      	add	r0, sp, #8
 800be08:	f840 3d08 	str.w	r3, [r0, #-8]!
 800be0c:	f7ff fd8a 	bl	800b924 <__lo0bits>
 800be10:	9900      	ldr	r1, [sp, #0]
 800be12:	b1f0      	cbz	r0, 800be52 <__d2b+0x72>
 800be14:	9a01      	ldr	r2, [sp, #4]
 800be16:	f1c0 0320 	rsb	r3, r0, #32
 800be1a:	fa02 f303 	lsl.w	r3, r2, r3
 800be1e:	430b      	orrs	r3, r1
 800be20:	40c2      	lsrs	r2, r0
 800be22:	617b      	str	r3, [r7, #20]
 800be24:	9201      	str	r2, [sp, #4]
 800be26:	9b01      	ldr	r3, [sp, #4]
 800be28:	61bb      	str	r3, [r7, #24]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	bf14      	ite	ne
 800be2e:	2102      	movne	r1, #2
 800be30:	2101      	moveq	r1, #1
 800be32:	6139      	str	r1, [r7, #16]
 800be34:	b1c4      	cbz	r4, 800be68 <__d2b+0x88>
 800be36:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800be3a:	4404      	add	r4, r0
 800be3c:	6034      	str	r4, [r6, #0]
 800be3e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be42:	6028      	str	r0, [r5, #0]
 800be44:	4638      	mov	r0, r7
 800be46:	b003      	add	sp, #12
 800be48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be50:	e7d5      	b.n	800bdfe <__d2b+0x1e>
 800be52:	6179      	str	r1, [r7, #20]
 800be54:	e7e7      	b.n	800be26 <__d2b+0x46>
 800be56:	a801      	add	r0, sp, #4
 800be58:	f7ff fd64 	bl	800b924 <__lo0bits>
 800be5c:	9b01      	ldr	r3, [sp, #4]
 800be5e:	617b      	str	r3, [r7, #20]
 800be60:	2101      	movs	r1, #1
 800be62:	6139      	str	r1, [r7, #16]
 800be64:	3020      	adds	r0, #32
 800be66:	e7e5      	b.n	800be34 <__d2b+0x54>
 800be68:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800be6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be70:	6030      	str	r0, [r6, #0]
 800be72:	6918      	ldr	r0, [r3, #16]
 800be74:	f7ff fd37 	bl	800b8e6 <__hi0bits>
 800be78:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800be7c:	e7e1      	b.n	800be42 <__d2b+0x62>

0800be7e <__ratio>:
 800be7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be82:	4688      	mov	r8, r1
 800be84:	4669      	mov	r1, sp
 800be86:	4681      	mov	r9, r0
 800be88:	f7ff ff5c 	bl	800bd44 <__b2d>
 800be8c:	a901      	add	r1, sp, #4
 800be8e:	4640      	mov	r0, r8
 800be90:	ec57 6b10 	vmov	r6, r7, d0
 800be94:	f7ff ff56 	bl	800bd44 <__b2d>
 800be98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be9c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bea0:	eba3 0c02 	sub.w	ip, r3, r2
 800bea4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bea8:	1a9b      	subs	r3, r3, r2
 800beaa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800beae:	ec5b ab10 	vmov	sl, fp, d0
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	bfce      	itee	gt
 800beb6:	463a      	movgt	r2, r7
 800beb8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bebc:	465a      	movle	r2, fp
 800bebe:	4659      	mov	r1, fp
 800bec0:	463d      	mov	r5, r7
 800bec2:	bfd4      	ite	le
 800bec4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800bec8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800becc:	4630      	mov	r0, r6
 800bece:	ee10 2a10 	vmov	r2, s0
 800bed2:	460b      	mov	r3, r1
 800bed4:	4629      	mov	r1, r5
 800bed6:	f7f4 fcc9 	bl	800086c <__aeabi_ddiv>
 800beda:	ec41 0b10 	vmov	d0, r0, r1
 800bede:	b003      	add	sp, #12
 800bee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bee4 <__copybits>:
 800bee4:	3901      	subs	r1, #1
 800bee6:	b510      	push	{r4, lr}
 800bee8:	1149      	asrs	r1, r1, #5
 800beea:	6914      	ldr	r4, [r2, #16]
 800beec:	3101      	adds	r1, #1
 800beee:	f102 0314 	add.w	r3, r2, #20
 800bef2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bef6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800befa:	42a3      	cmp	r3, r4
 800befc:	4602      	mov	r2, r0
 800befe:	d303      	bcc.n	800bf08 <__copybits+0x24>
 800bf00:	2300      	movs	r3, #0
 800bf02:	428a      	cmp	r2, r1
 800bf04:	d305      	bcc.n	800bf12 <__copybits+0x2e>
 800bf06:	bd10      	pop	{r4, pc}
 800bf08:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf0c:	f840 2b04 	str.w	r2, [r0], #4
 800bf10:	e7f3      	b.n	800befa <__copybits+0x16>
 800bf12:	f842 3b04 	str.w	r3, [r2], #4
 800bf16:	e7f4      	b.n	800bf02 <__copybits+0x1e>

0800bf18 <__any_on>:
 800bf18:	f100 0214 	add.w	r2, r0, #20
 800bf1c:	6900      	ldr	r0, [r0, #16]
 800bf1e:	114b      	asrs	r3, r1, #5
 800bf20:	4298      	cmp	r0, r3
 800bf22:	b510      	push	{r4, lr}
 800bf24:	db11      	blt.n	800bf4a <__any_on+0x32>
 800bf26:	dd0a      	ble.n	800bf3e <__any_on+0x26>
 800bf28:	f011 011f 	ands.w	r1, r1, #31
 800bf2c:	d007      	beq.n	800bf3e <__any_on+0x26>
 800bf2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bf32:	fa24 f001 	lsr.w	r0, r4, r1
 800bf36:	fa00 f101 	lsl.w	r1, r0, r1
 800bf3a:	428c      	cmp	r4, r1
 800bf3c:	d10b      	bne.n	800bf56 <__any_on+0x3e>
 800bf3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d803      	bhi.n	800bf4e <__any_on+0x36>
 800bf46:	2000      	movs	r0, #0
 800bf48:	bd10      	pop	{r4, pc}
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	e7f7      	b.n	800bf3e <__any_on+0x26>
 800bf4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf52:	2900      	cmp	r1, #0
 800bf54:	d0f5      	beq.n	800bf42 <__any_on+0x2a>
 800bf56:	2001      	movs	r0, #1
 800bf58:	e7f6      	b.n	800bf48 <__any_on+0x30>

0800bf5a <_calloc_r>:
 800bf5a:	b538      	push	{r3, r4, r5, lr}
 800bf5c:	fb02 f401 	mul.w	r4, r2, r1
 800bf60:	4621      	mov	r1, r4
 800bf62:	f000 f857 	bl	800c014 <_malloc_r>
 800bf66:	4605      	mov	r5, r0
 800bf68:	b118      	cbz	r0, 800bf72 <_calloc_r+0x18>
 800bf6a:	4622      	mov	r2, r4
 800bf6c:	2100      	movs	r1, #0
 800bf6e:	f7fc ff09 	bl	8008d84 <memset>
 800bf72:	4628      	mov	r0, r5
 800bf74:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bf78 <_free_r>:
 800bf78:	b538      	push	{r3, r4, r5, lr}
 800bf7a:	4605      	mov	r5, r0
 800bf7c:	2900      	cmp	r1, #0
 800bf7e:	d045      	beq.n	800c00c <_free_r+0x94>
 800bf80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf84:	1f0c      	subs	r4, r1, #4
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	bfb8      	it	lt
 800bf8a:	18e4      	addlt	r4, r4, r3
 800bf8c:	f000 fa36 	bl	800c3fc <__malloc_lock>
 800bf90:	4a1f      	ldr	r2, [pc, #124]	; (800c010 <_free_r+0x98>)
 800bf92:	6813      	ldr	r3, [r2, #0]
 800bf94:	4610      	mov	r0, r2
 800bf96:	b933      	cbnz	r3, 800bfa6 <_free_r+0x2e>
 800bf98:	6063      	str	r3, [r4, #4]
 800bf9a:	6014      	str	r4, [r2, #0]
 800bf9c:	4628      	mov	r0, r5
 800bf9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfa2:	f000 ba2c 	b.w	800c3fe <__malloc_unlock>
 800bfa6:	42a3      	cmp	r3, r4
 800bfa8:	d90c      	bls.n	800bfc4 <_free_r+0x4c>
 800bfaa:	6821      	ldr	r1, [r4, #0]
 800bfac:	1862      	adds	r2, r4, r1
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	bf04      	itt	eq
 800bfb2:	681a      	ldreq	r2, [r3, #0]
 800bfb4:	685b      	ldreq	r3, [r3, #4]
 800bfb6:	6063      	str	r3, [r4, #4]
 800bfb8:	bf04      	itt	eq
 800bfba:	1852      	addeq	r2, r2, r1
 800bfbc:	6022      	streq	r2, [r4, #0]
 800bfbe:	6004      	str	r4, [r0, #0]
 800bfc0:	e7ec      	b.n	800bf9c <_free_r+0x24>
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	685a      	ldr	r2, [r3, #4]
 800bfc6:	b10a      	cbz	r2, 800bfcc <_free_r+0x54>
 800bfc8:	42a2      	cmp	r2, r4
 800bfca:	d9fa      	bls.n	800bfc2 <_free_r+0x4a>
 800bfcc:	6819      	ldr	r1, [r3, #0]
 800bfce:	1858      	adds	r0, r3, r1
 800bfd0:	42a0      	cmp	r0, r4
 800bfd2:	d10b      	bne.n	800bfec <_free_r+0x74>
 800bfd4:	6820      	ldr	r0, [r4, #0]
 800bfd6:	4401      	add	r1, r0
 800bfd8:	1858      	adds	r0, r3, r1
 800bfda:	4282      	cmp	r2, r0
 800bfdc:	6019      	str	r1, [r3, #0]
 800bfde:	d1dd      	bne.n	800bf9c <_free_r+0x24>
 800bfe0:	6810      	ldr	r0, [r2, #0]
 800bfe2:	6852      	ldr	r2, [r2, #4]
 800bfe4:	605a      	str	r2, [r3, #4]
 800bfe6:	4401      	add	r1, r0
 800bfe8:	6019      	str	r1, [r3, #0]
 800bfea:	e7d7      	b.n	800bf9c <_free_r+0x24>
 800bfec:	d902      	bls.n	800bff4 <_free_r+0x7c>
 800bfee:	230c      	movs	r3, #12
 800bff0:	602b      	str	r3, [r5, #0]
 800bff2:	e7d3      	b.n	800bf9c <_free_r+0x24>
 800bff4:	6820      	ldr	r0, [r4, #0]
 800bff6:	1821      	adds	r1, r4, r0
 800bff8:	428a      	cmp	r2, r1
 800bffa:	bf04      	itt	eq
 800bffc:	6811      	ldreq	r1, [r2, #0]
 800bffe:	6852      	ldreq	r2, [r2, #4]
 800c000:	6062      	str	r2, [r4, #4]
 800c002:	bf04      	itt	eq
 800c004:	1809      	addeq	r1, r1, r0
 800c006:	6021      	streq	r1, [r4, #0]
 800c008:	605c      	str	r4, [r3, #4]
 800c00a:	e7c7      	b.n	800bf9c <_free_r+0x24>
 800c00c:	bd38      	pop	{r3, r4, r5, pc}
 800c00e:	bf00      	nop
 800c010:	20000994 	.word	0x20000994

0800c014 <_malloc_r>:
 800c014:	b570      	push	{r4, r5, r6, lr}
 800c016:	1ccd      	adds	r5, r1, #3
 800c018:	f025 0503 	bic.w	r5, r5, #3
 800c01c:	3508      	adds	r5, #8
 800c01e:	2d0c      	cmp	r5, #12
 800c020:	bf38      	it	cc
 800c022:	250c      	movcc	r5, #12
 800c024:	2d00      	cmp	r5, #0
 800c026:	4606      	mov	r6, r0
 800c028:	db01      	blt.n	800c02e <_malloc_r+0x1a>
 800c02a:	42a9      	cmp	r1, r5
 800c02c:	d903      	bls.n	800c036 <_malloc_r+0x22>
 800c02e:	230c      	movs	r3, #12
 800c030:	6033      	str	r3, [r6, #0]
 800c032:	2000      	movs	r0, #0
 800c034:	bd70      	pop	{r4, r5, r6, pc}
 800c036:	f000 f9e1 	bl	800c3fc <__malloc_lock>
 800c03a:	4a21      	ldr	r2, [pc, #132]	; (800c0c0 <_malloc_r+0xac>)
 800c03c:	6814      	ldr	r4, [r2, #0]
 800c03e:	4621      	mov	r1, r4
 800c040:	b991      	cbnz	r1, 800c068 <_malloc_r+0x54>
 800c042:	4c20      	ldr	r4, [pc, #128]	; (800c0c4 <_malloc_r+0xb0>)
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	b91b      	cbnz	r3, 800c050 <_malloc_r+0x3c>
 800c048:	4630      	mov	r0, r6
 800c04a:	f000 f98f 	bl	800c36c <_sbrk_r>
 800c04e:	6020      	str	r0, [r4, #0]
 800c050:	4629      	mov	r1, r5
 800c052:	4630      	mov	r0, r6
 800c054:	f000 f98a 	bl	800c36c <_sbrk_r>
 800c058:	1c43      	adds	r3, r0, #1
 800c05a:	d124      	bne.n	800c0a6 <_malloc_r+0x92>
 800c05c:	230c      	movs	r3, #12
 800c05e:	6033      	str	r3, [r6, #0]
 800c060:	4630      	mov	r0, r6
 800c062:	f000 f9cc 	bl	800c3fe <__malloc_unlock>
 800c066:	e7e4      	b.n	800c032 <_malloc_r+0x1e>
 800c068:	680b      	ldr	r3, [r1, #0]
 800c06a:	1b5b      	subs	r3, r3, r5
 800c06c:	d418      	bmi.n	800c0a0 <_malloc_r+0x8c>
 800c06e:	2b0b      	cmp	r3, #11
 800c070:	d90f      	bls.n	800c092 <_malloc_r+0x7e>
 800c072:	600b      	str	r3, [r1, #0]
 800c074:	50cd      	str	r5, [r1, r3]
 800c076:	18cc      	adds	r4, r1, r3
 800c078:	4630      	mov	r0, r6
 800c07a:	f000 f9c0 	bl	800c3fe <__malloc_unlock>
 800c07e:	f104 000b 	add.w	r0, r4, #11
 800c082:	1d23      	adds	r3, r4, #4
 800c084:	f020 0007 	bic.w	r0, r0, #7
 800c088:	1ac3      	subs	r3, r0, r3
 800c08a:	d0d3      	beq.n	800c034 <_malloc_r+0x20>
 800c08c:	425a      	negs	r2, r3
 800c08e:	50e2      	str	r2, [r4, r3]
 800c090:	e7d0      	b.n	800c034 <_malloc_r+0x20>
 800c092:	428c      	cmp	r4, r1
 800c094:	684b      	ldr	r3, [r1, #4]
 800c096:	bf16      	itet	ne
 800c098:	6063      	strne	r3, [r4, #4]
 800c09a:	6013      	streq	r3, [r2, #0]
 800c09c:	460c      	movne	r4, r1
 800c09e:	e7eb      	b.n	800c078 <_malloc_r+0x64>
 800c0a0:	460c      	mov	r4, r1
 800c0a2:	6849      	ldr	r1, [r1, #4]
 800c0a4:	e7cc      	b.n	800c040 <_malloc_r+0x2c>
 800c0a6:	1cc4      	adds	r4, r0, #3
 800c0a8:	f024 0403 	bic.w	r4, r4, #3
 800c0ac:	42a0      	cmp	r0, r4
 800c0ae:	d005      	beq.n	800c0bc <_malloc_r+0xa8>
 800c0b0:	1a21      	subs	r1, r4, r0
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	f000 f95a 	bl	800c36c <_sbrk_r>
 800c0b8:	3001      	adds	r0, #1
 800c0ba:	d0cf      	beq.n	800c05c <_malloc_r+0x48>
 800c0bc:	6025      	str	r5, [r4, #0]
 800c0be:	e7db      	b.n	800c078 <_malloc_r+0x64>
 800c0c0:	20000994 	.word	0x20000994
 800c0c4:	20000998 	.word	0x20000998

0800c0c8 <__ssputs_r>:
 800c0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0cc:	688e      	ldr	r6, [r1, #8]
 800c0ce:	429e      	cmp	r6, r3
 800c0d0:	4682      	mov	sl, r0
 800c0d2:	460c      	mov	r4, r1
 800c0d4:	4690      	mov	r8, r2
 800c0d6:	4699      	mov	r9, r3
 800c0d8:	d837      	bhi.n	800c14a <__ssputs_r+0x82>
 800c0da:	898a      	ldrh	r2, [r1, #12]
 800c0dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0e0:	d031      	beq.n	800c146 <__ssputs_r+0x7e>
 800c0e2:	6825      	ldr	r5, [r4, #0]
 800c0e4:	6909      	ldr	r1, [r1, #16]
 800c0e6:	1a6f      	subs	r7, r5, r1
 800c0e8:	6965      	ldr	r5, [r4, #20]
 800c0ea:	2302      	movs	r3, #2
 800c0ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0f0:	fb95 f5f3 	sdiv	r5, r5, r3
 800c0f4:	f109 0301 	add.w	r3, r9, #1
 800c0f8:	443b      	add	r3, r7
 800c0fa:	429d      	cmp	r5, r3
 800c0fc:	bf38      	it	cc
 800c0fe:	461d      	movcc	r5, r3
 800c100:	0553      	lsls	r3, r2, #21
 800c102:	d530      	bpl.n	800c166 <__ssputs_r+0x9e>
 800c104:	4629      	mov	r1, r5
 800c106:	f7ff ff85 	bl	800c014 <_malloc_r>
 800c10a:	4606      	mov	r6, r0
 800c10c:	b950      	cbnz	r0, 800c124 <__ssputs_r+0x5c>
 800c10e:	230c      	movs	r3, #12
 800c110:	f8ca 3000 	str.w	r3, [sl]
 800c114:	89a3      	ldrh	r3, [r4, #12]
 800c116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c11a:	81a3      	strh	r3, [r4, #12]
 800c11c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c124:	463a      	mov	r2, r7
 800c126:	6921      	ldr	r1, [r4, #16]
 800c128:	f7ff fb0e 	bl	800b748 <memcpy>
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c136:	81a3      	strh	r3, [r4, #12]
 800c138:	6126      	str	r6, [r4, #16]
 800c13a:	6165      	str	r5, [r4, #20]
 800c13c:	443e      	add	r6, r7
 800c13e:	1bed      	subs	r5, r5, r7
 800c140:	6026      	str	r6, [r4, #0]
 800c142:	60a5      	str	r5, [r4, #8]
 800c144:	464e      	mov	r6, r9
 800c146:	454e      	cmp	r6, r9
 800c148:	d900      	bls.n	800c14c <__ssputs_r+0x84>
 800c14a:	464e      	mov	r6, r9
 800c14c:	4632      	mov	r2, r6
 800c14e:	4641      	mov	r1, r8
 800c150:	6820      	ldr	r0, [r4, #0]
 800c152:	f000 f93a 	bl	800c3ca <memmove>
 800c156:	68a3      	ldr	r3, [r4, #8]
 800c158:	1b9b      	subs	r3, r3, r6
 800c15a:	60a3      	str	r3, [r4, #8]
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	441e      	add	r6, r3
 800c160:	6026      	str	r6, [r4, #0]
 800c162:	2000      	movs	r0, #0
 800c164:	e7dc      	b.n	800c120 <__ssputs_r+0x58>
 800c166:	462a      	mov	r2, r5
 800c168:	f000 f94a 	bl	800c400 <_realloc_r>
 800c16c:	4606      	mov	r6, r0
 800c16e:	2800      	cmp	r0, #0
 800c170:	d1e2      	bne.n	800c138 <__ssputs_r+0x70>
 800c172:	6921      	ldr	r1, [r4, #16]
 800c174:	4650      	mov	r0, sl
 800c176:	f7ff feff 	bl	800bf78 <_free_r>
 800c17a:	e7c8      	b.n	800c10e <__ssputs_r+0x46>

0800c17c <_svfiprintf_r>:
 800c17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c180:	461d      	mov	r5, r3
 800c182:	898b      	ldrh	r3, [r1, #12]
 800c184:	061f      	lsls	r7, r3, #24
 800c186:	b09d      	sub	sp, #116	; 0x74
 800c188:	4680      	mov	r8, r0
 800c18a:	460c      	mov	r4, r1
 800c18c:	4616      	mov	r6, r2
 800c18e:	d50f      	bpl.n	800c1b0 <_svfiprintf_r+0x34>
 800c190:	690b      	ldr	r3, [r1, #16]
 800c192:	b96b      	cbnz	r3, 800c1b0 <_svfiprintf_r+0x34>
 800c194:	2140      	movs	r1, #64	; 0x40
 800c196:	f7ff ff3d 	bl	800c014 <_malloc_r>
 800c19a:	6020      	str	r0, [r4, #0]
 800c19c:	6120      	str	r0, [r4, #16]
 800c19e:	b928      	cbnz	r0, 800c1ac <_svfiprintf_r+0x30>
 800c1a0:	230c      	movs	r3, #12
 800c1a2:	f8c8 3000 	str.w	r3, [r8]
 800c1a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1aa:	e0c8      	b.n	800c33e <_svfiprintf_r+0x1c2>
 800c1ac:	2340      	movs	r3, #64	; 0x40
 800c1ae:	6163      	str	r3, [r4, #20]
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b4:	2320      	movs	r3, #32
 800c1b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1ba:	2330      	movs	r3, #48	; 0x30
 800c1bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1c0:	9503      	str	r5, [sp, #12]
 800c1c2:	f04f 0b01 	mov.w	fp, #1
 800c1c6:	4637      	mov	r7, r6
 800c1c8:	463d      	mov	r5, r7
 800c1ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c1ce:	b10b      	cbz	r3, 800c1d4 <_svfiprintf_r+0x58>
 800c1d0:	2b25      	cmp	r3, #37	; 0x25
 800c1d2:	d13e      	bne.n	800c252 <_svfiprintf_r+0xd6>
 800c1d4:	ebb7 0a06 	subs.w	sl, r7, r6
 800c1d8:	d00b      	beq.n	800c1f2 <_svfiprintf_r+0x76>
 800c1da:	4653      	mov	r3, sl
 800c1dc:	4632      	mov	r2, r6
 800c1de:	4621      	mov	r1, r4
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	f7ff ff71 	bl	800c0c8 <__ssputs_r>
 800c1e6:	3001      	adds	r0, #1
 800c1e8:	f000 80a4 	beq.w	800c334 <_svfiprintf_r+0x1b8>
 800c1ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ee:	4453      	add	r3, sl
 800c1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c1f2:	783b      	ldrb	r3, [r7, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f000 809d 	beq.w	800c334 <_svfiprintf_r+0x1b8>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c204:	9304      	str	r3, [sp, #16]
 800c206:	9307      	str	r3, [sp, #28]
 800c208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c20c:	931a      	str	r3, [sp, #104]	; 0x68
 800c20e:	462f      	mov	r7, r5
 800c210:	2205      	movs	r2, #5
 800c212:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c216:	4850      	ldr	r0, [pc, #320]	; (800c358 <_svfiprintf_r+0x1dc>)
 800c218:	f7f3 fff2 	bl	8000200 <memchr>
 800c21c:	9b04      	ldr	r3, [sp, #16]
 800c21e:	b9d0      	cbnz	r0, 800c256 <_svfiprintf_r+0xda>
 800c220:	06d9      	lsls	r1, r3, #27
 800c222:	bf44      	itt	mi
 800c224:	2220      	movmi	r2, #32
 800c226:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c22a:	071a      	lsls	r2, r3, #28
 800c22c:	bf44      	itt	mi
 800c22e:	222b      	movmi	r2, #43	; 0x2b
 800c230:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c234:	782a      	ldrb	r2, [r5, #0]
 800c236:	2a2a      	cmp	r2, #42	; 0x2a
 800c238:	d015      	beq.n	800c266 <_svfiprintf_r+0xea>
 800c23a:	9a07      	ldr	r2, [sp, #28]
 800c23c:	462f      	mov	r7, r5
 800c23e:	2000      	movs	r0, #0
 800c240:	250a      	movs	r5, #10
 800c242:	4639      	mov	r1, r7
 800c244:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c248:	3b30      	subs	r3, #48	; 0x30
 800c24a:	2b09      	cmp	r3, #9
 800c24c:	d94d      	bls.n	800c2ea <_svfiprintf_r+0x16e>
 800c24e:	b1b8      	cbz	r0, 800c280 <_svfiprintf_r+0x104>
 800c250:	e00f      	b.n	800c272 <_svfiprintf_r+0xf6>
 800c252:	462f      	mov	r7, r5
 800c254:	e7b8      	b.n	800c1c8 <_svfiprintf_r+0x4c>
 800c256:	4a40      	ldr	r2, [pc, #256]	; (800c358 <_svfiprintf_r+0x1dc>)
 800c258:	1a80      	subs	r0, r0, r2
 800c25a:	fa0b f000 	lsl.w	r0, fp, r0
 800c25e:	4318      	orrs	r0, r3
 800c260:	9004      	str	r0, [sp, #16]
 800c262:	463d      	mov	r5, r7
 800c264:	e7d3      	b.n	800c20e <_svfiprintf_r+0x92>
 800c266:	9a03      	ldr	r2, [sp, #12]
 800c268:	1d11      	adds	r1, r2, #4
 800c26a:	6812      	ldr	r2, [r2, #0]
 800c26c:	9103      	str	r1, [sp, #12]
 800c26e:	2a00      	cmp	r2, #0
 800c270:	db01      	blt.n	800c276 <_svfiprintf_r+0xfa>
 800c272:	9207      	str	r2, [sp, #28]
 800c274:	e004      	b.n	800c280 <_svfiprintf_r+0x104>
 800c276:	4252      	negs	r2, r2
 800c278:	f043 0302 	orr.w	r3, r3, #2
 800c27c:	9207      	str	r2, [sp, #28]
 800c27e:	9304      	str	r3, [sp, #16]
 800c280:	783b      	ldrb	r3, [r7, #0]
 800c282:	2b2e      	cmp	r3, #46	; 0x2e
 800c284:	d10c      	bne.n	800c2a0 <_svfiprintf_r+0x124>
 800c286:	787b      	ldrb	r3, [r7, #1]
 800c288:	2b2a      	cmp	r3, #42	; 0x2a
 800c28a:	d133      	bne.n	800c2f4 <_svfiprintf_r+0x178>
 800c28c:	9b03      	ldr	r3, [sp, #12]
 800c28e:	1d1a      	adds	r2, r3, #4
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	9203      	str	r2, [sp, #12]
 800c294:	2b00      	cmp	r3, #0
 800c296:	bfb8      	it	lt
 800c298:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c29c:	3702      	adds	r7, #2
 800c29e:	9305      	str	r3, [sp, #20]
 800c2a0:	4d2e      	ldr	r5, [pc, #184]	; (800c35c <_svfiprintf_r+0x1e0>)
 800c2a2:	7839      	ldrb	r1, [r7, #0]
 800c2a4:	2203      	movs	r2, #3
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	f7f3 ffaa 	bl	8000200 <memchr>
 800c2ac:	b138      	cbz	r0, 800c2be <_svfiprintf_r+0x142>
 800c2ae:	2340      	movs	r3, #64	; 0x40
 800c2b0:	1b40      	subs	r0, r0, r5
 800c2b2:	fa03 f000 	lsl.w	r0, r3, r0
 800c2b6:	9b04      	ldr	r3, [sp, #16]
 800c2b8:	4303      	orrs	r3, r0
 800c2ba:	3701      	adds	r7, #1
 800c2bc:	9304      	str	r3, [sp, #16]
 800c2be:	7839      	ldrb	r1, [r7, #0]
 800c2c0:	4827      	ldr	r0, [pc, #156]	; (800c360 <_svfiprintf_r+0x1e4>)
 800c2c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2c6:	2206      	movs	r2, #6
 800c2c8:	1c7e      	adds	r6, r7, #1
 800c2ca:	f7f3 ff99 	bl	8000200 <memchr>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d038      	beq.n	800c344 <_svfiprintf_r+0x1c8>
 800c2d2:	4b24      	ldr	r3, [pc, #144]	; (800c364 <_svfiprintf_r+0x1e8>)
 800c2d4:	bb13      	cbnz	r3, 800c31c <_svfiprintf_r+0x1a0>
 800c2d6:	9b03      	ldr	r3, [sp, #12]
 800c2d8:	3307      	adds	r3, #7
 800c2da:	f023 0307 	bic.w	r3, r3, #7
 800c2de:	3308      	adds	r3, #8
 800c2e0:	9303      	str	r3, [sp, #12]
 800c2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e4:	444b      	add	r3, r9
 800c2e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c2e8:	e76d      	b.n	800c1c6 <_svfiprintf_r+0x4a>
 800c2ea:	fb05 3202 	mla	r2, r5, r2, r3
 800c2ee:	2001      	movs	r0, #1
 800c2f0:	460f      	mov	r7, r1
 800c2f2:	e7a6      	b.n	800c242 <_svfiprintf_r+0xc6>
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	3701      	adds	r7, #1
 800c2f8:	9305      	str	r3, [sp, #20]
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	250a      	movs	r5, #10
 800c2fe:	4638      	mov	r0, r7
 800c300:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c304:	3a30      	subs	r2, #48	; 0x30
 800c306:	2a09      	cmp	r2, #9
 800c308:	d903      	bls.n	800c312 <_svfiprintf_r+0x196>
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d0c8      	beq.n	800c2a0 <_svfiprintf_r+0x124>
 800c30e:	9105      	str	r1, [sp, #20]
 800c310:	e7c6      	b.n	800c2a0 <_svfiprintf_r+0x124>
 800c312:	fb05 2101 	mla	r1, r5, r1, r2
 800c316:	2301      	movs	r3, #1
 800c318:	4607      	mov	r7, r0
 800c31a:	e7f0      	b.n	800c2fe <_svfiprintf_r+0x182>
 800c31c:	ab03      	add	r3, sp, #12
 800c31e:	9300      	str	r3, [sp, #0]
 800c320:	4622      	mov	r2, r4
 800c322:	4b11      	ldr	r3, [pc, #68]	; (800c368 <_svfiprintf_r+0x1ec>)
 800c324:	a904      	add	r1, sp, #16
 800c326:	4640      	mov	r0, r8
 800c328:	f7fc fdc8 	bl	8008ebc <_printf_float>
 800c32c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c330:	4681      	mov	r9, r0
 800c332:	d1d6      	bne.n	800c2e2 <_svfiprintf_r+0x166>
 800c334:	89a3      	ldrh	r3, [r4, #12]
 800c336:	065b      	lsls	r3, r3, #25
 800c338:	f53f af35 	bmi.w	800c1a6 <_svfiprintf_r+0x2a>
 800c33c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c33e:	b01d      	add	sp, #116	; 0x74
 800c340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c344:	ab03      	add	r3, sp, #12
 800c346:	9300      	str	r3, [sp, #0]
 800c348:	4622      	mov	r2, r4
 800c34a:	4b07      	ldr	r3, [pc, #28]	; (800c368 <_svfiprintf_r+0x1ec>)
 800c34c:	a904      	add	r1, sp, #16
 800c34e:	4640      	mov	r0, r8
 800c350:	f7fd f86a 	bl	8009428 <_printf_i>
 800c354:	e7ea      	b.n	800c32c <_svfiprintf_r+0x1b0>
 800c356:	bf00      	nop
 800c358:	0800c73c 	.word	0x0800c73c
 800c35c:	0800c742 	.word	0x0800c742
 800c360:	0800c746 	.word	0x0800c746
 800c364:	08008ebd 	.word	0x08008ebd
 800c368:	0800c0c9 	.word	0x0800c0c9

0800c36c <_sbrk_r>:
 800c36c:	b538      	push	{r3, r4, r5, lr}
 800c36e:	4c06      	ldr	r4, [pc, #24]	; (800c388 <_sbrk_r+0x1c>)
 800c370:	2300      	movs	r3, #0
 800c372:	4605      	mov	r5, r0
 800c374:	4608      	mov	r0, r1
 800c376:	6023      	str	r3, [r4, #0]
 800c378:	f7f6 fd02 	bl	8002d80 <_sbrk>
 800c37c:	1c43      	adds	r3, r0, #1
 800c37e:	d102      	bne.n	800c386 <_sbrk_r+0x1a>
 800c380:	6823      	ldr	r3, [r4, #0]
 800c382:	b103      	cbz	r3, 800c386 <_sbrk_r+0x1a>
 800c384:	602b      	str	r3, [r5, #0]
 800c386:	bd38      	pop	{r3, r4, r5, pc}
 800c388:	2000113c 	.word	0x2000113c

0800c38c <strncmp>:
 800c38c:	b510      	push	{r4, lr}
 800c38e:	b16a      	cbz	r2, 800c3ac <strncmp+0x20>
 800c390:	3901      	subs	r1, #1
 800c392:	1884      	adds	r4, r0, r2
 800c394:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c398:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d103      	bne.n	800c3a8 <strncmp+0x1c>
 800c3a0:	42a0      	cmp	r0, r4
 800c3a2:	d001      	beq.n	800c3a8 <strncmp+0x1c>
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d1f5      	bne.n	800c394 <strncmp+0x8>
 800c3a8:	1a98      	subs	r0, r3, r2
 800c3aa:	bd10      	pop	{r4, pc}
 800c3ac:	4610      	mov	r0, r2
 800c3ae:	e7fc      	b.n	800c3aa <strncmp+0x1e>

0800c3b0 <__ascii_wctomb>:
 800c3b0:	b149      	cbz	r1, 800c3c6 <__ascii_wctomb+0x16>
 800c3b2:	2aff      	cmp	r2, #255	; 0xff
 800c3b4:	bf85      	ittet	hi
 800c3b6:	238a      	movhi	r3, #138	; 0x8a
 800c3b8:	6003      	strhi	r3, [r0, #0]
 800c3ba:	700a      	strbls	r2, [r1, #0]
 800c3bc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c3c0:	bf98      	it	ls
 800c3c2:	2001      	movls	r0, #1
 800c3c4:	4770      	bx	lr
 800c3c6:	4608      	mov	r0, r1
 800c3c8:	4770      	bx	lr

0800c3ca <memmove>:
 800c3ca:	4288      	cmp	r0, r1
 800c3cc:	b510      	push	{r4, lr}
 800c3ce:	eb01 0302 	add.w	r3, r1, r2
 800c3d2:	d807      	bhi.n	800c3e4 <memmove+0x1a>
 800c3d4:	1e42      	subs	r2, r0, #1
 800c3d6:	4299      	cmp	r1, r3
 800c3d8:	d00a      	beq.n	800c3f0 <memmove+0x26>
 800c3da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3de:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c3e2:	e7f8      	b.n	800c3d6 <memmove+0xc>
 800c3e4:	4283      	cmp	r3, r0
 800c3e6:	d9f5      	bls.n	800c3d4 <memmove+0xa>
 800c3e8:	1881      	adds	r1, r0, r2
 800c3ea:	1ad2      	subs	r2, r2, r3
 800c3ec:	42d3      	cmn	r3, r2
 800c3ee:	d100      	bne.n	800c3f2 <memmove+0x28>
 800c3f0:	bd10      	pop	{r4, pc}
 800c3f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c3fa:	e7f7      	b.n	800c3ec <memmove+0x22>

0800c3fc <__malloc_lock>:
 800c3fc:	4770      	bx	lr

0800c3fe <__malloc_unlock>:
 800c3fe:	4770      	bx	lr

0800c400 <_realloc_r>:
 800c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c402:	4607      	mov	r7, r0
 800c404:	4614      	mov	r4, r2
 800c406:	460e      	mov	r6, r1
 800c408:	b921      	cbnz	r1, 800c414 <_realloc_r+0x14>
 800c40a:	4611      	mov	r1, r2
 800c40c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c410:	f7ff be00 	b.w	800c014 <_malloc_r>
 800c414:	b922      	cbnz	r2, 800c420 <_realloc_r+0x20>
 800c416:	f7ff fdaf 	bl	800bf78 <_free_r>
 800c41a:	4625      	mov	r5, r4
 800c41c:	4628      	mov	r0, r5
 800c41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c420:	f000 f814 	bl	800c44c <_malloc_usable_size_r>
 800c424:	42a0      	cmp	r0, r4
 800c426:	d20f      	bcs.n	800c448 <_realloc_r+0x48>
 800c428:	4621      	mov	r1, r4
 800c42a:	4638      	mov	r0, r7
 800c42c:	f7ff fdf2 	bl	800c014 <_malloc_r>
 800c430:	4605      	mov	r5, r0
 800c432:	2800      	cmp	r0, #0
 800c434:	d0f2      	beq.n	800c41c <_realloc_r+0x1c>
 800c436:	4631      	mov	r1, r6
 800c438:	4622      	mov	r2, r4
 800c43a:	f7ff f985 	bl	800b748 <memcpy>
 800c43e:	4631      	mov	r1, r6
 800c440:	4638      	mov	r0, r7
 800c442:	f7ff fd99 	bl	800bf78 <_free_r>
 800c446:	e7e9      	b.n	800c41c <_realloc_r+0x1c>
 800c448:	4635      	mov	r5, r6
 800c44a:	e7e7      	b.n	800c41c <_realloc_r+0x1c>

0800c44c <_malloc_usable_size_r>:
 800c44c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c450:	1f18      	subs	r0, r3, #4
 800c452:	2b00      	cmp	r3, #0
 800c454:	bfbc      	itt	lt
 800c456:	580b      	ldrlt	r3, [r1, r0]
 800c458:	18c0      	addlt	r0, r0, r3
 800c45a:	4770      	bx	lr

0800c45c <_init>:
 800c45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c45e:	bf00      	nop
 800c460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c462:	bc08      	pop	{r3}
 800c464:	469e      	mov	lr, r3
 800c466:	4770      	bx	lr

0800c468 <_fini>:
 800c468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c46a:	bf00      	nop
 800c46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c46e:	bc08      	pop	{r3}
 800c470:	469e      	mov	lr, r3
 800c472:	4770      	bx	lr
