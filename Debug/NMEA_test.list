
NMEA_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800c438  0800c438  0001c438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7f8  0800c7f8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7f8  0800c7f8  0001c7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c800  0800c800  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c800  0800c800  0001c800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c804  0800c804  0001c804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f60  200001dc  0800c9e4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000113c  0800c9e4  0002113c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de2b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036d6  00000000  00000000  0003e037  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001778  00000000  00000000  00041710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015d0  00000000  00000000  00042e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002914e  00000000  00000000  00044458  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012fc8  00000000  00000000  0006d5a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f404b  00000000  00000000  0008056e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001745b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070b8  00000000  00000000  00174634  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c41c 	.word	0x0800c41c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800c41c 	.word	0x0800c41c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f023 030f 	bic.w	r3, r3, #15
 8000fb8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	f043 030c 	orr.w	r3, r3, #12
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	f043 030c 	orr.w	r3, r3, #12
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000fde:	7bbb      	ldrb	r3, [r7, #14]
 8000fe0:	f043 0308 	orr.w	r3, r3, #8
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000fe8:	f107 0208 	add.w	r2, r7, #8
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	214e      	movs	r1, #78	; 0x4e
 8000ff4:	4803      	ldr	r0, [pc, #12]	; (8001004 <lcd_send_cmd+0x5c>)
 8000ff6:	f002 ff71 	bl	8003edc <HAL_I2C_Master_Transmit>
}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000ae0 	.word	0x20000ae0

08001008 <lcd_send_data>:
char data_to_sent[32*4]={0};	/**< i2c Tx buffer*/
uint8_t id;		/**< counter of sending message characters. It increments after every 4 sign added to Tx buffer, and zeros when all characters are added*/
void lcd_send_data (char data)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	f023 030f 	bic.w	r3, r3, #15
 8001018:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	f043 030d 	orr.w	r3, r3, #13
 8001026:	b2db      	uxtb	r3, r3
 8001028:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	f043 0309 	orr.w	r3, r3, #9
 8001030:	b2db      	uxtb	r3, r3
 8001032:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	f043 030d 	orr.w	r3, r3, #13
 800103a:	b2db      	uxtb	r3, r3
 800103c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	f043 0309 	orr.w	r3, r3, #9
 8001044:	b2db      	uxtb	r3, r3
 8001046:	72fb      	strb	r3, [r7, #11]
	data_to_sent[0+id*4]=data_t[0];
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <lcd_send_data+0x90>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	7a39      	ldrb	r1, [r7, #8]
 8001050:	4a12      	ldr	r2, [pc, #72]	; (800109c <lcd_send_data+0x94>)
 8001052:	54d1      	strb	r1, [r2, r3]
	data_to_sent[1+id*4]=data_t[1];
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <lcd_send_data+0x90>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	3301      	adds	r3, #1
 800105c:	7a79      	ldrb	r1, [r7, #9]
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <lcd_send_data+0x94>)
 8001060:	54d1      	strb	r1, [r2, r3]
	data_to_sent[2+id*4]=data_t[2];
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <lcd_send_data+0x90>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	7ab9      	ldrb	r1, [r7, #10]
 800106c:	4a0b      	ldr	r2, [pc, #44]	; (800109c <lcd_send_data+0x94>)
 800106e:	54d1      	strb	r1, [r2, r3]
	data_to_sent[3+id*4]=data_t[3];
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <lcd_send_data+0x90>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	3303      	adds	r3, #3
 8001078:	7af9      	ldrb	r1, [r7, #11]
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <lcd_send_data+0x94>)
 800107c:	54d1      	strb	r1, [r2, r3]
	++id;
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <lcd_send_data+0x90>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <lcd_send_data+0x90>)
 8001088:	701a      	strb	r2, [r3, #0]
	//HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000998 	.word	0x20000998
 800109c:	200001f8 	.word	0x200001f8

080010a0 <lcd_put_cur>:
	lcd_send_cmd (0x80);
	lcd_send_cmd(1);
}

void lcd_put_cur(int row, int col)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
    switch (row)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <lcd_put_cur+0x16>
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d005      	beq.n	80010c0 <lcd_put_cur+0x20>
 80010b4:	e009      	b.n	80010ca <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010bc:	603b      	str	r3, [r7, #0]
            break;
 80010be:	e004      	b.n	80010ca <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010c6:	603b      	str	r3, [r7, #0]
            break;
 80010c8:	bf00      	nop
    }

    lcd_send_cmd (col);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff6a 	bl	8000fa8 <lcd_send_cmd>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <lcd_init>:


void lcd_init (void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80010e0:	2032      	movs	r0, #50	; 0x32
 80010e2:	f001 ffb9 	bl	8003058 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010e6:	2030      	movs	r0, #48	; 0x30
 80010e8:	f7ff ff5e 	bl	8000fa8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80010ec:	2005      	movs	r0, #5
 80010ee:	f001 ffb3 	bl	8003058 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010f2:	2030      	movs	r0, #48	; 0x30
 80010f4:	f7ff ff58 	bl	8000fa8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80010f8:	2001      	movs	r0, #1
 80010fa:	f001 ffad 	bl	8003058 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010fe:	2030      	movs	r0, #48	; 0x30
 8001100:	f7ff ff52 	bl	8000fa8 <lcd_send_cmd>
	HAL_Delay(10);
 8001104:	200a      	movs	r0, #10
 8001106:	f001 ffa7 	bl	8003058 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800110a:	2020      	movs	r0, #32
 800110c:	f7ff ff4c 	bl	8000fa8 <lcd_send_cmd>
	HAL_Delay(10);
 8001110:	200a      	movs	r0, #10
 8001112:	f001 ffa1 	bl	8003058 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001116:	2028      	movs	r0, #40	; 0x28
 8001118:	f7ff ff46 	bl	8000fa8 <lcd_send_cmd>
	HAL_Delay(1);
 800111c:	2001      	movs	r0, #1
 800111e:	f001 ff9b 	bl	8003058 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001122:	2008      	movs	r0, #8
 8001124:	f7ff ff40 	bl	8000fa8 <lcd_send_cmd>
	HAL_Delay(1);
 8001128:	2001      	movs	r0, #1
 800112a:	f001 ff95 	bl	8003058 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800112e:	2001      	movs	r0, #1
 8001130:	f7ff ff3a 	bl	8000fa8 <lcd_send_cmd>
	HAL_Delay(1);
 8001134:	2001      	movs	r0, #1
 8001136:	f001 ff8f 	bl	8003058 <HAL_Delay>
	HAL_Delay(1);
 800113a:	2001      	movs	r0, #1
 800113c:	f001 ff8c 	bl	8003058 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001140:	2006      	movs	r0, #6
 8001142:	f7ff ff31 	bl	8000fa8 <lcd_send_cmd>
	HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f001 ff86 	bl	8003058 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800114c:	200c      	movs	r0, #12
 800114e:	f7ff ff2b 	bl	8000fa8 <lcd_send_cmd>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <lcd_send_string>:
void lcd_send_string (char *str)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	id=0;
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <lcd_send_string+0x44>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
	while (*str) lcd_send_data (*str++);
 8001166:	e006      	b.n	8001176 <lcd_send_string+0x1e>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff49 	bl	8001008 <lcd_send_data>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f4      	bne.n	8001168 <lcd_send_string+0x10>
	HAL_I2C_Master_Transmit_IT (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_to_sent, strlen(data_to_sent));
 800117e:	4808      	ldr	r0, [pc, #32]	; (80011a0 <lcd_send_string+0x48>)
 8001180:	f7ff f830 	bl	80001e4 <strlen>
 8001184:	4603      	mov	r3, r0
 8001186:	b29b      	uxth	r3, r3
 8001188:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <lcd_send_string+0x48>)
 800118a:	214e      	movs	r1, #78	; 0x4e
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <lcd_send_string+0x4c>)
 800118e:	f002 ff99 	bl	80040c4 <HAL_I2C_Master_Transmit_IT>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000998 	.word	0x20000998
 80011a0:	200001f8 	.word	0x200001f8
 80011a4:	20000ae0 	.word	0x20000ae0

080011a8 <HAL_I2C_MasterTxCpltCallback>:

/**
 * HAL_I2C_MasterTxCpltCallback is called when i2c transmission is completed and zeros Tx buffer.
 * @param[in]	hi2c	pointer to i2c handle structure
 */
void HAL_I2C_MasterTxCpltCallback (I2C_HandleTypeDef * hi2c){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	if (hi2c==&hi2c1){
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_I2C_MasterTxCpltCallback+0x24>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d104      	bne.n	80011c2 <HAL_I2C_MasterTxCpltCallback+0x1a>
		memset(&data_to_sent,0,32*4);
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	2100      	movs	r1, #0
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80011be:	f007 fdbf 	bl	8008d40 <memset>
	}
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000ae0 	.word	0x20000ae0
 80011d0:	200001f8 	.word	0x200001f8

080011d4 <default_CB>:
static float speed_fall_barrier;	/**< Barrier of decreasing speed*/
/**
 * default_CB() is a default function for all the CB pointers which do nothing.\n
 * The unregistering CB pointer is setting to pointer of this function.  
 */
static void default_CB(void){}
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <NMEA_CB_register>:

NMEA_status NMEA_CB_register(void (*CB_fun)(void),NMEA_CB_ID CB_id,float barrier){
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	460b      	mov	r3, r1
 80011ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80011f2:	72fb      	strb	r3, [r7, #11]
	switch (CB_id) {
 80011f4:	7afb      	ldrb	r3, [r7, #11]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d014      	beq.n	8001224 <NMEA_CB_register+0x40>
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d023      	beq.n	8001246 <NMEA_CB_register+0x62>
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d132      	bne.n	8001268 <NMEA_CB_register+0x84>
		case SPEED_CHANGE_CB:
			if (barrier < 0) return NMEA_WRONG_DATA;
 8001202:	edd7 7a01 	vldr	s15, [r7, #4]
 8001206:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120e:	d501      	bpl.n	8001214 <NMEA_CB_register+0x30>
 8001210:	2303      	movs	r3, #3
 8001212:	e02a      	b.n	800126a <NMEA_CB_register+0x86>
			speed_change_CB_fun_ptr = CB_fun;
 8001214:	4a18      	ldr	r2, [pc, #96]	; (8001278 <NMEA_CB_register+0x94>)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6013      	str	r3, [r2, #0]
			speed_change_tolerance = barrier;
 800121a:	4a18      	ldr	r2, [pc, #96]	; (800127c <NMEA_CB_register+0x98>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6013      	str	r3, [r2, #0]
			return NMEA_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	e022      	b.n	800126a <NMEA_CB_register+0x86>
		case SPEED_RISE_BARRIER_CB:
			if (barrier < 0) return NMEA_WRONG_DATA;
 8001224:	edd7 7a01 	vldr	s15, [r7, #4]
 8001228:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	d501      	bpl.n	8001236 <NMEA_CB_register+0x52>
 8001232:	2303      	movs	r3, #3
 8001234:	e019      	b.n	800126a <NMEA_CB_register+0x86>
			speed_raise_barrier_CB_fun_ptr = CB_fun;
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <NMEA_CB_register+0x9c>)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6013      	str	r3, [r2, #0]
			speed_raise_barrier = barrier;
 800123c:	4a11      	ldr	r2, [pc, #68]	; (8001284 <NMEA_CB_register+0xa0>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
			return NMEA_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e011      	b.n	800126a <NMEA_CB_register+0x86>
		case SPEED_FALL_BARRIER_CB:
			if (barrier < 0) return NMEA_WRONG_DATA;
 8001246:	edd7 7a01 	vldr	s15, [r7, #4]
 800124a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800124e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001252:	d501      	bpl.n	8001258 <NMEA_CB_register+0x74>
 8001254:	2303      	movs	r3, #3
 8001256:	e008      	b.n	800126a <NMEA_CB_register+0x86>
			speed_fall_barrier_CB_fun_ptr = CB_fun;
 8001258:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <NMEA_CB_register+0xa4>)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6013      	str	r3, [r2, #0]
			speed_fall_barrier = barrier;
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <NMEA_CB_register+0xa8>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6013      	str	r3, [r2, #0]
			return NMEA_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	e000      	b.n	800126a <NMEA_CB_register+0x86>
		default:
			return NMEA_WRONG_CB_ID;
 8001268:	2304      	movs	r3, #4
	}
	return NMEA_ERROR;
}
 800126a:	4618      	mov	r0, r3
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000904 	.word	0x20000904
 800127c:	20000908 	.word	0x20000908
 8001280:	2000090c 	.word	0x2000090c
 8001284:	20000910 	.word	0x20000910
 8001288:	20000914 	.word	0x20000914
 800128c:	20000918 	.word	0x20000918

08001290 <NMEA_CB_unregister>:

NMEA_status NMEA_CB_unregister(NMEA_CB_ID CB_id){
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
	switch (CB_id) {
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d00c      	beq.n	80012ba <NMEA_CB_unregister+0x2a>
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d013      	beq.n	80012cc <NMEA_CB_unregister+0x3c>
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d11a      	bne.n	80012de <NMEA_CB_unregister+0x4e>
		case SPEED_CHANGE_CB:
			speed_change_tolerance = 0;
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <NMEA_CB_unregister+0x5c>)
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
			speed_change_CB_fun_ptr = default_CB;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <NMEA_CB_unregister+0x60>)
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <NMEA_CB_unregister+0x64>)
 80012b4:	601a      	str	r2, [r3, #0]
			return NMEA_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e012      	b.n	80012e0 <NMEA_CB_unregister+0x50>
		case SPEED_RISE_BARRIER_CB:
			speed_raise_barrier = 0;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <NMEA_CB_unregister+0x68>)
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
			speed_raise_barrier_CB_fun_ptr = default_CB;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <NMEA_CB_unregister+0x6c>)
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <NMEA_CB_unregister+0x64>)
 80012c6:	601a      	str	r2, [r3, #0]
			return NMEA_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	e009      	b.n	80012e0 <NMEA_CB_unregister+0x50>
		case SPEED_FALL_BARRIER_CB:
			speed_fall_barrier = 0;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <NMEA_CB_unregister+0x70>)
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
			speed_fall_barrier_CB_fun_ptr = default_CB;
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <NMEA_CB_unregister+0x74>)
 80012d6:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <NMEA_CB_unregister+0x64>)
 80012d8:	601a      	str	r2, [r3, #0]
			return NMEA_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <NMEA_CB_unregister+0x50>
		default:
			return NMEA_WRONG_CB_ID;
 80012de:	2304      	movs	r3, #4
	}
	return NMEA_ERROR;
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	20000908 	.word	0x20000908
 80012f0:	20000904 	.word	0x20000904
 80012f4:	080011d5 	.word	0x080011d5
 80012f8:	20000910 	.word	0x20000910
 80012fc:	2000090c 	.word	0x2000090c
 8001300:	20000918 	.word	0x20000918
 8001304:	20000914 	.word	0x20000914

08001308 <NMEA_parser>:
 * NMEA_parser is function which parse single correct NMEA message.\n
 * Inside this function all known types of NMEA message ate recognized and nmea_data structure fields are setting.\n
 * There is also implemented mechanism of recognizing specified events and calling corresponding to them callbacks.
 * @param[in]	message	pointer to buffer storing NMEA message.
 */
static void 	NMEA_parser(char *message){
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b0b2      	sub	sp, #200	; 0xc8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

	NMEA_data previous_data = nmea_data;
 8001310:	4bb8      	ldr	r3, [pc, #736]	; (80015f4 <NMEA_parser+0x2ec>)
 8001312:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001316:	461d      	mov	r5, r3
 8001318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800131c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001324:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001328:	e884 0003 	stmia.w	r4, {r0, r1}

	int num = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	char *fields[32]={NULL};
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f007 fd00 	bl	8008d40 <memset>
	fields[num++]=message;
 8001340:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001350:	4413      	add	r3, r2
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 8001358:	e010      	b.n	800137c <NMEA_parser+0x74>
		*message++ = 0;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
		fields[num++]=message;
 8001364:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001368:	1c5a      	adds	r2, r3, #1
 800136a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001374:	4413      	add	r3, r2
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 800137c:	212c      	movs	r1, #44	; 0x2c
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f008 f962 	bl	8009648 <strchr>
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1e6      	bne.n	800135a <NMEA_parser+0x52>
	}

	if(strcmp(fields[0],"$GPGLL")==0){
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	499a      	ldr	r1, [pc, #616]	; (80015f8 <NMEA_parser+0x2f0>)
 8001390:	4618      	mov	r0, r3
 8001392:	f7fe ff1d 	bl	80001d0 <strcmp>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d122      	bne.n	80013e2 <NMEA_parser+0xda>

		nmea_data.latitude = atof(fields[1]);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4618      	mov	r0, r3
 80013a0:	f007 fc9c 	bl	8008cdc <atof>
 80013a4:	ec54 3b10 	vmov	r3, r4, d0
 80013a8:	4618      	mov	r0, r3
 80013aa:	4621      	mov	r1, r4
 80013ac:	f7ff fc2c 	bl	8000c08 <__aeabi_d2f>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b90      	ldr	r3, [pc, #576]	; (80015f4 <NMEA_parser+0x2ec>)
 80013b4:	609a      	str	r2, [r3, #8]
		nmea_data.latitude_direction = *fields[2];
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	781a      	ldrb	r2, [r3, #0]
 80013ba:	4b8e      	ldr	r3, [pc, #568]	; (80015f4 <NMEA_parser+0x2ec>)
 80013bc:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[3]);
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f007 fc8b 	bl	8008cdc <atof>
 80013c6:	ec54 3b10 	vmov	r3, r4, d0
 80013ca:	4618      	mov	r0, r3
 80013cc:	4621      	mov	r1, r4
 80013ce:	f7ff fc1b 	bl	8000c08 <__aeabi_d2f>
 80013d2:	4602      	mov	r2, r0
 80013d4:	4b87      	ldr	r3, [pc, #540]	; (80015f4 <NMEA_parser+0x2ec>)
 80013d6:	611a      	str	r2, [r3, #16]
		nmea_data.longitude_direction = *fields[4];
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	4b85      	ldr	r3, [pc, #532]	; (80015f4 <NMEA_parser+0x2ec>)
 80013de:	751a      	strb	r2, [r3, #20]
 80013e0:	e125      	b.n	800162e <NMEA_parser+0x326>

	}else if(strcmp(fields[0],"$GPRMC")==0){
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4985      	ldr	r1, [pc, #532]	; (80015fc <NMEA_parser+0x2f4>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7fe fef2 	bl	80001d0 <strcmp>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d136      	bne.n	8001460 <NMEA_parser+0x158>

		nmea_data.UTC_time = atof(fields[1]);
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f007 fc71 	bl	8008cdc <atof>
 80013fa:	ec54 3b10 	vmov	r3, r4, d0
 80013fe:	4618      	mov	r0, r3
 8001400:	4621      	mov	r1, r4
 8001402:	f7ff fc01 	bl	8000c08 <__aeabi_d2f>
 8001406:	4602      	mov	r2, r0
 8001408:	4b7a      	ldr	r3, [pc, #488]	; (80015f4 <NMEA_parser+0x2ec>)
 800140a:	601a      	str	r2, [r3, #0]
		nmea_data.UT_date = atoi(fields[9]);
 800140c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800140e:	4618      	mov	r0, r3
 8001410:	f007 fc67 	bl	8008ce2 <atoi>
 8001414:	4602      	mov	r2, r0
 8001416:	4b77      	ldr	r3, [pc, #476]	; (80015f4 <NMEA_parser+0x2ec>)
 8001418:	605a      	str	r2, [r3, #4]

		nmea_data.latitude = atof(fields[3]);
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4618      	mov	r0, r3
 800141e:	f007 fc5d 	bl	8008cdc <atof>
 8001422:	ec54 3b10 	vmov	r3, r4, d0
 8001426:	4618      	mov	r0, r3
 8001428:	4621      	mov	r1, r4
 800142a:	f7ff fbed 	bl	8000c08 <__aeabi_d2f>
 800142e:	4602      	mov	r2, r0
 8001430:	4b70      	ldr	r3, [pc, #448]	; (80015f4 <NMEA_parser+0x2ec>)
 8001432:	609a      	str	r2, [r3, #8]
		nmea_data.latitude_direction = *fields[4];
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	4b6e      	ldr	r3, [pc, #440]	; (80015f4 <NMEA_parser+0x2ec>)
 800143a:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[5]);
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	4618      	mov	r0, r3
 8001440:	f007 fc4c 	bl	8008cdc <atof>
 8001444:	ec54 3b10 	vmov	r3, r4, d0
 8001448:	4618      	mov	r0, r3
 800144a:	4621      	mov	r1, r4
 800144c:	f7ff fbdc 	bl	8000c08 <__aeabi_d2f>
 8001450:	4602      	mov	r2, r0
 8001452:	4b68      	ldr	r3, [pc, #416]	; (80015f4 <NMEA_parser+0x2ec>)
 8001454:	611a      	str	r2, [r3, #16]
		nmea_data.longitude_direction = *fields[6];
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	781a      	ldrb	r2, [r3, #0]
 800145a:	4b66      	ldr	r3, [pc, #408]	; (80015f4 <NMEA_parser+0x2ec>)
 800145c:	751a      	strb	r2, [r3, #20]
 800145e:	e0e6      	b.n	800162e <NMEA_parser+0x326>


	}else if(strcmp(fields[0],"$GPVTG")==0){
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4967      	ldr	r1, [pc, #412]	; (8001600 <NMEA_parser+0x2f8>)
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe feb3 	bl	80001d0 <strcmp>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d116      	bne.n	800149e <NMEA_parser+0x196>

		nmea_data.speed_knots =  atoi(fields[5]);
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	4618      	mov	r0, r3
 8001474:	f007 fc35 	bl	8008ce2 <atoi>
 8001478:	ee07 0a90 	vmov	s15, r0
 800147c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001480:	4b5c      	ldr	r3, [pc, #368]	; (80015f4 <NMEA_parser+0x2ec>)
 8001482:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		nmea_data.speed_kmph =  atoi(fields[7]);
 8001486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001488:	4618      	mov	r0, r3
 800148a:	f007 fc2a 	bl	8008ce2 <atoi>
 800148e:	ee07 0a90 	vmov	s15, r0
 8001492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001496:	4b57      	ldr	r3, [pc, #348]	; (80015f4 <NMEA_parser+0x2ec>)
 8001498:	edc3 7a08 	vstr	s15, [r3, #32]
 800149c:	e0c7      	b.n	800162e <NMEA_parser+0x326>

	}else if(strcmp(fields[0],"$GPGGA")==0){
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4958      	ldr	r1, [pc, #352]	; (8001604 <NMEA_parser+0x2fc>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7fe fe94 	bl	80001d0 <strcmp>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d168      	bne.n	8001580 <NMEA_parser+0x278>

		nmea_data.UTC_time = atof(fields[1]);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f007 fc13 	bl	8008cdc <atof>
 80014b6:	ec54 3b10 	vmov	r3, r4, d0
 80014ba:	4618      	mov	r0, r3
 80014bc:	4621      	mov	r1, r4
 80014be:	f7ff fba3 	bl	8000c08 <__aeabi_d2f>
 80014c2:	4602      	mov	r2, r0
 80014c4:	4b4b      	ldr	r3, [pc, #300]	; (80015f4 <NMEA_parser+0x2ec>)
 80014c6:	601a      	str	r2, [r3, #0]

		nmea_data.latitude = atof(fields[2]);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f007 fc06 	bl	8008cdc <atof>
 80014d0:	ec54 3b10 	vmov	r3, r4, d0
 80014d4:	4618      	mov	r0, r3
 80014d6:	4621      	mov	r1, r4
 80014d8:	f7ff fb96 	bl	8000c08 <__aeabi_d2f>
 80014dc:	4602      	mov	r2, r0
 80014de:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <NMEA_parser+0x2ec>)
 80014e0:	609a      	str	r2, [r3, #8]
		nmea_data.latitude_direction = *fields[3];
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	781a      	ldrb	r2, [r3, #0]
 80014e6:	4b43      	ldr	r3, [pc, #268]	; (80015f4 <NMEA_parser+0x2ec>)
 80014e8:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[4]);
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f007 fbf5 	bl	8008cdc <atof>
 80014f2:	ec54 3b10 	vmov	r3, r4, d0
 80014f6:	4618      	mov	r0, r3
 80014f8:	4621      	mov	r1, r4
 80014fa:	f7ff fb85 	bl	8000c08 <__aeabi_d2f>
 80014fe:	4602      	mov	r2, r0
 8001500:	4b3c      	ldr	r3, [pc, #240]	; (80015f4 <NMEA_parser+0x2ec>)
 8001502:	611a      	str	r2, [r3, #16]
		nmea_data.longitude_direction = *fields[5];
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	781a      	ldrb	r2, [r3, #0]
 8001508:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <NMEA_parser+0x2ec>)
 800150a:	751a      	strb	r2, [r3, #20]

		nmea_data.fix = atoi(fields[6]);
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	4618      	mov	r0, r3
 8001510:	f007 fbe7 	bl	8008ce2 <atoi>
 8001514:	4603      	mov	r3, r0
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <NMEA_parser+0x2ec>)
 800151a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		nmea_data.sat_in_use = atoi(fields[7]);
 800151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001520:	4618      	mov	r0, r3
 8001522:	f007 fbde 	bl	8008ce2 <atoi>
 8001526:	4603      	mov	r3, r0
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <NMEA_parser+0x2ec>)
 800152c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		nmea_data.HDOP = atof(fields[8]);
 8001530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001532:	4618      	mov	r0, r3
 8001534:	f007 fbd2 	bl	8008cdc <atof>
 8001538:	ec54 3b10 	vmov	r3, r4, d0
 800153c:	4618      	mov	r0, r3
 800153e:	4621      	mov	r1, r4
 8001540:	f7ff fb62 	bl	8000c08 <__aeabi_d2f>
 8001544:	4602      	mov	r2, r0
 8001546:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <NMEA_parser+0x2ec>)
 8001548:	631a      	str	r2, [r3, #48]	; 0x30

		nmea_data.altitude = atof(fields[9]);
 800154a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800154c:	4618      	mov	r0, r3
 800154e:	f007 fbc5 	bl	8008cdc <atof>
 8001552:	ec54 3b10 	vmov	r3, r4, d0
 8001556:	4618      	mov	r0, r3
 8001558:	4621      	mov	r1, r4
 800155a:	f7ff fb55 	bl	8000c08 <__aeabi_d2f>
 800155e:	4602      	mov	r2, r0
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <NMEA_parser+0x2ec>)
 8001562:	619a      	str	r2, [r3, #24]
		nmea_data.geoidal_separation = atof(fields[11]);
 8001564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001566:	4618      	mov	r0, r3
 8001568:	f007 fbb8 	bl	8008cdc <atof>
 800156c:	ec54 3b10 	vmov	r3, r4, d0
 8001570:	4618      	mov	r0, r3
 8001572:	4621      	mov	r1, r4
 8001574:	f7ff fb48 	bl	8000c08 <__aeabi_d2f>
 8001578:	4602      	mov	r2, r0
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <NMEA_parser+0x2ec>)
 800157c:	61da      	str	r2, [r3, #28]
 800157e:	e056      	b.n	800162e <NMEA_parser+0x326>

	}else if(strcmp(fields[0],"$GPGSA")==0){
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4921      	ldr	r1, [pc, #132]	; (8001608 <NMEA_parser+0x300>)
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe fe23 	bl	80001d0 <strcmp>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d13d      	bne.n	800160c <NMEA_parser+0x304>

		nmea_data.fix_mode = atoi(fields[2]);
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	4618      	mov	r0, r3
 8001594:	f007 fba5 	bl	8008ce2 <atoi>
 8001598:	4603      	mov	r3, r0
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <NMEA_parser+0x2ec>)
 800159e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

		nmea_data.PDOP = atof(fields[15]);
 80015a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015a4:	4618      	mov	r0, r3
 80015a6:	f007 fb99 	bl	8008cdc <atof>
 80015aa:	ec54 3b10 	vmov	r3, r4, d0
 80015ae:	4618      	mov	r0, r3
 80015b0:	4621      	mov	r1, r4
 80015b2:	f7ff fb29 	bl	8000c08 <__aeabi_d2f>
 80015b6:	4602      	mov	r2, r0
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <NMEA_parser+0x2ec>)
 80015ba:	62da      	str	r2, [r3, #44]	; 0x2c
		nmea_data.HDOP = atof(fields[16]);
 80015bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015be:	4618      	mov	r0, r3
 80015c0:	f007 fb8c 	bl	8008cdc <atof>
 80015c4:	ec54 3b10 	vmov	r3, r4, d0
 80015c8:	4618      	mov	r0, r3
 80015ca:	4621      	mov	r1, r4
 80015cc:	f7ff fb1c 	bl	8000c08 <__aeabi_d2f>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <NMEA_parser+0x2ec>)
 80015d4:	631a      	str	r2, [r3, #48]	; 0x30
		nmea_data.VDOP = atof(fields[17]);
 80015d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015d8:	4618      	mov	r0, r3
 80015da:	f007 fb7f 	bl	8008cdc <atof>
 80015de:	ec54 3b10 	vmov	r3, r4, d0
 80015e2:	4618      	mov	r0, r3
 80015e4:	4621      	mov	r1, r4
 80015e6:	f7ff fb0f 	bl	8000c08 <__aeabi_d2f>
 80015ea:	4602      	mov	r2, r0
 80015ec:	4b01      	ldr	r3, [pc, #4]	; (80015f4 <NMEA_parser+0x2ec>)
 80015ee:	635a      	str	r2, [r3, #52]	; 0x34
 80015f0:	e01d      	b.n	800162e <NMEA_parser+0x326>
 80015f2:	bf00      	nop
 80015f4:	200009a4 	.word	0x200009a4
 80015f8:	0800c438 	.word	0x0800c438
 80015fc:	0800c440 	.word	0x0800c440
 8001600:	0800c448 	.word	0x0800c448
 8001604:	0800c450 	.word	0x0800c450
 8001608:	0800c458 	.word	0x0800c458

	}else if(strcmp(fields[0],"$GPGSV")==0){
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4931      	ldr	r1, [pc, #196]	; (80016d4 <NMEA_parser+0x3cc>)
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe fddd 	bl	80001d0 <strcmp>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d108      	bne.n	800162e <NMEA_parser+0x326>
		nmea_data.sat_in_view = atoi(fields[3]);
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	4618      	mov	r0, r3
 8001620:	f007 fb5f 	bl	8008ce2 <atoi>
 8001624:	4603      	mov	r3, r0
 8001626:	b2da      	uxtb	r2, r3
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <NMEA_parser+0x3d0>)
 800162a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}

	if (abs(nmea_data.speed_kmph - previous_data.speed_kmph) > speed_change_tolerance){
 800162e:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <NMEA_parser+0x3d0>)
 8001630:	ed93 7a08 	vldr	s14, [r3, #32]
 8001634:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800163c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001640:	ee17 3a90 	vmov	r3, s15
 8001644:	2b00      	cmp	r3, #0
 8001646:	bfb8      	it	lt
 8001648:	425b      	neglt	r3, r3
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001652:	4b22      	ldr	r3, [pc, #136]	; (80016dc <NMEA_parser+0x3d4>)
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	dd02      	ble.n	8001668 <NMEA_parser+0x360>
		speed_change_CB_fun_ptr();
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <NMEA_parser+0x3d8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph > speed_raise_barrier && previous_data.speed_kmph <= speed_raise_barrier){
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <NMEA_parser+0x3d0>)
 800166a:	ed93 7a08 	vldr	s14, [r3, #32]
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <NMEA_parser+0x3dc>)
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167c:	dd0c      	ble.n	8001698 <NMEA_parser+0x390>
 800167e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <NMEA_parser+0x3dc>)
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	d802      	bhi.n	8001698 <NMEA_parser+0x390>
		speed_raise_barrier_CB_fun_ptr();
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <NMEA_parser+0x3e0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <NMEA_parser+0x3d0>)
 800169a:	ed93 7a08 	vldr	s14, [r3, #32]
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <NMEA_parser+0x3dc>)
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	d400      	bmi.n	80016b0 <NMEA_parser+0x3a8>
		speed_fall_barrier_CB_fun_ptr();
	}
}
 80016ae:	e00d      	b.n	80016cc <NMEA_parser+0x3c4>
	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 80016b0:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <NMEA_parser+0x3dc>)
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	da00      	bge.n	80016c6 <NMEA_parser+0x3be>
}
 80016c4:	e002      	b.n	80016cc <NMEA_parser+0x3c4>
		speed_fall_barrier_CB_fun_ptr();
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <NMEA_parser+0x3e4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4798      	blx	r3
}
 80016cc:	bf00      	nop
 80016ce:	37c8      	adds	r7, #200	; 0xc8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bdb0      	pop	{r4, r5, r7, pc}
 80016d4:	0800c460 	.word	0x0800c460
 80016d8:	200009a4 	.word	0x200009a4
 80016dc:	20000908 	.word	0x20000908
 80016e0:	20000904 	.word	0x20000904
 80016e4:	20000910 	.word	0x20000910
 80016e8:	2000090c 	.word	0x2000090c
 80016ec:	20000914 	.word	0x20000914

080016f0 <hx2int>:
 * hx2int is function which converts hex number written using characters to corresponding integer.
 * @param[in]	n2		is older position ix hex code
 * @param[in]	n1		is younger position ix hex code
 * @param[out]	uint8_t	is integer corresponding to input hex
 */
static uint8_t hx2int(uint8_t n2, uint8_t n1){
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	460a      	mov	r2, r1
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	4613      	mov	r3, r2
 80016fe:	71bb      	strb	r3, [r7, #6]
	if (n2 <= '9') n2-='0';
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b39      	cmp	r3, #57	; 0x39
 8001704:	d803      	bhi.n	800170e <hx2int+0x1e>
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	3b30      	subs	r3, #48	; 0x30
 800170a:	71fb      	strb	r3, [r7, #7]
 800170c:	e002      	b.n	8001714 <hx2int+0x24>
	else n2=n2-'A'+10;
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	3b37      	subs	r3, #55	; 0x37
 8001712:	71fb      	strb	r3, [r7, #7]

	if (n1 <= '9') n1-='0';
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	2b39      	cmp	r3, #57	; 0x39
 8001718:	d803      	bhi.n	8001722 <hx2int+0x32>
 800171a:	79bb      	ldrb	r3, [r7, #6]
 800171c:	3b30      	subs	r3, #48	; 0x30
 800171e:	71bb      	strb	r3, [r7, #6]
 8001720:	e002      	b.n	8001728 <hx2int+0x38>
	else n1=n1-'A'+10;
 8001722:	79bb      	ldrb	r3, [r7, #6]
 8001724:	3b37      	subs	r3, #55	; 0x37
 8001726:	71bb      	strb	r3, [r7, #6]

	return n2*16+n1;
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	b2da      	uxtb	r2, r3
 800172e:	79bb      	ldrb	r3, [r7, #6]
 8001730:	4413      	add	r3, r2
 8001732:	b2db      	uxtb	r3, r3

}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <NMEA_checksum_clc>:
 * NMEA_checksum_clc is function which calculate checksum of the message and compare it to checksum value given in NMEA message.\n
 * To convert given checksum it uses hx2int function.
 * @param[in]	message	pointer to buffer storing NMEA message.
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more informations check out NMEA_status documentation.
 */
static NMEA_status NMEA_checksum_clc(uint8_t * message){
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	uint8_t index = 1;
 8001748:	2301      	movs	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum_clc =0;
 800174c:	2300      	movs	r3, #0
 800174e:	73bb      	strb	r3, [r7, #14]

	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8001750:	e009      	b.n	8001766 <NMEA_checksum_clc+0x26>
		checksum_clc^=message[index++];
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	73fa      	strb	r2, [r7, #15]
 8001758:	461a      	mov	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	781a      	ldrb	r2, [r3, #0]
 8001760:	7bbb      	ldrb	r3, [r7, #14]
 8001762:	4053      	eors	r3, r2
 8001764:	73bb      	strb	r3, [r7, #14]
	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	4413      	add	r3, r2
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b2a      	cmp	r3, #42	; 0x2a
 8001770:	d002      	beq.n	8001778 <NMEA_checksum_clc+0x38>
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	2b7d      	cmp	r3, #125	; 0x7d
 8001776:	d9ec      	bls.n	8001752 <NMEA_checksum_clc+0x12>
	}

	uint8_t checksum = hx2int(message[index+1],message[index+2]);
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	3301      	adds	r3, #1
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	4413      	add	r3, r2
 8001780:	7818      	ldrb	r0, [r3, #0]
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	3302      	adds	r3, #2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff ffaf 	bl	80016f0 <hx2int>
 8001792:	4603      	mov	r3, r0
 8001794:	737b      	strb	r3, [r7, #13]
	if (checksum!=checksum_clc){
 8001796:	7b7a      	ldrb	r2, [r7, #13]
 8001798:	7bbb      	ldrb	r3, [r7, #14]
 800179a:	429a      	cmp	r2, r3
 800179c:	d001      	beq.n	80017a2 <NMEA_checksum_clc+0x62>
		return NMEA_CHECKSUM_ERROR;
 800179e:	2302      	movs	r3, #2
 80017a0:	e000      	b.n	80017a4 <NMEA_checksum_clc+0x64>
	}
	return NMEA_OK;
 80017a2:	2300      	movs	r3, #0


}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <NMEA_read_line>:

/**
 * NMEA_read_line is function which reads one NMEA message line from NMEA_UART_buffer circular buffer to NMEA_working_buffer.
 */
static void NMEA_read_line(void){
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
	int index = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
	while (index < NMEA_WORKING_BUFFER_SIZE) NMEA_working_buffer[index++]=0;	// Clean up working buffer.
 80017b6:	e005      	b.n	80017c4 <NMEA_read_line+0x18>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	4a2b      	ldr	r2, [pc, #172]	; (800186c <NMEA_read_line+0xc0>)
 80017c0:	2100      	movs	r1, #0
 80017c2:	54d1      	strb	r1, [r2, r3]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b7f      	cmp	r3, #127	; 0x7f
 80017c8:	ddf6      	ble.n	80017b8 <NMEA_read_line+0xc>

	index = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 80017ce:	e01c      	b.n	800180a <NMEA_read_line+0x5e>
		NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 80017d0:	4b27      	ldr	r3, [pc, #156]	; (8001870 <NMEA_read_line+0xc4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a27      	ldr	r2, [pc, #156]	; (8001874 <NMEA_read_line+0xc8>)
 80017d6:	5cd1      	ldrb	r1, [r2, r3]
 80017d8:	4a24      	ldr	r2, [pc, #144]	; (800186c <NMEA_read_line+0xc0>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	460a      	mov	r2, r1
 80017e0:	701a      	strb	r2, [r3, #0]
		NMEA_UART_buffer[UART_buffer_tail] = 0;
 80017e2:	4b23      	ldr	r3, [pc, #140]	; (8001870 <NMEA_read_line+0xc4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a23      	ldr	r2, [pc, #140]	; (8001874 <NMEA_read_line+0xc8>)
 80017e8:	2100      	movs	r1, #0
 80017ea:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 80017ec:	4b20      	ldr	r3, [pc, #128]	; (8001870 <NMEA_read_line+0xc4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	3301      	adds	r3, #1
 80017f2:	425a      	negs	r2, r3
 80017f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017f8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80017fc:	bf58      	it	pl
 80017fe:	4253      	negpl	r3, r2
 8001800:	4a1b      	ldr	r2, [pc, #108]	; (8001870 <NMEA_read_line+0xc4>)
 8001802:	6013      	str	r3, [r2, #0]
		++index;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3301      	adds	r3, #1
 8001808:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <NMEA_read_line+0xc4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a19      	ldr	r2, [pc, #100]	; (8001874 <NMEA_read_line+0xc8>)
 8001810:	5cd3      	ldrb	r3, [r2, r3]
 8001812:	2b0a      	cmp	r3, #10
 8001814:	d002      	beq.n	800181c <NMEA_read_line+0x70>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b7d      	cmp	r3, #125	; 0x7d
 800181a:	ddd9      	ble.n	80017d0 <NMEA_read_line+0x24>
	}
	NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <NMEA_read_line+0xc4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a14      	ldr	r2, [pc, #80]	; (8001874 <NMEA_read_line+0xc8>)
 8001822:	5cd1      	ldrb	r1, [r2, r3]
 8001824:	4a11      	ldr	r2, [pc, #68]	; (800186c <NMEA_read_line+0xc0>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	460a      	mov	r2, r1
 800182c:	701a      	strb	r2, [r3, #0]
	NMEA_UART_buffer[UART_buffer_tail] = 0;
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <NMEA_read_line+0xc4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a10      	ldr	r2, [pc, #64]	; (8001874 <NMEA_read_line+0xc8>)
 8001834:	2100      	movs	r1, #0
 8001836:	54d1      	strb	r1, [r2, r3]
	UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <NMEA_read_line+0xc4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	425a      	negs	r2, r3
 8001840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001844:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001848:	bf58      	it	pl
 800184a:	4253      	negpl	r3, r2
 800184c:	4a08      	ldr	r2, [pc, #32]	; (8001870 <NMEA_read_line+0xc4>)
 800184e:	6013      	str	r3, [r2, #0]
	++index;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3301      	adds	r3, #1
 8001854:	607b      	str	r3, [r7, #4]
	--UART_buffer_lines;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <NMEA_read_line+0xcc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	3b01      	subs	r3, #1
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <NMEA_read_line+0xcc>)
 800185e:	6013      	str	r3, [r2, #0]

}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	20000878 	.word	0x20000878
 8001870:	200008fc 	.word	0x200008fc
 8001874:	20000478 	.word	0x20000478
 8001878:	20000900 	.word	0x20000900

0800187c <NMEA_init>:

void NMEA_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *DMA){
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	HAL_Delay(10);
 8001886:	200a      	movs	r0, #10
 8001888:	f001 fbe6 	bl	8003058 <HAL_Delay>
	NMEA_huart=huart;
 800188c:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <NMEA_init+0x5c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
	NMEA_DMA=DMA;
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <NMEA_init+0x60>)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(NMEA_huart,UART_IT_IDLE);
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <NMEA_init+0x5c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <NMEA_init+0x5c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0210 	orr.w	r2, r2, #16
 80018aa:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <NMEA_init+0x5c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b4:	490a      	ldr	r1, [pc, #40]	; (80018e0 <NMEA_init+0x64>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f005 ff3a 	bl	8007730 <HAL_UART_Receive_DMA>


	speed_change_CB_fun_ptr = &default_CB;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <NMEA_init+0x68>)
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <NMEA_init+0x6c>)
 80018c0:	601a      	str	r2, [r3, #0]
	speed_raise_barrier_CB_fun_ptr = &default_CB;
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <NMEA_init+0x70>)
 80018c4:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <NMEA_init+0x6c>)
 80018c6:	601a      	str	r2, [r3, #0]
	speed_fall_barrier_CB_fun_ptr = &default_CB;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <NMEA_init+0x74>)
 80018ca:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <NMEA_init+0x6c>)
 80018cc:	601a      	str	r2, [r3, #0]
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200009a0 	.word	0x200009a0
 80018dc:	2000099c 	.word	0x2000099c
 80018e0:	20000278 	.word	0x20000278
 80018e4:	20000904 	.word	0x20000904
 80018e8:	080011d5 	.word	0x080011d5
 80018ec:	2000090c 	.word	0x2000090c
 80018f0:	20000914 	.word	0x20000914

080018f4 <NMEA_UART_DMA_get_char>:
 * If buffer overflowed, the oldest NMEA message will be delete to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more informations check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 80018fe:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <NMEA_UART_DMA_get_char+0xc0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	425a      	negs	r2, r3
 8001906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800190a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800190e:	bf58      	it	pl
 8001910:	4253      	negpl	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 8001918:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <NMEA_UART_DMA_get_char+0xc4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68ba      	ldr	r2, [r7, #8]
 800191e:	429a      	cmp	r2, r3
 8001920:	d130      	bne.n	8001984 <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8001922:	e010      	b.n	8001946 <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <NMEA_UART_DMA_get_char+0xc4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a24      	ldr	r2, [pc, #144]	; (80019bc <NMEA_UART_DMA_get_char+0xc8>)
 800192a:	2100      	movs	r1, #0
 800192c:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 800192e:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <NMEA_UART_DMA_get_char+0xc4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	425a      	negs	r2, r3
 8001936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800193a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800193e:	bf58      	it	pl
 8001940:	4253      	negpl	r3, r2
 8001942:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <NMEA_UART_DMA_get_char+0xc4>)
 8001944:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <NMEA_UART_DMA_get_char+0xc4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <NMEA_UART_DMA_get_char+0xc8>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	2b0a      	cmp	r3, #10
 8001950:	d005      	beq.n	800195e <NMEA_UART_DMA_get_char+0x6a>
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <NMEA_UART_DMA_get_char+0xc4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a19      	ldr	r2, [pc, #100]	; (80019bc <NMEA_UART_DMA_get_char+0xc8>)
 8001958:	5cd3      	ldrb	r3, [r2, r3]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1e2      	bne.n	8001924 <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <NMEA_UART_DMA_get_char+0xc4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a16      	ldr	r2, [pc, #88]	; (80019bc <NMEA_UART_DMA_get_char+0xc8>)
 8001964:	2100      	movs	r1, #0
 8001966:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <NMEA_UART_DMA_get_char+0xc4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	425a      	negs	r2, r3
 8001970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001974:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001978:	bf58      	it	pl
 800197a:	4253      	negpl	r3, r2
 800197c:	4a0e      	ldr	r2, [pc, #56]	; (80019b8 <NMEA_UART_DMA_get_char+0xc4>)
 800197e:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <NMEA_UART_DMA_get_char+0xc0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	490c      	ldr	r1, [pc, #48]	; (80019bc <NMEA_UART_DMA_get_char+0xc8>)
 800198a:	79fa      	ldrb	r2, [r7, #7]
 800198c:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 800198e:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <NMEA_UART_DMA_get_char+0xc0>)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b0a      	cmp	r3, #10
 8001998:	d104      	bne.n	80019a4 <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <NMEA_UART_DMA_get_char+0xcc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <NMEA_UART_DMA_get_char+0xcc>)
 80019a2:	6013      	str	r3, [r2, #0]
	}

	return stat;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	200008f8 	.word	0x200008f8
 80019b8:	200008fc 	.word	0x200008fc
 80019bc:	20000478 	.word	0x20000478
 80019c0:	20000900 	.word	0x20000900

080019c4 <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more informations check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <NMEA_UART_DMA_copy_buffer+0x68>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80019da:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	e013      	b.n	8001a0a <NMEA_UART_DMA_copy_buffer+0x46>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 80019e2:	4a13      	ldr	r2, [pc, #76]	; (8001a30 <NMEA_UART_DMA_copy_buffer+0x6c>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4413      	add	r3, r2
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ff82 	bl	80018f4 <NMEA_UART_DMA_get_char>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <NMEA_UART_DMA_copy_buffer+0x36>
			stat=NMEA_BUFFER_OVERFLOWED;
 80019f6:	2301      	movs	r3, #1
 80019f8:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 80019fa:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <NMEA_UART_DMA_copy_buffer+0x6c>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	4413      	add	r3, r2
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	3301      	adds	r3, #1
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	dbe7      	blt.n	80019e2 <NMEA_UART_DMA_copy_buffer+0x1e>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <NMEA_UART_DMA_copy_buffer+0x70>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a1a:	4905      	ldr	r1, [pc, #20]	; (8001a30 <NMEA_UART_DMA_copy_buffer+0x6c>)
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f005 fe87 	bl	8007730 <HAL_UART_Receive_DMA>
	return stat;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2000099c 	.word	0x2000099c
 8001a30:	20000278 	.word	0x20000278
 8001a34:	200009a0 	.word	0x200009a0

08001a38 <NMEA_process_task>:

NMEA_status NMEA_process_task(void){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8001a42:	e00d      	b.n	8001a60 <NMEA_process_task+0x28>
		NMEA_read_line();
 8001a44:	f7ff feb2 	bl	80017ac <NMEA_read_line>
		if (NMEA_checksum_clc(NMEA_working_buffer) == NMEA_OK){
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <NMEA_process_task+0x3c>)
 8001a4a:	f7ff fe79 	bl	8001740 <NMEA_checksum_clc>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d103      	bne.n	8001a5c <NMEA_process_task+0x24>
			NMEA_parser((char *)NMEA_working_buffer);
 8001a54:	4807      	ldr	r0, [pc, #28]	; (8001a74 <NMEA_process_task+0x3c>)
 8001a56:	f7ff fc57 	bl	8001308 <NMEA_parser>
 8001a5a:	e001      	b.n	8001a60 <NMEA_process_task+0x28>
		}else stat = NMEA_CHECKSUM_ERROR;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <NMEA_process_task+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	dced      	bgt.n	8001a44 <NMEA_process_task+0xc>
	}
	return stat;
 8001a68:	79fb      	ldrb	r3, [r7, #7]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000878 	.word	0x20000878
 8001a78:	20000900 	.word	0x20000900

08001a7c <user_UART_IDLE_IT_handler>:

NMEA_status user_UART_IDLE_IT_handler(void){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <user_UART_IDLE_IT_handler+0x40>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b10      	cmp	r3, #16
 8001a94:	d10d      	bne.n	8001ab2 <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <user_UART_IDLE_IT_handler+0x40>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <user_UART_IDLE_IT_handler+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f005 fec7 	bl	8007838 <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 8001aaa:	f7ff ff8b 	bl	80019c4 <NMEA_UART_DMA_copy_buffer>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200009a0 	.word	0x200009a0

08001ac0 <HAL_UART_RxCpltCallback>:
/**
 * HAL_UART_RxCpltCallback is triggered after end of UART Rx transmission. It calls uatr_comport_read_data() from uart-comport driver.
 * @param[in]	huart	is a pointer to UART handle structure
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) uatr_comport_read_data();
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a04      	ldr	r2, [pc, #16]	; (8001adc <HAL_UART_RxCpltCallback+0x1c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d101      	bne.n	8001ad4 <HAL_UART_RxCpltCallback+0x14>
 8001ad0:	f001 f9bc 	bl	8002e4c <uatr_comport_read_data>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000fec 	.word	0x20000fec

08001ae0 <HAL_UART_TxCpltCallback>:
/**
 * HAL_UART_TxCpltCallback is triggered after end of UART Tx transmission. It zeros sent message buffer.
 * @param[in]	huart	is a pointer to UART handle structure
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) memset((char*)message,0,50);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a06      	ldr	r2, [pc, #24]	; (8001b04 <HAL_UART_TxCpltCallback+0x24>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d104      	bne.n	8001afa <HAL_UART_TxCpltCallback+0x1a>
 8001af0:	2232      	movs	r2, #50	; 0x32
 8001af2:	2100      	movs	r1, #0
 8001af4:	4804      	ldr	r0, [pc, #16]	; (8001b08 <HAL_UART_TxCpltCallback+0x28>)
 8001af6:	f007 f923 	bl	8008d40 <memset>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000fec 	.word	0x20000fec
 8001b08:	20000924 	.word	0x20000924

08001b0c <stop_measure_speed_CB>:
/**
 * stop_measure_speed_CB is a callback function which ends acceleration measurement and unregister CB when speed will exceed given value.
 *
 * It unregisters callback, calculates acceleration time, displays result on LCD and sends it to comport.
 */
void stop_measure_speed_CB(void){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af02      	add	r7, sp, #8
	time = nmea_data.UTC_time - time;
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <stop_measure_speed_CB+0x94>)
 8001b14:	ed93 7a00 	vldr	s14, [r3]
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <stop_measure_speed_CB+0x98>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b2c:	ee17 2a90 	vmov	r2, s15
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <stop_measure_speed_CB+0x98>)
 8001b32:	601a      	str	r2, [r3, #0]
	NMEA_CB_unregister(SPEED_RISE_BARRIER_CB);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f7ff fbab 	bl	8001290 <NMEA_CB_unregister>
	lcd_put_cur(1, 0);
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f7ff faaf 	bl	80010a0 <lcd_put_cur>
	char data[16]={0};
 8001b42:	463b      	mov	r3, r7
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
	sprintf(data,"%d-%d: %d s",start,stop,time);
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <stop_measure_speed_CB+0x9c>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <stop_measure_speed_CB+0xa0>)
 8001b54:	6819      	ldr	r1, [r3, #0]
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <stop_measure_speed_CB+0x98>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4638      	mov	r0, r7
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4913      	ldr	r1, [pc, #76]	; (8001bb0 <stop_measure_speed_CB+0xa4>)
 8001b62:	f007 fd51 	bl	8009608 <siprintf>
	lcd_send_string(data);
 8001b66:	463b      	mov	r3, r7
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff faf5 	bl	8001158 <lcd_send_string>
	sprintf((char*)message,"%d-%d: %d s",start,stop,time);
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <stop_measure_speed_CB+0x9c>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <stop_measure_speed_CB+0xa0>)
 8001b74:	6819      	ldr	r1, [r3, #0]
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <stop_measure_speed_CB+0x98>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <stop_measure_speed_CB+0xa4>)
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <stop_measure_speed_CB+0xa8>)
 8001b82:	f007 fd41 	bl	8009608 <siprintf>
	uatr_comport_send_data(message, strlen((char*)message));
 8001b86:	480b      	ldr	r0, [pc, #44]	; (8001bb4 <stop_measure_speed_CB+0xa8>)
 8001b88:	f7fe fb2c 	bl	80001e4 <strlen>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	4619      	mov	r1, r3
 8001b92:	4808      	ldr	r0, [pc, #32]	; (8001bb4 <stop_measure_speed_CB+0xa8>)
 8001b94:	f001 f99a 	bl	8002ecc <uatr_comport_send_data>
}
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200009a4 	.word	0x200009a4
 8001ba4:	2000106c 	.word	0x2000106c
 8001ba8:	2000091c 	.word	0x2000091c
 8001bac:	20000920 	.word	0x20000920
 8001bb0:	0800c468 	.word	0x0800c468
 8001bb4:	20000924 	.word	0x20000924

08001bb8 <start_measure_speed_CB>:
/**
 * start_measure_speed_CB is a callback function which starts acceleration measurement and register stop_measure_speed_CB callback function when speed will exceed given value.
 *
 * It sets time of start measurement and registers stop_measure_speed_CB().
 */
void start_measure_speed_CB(void){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
	time = nmea_data.UTC_time;
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <start_measure_speed_CB+0x34>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc6:	ee17 2a90 	vmov	r2, s15
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <start_measure_speed_CB+0x38>)
 8001bcc:	601a      	str	r2, [r3, #0]
	NMEA_CB_register(&stop_measure_speed_CB, SPEED_RISE_BARRIER_CB, stop);
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <start_measure_speed_CB+0x3c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	ee07 3a90 	vmov	s15, r3
 8001bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bda:	eeb0 0a67 	vmov.f32	s0, s15
 8001bde:	2101      	movs	r1, #1
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <start_measure_speed_CB+0x40>)
 8001be2:	f7ff faff 	bl	80011e4 <NMEA_CB_register>
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200009a4 	.word	0x200009a4
 8001bf0:	2000106c 	.word	0x2000106c
 8001bf4:	20000920 	.word	0x20000920
 8001bf8:	08001b0d 	.word	0x08001b0d

08001bfc <task>:
 *
 * If stop_tmp==start_tmp it unregisters SPEED_RISE_BARRIER_CB and sends suitable message to the comport.
 *
 * Else it do nothing except sending suitable message to the comport.
 */
void task(void){
 8001bfc:	b5b0      	push	{r4, r5, r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
  int start_tmp = atoi((char*)start_speed);
 8001c02:	4841      	ldr	r0, [pc, #260]	; (8001d08 <task+0x10c>)
 8001c04:	f007 f86d 	bl	8008ce2 <atoi>
 8001c08:	6178      	str	r0, [r7, #20]
  int stop_tmp = atoi((char*)stop_speed);
 8001c0a:	4840      	ldr	r0, [pc, #256]	; (8001d0c <task+0x110>)
 8001c0c:	f007 f869 	bl	8008ce2 <atoi>
 8001c10:	6138      	str	r0, [r7, #16]
  if(start_tmp < stop_tmp){
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	da3c      	bge.n	8001c94 <task+0x98>
	  start=start_tmp;
 8001c1a:	4a3d      	ldr	r2, [pc, #244]	; (8001d10 <task+0x114>)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	6013      	str	r3, [r2, #0]
	  stop=stop_tmp;
 8001c20:	4a3c      	ldr	r2, [pc, #240]	; (8001d14 <task+0x118>)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	6013      	str	r3, [r2, #0]
	  NMEA_CB_register(&start_measure_speed_CB, SPEED_RISE_BARRIER_CB, start);
 8001c26:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <task+0x114>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	ee07 3a90 	vmov	s15, r3
 8001c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c32:	eeb0 0a67 	vmov.f32	s0, s15
 8001c36:	2101      	movs	r1, #1
 8001c38:	4837      	ldr	r0, [pc, #220]	; (8001d18 <task+0x11c>)
 8001c3a:	f7ff fad3 	bl	80011e4 <NMEA_CB_register>

	  char data[16]={0};
 8001c3e:	463b      	mov	r3, r7
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
	  sprintf(data,"%d-%d:",start,stop);
 8001c4a:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <task+0x114>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <task+0x118>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4638      	mov	r0, r7
 8001c54:	4931      	ldr	r1, [pc, #196]	; (8001d1c <task+0x120>)
 8001c56:	f007 fcd7 	bl	8009608 <siprintf>

	  lcd_put_cur(1, 0);
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f7ff fa1f 	bl	80010a0 <lcd_put_cur>
	  lcd_send_string(data);
 8001c62:	463b      	mov	r3, r7
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fa77 	bl	8001158 <lcd_send_string>

	  sprintf((char *)message, "measurement accepted\n");
 8001c6a:	4a2d      	ldr	r2, [pc, #180]	; (8001d20 <task+0x124>)
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <task+0x128>)
 8001c6e:	4614      	mov	r4, r2
 8001c70:	461d      	mov	r5, r3
 8001c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c7a:	6020      	str	r0, [r4, #0]
 8001c7c:	3404      	adds	r4, #4
 8001c7e:	8021      	strh	r1, [r4, #0]
	  uatr_comport_send_data(message, strlen((char *)message));
 8001c80:	4827      	ldr	r0, [pc, #156]	; (8001d20 <task+0x124>)
 8001c82:	f7fe faaf 	bl	80001e4 <strlen>
 8001c86:	4603      	mov	r3, r0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4824      	ldr	r0, [pc, #144]	; (8001d20 <task+0x124>)
 8001c8e:	f001 f91d 	bl	8002ecc <uatr_comport_send_data>
	  uatr_comport_send_data(message, strlen((char *)message));
  }else {
	  sprintf((char *)message, "stop %d less then start %d\n",stop_tmp,start_tmp);
	  uatr_comport_send_data(message, strlen((char *)message));
  }
}
 8001c92:	e034      	b.n	8001cfe <task+0x102>
  }else if (stop_tmp==start_tmp){
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d121      	bne.n	8001ce0 <task+0xe4>
	  NMEA_CB_unregister(SPEED_RISE_BARRIER_CB);
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	f7ff faf7 	bl	8001290 <NMEA_CB_unregister>
	  lcd_put_cur(1, 0);
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff f9fb 	bl	80010a0 <lcd_put_cur>
	  lcd_send_string("        ");
 8001caa:	481f      	ldr	r0, [pc, #124]	; (8001d28 <task+0x12c>)
 8001cac:	f7ff fa54 	bl	8001158 <lcd_send_string>
	  sprintf((char *)message, "measurement cancelled\n");
 8001cb0:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <task+0x124>)
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <task+0x130>)
 8001cb4:	4614      	mov	r4, r2
 8001cb6:	461d      	mov	r5, r3
 8001cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cbc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cc0:	6020      	str	r0, [r4, #0]
 8001cc2:	3404      	adds	r4, #4
 8001cc4:	8021      	strh	r1, [r4, #0]
 8001cc6:	3402      	adds	r4, #2
 8001cc8:	0c0b      	lsrs	r3, r1, #16
 8001cca:	7023      	strb	r3, [r4, #0]
	  uatr_comport_send_data(message, strlen((char *)message));
 8001ccc:	4814      	ldr	r0, [pc, #80]	; (8001d20 <task+0x124>)
 8001cce:	f7fe fa89 	bl	80001e4 <strlen>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4811      	ldr	r0, [pc, #68]	; (8001d20 <task+0x124>)
 8001cda:	f001 f8f7 	bl	8002ecc <uatr_comport_send_data>
}
 8001cde:	e00e      	b.n	8001cfe <task+0x102>
	  sprintf((char *)message, "stop %d less then start %d\n",stop_tmp,start_tmp);
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4912      	ldr	r1, [pc, #72]	; (8001d30 <task+0x134>)
 8001ce6:	480e      	ldr	r0, [pc, #56]	; (8001d20 <task+0x124>)
 8001ce8:	f007 fc8e 	bl	8009608 <siprintf>
	  uatr_comport_send_data(message, strlen((char *)message));
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <task+0x124>)
 8001cee:	f7fe fa79 	bl	80001e4 <strlen>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4809      	ldr	r0, [pc, #36]	; (8001d20 <task+0x124>)
 8001cfa:	f001 f8e7 	bl	8002ecc <uatr_comport_send_data>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bdb0      	pop	{r4, r5, r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000fe8 	.word	0x20000fe8
 8001d0c:	20000f80 	.word	0x20000f80
 8001d10:	2000091c 	.word	0x2000091c
 8001d14:	20000920 	.word	0x20000920
 8001d18:	08001bb9 	.word	0x08001bb9
 8001d1c:	0800c474 	.word	0x0800c474
 8001d20:	20000924 	.word	0x20000924
 8001d24:	0800c47c 	.word	0x0800c47c
 8001d28:	0800c494 	.word	0x0800c494
 8001d2c:	0800c4a0 	.word	0x0800c4a0
 8001d30:	0800c4b8 	.word	0x0800c4b8

08001d34 <speedometer_CB>:
/**
 * speedometer_CB is a callback to change of speed event.
 *
 * It displays current speed on LCD and sends it to comport.
 */
void speedometer_CB(void){
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
	char speed[5]={0};
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	711a      	strb	r2, [r3, #4]
	sprintf(speed,"%3.0f",nmea_data.speed_kmph);
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <speedometer_CB+0x6c>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fc0e 	bl	8000568 <__aeabi_f2d>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	460c      	mov	r4, r1
 8001d50:	4638      	mov	r0, r7
 8001d52:	461a      	mov	r2, r3
 8001d54:	4623      	mov	r3, r4
 8001d56:	4913      	ldr	r1, [pc, #76]	; (8001da4 <speedometer_CB+0x70>)
 8001d58:	f007 fc56 	bl	8009608 <siprintf>
	lcd_put_cur(0, 7);
 8001d5c:	2107      	movs	r1, #7
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7ff f99e 	bl	80010a0 <lcd_put_cur>
	lcd_send_string(speed);
 8001d64:	463b      	mov	r3, r7
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f9f6 	bl	8001158 <lcd_send_string>
	sprintf((char*)message,"speed: %3.0f km/h \n",nmea_data.speed_kmph);
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <speedometer_CB+0x6c>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fbf9 	bl	8000568 <__aeabi_f2d>
 8001d76:	4603      	mov	r3, r0
 8001d78:	460c      	mov	r4, r1
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4623      	mov	r3, r4
 8001d7e:	490a      	ldr	r1, [pc, #40]	; (8001da8 <speedometer_CB+0x74>)
 8001d80:	480a      	ldr	r0, [pc, #40]	; (8001dac <speedometer_CB+0x78>)
 8001d82:	f007 fc41 	bl	8009608 <siprintf>
	uatr_comport_send_data(message, strlen((char*)message));
 8001d86:	4809      	ldr	r0, [pc, #36]	; (8001dac <speedometer_CB+0x78>)
 8001d88:	f7fe fa2c 	bl	80001e4 <strlen>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	4619      	mov	r1, r3
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <speedometer_CB+0x78>)
 8001d94:	f001 f89a 	bl	8002ecc <uatr_comport_send_data>
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd90      	pop	{r4, r7, pc}
 8001da0:	200009a4 	.word	0x200009a4
 8001da4:	0800c4d4 	.word	0x0800c4d4
 8001da8:	0800c4dc 	.word	0x0800c4dc
 8001dac:	20000924 	.word	0x20000924

08001db0 <main>:
  * @brief  The application entry point.
  * @retval int
  *
  */
int main(void)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db6:	f001 f8da 	bl	8002f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dba:	f000 f853 	bl	8001e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dbe:	f000 faf1 	bl	80023a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dc2:	f000 fad1 	bl	8002368 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8001dc6:	f000 f8f5 	bl	8001fb4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001dca:	f000 f96b 	bl	80020a4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001dce:	f000 f9a9 	bl	8002124 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001dd2:	f000 f9cd 	bl	8002170 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001dd6:	f000 fa39 	bl	800224c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001dda:	f000 fa67 	bl	80022ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001dde:	f000 fa95 	bl	800230c <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8001de2:	f000 fa03 	bl	80021ec <MX_UART4_Init>
  MX_I2C1_Init();
 8001de6:	f000 f91d 	bl	8002024 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();		//LCD initialization
 8001dea:	f7ff f977 	bl	80010dc <lcd_init>
  uatr_comport_comunication_init(&huart1);	//uart-comport driver initialization
 8001dee:	4815      	ldr	r0, [pc, #84]	; (8001e44 <main+0x94>)
 8001df0:	f001 f816 	bl	8002e20 <uatr_comport_comunication_init>
  NMEA_init(&huart4, &hdma_uart4_rx);	//NMEA library initialization
 8001df4:	4914      	ldr	r1, [pc, #80]	; (8001e48 <main+0x98>)
 8001df6:	4815      	ldr	r0, [pc, #84]	; (8001e4c <main+0x9c>)
 8001df8:	f7ff fd40 	bl	800187c <NMEA_init>
  char lcd_buf[16] = {0};
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
  sprintf(lcd_buf,"SPEED: %3.0f km/h",nmea_data.speed_kmph);
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <main+0xa0>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fbab 	bl	8000568 <__aeabi_f2d>
 8001e12:	4603      	mov	r3, r0
 8001e14:	460c      	mov	r4, r1
 8001e16:	4638      	mov	r0, r7
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4623      	mov	r3, r4
 8001e1c:	490d      	ldr	r1, [pc, #52]	; (8001e54 <main+0xa4>)
 8001e1e:	f007 fbf3 	bl	8009608 <siprintf>
  lcd_send_string(lcd_buf);
 8001e22:	463b      	mov	r3, r7
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f997 	bl	8001158 <lcd_send_string>

  NMEA_CB_register(&speedometer_CB, SPEED_CHANGE_CB, 1e-3);	//speedometer_CB registration
 8001e2a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001e58 <main+0xa8>
 8001e2e:	2100      	movs	r1, #0
 8001e30:	480a      	ldr	r0, [pc, #40]	; (8001e5c <main+0xac>)
 8001e32:	f7ff f9d7 	bl	80011e4 <NMEA_CB_register>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  NMEA_process_task();
 8001e36:	f7ff fdff 	bl	8001a38 <NMEA_process_task>
	  uart_comport_task(&task);
 8001e3a:	4809      	ldr	r0, [pc, #36]	; (8001e60 <main+0xb0>)
 8001e3c:	f001 f85a 	bl	8002ef4 <uart_comport_task>
	  NMEA_process_task();
 8001e40:	e7f9      	b.n	8001e36 <main+0x86>
 8001e42:	bf00      	nop
 8001e44:	20000fec 	.word	0x20000fec
 8001e48:	20000a18 	.word	0x20000a18
 8001e4c:	20001070 	.word	0x20001070
 8001e50:	200009a4 	.word	0x200009a4
 8001e54:	0800c4f0 	.word	0x0800c4f0
 8001e58:	3a83126f 	.word	0x3a83126f
 8001e5c:	08001d35 	.word	0x08001d35
 8001e60:	08001bfd 	.word	0x08001bfd

08001e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b0b8      	sub	sp, #224	; 0xe0
 8001e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e6e:	2244      	movs	r2, #68	; 0x44
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f006 ff64 	bl	8008d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e78:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e88:	463b      	mov	r3, r7
 8001e8a:	2288      	movs	r2, #136	; 0x88
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f006 ff56 	bl	8008d40 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e94:	f003 fe72 	bl	8005b7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e98:	4b44      	ldr	r3, [pc, #272]	; (8001fac <SystemClock_Config+0x148>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9e:	4a43      	ldr	r2, [pc, #268]	; (8001fac <SystemClock_Config+0x148>)
 8001ea0:	f023 0318 	bic.w	r3, r3, #24
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001ea8:	2314      	movs	r3, #20
 8001eaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ec0:	2360      	movs	r3, #96	; 0x60
 8001ec2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001ed8:	2328      	movs	r3, #40	; 0x28
 8001eda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ede:	2307      	movs	r3, #7
 8001ee0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001eea:	2302      	movs	r3, #2
 8001eec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 ff81 	bl	8005dfc <HAL_RCC_OscConfig>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001f00:	f000 fbda 	bl	80026b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f04:	230f      	movs	r3, #15
 8001f06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f22:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001f26:	2104      	movs	r1, #4
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f004 fb4d 	bl	80065c8 <HAL_RCC_ClockConfig>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001f34:	f000 fbc0 	bl	80026b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <SystemClock_Config+0x14c>)
 8001f3a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f40:	2300      	movs	r3, #0
 8001f42:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001f44:	2300      	movs	r3, #0
 8001f46:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001f56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f60:	2301      	movs	r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001f64:	2318      	movs	r3, #24
 8001f66:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f68:	2307      	movs	r3, #7
 8001f6a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f70:	2302      	movs	r3, #2
 8001f72:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001f74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f78:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f004 fd27 	bl	80069d0 <HAL_RCCEx_PeriphCLKConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <SystemClock_Config+0x128>
  {
    Error_Handler();
 8001f88:	f000 fb96 	bl	80026b8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f90:	f003 fe12 	bl	8005bb8 <HAL_PWREx_ControlVoltageScaling>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8001f9a:	f000 fb8d 	bl	80026b8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001f9e:	f004 fffd 	bl	8006f9c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001fa2:	bf00      	nop
 8001fa4:	37e0      	adds	r7, #224	; 0xe0
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	000120cd 	.word	0x000120cd

08001fb4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001fb8:	4b18      	ldr	r3, [pc, #96]	; (800201c <MX_DFSDM1_Init+0x68>)
 8001fba:	4a19      	ldr	r2, [pc, #100]	; (8002020 <MX_DFSDM1_Init+0x6c>)
 8001fbc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <MX_DFSDM1_Init+0x68>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001fc4:	4b15      	ldr	r3, [pc, #84]	; (800201c <MX_DFSDM1_Init+0x68>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <MX_DFSDM1_Init+0x68>)
 8001fcc:	2202      	movs	r2, #2
 8001fce:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <MX_DFSDM1_Init+0x68>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_DFSDM1_Init+0x68>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <MX_DFSDM1_Init+0x68>)
 8001fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <MX_DFSDM1_Init+0x68>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_DFSDM1_Init+0x68>)
 8001fec:	2204      	movs	r2, #4
 8001fee:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <MX_DFSDM1_Init+0x68>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_DFSDM1_Init+0x68>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <MX_DFSDM1_Init+0x68>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_DFSDM1_Init+0x68>)
 8002004:	2200      	movs	r2, #0
 8002006:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8002008:	4804      	ldr	r0, [pc, #16]	; (800201c <MX_DFSDM1_Init+0x68>)
 800200a:	f001 f959 	bl	80032c0 <HAL_DFSDM_ChannelInit>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8002014:	f000 fb50 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200009e0 	.word	0x200009e0
 8002020:	40016020 	.word	0x40016020

08002024 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <MX_I2C1_Init+0x74>)
 800202a:	4a1c      	ldr	r2, [pc, #112]	; (800209c <MX_I2C1_Init+0x78>)
 800202c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800202e:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <MX_I2C1_Init+0x74>)
 8002030:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <MX_I2C1_Init+0x7c>)
 8002032:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002034:	4b18      	ldr	r3, [pc, #96]	; (8002098 <MX_I2C1_Init+0x74>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <MX_I2C1_Init+0x74>)
 800203c:	2201      	movs	r2, #1
 800203e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002040:	4b15      	ldr	r3, [pc, #84]	; (8002098 <MX_I2C1_Init+0x74>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002046:	4b14      	ldr	r3, [pc, #80]	; (8002098 <MX_I2C1_Init+0x74>)
 8002048:	2200      	movs	r2, #0
 800204a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <MX_I2C1_Init+0x74>)
 800204e:	2200      	movs	r2, #0
 8002050:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <MX_I2C1_Init+0x74>)
 8002054:	2200      	movs	r2, #0
 8002056:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <MX_I2C1_Init+0x74>)
 800205a:	2200      	movs	r2, #0
 800205c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800205e:	480e      	ldr	r0, [pc, #56]	; (8002098 <MX_I2C1_Init+0x74>)
 8002060:	f001 fead 	bl	8003dbe <HAL_I2C_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800206a:	f000 fb25 	bl	80026b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800206e:	2100      	movs	r1, #0
 8002070:	4809      	ldr	r0, [pc, #36]	; (8002098 <MX_I2C1_Init+0x74>)
 8002072:	f003 fba3 	bl	80057bc <HAL_I2CEx_ConfigAnalogFilter>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800207c:	f000 fb1c 	bl	80026b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002080:	2100      	movs	r1, #0
 8002082:	4805      	ldr	r0, [pc, #20]	; (8002098 <MX_I2C1_Init+0x74>)
 8002084:	f003 fbe5 	bl	8005852 <HAL_I2CEx_ConfigDigitalFilter>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800208e:	f000 fb13 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000ae0 	.word	0x20000ae0
 800209c:	40005400 	.word	0x40005400
 80020a0:	10909cec 	.word	0x10909cec

080020a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80020a8:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <MX_I2C2_Init+0x74>)
 80020aa:	4a1c      	ldr	r2, [pc, #112]	; (800211c <MX_I2C2_Init+0x78>)
 80020ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80020ae:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <MX_I2C2_Init+0x74>)
 80020b0:	4a1b      	ldr	r2, [pc, #108]	; (8002120 <MX_I2C2_Init+0x7c>)
 80020b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80020b4:	4b18      	ldr	r3, [pc, #96]	; (8002118 <MX_I2C2_Init+0x74>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020ba:	4b17      	ldr	r3, [pc, #92]	; (8002118 <MX_I2C2_Init+0x74>)
 80020bc:	2201      	movs	r2, #1
 80020be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020c0:	4b15      	ldr	r3, [pc, #84]	; (8002118 <MX_I2C2_Init+0x74>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <MX_I2C2_Init+0x74>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <MX_I2C2_Init+0x74>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <MX_I2C2_Init+0x74>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <MX_I2C2_Init+0x74>)
 80020da:	2200      	movs	r2, #0
 80020dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020de:	480e      	ldr	r0, [pc, #56]	; (8002118 <MX_I2C2_Init+0x74>)
 80020e0:	f001 fe6d 	bl	8003dbe <HAL_I2C_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80020ea:	f000 fae5 	bl	80026b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020ee:	2100      	movs	r1, #0
 80020f0:	4809      	ldr	r0, [pc, #36]	; (8002118 <MX_I2C2_Init+0x74>)
 80020f2:	f003 fb63 	bl	80057bc <HAL_I2CEx_ConfigAnalogFilter>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80020fc:	f000 fadc 	bl	80026b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002100:	2100      	movs	r1, #0
 8002102:	4805      	ldr	r0, [pc, #20]	; (8002118 <MX_I2C2_Init+0x74>)
 8002104:	f003 fba5 	bl	8005852 <HAL_I2CEx_ConfigDigitalFilter>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800210e:	f000 fad3 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000f34 	.word	0x20000f34
 800211c:	40005800 	.word	0x40005800
 8002120:	10909cec 	.word	0x10909cec

08002124 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <MX_QUADSPI_Init+0x44>)
 800212a:	4a10      	ldr	r2, [pc, #64]	; (800216c <MX_QUADSPI_Init+0x48>)
 800212c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <MX_QUADSPI_Init+0x44>)
 8002130:	22ff      	movs	r2, #255	; 0xff
 8002132:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <MX_QUADSPI_Init+0x44>)
 8002136:	2201      	movs	r2, #1
 8002138:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <MX_QUADSPI_Init+0x44>)
 800213c:	2200      	movs	r2, #0
 800213e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <MX_QUADSPI_Init+0x44>)
 8002142:	2201      	movs	r2, #1
 8002144:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <MX_QUADSPI_Init+0x44>)
 8002148:	2200      	movs	r2, #0
 800214a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MX_QUADSPI_Init+0x44>)
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002152:	4805      	ldr	r0, [pc, #20]	; (8002168 <MX_QUADSPI_Init+0x44>)
 8002154:	f003 fd96 	bl	8005c84 <HAL_QSPI_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800215e:	f000 faab 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200010f0 	.word	0x200010f0
 800216c:	a0001000 	.word	0xa0001000

08002170 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <MX_SPI3_Init+0x74>)
 8002176:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <MX_SPI3_Init+0x78>)
 8002178:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800217a:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <MX_SPI3_Init+0x74>)
 800217c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002180:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002182:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <MX_SPI3_Init+0x74>)
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <MX_SPI3_Init+0x74>)
 800218a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800218e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <MX_SPI3_Init+0x74>)
 8002192:	2200      	movs	r2, #0
 8002194:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <MX_SPI3_Init+0x74>)
 8002198:	2200      	movs	r2, #0
 800219a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <MX_SPI3_Init+0x74>)
 800219e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <MX_SPI3_Init+0x74>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <MX_SPI3_Init+0x74>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_SPI3_Init+0x74>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <MX_SPI3_Init+0x74>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <MX_SPI3_Init+0x74>)
 80021be:	2207      	movs	r2, #7
 80021c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <MX_SPI3_Init+0x74>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <MX_SPI3_Init+0x74>)
 80021ca:	2208      	movs	r2, #8
 80021cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80021ce:	4805      	ldr	r0, [pc, #20]	; (80021e4 <MX_SPI3_Init+0x74>)
 80021d0:	f005 f8be 	bl	8007350 <HAL_SPI_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80021da:	f000 fa6d 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000f84 	.word	0x20000f84
 80021e8:	40003c00 	.word	0x40003c00

080021ec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_UART4_Init+0x58>)
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <MX_UART4_Init+0x5c>)
 80021f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <MX_UART4_Init+0x58>)
 80021f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_UART4_Init+0x58>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <MX_UART4_Init+0x58>)
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_UART4_Init+0x58>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_UART4_Init+0x58>)
 8002212:	220c      	movs	r2, #12
 8002214:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_UART4_Init+0x58>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_UART4_Init+0x58>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <MX_UART4_Init+0x58>)
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <MX_UART4_Init+0x58>)
 800222a:	2200      	movs	r2, #0
 800222c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800222e:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_UART4_Init+0x58>)
 8002230:	f005 f931 	bl	8007496 <HAL_UART_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800223a:	f000 fa3d 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20001070 	.word	0x20001070
 8002248:	40004c00 	.word	0x40004c00

0800224c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <MX_USART1_UART_Init+0x5c>)
 8002254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 8002258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800225c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 8002272:	220c      	movs	r2, #12
 8002274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 8002284:	2200      	movs	r2, #0
 8002286:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 800228a:	2200      	movs	r2, #0
 800228c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800228e:	4805      	ldr	r0, [pc, #20]	; (80022a4 <MX_USART1_UART_Init+0x58>)
 8002290:	f005 f901 	bl	8007496 <HAL_UART_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800229a:	f000 fa0d 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000fec 	.word	0x20000fec
 80022a8:	40013800 	.word	0x40013800

080022ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022b2:	4a15      	ldr	r2, [pc, #84]	; (8002308 <MX_USART3_UART_Init+0x5c>)
 80022b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022d2:	220c      	movs	r2, #12
 80022d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <MX_USART3_UART_Init+0x58>)
 80022f0:	f005 f8d1 	bl	8007496 <HAL_UART_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80022fa:	f000 f9dd 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000a60 	.word	0x20000a60
 8002308:	40004800 	.word	0x40004800

0800230c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002312:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002316:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800231a:	2206      	movs	r2, #6
 800231c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002320:	2202      	movs	r2, #2
 8002322:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002326:	2202      	movs	r2, #2
 8002328:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800232c:	2200      	movs	r2, #0
 800232e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002332:	2200      	movs	r2, #0
 8002334:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002338:	2200      	movs	r2, #0
 800233a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800233e:	2200      	movs	r2, #0
 8002340:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002344:	2200      	movs	r2, #0
 8002346:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800234a:	2200      	movs	r2, #0
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800234e:	4805      	ldr	r0, [pc, #20]	; (8002364 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002350:	f003 facb 	bl	80058ea <HAL_PCD_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800235a:	f000 f9ad 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000b2c 	.word	0x20000b2c

08002368 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <MX_DMA_Init+0x38>)
 8002370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002372:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <MX_DMA_Init+0x38>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	6493      	str	r3, [r2, #72]	; 0x48
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <MX_DMA_Init+0x38>)
 800237c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	607b      	str	r3, [r7, #4]
 8002384:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	203c      	movs	r0, #60	; 0x3c
 800238c:	f000 ff61 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8002390:	203c      	movs	r0, #60	; 0x3c
 8002392:	f000 ff7a 	bl	800328a <HAL_NVIC_EnableIRQ>

}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000

080023a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
 80023b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ba:	4bb8      	ldr	r3, [pc, #736]	; (800269c <MX_GPIO_Init+0x2f8>)
 80023bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023be:	4ab7      	ldr	r2, [pc, #732]	; (800269c <MX_GPIO_Init+0x2f8>)
 80023c0:	f043 0310 	orr.w	r3, r3, #16
 80023c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023c6:	4bb5      	ldr	r3, [pc, #724]	; (800269c <MX_GPIO_Init+0x2f8>)
 80023c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d2:	4bb2      	ldr	r3, [pc, #712]	; (800269c <MX_GPIO_Init+0x2f8>)
 80023d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d6:	4ab1      	ldr	r2, [pc, #708]	; (800269c <MX_GPIO_Init+0x2f8>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023de:	4baf      	ldr	r3, [pc, #700]	; (800269c <MX_GPIO_Init+0x2f8>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	4bac      	ldr	r3, [pc, #688]	; (800269c <MX_GPIO_Init+0x2f8>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	4aab      	ldr	r2, [pc, #684]	; (800269c <MX_GPIO_Init+0x2f8>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023f6:	4ba9      	ldr	r3, [pc, #676]	; (800269c <MX_GPIO_Init+0x2f8>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002402:	4ba6      	ldr	r3, [pc, #664]	; (800269c <MX_GPIO_Init+0x2f8>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	4aa5      	ldr	r2, [pc, #660]	; (800269c <MX_GPIO_Init+0x2f8>)
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800240e:	4ba3      	ldr	r3, [pc, #652]	; (800269c <MX_GPIO_Init+0x2f8>)
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800241a:	4ba0      	ldr	r3, [pc, #640]	; (800269c <MX_GPIO_Init+0x2f8>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	4a9f      	ldr	r2, [pc, #636]	; (800269c <MX_GPIO_Init+0x2f8>)
 8002420:	f043 0308 	orr.w	r3, r3, #8
 8002424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002426:	4b9d      	ldr	r3, [pc, #628]	; (800269c <MX_GPIO_Init+0x2f8>)
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8002432:	2200      	movs	r2, #0
 8002434:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002438:	4899      	ldr	r0, [pc, #612]	; (80026a0 <MX_GPIO_Init+0x2fc>)
 800243a:	f001 fc85 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800243e:	2200      	movs	r2, #0
 8002440:	f248 1104 	movw	r1, #33028	; 0x8104
 8002444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002448:	f001 fc7e 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800244c:	2200      	movs	r2, #0
 800244e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8002452:	4894      	ldr	r0, [pc, #592]	; (80026a4 <MX_GPIO_Init+0x300>)
 8002454:	f001 fc78 	bl	8003d48 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002458:	2200      	movs	r2, #0
 800245a:	f241 0181 	movw	r1, #4225	; 0x1081
 800245e:	4892      	ldr	r0, [pc, #584]	; (80026a8 <MX_GPIO_Init+0x304>)
 8002460:	f001 fc72 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002464:	2201      	movs	r2, #1
 8002466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800246a:	488f      	ldr	r0, [pc, #572]	; (80026a8 <MX_GPIO_Init+0x304>)
 800246c:	f001 fc6c 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002470:	2200      	movs	r2, #0
 8002472:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002476:	488d      	ldr	r0, [pc, #564]	; (80026ac <MX_GPIO_Init+0x308>)
 8002478:	f001 fc66 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800247c:	2201      	movs	r2, #1
 800247e:	2120      	movs	r1, #32
 8002480:	4888      	ldr	r0, [pc, #544]	; (80026a4 <MX_GPIO_Init+0x300>)
 8002482:	f001 fc61 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002486:	2201      	movs	r2, #1
 8002488:	2101      	movs	r1, #1
 800248a:	4885      	ldr	r0, [pc, #532]	; (80026a0 <MX_GPIO_Init+0x2fc>)
 800248c:	f001 fc5c 	bl	8003d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002490:	f240 1315 	movw	r3, #277	; 0x115
 8002494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002496:	2301      	movs	r3, #1
 8002498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	487d      	ldr	r0, [pc, #500]	; (80026a0 <MX_GPIO_Init+0x2fc>)
 80024aa:	f001 faa5 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80024ae:	236a      	movs	r3, #106	; 0x6a
 80024b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024b2:	4b7f      	ldr	r3, [pc, #508]	; (80026b0 <MX_GPIO_Init+0x30c>)
 80024b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4619      	mov	r1, r3
 80024c0:	4877      	ldr	r0, [pc, #476]	; (80026a0 <MX_GPIO_Init+0x2fc>)
 80024c2:	f001 fa99 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80024c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024cc:	4b79      	ldr	r3, [pc, #484]	; (80026b4 <MX_GPIO_Init+0x310>)
 80024ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4619      	mov	r1, r3
 80024da:	4874      	ldr	r0, [pc, #464]	; (80026ac <MX_GPIO_Init+0x308>)
 80024dc:	f001 fa8c 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80024e0:	233f      	movs	r3, #63	; 0x3f
 80024e2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80024e4:	230b      	movs	r3, #11
 80024e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4619      	mov	r1, r3
 80024f2:	486e      	ldr	r0, [pc, #440]	; (80026ac <MX_GPIO_Init+0x308>)
 80024f4:	f001 fa80 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80024f8:	f248 1304 	movw	r3, #33028	; 0x8104
 80024fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fe:	2301      	movs	r3, #1
 8002500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002506:	2300      	movs	r3, #0
 8002508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4619      	mov	r1, r3
 8002510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002514:	f001 fa70 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8002518:	2308      	movs	r3, #8
 800251a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251c:	2302      	movs	r3, #2
 800251e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002524:	2300      	movs	r3, #0
 8002526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002528:	2301      	movs	r3, #1
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	4619      	mov	r1, r3
 8002532:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002536:	f001 fa5f 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800253a:	2310      	movs	r3, #16
 800253c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800253e:	230b      	movs	r3, #11
 8002540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4619      	mov	r1, r3
 800254c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002550:	f001 fa52 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002554:	23e0      	movs	r3, #224	; 0xe0
 8002556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002558:	2302      	movs	r3, #2
 800255a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002560:	2303      	movs	r3, #3
 8002562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002564:	2305      	movs	r3, #5
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	4619      	mov	r1, r3
 800256e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002572:	f001 fa41 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002576:	2301      	movs	r3, #1
 8002578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800257a:	4b4d      	ldr	r3, [pc, #308]	; (80026b0 <MX_GPIO_Init+0x30c>)
 800257c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	4846      	ldr	r0, [pc, #280]	; (80026a4 <MX_GPIO_Init+0x300>)
 800258a:	f001 fa35 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800258e:	2302      	movs	r3, #2
 8002590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002592:	230b      	movs	r3, #11
 8002594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800259a:	f107 0314 	add.w	r3, r7, #20
 800259e:	4619      	mov	r1, r3
 80025a0:	4840      	ldr	r0, [pc, #256]	; (80026a4 <MX_GPIO_Init+0x300>)
 80025a2:	f001 fa29 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80025a6:	f24f 0334 	movw	r3, #61492	; 0xf034
 80025aa:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ac:	2301      	movs	r3, #1
 80025ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	4619      	mov	r1, r3
 80025be:	4839      	ldr	r0, [pc, #228]	; (80026a4 <MX_GPIO_Init+0x300>)
 80025c0:	f001 fa1a 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80025c4:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80025c8:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025ca:	4b39      	ldr	r3, [pc, #228]	; (80026b0 <MX_GPIO_Init+0x30c>)
 80025cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	4833      	ldr	r0, [pc, #204]	; (80026a8 <MX_GPIO_Init+0x304>)
 80025da:	f001 fa0d 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80025de:	f243 0381 	movw	r3, #12417	; 0x3081
 80025e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e4:	2301      	movs	r3, #1
 80025e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4619      	mov	r1, r3
 80025f6:	482c      	ldr	r0, [pc, #176]	; (80026a8 <MX_GPIO_Init+0x304>)
 80025f8:	f001 f9fe 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80025fc:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002602:	2301      	movs	r3, #1
 8002604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800260e:	f107 0314 	add.w	r3, r7, #20
 8002612:	4619      	mov	r1, r3
 8002614:	4825      	ldr	r0, [pc, #148]	; (80026ac <MX_GPIO_Init+0x308>)
 8002616:	f001 f9ef 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800261a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800261e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002620:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <MX_GPIO_Init+0x30c>)
 8002622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4619      	mov	r1, r3
 800262e:	481f      	ldr	r0, [pc, #124]	; (80026ac <MX_GPIO_Init+0x308>)
 8002630:	f001 f9e2 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002634:	2302      	movs	r3, #2
 8002636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002638:	2302      	movs	r3, #2
 800263a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002640:	2303      	movs	r3, #3
 8002642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002644:	2305      	movs	r3, #5
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	4619      	mov	r1, r3
 800264e:	4816      	ldr	r0, [pc, #88]	; (80026a8 <MX_GPIO_Init+0x304>)
 8002650:	f001 f9d2 	bl	80039f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002654:	2378      	movs	r3, #120	; 0x78
 8002656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002660:	2303      	movs	r3, #3
 8002662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002664:	2307      	movs	r3, #7
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4619      	mov	r1, r3
 800266e:	480e      	ldr	r0, [pc, #56]	; (80026a8 <MX_GPIO_Init+0x304>)
 8002670:	f001 f9c2 	bl	80039f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002674:	2200      	movs	r2, #0
 8002676:	2100      	movs	r1, #0
 8002678:	2017      	movs	r0, #23
 800267a:	f000 fdea 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800267e:	2017      	movs	r0, #23
 8002680:	f000 fe03 	bl	800328a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002684:	2200      	movs	r2, #0
 8002686:	2100      	movs	r1, #0
 8002688:	2028      	movs	r0, #40	; 0x28
 800268a:	f000 fde2 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800268e:	2028      	movs	r0, #40	; 0x28
 8002690:	f000 fdfb 	bl	800328a <HAL_NVIC_EnableIRQ>

}
 8002694:	bf00      	nop
 8002696:	3728      	adds	r7, #40	; 0x28
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	48001000 	.word	0x48001000
 80026a4:	48000400 	.word	0x48000400
 80026a8:	48000c00 	.word	0x48000c00
 80026ac:	48000800 	.word	0x48000800
 80026b0:	10110000 	.word	0x10110000
 80026b4:	10210000 	.word	0x10210000

080026b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ce:	4b0f      	ldr	r3, [pc, #60]	; (800270c <HAL_MspInit+0x44>)
 80026d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d2:	4a0e      	ldr	r2, [pc, #56]	; (800270c <HAL_MspInit+0x44>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6613      	str	r3, [r2, #96]	; 0x60
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <HAL_MspInit+0x44>)
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_MspInit+0x44>)
 80026e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ea:	4a08      	ldr	r2, [pc, #32]	; (800270c <HAL_MspInit+0x44>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f0:	6593      	str	r3, [r2, #88]	; 0x58
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_MspInit+0x44>)
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000

08002710 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <HAL_DFSDM_ChannelMspInit+0x7c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d128      	bne.n	8002782 <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002730:	4b17      	ldr	r3, [pc, #92]	; (8002790 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002734:	4a16      	ldr	r2, [pc, #88]	; (8002790 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273a:	6613      	str	r3, [r2, #96]	; 0x60
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_DFSDM_ChannelMspInit+0x80>)
 800273e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <HAL_DFSDM_ChannelMspInit+0x80>)
 800274a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274c:	4a10      	ldr	r2, [pc, #64]	; (8002790 <HAL_DFSDM_ChannelMspInit+0x80>)
 800274e:	f043 0310 	orr.w	r3, r3, #16
 8002752:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002754:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <HAL_DFSDM_ChannelMspInit+0x80>)
 8002756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002760:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
 8002768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002772:	2306      	movs	r3, #6
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002776:	f107 0314 	add.w	r3, r7, #20
 800277a:	4619      	mov	r1, r3
 800277c:	4805      	ldr	r0, [pc, #20]	; (8002794 <HAL_DFSDM_ChannelMspInit+0x84>)
 800277e:	f001 f93b 	bl	80039f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8002782:	bf00      	nop
 8002784:	3728      	adds	r7, #40	; 0x28
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000958 	.word	0x20000958
 8002790:	40021000 	.word	0x40021000
 8002794:	48001000 	.word	0x48001000

08002798 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08c      	sub	sp, #48	; 0x30
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a33      	ldr	r2, [pc, #204]	; (8002884 <HAL_I2C_MspInit+0xec>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d131      	bne.n	800281e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ba:	4b33      	ldr	r3, [pc, #204]	; (8002888 <HAL_I2C_MspInit+0xf0>)
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	4a32      	ldr	r2, [pc, #200]	; (8002888 <HAL_I2C_MspInit+0xf0>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c6:	4b30      	ldr	r3, [pc, #192]	; (8002888 <HAL_I2C_MspInit+0xf0>)
 80027c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	61bb      	str	r3, [r7, #24]
 80027d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80027d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027d8:	2312      	movs	r3, #18
 80027da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027dc:	2301      	movs	r3, #1
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e0:	2303      	movs	r3, #3
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027e4:	2304      	movs	r3, #4
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	4619      	mov	r1, r3
 80027ee:	4827      	ldr	r0, [pc, #156]	; (800288c <HAL_I2C_MspInit+0xf4>)
 80027f0:	f001 f902 	bl	80039f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027f4:	4b24      	ldr	r3, [pc, #144]	; (8002888 <HAL_I2C_MspInit+0xf0>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	4a23      	ldr	r2, [pc, #140]	; (8002888 <HAL_I2C_MspInit+0xf0>)
 80027fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002800:	4b21      	ldr	r3, [pc, #132]	; (8002888 <HAL_I2C_MspInit+0xf0>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800280c:	2200      	movs	r2, #0
 800280e:	2100      	movs	r1, #0
 8002810:	201f      	movs	r0, #31
 8002812:	f000 fd1e 	bl	8003252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002816:	201f      	movs	r0, #31
 8002818:	f000 fd37 	bl	800328a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800281c:	e02d      	b.n	800287a <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1b      	ldr	r2, [pc, #108]	; (8002890 <HAL_I2C_MspInit+0xf8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d128      	bne.n	800287a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002828:	4b17      	ldr	r3, [pc, #92]	; (8002888 <HAL_I2C_MspInit+0xf0>)
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	4a16      	ldr	r2, [pc, #88]	; (8002888 <HAL_I2C_MspInit+0xf0>)
 800282e:	f043 0302 	orr.w	r3, r3, #2
 8002832:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <HAL_I2C_MspInit+0xf0>)
 8002836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002840:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002846:	2312      	movs	r3, #18
 8002848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800284a:	2301      	movs	r3, #1
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284e:	2303      	movs	r3, #3
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002852:	2304      	movs	r3, #4
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002856:	f107 031c 	add.w	r3, r7, #28
 800285a:	4619      	mov	r1, r3
 800285c:	480b      	ldr	r0, [pc, #44]	; (800288c <HAL_I2C_MspInit+0xf4>)
 800285e:	f001 f8cb 	bl	80039f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_I2C_MspInit+0xf0>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <HAL_I2C_MspInit+0xf0>)
 8002868:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800286c:	6593      	str	r3, [r2, #88]	; 0x58
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_I2C_MspInit+0xf0>)
 8002870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
}
 800287a:	bf00      	nop
 800287c:	3730      	adds	r7, #48	; 0x30
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40005400 	.word	0x40005400
 8002888:	40021000 	.word	0x40021000
 800288c:	48000400 	.word	0x48000400
 8002890:	40005800 	.word	0x40005800

08002894 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a17      	ldr	r2, [pc, #92]	; (8002910 <HAL_QSPI_MspInit+0x7c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d128      	bne.n	8002908 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80028b6:	4b17      	ldr	r3, [pc, #92]	; (8002914 <HAL_QSPI_MspInit+0x80>)
 80028b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ba:	4a16      	ldr	r2, [pc, #88]	; (8002914 <HAL_QSPI_MspInit+0x80>)
 80028bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c0:	6513      	str	r3, [r2, #80]	; 0x50
 80028c2:	4b14      	ldr	r3, [pc, #80]	; (8002914 <HAL_QSPI_MspInit+0x80>)
 80028c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_QSPI_MspInit+0x80>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	4a10      	ldr	r2, [pc, #64]	; (8002914 <HAL_QSPI_MspInit+0x80>)
 80028d4:	f043 0310 	orr.w	r3, r3, #16
 80028d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <HAL_QSPI_MspInit+0x80>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80028e6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80028ea:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f4:	2303      	movs	r3, #3
 80028f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80028f8:	230a      	movs	r3, #10
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	4619      	mov	r1, r3
 8002902:	4805      	ldr	r0, [pc, #20]	; (8002918 <HAL_QSPI_MspInit+0x84>)
 8002904:	f001 f878 	bl	80039f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002908:	bf00      	nop
 800290a:	3728      	adds	r7, #40	; 0x28
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	a0001000 	.word	0xa0001000
 8002914:	40021000 	.word	0x40021000
 8002918:	48001000 	.word	0x48001000

0800291c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a17      	ldr	r2, [pc, #92]	; (8002998 <HAL_SPI_MspInit+0x7c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d128      	bne.n	8002990 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800293e:	4b17      	ldr	r3, [pc, #92]	; (800299c <HAL_SPI_MspInit+0x80>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	4a16      	ldr	r2, [pc, #88]	; (800299c <HAL_SPI_MspInit+0x80>)
 8002944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002948:	6593      	str	r3, [r2, #88]	; 0x58
 800294a:	4b14      	ldr	r3, [pc, #80]	; (800299c <HAL_SPI_MspInit+0x80>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002956:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_SPI_MspInit+0x80>)
 8002958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295a:	4a10      	ldr	r2, [pc, #64]	; (800299c <HAL_SPI_MspInit+0x80>)
 800295c:	f043 0304 	orr.w	r3, r3, #4
 8002960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <HAL_SPI_MspInit+0x80>)
 8002964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800296e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297c:	2303      	movs	r3, #3
 800297e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002980:	2306      	movs	r3, #6
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4619      	mov	r1, r3
 800298a:	4805      	ldr	r0, [pc, #20]	; (80029a0 <HAL_SPI_MspInit+0x84>)
 800298c:	f001 f834 	bl	80039f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002990:	bf00      	nop
 8002992:	3728      	adds	r7, #40	; 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40003c00 	.word	0x40003c00
 800299c:	40021000 	.word	0x40021000
 80029a0:	48000800 	.word	0x48000800

080029a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08e      	sub	sp, #56	; 0x38
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a62      	ldr	r2, [pc, #392]	; (8002b4c <HAL_UART_MspInit+0x1a8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d15a      	bne.n	8002a7c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029c6:	4b62      	ldr	r3, [pc, #392]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	4a61      	ldr	r2, [pc, #388]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 80029cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80029d0:	6593      	str	r3, [r2, #88]	; 0x58
 80029d2:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029da:	623b      	str	r3, [r7, #32]
 80029dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029de:	4b5c      	ldr	r3, [pc, #368]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e2:	4a5b      	ldr	r2, [pc, #364]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ea:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80029f6:	2303      	movs	r3, #3
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a02:	2303      	movs	r3, #3
 8002a04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a06:	2308      	movs	r3, #8
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a14:	f000 fff0 	bl	80039f8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel5;
 8002a18:	4b4e      	ldr	r3, [pc, #312]	; (8002b54 <HAL_UART_MspInit+0x1b0>)
 8002a1a:	4a4f      	ldr	r2, [pc, #316]	; (8002b58 <HAL_UART_MspInit+0x1b4>)
 8002a1c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_2;
 8002a1e:	4b4d      	ldr	r3, [pc, #308]	; (8002b54 <HAL_UART_MspInit+0x1b0>)
 8002a20:	2202      	movs	r2, #2
 8002a22:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a24:	4b4b      	ldr	r3, [pc, #300]	; (8002b54 <HAL_UART_MspInit+0x1b0>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a2a:	4b4a      	ldr	r3, [pc, #296]	; (8002b54 <HAL_UART_MspInit+0x1b0>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a30:	4b48      	ldr	r3, [pc, #288]	; (8002b54 <HAL_UART_MspInit+0x1b0>)
 8002a32:	2280      	movs	r2, #128	; 0x80
 8002a34:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_UART_MspInit+0x1b0>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a3c:	4b45      	ldr	r3, [pc, #276]	; (8002b54 <HAL_UART_MspInit+0x1b0>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002a42:	4b44      	ldr	r3, [pc, #272]	; (8002b54 <HAL_UART_MspInit+0x1b0>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a48:	4b42      	ldr	r3, [pc, #264]	; (8002b54 <HAL_UART_MspInit+0x1b0>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002a4e:	4841      	ldr	r0, [pc, #260]	; (8002b54 <HAL_UART_MspInit+0x1b0>)
 8002a50:	f000 fd42 	bl	80034d8 <HAL_DMA_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 8002a5a:	f7ff fe2d 	bl	80026b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a3c      	ldr	r2, [pc, #240]	; (8002b54 <HAL_UART_MspInit+0x1b0>)
 8002a62:	66da      	str	r2, [r3, #108]	; 0x6c
 8002a64:	4a3b      	ldr	r2, [pc, #236]	; (8002b54 <HAL_UART_MspInit+0x1b0>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6293      	str	r3, [r2, #40]	; 0x28

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	2034      	movs	r0, #52	; 0x34
 8002a70:	f000 fbef 	bl	8003252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002a74:	2034      	movs	r0, #52	; 0x34
 8002a76:	f000 fc08 	bl	800328a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a7a:	e063      	b.n	8002b44 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a36      	ldr	r2, [pc, #216]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d130      	bne.n	8002ae8 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a86:	4b32      	ldr	r3, [pc, #200]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 8002a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8a:	4a31      	ldr	r2, [pc, #196]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 8002a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a90:	6613      	str	r3, [r2, #96]	; 0x60
 8002a92:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 8002a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9a:	61bb      	str	r3, [r7, #24]
 8002a9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9e:	4b2c      	ldr	r3, [pc, #176]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	4a2b      	ldr	r2, [pc, #172]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 8002aa4:	f043 0302 	orr.w	r3, r3, #2
 8002aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aaa:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002ab6:	23c0      	movs	r3, #192	; 0xc0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ac6:	2307      	movs	r3, #7
 8002ac8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4823      	ldr	r0, [pc, #140]	; (8002b60 <HAL_UART_MspInit+0x1bc>)
 8002ad2:	f000 ff91 	bl	80039f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	2025      	movs	r0, #37	; 0x25
 8002adc:	f000 fbb9 	bl	8003252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ae0:	2025      	movs	r0, #37	; 0x25
 8002ae2:	f000 fbd2 	bl	800328a <HAL_NVIC_EnableIRQ>
}
 8002ae6:	e02d      	b.n	8002b44 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART3)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <HAL_UART_MspInit+0x1c0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d128      	bne.n	8002b44 <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002af2:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 8002af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002afc:	6593      	str	r3, [r2, #88]	; 0x58
 8002afe:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	4a10      	ldr	r2, [pc, #64]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 8002b10:	f043 0308 	orr.w	r3, r3, #8
 8002b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <HAL_UART_MspInit+0x1ac>)
 8002b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002b22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b30:	2303      	movs	r3, #3
 8002b32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b34:	2307      	movs	r3, #7
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	480a      	ldr	r0, [pc, #40]	; (8002b68 <HAL_UART_MspInit+0x1c4>)
 8002b40:	f000 ff5a 	bl	80039f8 <HAL_GPIO_Init>
}
 8002b44:	bf00      	nop
 8002b46:	3738      	adds	r7, #56	; 0x38
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40004c00 	.word	0x40004c00
 8002b50:	40021000 	.word	0x40021000
 8002b54:	20000a18 	.word	0x20000a18
 8002b58:	40020458 	.word	0x40020458
 8002b5c:	40013800 	.word	0x40013800
 8002b60:	48000400 	.word	0x48000400
 8002b64:	40004800 	.word	0x40004800
 8002b68:	48000c00 	.word	0x48000c00

08002b6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b8c:	d154      	bne.n	8002c38 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8e:	4b2c      	ldr	r3, [pc, #176]	; (8002c40 <HAL_PCD_MspInit+0xd4>)
 8002b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b92:	4a2b      	ldr	r2, [pc, #172]	; (8002c40 <HAL_PCD_MspInit+0xd4>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b9a:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <HAL_PCD_MspInit+0xd4>)
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bbe:	f000 ff1b 	bl	80039f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002bc2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002bd4:	230a      	movs	r3, #10
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be2:	f000 ff09 	bl	80039f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <HAL_PCD_MspInit+0xd4>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	4a15      	ldr	r2, [pc, #84]	; (8002c40 <HAL_PCD_MspInit+0xd4>)
 8002bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf2:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <HAL_PCD_MspInit+0xd4>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <HAL_PCD_MspInit+0xd4>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d114      	bne.n	8002c34 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <HAL_PCD_MspInit+0xd4>)
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0e:	4a0c      	ldr	r2, [pc, #48]	; (8002c40 <HAL_PCD_MspInit+0xd4>)
 8002c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c14:	6593      	str	r3, [r2, #88]	; 0x58
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_PCD_MspInit+0xd4>)
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002c22:	f003 f81f 	bl	8005c64 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_PCD_MspInit+0xd4>)
 8002c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2a:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <HAL_PCD_MspInit+0xd4>)
 8002c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c30:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002c32:	e001      	b.n	8002c38 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8002c34:	f003 f816 	bl	8005c64 <HAL_PWREx_EnableVddUSB>
}
 8002c38:	bf00      	nop
 8002c3a:	3728      	adds	r7, #40	; 0x28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000

08002c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c56:	e7fe      	b.n	8002c56 <HardFault_Handler+0x4>

08002c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c5c:	e7fe      	b.n	8002c5c <MemManage_Handler+0x4>

08002c5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c62:	e7fe      	b.n	8002c62 <BusFault_Handler+0x4>

08002c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c68:	e7fe      	b.n	8002c68 <UsageFault_Handler+0x4>

08002c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c98:	f000 f9be 	bl	8003018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002ca4:	2020      	movs	r0, #32
 8002ca6:	f001 f867 	bl	8003d78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002caa:	2040      	movs	r0, #64	; 0x40
 8002cac:	f001 f864 	bl	8003d78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002cb0:	2080      	movs	r0, #128	; 0x80
 8002cb2:	f001 f861 	bl	8003d78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002cb6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002cba:	f001 f85d 	bl	8003d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <I2C1_EV_IRQHandler+0x10>)
 8002cca:	f001 fa6b 	bl	80041a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000ae0 	.word	0x20000ae0

08002cd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002cdc:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <USART1_IRQHandler+0x10>)
 8002cde:	f004 fe17 	bl	8007910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000fec 	.word	0x20000fec

08002cec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002cf0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002cf4:	f001 f840 	bl	8003d78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002cf8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002cfc:	f001 f83c 	bl	8003d78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002d00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d04:	f001 f838 	bl	8003d78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002d08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d0c:	f001 f834 	bl	8003d78 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002d10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002d14:	f001 f830 	bl	8003d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
  user_UART_IDLE_IT_handler();
 8002d20:	f7fe feac 	bl	8001a7c <user_UART_IDLE_IT_handler>

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002d24:	4802      	ldr	r0, [pc, #8]	; (8002d30 <UART4_IRQHandler+0x14>)
 8002d26:	f004 fdf3 	bl	8007910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20001070 	.word	0x20001070

08002d34 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002d38:	4802      	ldr	r0, [pc, #8]	; (8002d44 <DMA2_Channel5_IRQHandler+0x10>)
 8002d3a:	f000 fd64 	bl	8003806 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000a18 	.word	0x20000a18

08002d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d50:	4a14      	ldr	r2, [pc, #80]	; (8002da4 <_sbrk+0x5c>)
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <_sbrk+0x60>)
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d5c:	4b13      	ldr	r3, [pc, #76]	; (8002dac <_sbrk+0x64>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d102      	bne.n	8002d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d64:	4b11      	ldr	r3, [pc, #68]	; (8002dac <_sbrk+0x64>)
 8002d66:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <_sbrk+0x68>)
 8002d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <_sbrk+0x64>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d207      	bcs.n	8002d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d78:	f005 ffb8 	bl	8008cec <__errno>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	230c      	movs	r3, #12
 8002d80:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d86:	e009      	b.n	8002d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d88:	4b08      	ldr	r3, [pc, #32]	; (8002dac <_sbrk+0x64>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d8e:	4b07      	ldr	r3, [pc, #28]	; (8002dac <_sbrk+0x64>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	4a05      	ldr	r2, [pc, #20]	; (8002dac <_sbrk+0x64>)
 8002d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20018000 	.word	0x20018000
 8002da8:	00000400 	.word	0x00000400
 8002dac:	2000095c 	.word	0x2000095c
 8002db0:	20001140 	.word	0x20001140

08002db4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002db8:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <SystemInit+0x64>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	4a16      	ldr	r2, [pc, #88]	; (8002e18 <SystemInit+0x64>)
 8002dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <SystemInit+0x68>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a13      	ldr	r2, [pc, #76]	; (8002e1c <SystemInit+0x68>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <SystemInit+0x68>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <SystemInit+0x68>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a0f      	ldr	r2, [pc, #60]	; (8002e1c <SystemInit+0x68>)
 8002de0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002de4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002de8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <SystemInit+0x68>)
 8002dec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002df0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <SystemInit+0x68>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a09      	ldr	r2, [pc, #36]	; (8002e1c <SystemInit+0x68>)
 8002df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dfc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002dfe:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <SystemInit+0x68>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <SystemInit+0x64>)
 8002e06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e0a:	609a      	str	r2, [r3, #8]
#endif
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	e000ed00 	.word	0xe000ed00
 8002e1c:	40021000 	.word	0x40021000

08002e20 <uatr_comport_comunication_init>:

static uint8_t comand_RX[COM_LEN]={0};	/**< UART Rx buffer*/

static bool DAV_flag = false;	/**< data valid flag. When true, uart_comport_task will triggered task() function.*/

void uatr_comport_comunication_init(UART_HandleTypeDef *huart){
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	com_huart = huart;
 8002e28:	4a06      	ldr	r2, [pc, #24]	; (8002e44 <uatr_comport_comunication_init+0x24>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(com_huart, comand_RX, COM_LEN);
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <uatr_comport_comunication_init+0x24>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2209      	movs	r2, #9
 8002e34:	4904      	ldr	r1, [pc, #16]	; (8002e48 <uatr_comport_comunication_init+0x28>)
 8002e36:	4618      	mov	r0, r3
 8002e38:	f004 fbd8 	bl	80075ec <HAL_UART_Receive_IT>
}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	200009dc 	.word	0x200009dc
 8002e48:	20000960 	.word	0x20000960

08002e4c <uatr_comport_read_data>:

void uatr_comport_read_data(){
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
	DAV_flag = true;
 8002e52:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <uatr_comport_read_data+0x6c>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<3; i++){
 8002e58:	2300      	movs	r3, #0
 8002e5a:	607b      	str	r3, [r7, #4]
 8002e5c:	e00b      	b.n	8002e76 <uatr_comport_read_data+0x2a>
		start_speed[i]=comand_RX[i];
 8002e5e:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <uatr_comport_read_data+0x70>)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	7819      	ldrb	r1, [r3, #0]
 8002e66:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <uatr_comport_read_data+0x74>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	460a      	mov	r2, r1
 8002e6e:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<3; i++){
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3301      	adds	r3, #1
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	ddf0      	ble.n	8002e5e <uatr_comport_read_data+0x12>
	}
	for (int i=0; i<3; i++){
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	e00b      	b.n	8002e9a <uatr_comport_read_data+0x4e>
		stop_speed[i]=comand_RX[i+4];
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	3304      	adds	r3, #4
 8002e86:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <uatr_comport_read_data+0x70>)
 8002e88:	5cd1      	ldrb	r1, [r2, r3]
 8002e8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <uatr_comport_read_data+0x78>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	460a      	mov	r2, r1
 8002e92:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<3; i++){
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	3301      	adds	r3, #1
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	ddf0      	ble.n	8002e82 <uatr_comport_read_data+0x36>
	}
	HAL_UART_Receive_IT(com_huart, comand_RX, COM_LEN);
 8002ea0:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <uatr_comport_read_data+0x7c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2209      	movs	r2, #9
 8002ea6:	4905      	ldr	r1, [pc, #20]	; (8002ebc <uatr_comport_read_data+0x70>)
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f004 fb9f 	bl	80075ec <HAL_UART_Receive_IT>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000969 	.word	0x20000969
 8002ebc:	20000960 	.word	0x20000960
 8002ec0:	20000fe8 	.word	0x20000fe8
 8002ec4:	20000f80 	.word	0x20000f80
 8002ec8:	200009dc 	.word	0x200009dc

08002ecc <uatr_comport_send_data>:

void uatr_comport_send_data(uint8_t* data, uint8_t data_len){
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit_IT(com_huart, data, data_len);
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <uatr_comport_send_data+0x24>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	b292      	uxth	r2, r2
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f004 fb26 	bl	8007534 <HAL_UART_Transmit_IT>
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	200009dc 	.word	0x200009dc

08002ef4 <uart_comport_task>:

void uart_comport_task(void (*task)(void)){
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	if (DAV_flag){
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <uart_comport_task+0x24>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <uart_comport_task+0x1a>
		task();
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4798      	blx	r3
		DAV_flag=false;
 8002f08:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <uart_comport_task+0x24>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
	}
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000969 	.word	0x20000969

08002f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f20:	f7ff ff48 	bl	8002db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f26:	e003      	b.n	8002f30 <LoopCopyDataInit>

08002f28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f2e:	3104      	adds	r1, #4

08002f30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f30:	480a      	ldr	r0, [pc, #40]	; (8002f5c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f38:	d3f6      	bcc.n	8002f28 <CopyDataInit>
	ldr	r2, =_sbss
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002f3c:	e002      	b.n	8002f44 <LoopFillZerobss>

08002f3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f40:	f842 3b04 	str.w	r3, [r2], #4

08002f44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <LoopForever+0x16>)
	cmp	r2, r3
 8002f46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002f48:	d3f9      	bcc.n	8002f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f4a:	f005 fed5 	bl	8008cf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f4e:	f7fe ff2f 	bl	8001db0 <main>

08002f52 <LoopForever>:

LoopForever:
    b LoopForever
 8002f52:	e7fe      	b.n	8002f52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f54:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002f58:	0800c808 	.word	0x0800c808
	ldr	r0, =_sdata
 8002f5c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f60:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8002f64:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8002f68:	2000113c 	.word	0x2000113c

08002f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f6c:	e7fe      	b.n	8002f6c <ADC1_2_IRQHandler>

08002f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f78:	2003      	movs	r0, #3
 8002f7a:	f000 f95f 	bl	800323c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f000 f80e 	bl	8002fa0 <HAL_InitTick>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	71fb      	strb	r3, [r7, #7]
 8002f8e:	e001      	b.n	8002f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f90:	f7ff fb9a 	bl	80026c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f94:	79fb      	ldrb	r3, [r7, #7]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002fac:	4b17      	ldr	r3, [pc, #92]	; (800300c <HAL_InitTick+0x6c>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d023      	beq.n	8002ffc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002fb4:	4b16      	ldr	r3, [pc, #88]	; (8003010 <HAL_InitTick+0x70>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4b14      	ldr	r3, [pc, #80]	; (800300c <HAL_InitTick+0x6c>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f96b 	bl	80032a6 <HAL_SYSTICK_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b0f      	cmp	r3, #15
 8002fda:	d809      	bhi.n	8002ff0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fe4:	f000 f935 	bl	8003252 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fe8:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <HAL_InitTick+0x74>)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e007      	b.n	8003000 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
 8002ff4:	e004      	b.n	8003000 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
 8002ffa:	e001      	b.n	8003000 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003000:	7bfb      	ldrb	r3, [r7, #15]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20000008 	.word	0x20000008
 8003010:	20000000 	.word	0x20000000
 8003014:	20000004 	.word	0x20000004

08003018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_IncTick+0x20>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_IncTick+0x24>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4413      	add	r3, r2
 8003028:	4a04      	ldr	r2, [pc, #16]	; (800303c <HAL_IncTick+0x24>)
 800302a:	6013      	str	r3, [r2, #0]
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000008 	.word	0x20000008
 800303c:	20001134 	.word	0x20001134

08003040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return uwTick;
 8003044:	4b03      	ldr	r3, [pc, #12]	; (8003054 <HAL_GetTick+0x14>)
 8003046:	681b      	ldr	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20001134 	.word	0x20001134

08003058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003060:	f7ff ffee 	bl	8003040 <HAL_GetTick>
 8003064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003070:	d005      	beq.n	800307e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_Delay+0x40>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800307e:	bf00      	nop
 8003080:	f7ff ffde 	bl	8003040 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	429a      	cmp	r2, r3
 800308e:	d8f7      	bhi.n	8003080 <HAL_Delay+0x28>
  {
  }
}
 8003090:	bf00      	nop
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000008 	.word	0x20000008

0800309c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <__NVIC_SetPriorityGrouping+0x44>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030b8:	4013      	ands	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ce:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <__NVIC_SetPriorityGrouping+0x44>)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	60d3      	str	r3, [r2, #12]
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e8:	4b04      	ldr	r3, [pc, #16]	; (80030fc <__NVIC_GetPriorityGrouping+0x18>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	0a1b      	lsrs	r3, r3, #8
 80030ee:	f003 0307 	and.w	r3, r3, #7
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	2b00      	cmp	r3, #0
 8003110:	db0b      	blt.n	800312a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	f003 021f 	and.w	r2, r3, #31
 8003118:	4907      	ldr	r1, [pc, #28]	; (8003138 <__NVIC_EnableIRQ+0x38>)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	2001      	movs	r0, #1
 8003122:	fa00 f202 	lsl.w	r2, r0, r2
 8003126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	e000e100 	.word	0xe000e100

0800313c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	6039      	str	r1, [r7, #0]
 8003146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314c:	2b00      	cmp	r3, #0
 800314e:	db0a      	blt.n	8003166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	b2da      	uxtb	r2, r3
 8003154:	490c      	ldr	r1, [pc, #48]	; (8003188 <__NVIC_SetPriority+0x4c>)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	0112      	lsls	r2, r2, #4
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	440b      	add	r3, r1
 8003160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003164:	e00a      	b.n	800317c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	b2da      	uxtb	r2, r3
 800316a:	4908      	ldr	r1, [pc, #32]	; (800318c <__NVIC_SetPriority+0x50>)
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	3b04      	subs	r3, #4
 8003174:	0112      	lsls	r2, r2, #4
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	440b      	add	r3, r1
 800317a:	761a      	strb	r2, [r3, #24]
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	e000e100 	.word	0xe000e100
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003190:	b480      	push	{r7}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f1c3 0307 	rsb	r3, r3, #7
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	bf28      	it	cs
 80031ae:	2304      	movcs	r3, #4
 80031b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3304      	adds	r3, #4
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d902      	bls.n	80031c0 <NVIC_EncodePriority+0x30>
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3b03      	subs	r3, #3
 80031be:	e000      	b.n	80031c2 <NVIC_EncodePriority+0x32>
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43da      	mvns	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	401a      	ands	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	43d9      	mvns	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e8:	4313      	orrs	r3, r2
         );
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3724      	adds	r7, #36	; 0x24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003208:	d301      	bcc.n	800320e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320a:	2301      	movs	r3, #1
 800320c:	e00f      	b.n	800322e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800320e:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <SysTick_Config+0x40>)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3b01      	subs	r3, #1
 8003214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003216:	210f      	movs	r1, #15
 8003218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800321c:	f7ff ff8e 	bl	800313c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <SysTick_Config+0x40>)
 8003222:	2200      	movs	r2, #0
 8003224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003226:	4b04      	ldr	r3, [pc, #16]	; (8003238 <SysTick_Config+0x40>)
 8003228:	2207      	movs	r2, #7
 800322a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	e000e010 	.word	0xe000e010

0800323c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff ff29 	bl	800309c <__NVIC_SetPriorityGrouping>
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b086      	sub	sp, #24
 8003256:	af00      	add	r7, sp, #0
 8003258:	4603      	mov	r3, r0
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003264:	f7ff ff3e 	bl	80030e4 <__NVIC_GetPriorityGrouping>
 8003268:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	6978      	ldr	r0, [r7, #20]
 8003270:	f7ff ff8e 	bl	8003190 <NVIC_EncodePriority>
 8003274:	4602      	mov	r2, r0
 8003276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ff5d 	bl	800313c <__NVIC_SetPriority>
}
 8003282:	bf00      	nop
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	4603      	mov	r3, r0
 8003292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff31 	bl	8003100 <__NVIC_EnableIRQ>
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff ffa2 	bl	80031f8 <SysTick_Config>
 80032b4:	4603      	mov	r3, r0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e0ac      	b.n	800342c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f8b2 	bl	8003440 <DFSDM_GetChannelFromInstance>
 80032dc:	4602      	mov	r2, r0
 80032de:	4b55      	ldr	r3, [pc, #340]	; (8003434 <HAL_DFSDM_ChannelInit+0x174>)
 80032e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e09f      	b.n	800342c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff fa0f 	bl	8002710 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80032f2:	4b51      	ldr	r3, [pc, #324]	; (8003438 <HAL_DFSDM_ChannelInit+0x178>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3301      	adds	r3, #1
 80032f8:	4a4f      	ldr	r2, [pc, #316]	; (8003438 <HAL_DFSDM_ChannelInit+0x178>)
 80032fa:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80032fc:	4b4e      	ldr	r3, [pc, #312]	; (8003438 <HAL_DFSDM_ChannelInit+0x178>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d125      	bne.n	8003350 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003304:	4b4d      	ldr	r3, [pc, #308]	; (800343c <HAL_DFSDM_ChannelInit+0x17c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a4c      	ldr	r2, [pc, #304]	; (800343c <HAL_DFSDM_ChannelInit+0x17c>)
 800330a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800330e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003310:	4b4a      	ldr	r3, [pc, #296]	; (800343c <HAL_DFSDM_ChannelInit+0x17c>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	4948      	ldr	r1, [pc, #288]	; (800343c <HAL_DFSDM_ChannelInit+0x17c>)
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800331e:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_DFSDM_ChannelInit+0x17c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a46      	ldr	r2, [pc, #280]	; (800343c <HAL_DFSDM_ChannelInit+0x17c>)
 8003324:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003328:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	791b      	ldrb	r3, [r3, #4]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d108      	bne.n	8003344 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003332:	4b42      	ldr	r3, [pc, #264]	; (800343c <HAL_DFSDM_ChannelInit+0x17c>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	3b01      	subs	r3, #1
 800333c:	041b      	lsls	r3, r3, #16
 800333e:	493f      	ldr	r1, [pc, #252]	; (800343c <HAL_DFSDM_ChannelInit+0x17c>)
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003344:	4b3d      	ldr	r3, [pc, #244]	; (800343c <HAL_DFSDM_ChannelInit+0x17c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a3c      	ldr	r2, [pc, #240]	; (800343c <HAL_DFSDM_ChannelInit+0x17c>)
 800334a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800334e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800335e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6819      	ldr	r1, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800336e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003374:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 020f 	bic.w	r2, r2, #15
 800338c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80033b4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6899      	ldr	r1, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	3b01      	subs	r3, #1
 80033c6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f002 0207 	and.w	r2, r2, #7
 80033e0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800340c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f810 	bl	8003440 <DFSDM_GetChannelFromInstance>
 8003420:	4601      	mov	r1, r0
 8003422:	4a04      	ldr	r2, [pc, #16]	; (8003434 <HAL_DFSDM_ChannelInit+0x174>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000970 	.word	0x20000970
 8003438:	2000096c 	.word	0x2000096c
 800343c:	40016000 	.word	0x40016000

08003440 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <DFSDM_GetChannelFromInstance+0x7c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d102      	bne.n	8003456 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	e02b      	b.n	80034ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a19      	ldr	r2, [pc, #100]	; (80034c0 <DFSDM_GetChannelFromInstance+0x80>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d102      	bne.n	8003464 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800345e:	2301      	movs	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	e024      	b.n	80034ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a17      	ldr	r2, [pc, #92]	; (80034c4 <DFSDM_GetChannelFromInstance+0x84>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d102      	bne.n	8003472 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800346c:	2302      	movs	r3, #2
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	e01d      	b.n	80034ae <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a14      	ldr	r2, [pc, #80]	; (80034c8 <DFSDM_GetChannelFromInstance+0x88>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d102      	bne.n	8003480 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800347a:	2304      	movs	r3, #4
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	e016      	b.n	80034ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a12      	ldr	r2, [pc, #72]	; (80034cc <DFSDM_GetChannelFromInstance+0x8c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d102      	bne.n	800348e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003488:	2305      	movs	r3, #5
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e00f      	b.n	80034ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a0f      	ldr	r2, [pc, #60]	; (80034d0 <DFSDM_GetChannelFromInstance+0x90>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d102      	bne.n	800349c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003496:	2306      	movs	r3, #6
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	e008      	b.n	80034ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a0d      	ldr	r2, [pc, #52]	; (80034d4 <DFSDM_GetChannelFromInstance+0x94>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d102      	bne.n	80034aa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80034a4:	2307      	movs	r3, #7
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	e001      	b.n	80034ae <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80034aa:	2303      	movs	r3, #3
 80034ac:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80034ae:	68fb      	ldr	r3, [r7, #12]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	40016000 	.word	0x40016000
 80034c0:	40016020 	.word	0x40016020
 80034c4:	40016040 	.word	0x40016040
 80034c8:	40016080 	.word	0x40016080
 80034cc:	400160a0 	.word	0x400160a0
 80034d0:	400160c0 	.word	0x400160c0
 80034d4:	400160e0 	.word	0x400160e0

080034d8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e098      	b.n	800361c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	4b4d      	ldr	r3, [pc, #308]	; (8003628 <HAL_DMA_Init+0x150>)
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d80f      	bhi.n	8003516 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	4b4b      	ldr	r3, [pc, #300]	; (800362c <HAL_DMA_Init+0x154>)
 80034fe:	4413      	add	r3, r2
 8003500:	4a4b      	ldr	r2, [pc, #300]	; (8003630 <HAL_DMA_Init+0x158>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	091b      	lsrs	r3, r3, #4
 8003508:	009a      	lsls	r2, r3, #2
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a48      	ldr	r2, [pc, #288]	; (8003634 <HAL_DMA_Init+0x15c>)
 8003512:	641a      	str	r2, [r3, #64]	; 0x40
 8003514:	e00e      	b.n	8003534 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	4b46      	ldr	r3, [pc, #280]	; (8003638 <HAL_DMA_Init+0x160>)
 800351e:	4413      	add	r3, r2
 8003520:	4a43      	ldr	r2, [pc, #268]	; (8003630 <HAL_DMA_Init+0x158>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	009a      	lsls	r2, r3, #2
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a42      	ldr	r2, [pc, #264]	; (800363c <HAL_DMA_Init+0x164>)
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800354a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003558:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800358e:	d039      	beq.n	8003604 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	4a27      	ldr	r2, [pc, #156]	; (8003634 <HAL_DMA_Init+0x15c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d11a      	bne.n	80035d0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800359a:	4b29      	ldr	r3, [pc, #164]	; (8003640 <HAL_DMA_Init+0x168>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	f003 031c 	and.w	r3, r3, #28
 80035a6:	210f      	movs	r1, #15
 80035a8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	4924      	ldr	r1, [pc, #144]	; (8003640 <HAL_DMA_Init+0x168>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80035b4:	4b22      	ldr	r3, [pc, #136]	; (8003640 <HAL_DMA_Init+0x168>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6859      	ldr	r1, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c0:	f003 031c 	and.w	r3, r3, #28
 80035c4:	fa01 f303 	lsl.w	r3, r1, r3
 80035c8:	491d      	ldr	r1, [pc, #116]	; (8003640 <HAL_DMA_Init+0x168>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]
 80035ce:	e019      	b.n	8003604 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80035d0:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <HAL_DMA_Init+0x16c>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d8:	f003 031c 	and.w	r3, r3, #28
 80035dc:	210f      	movs	r1, #15
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	4917      	ldr	r1, [pc, #92]	; (8003644 <HAL_DMA_Init+0x16c>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80035ea:	4b16      	ldr	r3, [pc, #88]	; (8003644 <HAL_DMA_Init+0x16c>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6859      	ldr	r1, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	f003 031c 	and.w	r3, r3, #28
 80035fa:	fa01 f303 	lsl.w	r3, r1, r3
 80035fe:	4911      	ldr	r1, [pc, #68]	; (8003644 <HAL_DMA_Init+0x16c>)
 8003600:	4313      	orrs	r3, r2
 8003602:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	40020407 	.word	0x40020407
 800362c:	bffdfff8 	.word	0xbffdfff8
 8003630:	cccccccd 	.word	0xcccccccd
 8003634:	40020000 	.word	0x40020000
 8003638:	bffdfbf8 	.word	0xbffdfbf8
 800363c:	40020400 	.word	0x40020400
 8003640:	400200a8 	.word	0x400200a8
 8003644:	400204a8 	.word	0x400204a8

08003648 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_DMA_Start_IT+0x20>
 8003664:	2302      	movs	r3, #2
 8003666:	e04b      	b.n	8003700 <HAL_DMA_Start_IT+0xb8>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d13a      	bne.n	80036f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f979 	bl	8003998 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 020e 	orr.w	r2, r2, #14
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e00f      	b.n	80036e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0204 	bic.w	r2, r2, #4
 80036ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 020a 	orr.w	r2, r2, #10
 80036de:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	e005      	b.n	80036fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036fa:	2302      	movs	r3, #2
 80036fc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d008      	beq.n	8003732 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2204      	movs	r2, #4
 8003724:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e022      	b.n	8003778 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 020e 	bic.w	r2, r2, #14
 8003740:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f003 021c 	and.w	r2, r3, #28
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	2101      	movs	r1, #1
 8003760:	fa01 f202 	lsl.w	r2, r1, r2
 8003764:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003776:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d005      	beq.n	80037a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2204      	movs	r2, #4
 80037a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
 80037a6:	e029      	b.n	80037fc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 020e 	bic.w	r2, r2, #14
 80037b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037cc:	f003 021c 	and.w	r2, r3, #28
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	2101      	movs	r1, #1
 80037d6:	fa01 f202 	lsl.w	r2, r1, r2
 80037da:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	4798      	blx	r3
    }
  }
  return status;
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f003 031c 	and.w	r3, r3, #28
 8003826:	2204      	movs	r2, #4
 8003828:	409a      	lsls	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d026      	beq.n	8003880 <HAL_DMA_IRQHandler+0x7a>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d021      	beq.n	8003880 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0320 	and.w	r3, r3, #32
 8003846:	2b00      	cmp	r3, #0
 8003848:	d107      	bne.n	800385a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0204 	bic.w	r2, r2, #4
 8003858:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	f003 021c 	and.w	r2, r3, #28
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	2104      	movs	r1, #4
 8003868:	fa01 f202 	lsl.w	r2, r1, r2
 800386c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	2b00      	cmp	r3, #0
 8003874:	d071      	beq.n	800395a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800387e:	e06c      	b.n	800395a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	f003 031c 	and.w	r3, r3, #28
 8003888:	2202      	movs	r2, #2
 800388a:	409a      	lsls	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d02e      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xec>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d029      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 020a 	bic.w	r2, r2, #10
 80038ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c8:	f003 021c 	and.w	r2, r3, #28
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	2102      	movs	r1, #2
 80038d2:	fa01 f202 	lsl.w	r2, r1, r2
 80038d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d038      	beq.n	800395a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80038f0:	e033      	b.n	800395a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f003 031c 	and.w	r3, r3, #28
 80038fa:	2208      	movs	r2, #8
 80038fc:	409a      	lsls	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4013      	ands	r3, r2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d02a      	beq.n	800395c <HAL_DMA_IRQHandler+0x156>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d025      	beq.n	800395c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 020e 	bic.w	r2, r2, #14
 800391e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003924:	f003 021c 	and.w	r2, r3, #28
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	2101      	movs	r1, #1
 800392e:	fa01 f202 	lsl.w	r2, r1, r2
 8003932:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800395a:	bf00      	nop
 800395c:	bf00      	nop
}
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003972:	b2db      	uxtb	r3, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	f003 021c 	and.w	r2, r3, #28
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	2101      	movs	r1, #1
 80039b4:	fa01 f202 	lsl.w	r2, r1, r2
 80039b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d108      	bne.n	80039dc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039da:	e007      	b.n	80039ec <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	60da      	str	r2, [r3, #12]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a06:	e17f      	b.n	8003d08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	4013      	ands	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8171 	beq.w	8003d02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d00b      	beq.n	8003a40 <HAL_GPIO_Init+0x48>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d007      	beq.n	8003a40 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a34:	2b11      	cmp	r3, #17
 8003a36:	d003      	beq.n	8003a40 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b12      	cmp	r3, #18
 8003a3e:	d130      	bne.n	8003aa2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a76:	2201      	movs	r2, #1
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	f003 0201 	and.w	r2, r3, #1
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d118      	bne.n	8003ae0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	08db      	lsrs	r3, r3, #3
 8003aca:	f003 0201 	and.w	r2, r3, #1
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	2203      	movs	r2, #3
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d003      	beq.n	8003b20 <HAL_GPIO_Init+0x128>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b12      	cmp	r3, #18
 8003b1e:	d123      	bne.n	8003b68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	08da      	lsrs	r2, r3, #3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3208      	adds	r2, #8
 8003b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	220f      	movs	r2, #15
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4013      	ands	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	08da      	lsrs	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3208      	adds	r2, #8
 8003b62:	6939      	ldr	r1, [r7, #16]
 8003b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	2203      	movs	r2, #3
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 0203 	and.w	r2, r3, #3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 80ac 	beq.w	8003d02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003baa:	4b5e      	ldr	r3, [pc, #376]	; (8003d24 <HAL_GPIO_Init+0x32c>)
 8003bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bae:	4a5d      	ldr	r2, [pc, #372]	; (8003d24 <HAL_GPIO_Init+0x32c>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6613      	str	r3, [r2, #96]	; 0x60
 8003bb6:	4b5b      	ldr	r3, [pc, #364]	; (8003d24 <HAL_GPIO_Init+0x32c>)
 8003bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bc2:	4a59      	ldr	r2, [pc, #356]	; (8003d28 <HAL_GPIO_Init+0x330>)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	089b      	lsrs	r3, r3, #2
 8003bc8:	3302      	adds	r3, #2
 8003bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	220f      	movs	r2, #15
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bec:	d025      	beq.n	8003c3a <HAL_GPIO_Init+0x242>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a4e      	ldr	r2, [pc, #312]	; (8003d2c <HAL_GPIO_Init+0x334>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01f      	beq.n	8003c36 <HAL_GPIO_Init+0x23e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4d      	ldr	r2, [pc, #308]	; (8003d30 <HAL_GPIO_Init+0x338>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d019      	beq.n	8003c32 <HAL_GPIO_Init+0x23a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a4c      	ldr	r2, [pc, #304]	; (8003d34 <HAL_GPIO_Init+0x33c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_GPIO_Init+0x236>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a4b      	ldr	r2, [pc, #300]	; (8003d38 <HAL_GPIO_Init+0x340>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00d      	beq.n	8003c2a <HAL_GPIO_Init+0x232>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a4a      	ldr	r2, [pc, #296]	; (8003d3c <HAL_GPIO_Init+0x344>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d007      	beq.n	8003c26 <HAL_GPIO_Init+0x22e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a49      	ldr	r2, [pc, #292]	; (8003d40 <HAL_GPIO_Init+0x348>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d101      	bne.n	8003c22 <HAL_GPIO_Init+0x22a>
 8003c1e:	2306      	movs	r3, #6
 8003c20:	e00c      	b.n	8003c3c <HAL_GPIO_Init+0x244>
 8003c22:	2307      	movs	r3, #7
 8003c24:	e00a      	b.n	8003c3c <HAL_GPIO_Init+0x244>
 8003c26:	2305      	movs	r3, #5
 8003c28:	e008      	b.n	8003c3c <HAL_GPIO_Init+0x244>
 8003c2a:	2304      	movs	r3, #4
 8003c2c:	e006      	b.n	8003c3c <HAL_GPIO_Init+0x244>
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e004      	b.n	8003c3c <HAL_GPIO_Init+0x244>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e002      	b.n	8003c3c <HAL_GPIO_Init+0x244>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <HAL_GPIO_Init+0x244>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	f002 0203 	and.w	r2, r2, #3
 8003c42:	0092      	lsls	r2, r2, #2
 8003c44:	4093      	lsls	r3, r2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c4c:	4936      	ldr	r1, [pc, #216]	; (8003d28 <HAL_GPIO_Init+0x330>)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	089b      	lsrs	r3, r3, #2
 8003c52:	3302      	adds	r3, #2
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c5a:	4b3a      	ldr	r3, [pc, #232]	; (8003d44 <HAL_GPIO_Init+0x34c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c7e:	4a31      	ldr	r2, [pc, #196]	; (8003d44 <HAL_GPIO_Init+0x34c>)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c84:	4b2f      	ldr	r3, [pc, #188]	; (8003d44 <HAL_GPIO_Init+0x34c>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ca8:	4a26      	ldr	r2, [pc, #152]	; (8003d44 <HAL_GPIO_Init+0x34c>)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cae:	4b25      	ldr	r3, [pc, #148]	; (8003d44 <HAL_GPIO_Init+0x34c>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cd2:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <HAL_GPIO_Init+0x34c>)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cd8:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <HAL_GPIO_Init+0x34c>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cfc:	4a11      	ldr	r2, [pc, #68]	; (8003d44 <HAL_GPIO_Init+0x34c>)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	3301      	adds	r3, #1
 8003d06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f47f ae78 	bne.w	8003a08 <HAL_GPIO_Init+0x10>
  }
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40010000 	.word	0x40010000
 8003d2c:	48000400 	.word	0x48000400
 8003d30:	48000800 	.word	0x48000800
 8003d34:	48000c00 	.word	0x48000c00
 8003d38:	48001000 	.word	0x48001000
 8003d3c:	48001400 	.word	0x48001400
 8003d40:	48001800 	.word	0x48001800
 8003d44:	40010400 	.word	0x40010400

08003d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]
 8003d54:	4613      	mov	r3, r2
 8003d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d58:	787b      	ldrb	r3, [r7, #1]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d5e:	887a      	ldrh	r2, [r7, #2]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d64:	e002      	b.n	8003d6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d66:	887a      	ldrh	r2, [r7, #2]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d82:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	88fb      	ldrh	r3, [r7, #6]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d006      	beq.n	8003d9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d8e:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d90:	88fb      	ldrh	r3, [r7, #6]
 8003d92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d94:	88fb      	ldrh	r3, [r7, #6]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f806 	bl	8003da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40010400 	.word	0x40010400

08003da8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e081      	b.n	8003ed4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d106      	bne.n	8003dea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7fe fcd7 	bl	8002798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2224      	movs	r2, #36	; 0x24
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e0e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e1e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d107      	bne.n	8003e38 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e34:	609a      	str	r2, [r3, #8]
 8003e36:	e006      	b.n	8003e46 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e44:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d104      	bne.n	8003e58 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e56:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6812      	ldr	r2, [r2, #0]
 8003e62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e6a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e7a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	ea42 0103 	orr.w	r1, r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	021a      	lsls	r2, r3, #8
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69d9      	ldr	r1, [r3, #28]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1a      	ldr	r2, [r3, #32]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	460b      	mov	r3, r1
 8003eea:	817b      	strh	r3, [r7, #10]
 8003eec:	4613      	mov	r3, r2
 8003eee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	f040 80da 	bne.w	80040b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_I2C_Master_Transmit+0x30>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e0d3      	b.n	80040b4 <HAL_I2C_Master_Transmit+0x1d8>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f14:	f7ff f894 	bl	8003040 <HAL_GetTick>
 8003f18:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	2319      	movs	r3, #25
 8003f20:	2201      	movs	r2, #1
 8003f22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f001 fa35 	bl	8005396 <I2C_WaitOnFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e0be      	b.n	80040b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2221      	movs	r2, #33	; 0x21
 8003f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2210      	movs	r2, #16
 8003f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	893a      	ldrh	r2, [r7, #8]
 8003f56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2bff      	cmp	r3, #255	; 0xff
 8003f66:	d90e      	bls.n	8003f86 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	22ff      	movs	r2, #255	; 0xff
 8003f6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	8979      	ldrh	r1, [r7, #10]
 8003f76:	4b51      	ldr	r3, [pc, #324]	; (80040bc <HAL_I2C_Master_Transmit+0x1e0>)
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f001 fb2c 	bl	80055dc <I2C_TransferConfig>
 8003f84:	e06c      	b.n	8004060 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	8979      	ldrh	r1, [r7, #10]
 8003f98:	4b48      	ldr	r3, [pc, #288]	; (80040bc <HAL_I2C_Master_Transmit+0x1e0>)
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f001 fb1b 	bl	80055dc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003fa6:	e05b      	b.n	8004060 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	6a39      	ldr	r1, [r7, #32]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f001 fa32 	bl	8005416 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e07b      	b.n	80040b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d034      	beq.n	8004060 <HAL_I2C_Master_Transmit+0x184>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d130      	bne.n	8004060 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	2200      	movs	r2, #0
 8004006:	2180      	movs	r1, #128	; 0x80
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f001 f9c4 	bl	8005396 <I2C_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e04d      	b.n	80040b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	2bff      	cmp	r3, #255	; 0xff
 8004020:	d90e      	bls.n	8004040 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	22ff      	movs	r2, #255	; 0xff
 8004026:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402c:	b2da      	uxtb	r2, r3
 800402e:	8979      	ldrh	r1, [r7, #10]
 8004030:	2300      	movs	r3, #0
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f001 facf 	bl	80055dc <I2C_TransferConfig>
 800403e:	e00f      	b.n	8004060 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404e:	b2da      	uxtb	r2, r3
 8004050:	8979      	ldrh	r1, [r7, #10]
 8004052:	2300      	movs	r3, #0
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f001 fabe 	bl	80055dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d19e      	bne.n	8003fa8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	6a39      	ldr	r1, [r7, #32]
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f001 fa11 	bl	8005496 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e01a      	b.n	80040b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2220      	movs	r2, #32
 8004084:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_I2C_Master_Transmit+0x1e4>)
 8004092:	400b      	ands	r3, r1
 8004094:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	e000      	b.n	80040b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80040b2:	2302      	movs	r3, #2
  }
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	80002000 	.word	0x80002000
 80040c0:	fe00e800 	.word	0xfe00e800

080040c4 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	607a      	str	r2, [r7, #4]
 80040ce:	461a      	mov	r2, r3
 80040d0:	460b      	mov	r3, r1
 80040d2:	817b      	strh	r3, [r7, #10]
 80040d4:	4613      	mov	r3, r2
 80040d6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d153      	bne.n	800418c <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f2:	d101      	bne.n	80040f8 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
 80040f6:	e04a      	b.n	800418e <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_I2C_Master_Transmit_IT+0x42>
 8004102:	2302      	movs	r3, #2
 8004104:	e043      	b.n	800418e <HAL_I2C_Master_Transmit_IT+0xca>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2221      	movs	r2, #33	; 0x21
 8004112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2210      	movs	r2, #16
 800411a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	893a      	ldrh	r2, [r7, #8]
 800412e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a19      	ldr	r2, [pc, #100]	; (8004198 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8004134:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4a18      	ldr	r2, [pc, #96]	; (800419c <HAL_I2C_Master_Transmit_IT+0xd8>)
 800413a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	2bff      	cmp	r3, #255	; 0xff
 8004144:	d906      	bls.n	8004154 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	22ff      	movs	r2, #255	; 0xff
 800414a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800414c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	e007      	b.n	8004164 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800415e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004162:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004168:	b2da      	uxtb	r2, r3
 800416a:	8979      	ldrh	r1, [r7, #10]
 800416c:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <HAL_I2C_Master_Transmit_IT+0xdc>)
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f001 fa32 	bl	80055dc <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004180:	2101      	movs	r1, #1
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f001 fa58 	bl	8005638 <I2C_Enable_IRQ>

    return HAL_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	e000      	b.n	800418e <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 800418c:	2302      	movs	r3, #2
  }
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	ffff0000 	.word	0xffff0000
 800419c:	08004295 	.word	0x08004295
 80041a0:	80002000 	.word	0x80002000

080041a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	68f9      	ldr	r1, [r7, #12]
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
  }
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	70fb      	strb	r3, [r7, #3]
 8004220:	4613      	mov	r3, r2
 8004222:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af02      	add	r7, sp, #8
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <I2C_Master_ISR_IT+0x1e>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e115      	b.n	80044de <I2C_Master_ISR_IT+0x24a>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d013      	beq.n	80042ee <I2C_Master_ISR_IT+0x5a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00d      	beq.n	80042ee <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2210      	movs	r2, #16
 80042d8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	f043 0204 	orr.w	r2, r3, #4
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f001 f813 	bl	8005312 <I2C_Flush_TXDR>
 80042ec:	e0e2      	b.n	80044b4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	089b      	lsrs	r3, r3, #2
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d023      	beq.n	8004342 <I2C_Master_ISR_IT+0xae>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	089b      	lsrs	r3, r3, #2
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d01d      	beq.n	8004342 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f023 0304 	bic.w	r3, r3, #4
 800430c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004340:	e0b8      	b.n	80044b4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01e      	beq.n	800438c <I2C_Master_ISR_IT+0xf8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d018      	beq.n	800438c <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	781a      	ldrb	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004380:	b29b      	uxth	r3, r3
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	855a      	strh	r2, [r3, #42]	; 0x2a
 800438a:	e093      	b.n	80044b4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	09db      	lsrs	r3, r3, #7
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d05e      	beq.n	8004456 <I2C_Master_ISR_IT+0x1c2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	099b      	lsrs	r3, r3, #6
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d058      	beq.n	8004456 <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d041      	beq.n	8004432 <I2C_Master_ISR_IT+0x19e>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d13d      	bne.n	8004432 <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	b29b      	uxth	r3, r3
 80043be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043c2:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2bff      	cmp	r3, #255	; 0xff
 80043cc:	d90e      	bls.n	80043ec <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	22ff      	movs	r2, #255	; 0xff
 80043d2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	8a79      	ldrh	r1, [r7, #18]
 80043dc:	2300      	movs	r3, #0
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f001 f8f9 	bl	80055dc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ea:	e033      	b.n	8004454 <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043fe:	d00c      	beq.n	800441a <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004404:	b2da      	uxtb	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800440a:	8a79      	ldrh	r1, [r7, #18]
 800440c:	2300      	movs	r3, #0
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	4603      	mov	r3, r0
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f001 f8e2 	bl	80055dc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004418:	e01c      	b.n	8004454 <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	b2da      	uxtb	r2, r3
 8004420:	8a79      	ldrh	r1, [r7, #18]
 8004422:	2300      	movs	r3, #0
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f001 f8d6 	bl	80055dc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004430:	e010      	b.n	8004454 <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004440:	d003      	beq.n	800444a <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fba9 	bl	8004b9a <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004448:	e034      	b.n	80044b4 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800444a:	2140      	movs	r1, #64	; 0x40
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 fe69 	bl	8005124 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004452:	e02f      	b.n	80044b4 <I2C_Master_ISR_IT+0x220>
 8004454:	e02e      	b.n	80044b4 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	099b      	lsrs	r3, r3, #6
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d028      	beq.n	80044b4 <I2C_Master_ISR_IT+0x220>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	099b      	lsrs	r3, r3, #6
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d022      	beq.n	80044b4 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d119      	bne.n	80044ac <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004486:	d015      	beq.n	80044b4 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004490:	d108      	bne.n	80044a4 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	e007      	b.n	80044b4 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fb78 	bl	8004b9a <I2C_ITMasterSeqCplt>
 80044aa:	e003      	b.n	80044b4 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80044ac:	2140      	movs	r1, #64	; 0x40
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 fe38 	bl	8005124 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d009      	beq.n	80044d4 <I2C_Master_ISR_IT+0x240>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80044cc:	6979      	ldr	r1, [r7, #20]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 fbfe 	bl	8004cd0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b086      	sub	sp, #24
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <I2C_Slave_ISR_IT+0x24>
 8004506:	2302      	movs	r3, #2
 8004508:	e0ec      	b.n	80046e4 <I2C_Slave_ISR_IT+0x1fe>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d009      	beq.n	8004532 <I2C_Slave_ISR_IT+0x4c>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	095b      	lsrs	r3, r3, #5
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800452a:	6939      	ldr	r1, [r7, #16]
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 fc99 	bl	8004e64 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d04d      	beq.n	80045da <I2C_Slave_ISR_IT+0xf4>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d047      	beq.n	80045da <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d128      	bne.n	80045a6 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b28      	cmp	r3, #40	; 0x28
 800455e:	d108      	bne.n	8004572 <I2C_Slave_ISR_IT+0x8c>
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004566:	d104      	bne.n	8004572 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004568:	6939      	ldr	r1, [r7, #16]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 fd84 	bl	8005078 <I2C_ITListenCplt>
 8004570:	e032      	b.n	80045d8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b29      	cmp	r3, #41	; 0x29
 800457c:	d10e      	bne.n	800459c <I2C_Slave_ISR_IT+0xb6>
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004584:	d00a      	beq.n	800459c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2210      	movs	r2, #16
 800458c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 febf 	bl	8005312 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 fb3d 	bl	8004c14 <I2C_ITSlaveSeqCplt>
 800459a:	e01d      	b.n	80045d8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2210      	movs	r2, #16
 80045a2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80045a4:	e096      	b.n	80046d4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2210      	movs	r2, #16
 80045ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	f043 0204 	orr.w	r2, r3, #4
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d004      	beq.n	80045ca <I2C_Slave_ISR_IT+0xe4>
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c6:	f040 8085 	bne.w	80046d4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	4619      	mov	r1, r3
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fda7 	bl	8005124 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80045d6:	e07d      	b.n	80046d4 <I2C_Slave_ISR_IT+0x1ee>
 80045d8:	e07c      	b.n	80046d4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d030      	beq.n	8004648 <I2C_Slave_ISR_IT+0x162>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	089b      	lsrs	r3, r3, #2
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d02a      	beq.n	8004648 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d018      	beq.n	800462e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d14f      	bne.n	80046d8 <I2C_Slave_ISR_IT+0x1f2>
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800463e:	d04b      	beq.n	80046d8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fae7 	bl	8004c14 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004646:	e047      	b.n	80046d8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	08db      	lsrs	r3, r3, #3
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	08db      	lsrs	r3, r3, #3
 8004658:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800465c:	2b00      	cmp	r3, #0
 800465e:	d004      	beq.n	800466a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004660:	6939      	ldr	r1, [r7, #16]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 fa15 	bl	8004a92 <I2C_ITAddrCplt>
 8004668:	e037      	b.n	80046da <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	d031      	beq.n	80046da <I2C_Slave_ISR_IT+0x1f4>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	085b      	lsrs	r3, r3, #1
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d02b      	beq.n	80046da <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004686:	b29b      	uxth	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d018      	beq.n	80046be <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	851a      	strh	r2, [r3, #40]	; 0x28
 80046bc:	e00d      	b.n	80046da <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046c4:	d002      	beq.n	80046cc <I2C_Slave_ISR_IT+0x1e6>
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d106      	bne.n	80046da <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 faa1 	bl	8004c14 <I2C_ITSlaveSeqCplt>
 80046d2:	e002      	b.n	80046da <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80046d4:	bf00      	nop
 80046d6:	e000      	b.n	80046da <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80046d8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <I2C_Master_ISR_DMA+0x1a>
 8004702:	2302      	movs	r3, #2
 8004704:	e0e1      	b.n	80048ca <I2C_Master_ISR_DMA+0x1de>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d017      	beq.n	800474a <I2C_Master_ISR_DMA+0x5e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d011      	beq.n	800474a <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2210      	movs	r2, #16
 800472c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	f043 0204 	orr.w	r2, r3, #4
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800473a:	2120      	movs	r1, #32
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 ff7b 	bl	8005638 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 fde5 	bl	8005312 <I2C_Flush_TXDR>
 8004748:	e0ba      	b.n	80048c0 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	09db      	lsrs	r3, r3, #7
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d072      	beq.n	800483c <I2C_Master_ISR_DMA+0x150>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	099b      	lsrs	r3, r3, #6
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d06c      	beq.n	800483c <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004770:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d04e      	beq.n	800481a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	b29b      	uxth	r3, r3
 8004784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004788:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478e:	b29b      	uxth	r3, r3
 8004790:	2bff      	cmp	r3, #255	; 0xff
 8004792:	d906      	bls.n	80047a2 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	22ff      	movs	r2, #255	; 0xff
 8004798:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800479a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	e010      	b.n	80047c4 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047b4:	d003      	beq.n	80047be <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	e002      	b.n	80047c4 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80047be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047c2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	8a79      	ldrh	r1, [r7, #18]
 80047cc:	2300      	movs	r3, #0
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 ff02 	bl	80055dc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b22      	cmp	r3, #34	; 0x22
 80047f4:	d108      	bne.n	8004808 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004804:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004806:	e05b      	b.n	80048c0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004816:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004818:	e052      	b.n	80048c0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004824:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004828:	d003      	beq.n	8004832 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f9b5 	bl	8004b9a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004830:	e046      	b.n	80048c0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004832:	2140      	movs	r1, #64	; 0x40
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 fc75 	bl	8005124 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800483a:	e041      	b.n	80048c0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	099b      	lsrs	r3, r3, #6
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d029      	beq.n	800489c <I2C_Master_ISR_DMA+0x1b0>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	099b      	lsrs	r3, r3, #6
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d023      	beq.n	800489c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d119      	bne.n	8004892 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800486c:	d027      	beq.n	80048be <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004876:	d108      	bne.n	800488a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004886:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004888:	e019      	b.n	80048be <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 f985 	bl	8004b9a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004890:	e015      	b.n	80048be <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004892:	2140      	movs	r1, #64	; 0x40
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 fc45 	bl	8005124 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800489a:	e010      	b.n	80048be <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00b      	beq.n	80048c0 <I2C_Master_ISR_DMA+0x1d4>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 fa0a 	bl	8004cd0 <I2C_ITMasterCplt>
 80048bc:	e000      	b.n	80048c0 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80048be:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b088      	sub	sp, #32
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <I2C_Slave_ISR_DMA+0x24>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e0c9      	b.n	8004a8a <I2C_Slave_ISR_DMA+0x1b8>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <I2C_Slave_ISR_DMA+0x4c>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004916:	68b9      	ldr	r1, [r7, #8]
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 faa3 	bl	8004e64 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 809a 	beq.w	8004a60 <I2C_Slave_ISR_DMA+0x18e>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	091b      	lsrs	r3, r3, #4
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 8093 	beq.w	8004a60 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	0b9b      	lsrs	r3, r3, #14
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d105      	bne.n	8004952 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	0bdb      	lsrs	r3, r3, #15
 800494a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800494e:	2b00      	cmp	r3, #0
 8004950:	d07f      	beq.n	8004a52 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00d      	beq.n	8004976 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	0bdb      	lsrs	r3, r3, #15
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004972:	2301      	movs	r3, #1
 8004974:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00d      	beq.n	800499a <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0b9b      	lsrs	r3, r3, #14
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8004996:	2301      	movs	r3, #1
 8004998:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d128      	bne.n	80049f2 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b28      	cmp	r3, #40	; 0x28
 80049aa:	d108      	bne.n	80049be <I2C_Slave_ISR_DMA+0xec>
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049b2:	d104      	bne.n	80049be <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 fb5e 	bl	8005078 <I2C_ITListenCplt>
 80049bc:	e048      	b.n	8004a50 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b29      	cmp	r3, #41	; 0x29
 80049c8:	d10e      	bne.n	80049e8 <I2C_Slave_ISR_DMA+0x116>
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049d0:	d00a      	beq.n	80049e8 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2210      	movs	r2, #16
 80049d8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 fc99 	bl	8005312 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f917 	bl	8004c14 <I2C_ITSlaveSeqCplt>
 80049e6:	e033      	b.n	8004a50 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2210      	movs	r2, #16
 80049ee:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80049f0:	e034      	b.n	8004a5c <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2210      	movs	r2, #16
 80049f8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	f043 0204 	orr.w	r2, r3, #4
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a0c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <I2C_Slave_ISR_DMA+0x14a>
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a1a:	d11f      	bne.n	8004a5c <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a1c:	7dfb      	ldrb	r3, [r7, #23]
 8004a1e:	2b21      	cmp	r3, #33	; 0x21
 8004a20:	d002      	beq.n	8004a28 <I2C_Slave_ISR_DMA+0x156>
 8004a22:	7dfb      	ldrb	r3, [r7, #23]
 8004a24:	2b29      	cmp	r3, #41	; 0x29
 8004a26:	d103      	bne.n	8004a30 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2221      	movs	r2, #33	; 0x21
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a2e:	e008      	b.n	8004a42 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
 8004a32:	2b22      	cmp	r3, #34	; 0x22
 8004a34:	d002      	beq.n	8004a3c <I2C_Slave_ISR_DMA+0x16a>
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	2b2a      	cmp	r3, #42	; 0x2a
 8004a3a:	d102      	bne.n	8004a42 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2222      	movs	r2, #34	; 0x22
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a46:	4619      	mov	r1, r3
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 fb6b 	bl	8005124 <I2C_ITError>
      if (treatdmanack == 1U)
 8004a4e:	e005      	b.n	8004a5c <I2C_Slave_ISR_DMA+0x18a>
 8004a50:	e004      	b.n	8004a5c <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2210      	movs	r2, #16
 8004a58:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004a5a:	e011      	b.n	8004a80 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8004a5c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004a5e:	e00f      	b.n	8004a80 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	08db      	lsrs	r3, r3, #3
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <I2C_Slave_ISR_DMA+0x1ae>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	08db      	lsrs	r3, r3, #3
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f809 	bl	8004a92 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3720      	adds	r7, #32
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004aa8:	2b28      	cmp	r3, #40	; 0x28
 8004aaa:	d16a      	bne.n	8004b82 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	0c1b      	lsrs	r3, r3, #16
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	0c1b      	lsrs	r3, r3, #16
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004aca:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ad8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004ae6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d138      	bne.n	8004b62 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004af0:	897b      	ldrh	r3, [r7, #10]
 8004af2:	09db      	lsrs	r3, r3, #7
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	89bb      	ldrh	r3, [r7, #12]
 8004af8:	4053      	eors	r3, r2
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f003 0306 	and.w	r3, r3, #6
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d11c      	bne.n	8004b3e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004b04:	897b      	ldrh	r3, [r7, #10]
 8004b06:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d13b      	bne.n	8004b92 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2208      	movs	r2, #8
 8004b26:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b30:	89ba      	ldrh	r2, [r7, #12]
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	4619      	mov	r1, r3
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff fb6c 	bl	8004214 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b3c:	e029      	b.n	8004b92 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004b3e:	893b      	ldrh	r3, [r7, #8]
 8004b40:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fdda 	bl	8005700 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b54:	89ba      	ldrh	r2, [r7, #12]
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff fb5a 	bl	8004214 <HAL_I2C_AddrCallback>
}
 8004b60:	e017      	b.n	8004b92 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fdca 	bl	8005700 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b74:	89ba      	ldrh	r2, [r7, #12]
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	4619      	mov	r1, r3
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7ff fb4a 	bl	8004214 <HAL_I2C_AddrCallback>
}
 8004b80:	e007      	b.n	8004b92 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2208      	movs	r2, #8
 8004b88:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b082      	sub	sp, #8
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b21      	cmp	r3, #33	; 0x21
 8004bb4:	d115      	bne.n	8004be2 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2211      	movs	r2, #17
 8004bc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004bca:	2101      	movs	r1, #1
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 fd97 	bl	8005700 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fc fae4 	bl	80011a8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004be0:	e014      	b.n	8004c0c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2212      	movs	r2, #18
 8004bee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004bf6:	2102      	movs	r1, #2
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fd81 	bl	8005700 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fae6 	bl	80041d8 <HAL_I2C_MasterRxCpltCallback>
}
 8004c0c:	bf00      	nop
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	0b9b      	lsrs	r3, r3, #14
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d008      	beq.n	8004c4a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e00d      	b.n	8004c66 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	0bdb      	lsrs	r3, r3, #15
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c64:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b29      	cmp	r3, #41	; 0x29
 8004c70:	d112      	bne.n	8004c98 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2228      	movs	r2, #40	; 0x28
 8004c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2221      	movs	r2, #33	; 0x21
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c80:	2101      	movs	r1, #1
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fd3c 	bl	8005700 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff faab 	bl	80041ec <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c96:	e017      	b.n	8004cc8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ca2:	d111      	bne.n	8004cc8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2228      	movs	r2, #40	; 0x28
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2222      	movs	r2, #34	; 0x22
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004cb2:	2102      	movs	r1, #2
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fd23 	bl	8005700 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7ff fa9c 	bl	8004200 <HAL_I2C_SlaveRxCpltCallback>
}
 8004cc8:	bf00      	nop
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b21      	cmp	r3, #33	; 0x21
 8004cf0:	d107      	bne.n	8004d02 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fd03 	bl	8005700 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2211      	movs	r2, #17
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8004d00:	e00c      	b.n	8004d1c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b22      	cmp	r3, #34	; 0x22
 8004d0c:	d106      	bne.n	8004d1c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004d0e:	2102      	movs	r1, #2
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fcf5 	bl	8005700 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2212      	movs	r2, #18
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6859      	ldr	r1, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4b4d      	ldr	r3, [pc, #308]	; (8004e5c <I2C_ITMasterCplt+0x18c>)
 8004d28:	400b      	ands	r3, r1
 8004d2a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a4a      	ldr	r2, [pc, #296]	; (8004e60 <I2C_ITMasterCplt+0x190>)
 8004d36:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	091b      	lsrs	r3, r3, #4
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d009      	beq.n	8004d58 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2210      	movs	r2, #16
 8004d4a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d50:	f043 0204 	orr.w	r2, r3, #4
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b60      	cmp	r3, #96	; 0x60
 8004d62:	d10b      	bne.n	8004d7c <I2C_ITMasterCplt+0xac>
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	089b      	lsrs	r3, r3, #2
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fac8 	bl	8005312 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b60      	cmp	r3, #96	; 0x60
 8004d92:	d002      	beq.n	8004d9a <I2C_ITMasterCplt+0xca>
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d006      	beq.n	8004da8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f9bf 	bl	8005124 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004da6:	e054      	b.n	8004e52 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b21      	cmp	r3, #33	; 0x21
 8004db2:	d124      	bne.n	8004dfe <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b40      	cmp	r3, #64	; 0x40
 8004dcc:	d10b      	bne.n	8004de6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff fa30 	bl	8004244 <HAL_I2C_MemTxCpltCallback>
}
 8004de4:	e035      	b.n	8004e52 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fc f9d6 	bl	80011a8 <HAL_I2C_MasterTxCpltCallback>
}
 8004dfc:	e029      	b.n	8004e52 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b22      	cmp	r3, #34	; 0x22
 8004e08:	d123      	bne.n	8004e52 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d10b      	bne.n	8004e3c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff fa0f 	bl	8004258 <HAL_I2C_MemRxCpltCallback>
}
 8004e3a:	e00a      	b.n	8004e52 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff f9c3 	bl	80041d8 <HAL_I2C_MasterRxCpltCallback>
}
 8004e52:	bf00      	nop
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	fe00e800 	.word	0xfe00e800
 8004e60:	ffff0000 	.word	0xffff0000

08004e64 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e80:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2220      	movs	r2, #32
 8004e88:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	2b21      	cmp	r3, #33	; 0x21
 8004e8e:	d002      	beq.n	8004e96 <I2C_ITSlaveCplt+0x32>
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b29      	cmp	r3, #41	; 0x29
 8004e94:	d108      	bne.n	8004ea8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004e96:	f248 0101 	movw	r1, #32769	; 0x8001
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fc30 	bl	8005700 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2221      	movs	r2, #33	; 0x21
 8004ea4:	631a      	str	r2, [r3, #48]	; 0x30
 8004ea6:	e00d      	b.n	8004ec4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	2b22      	cmp	r3, #34	; 0x22
 8004eac:	d002      	beq.n	8004eb4 <I2C_ITSlaveCplt+0x50>
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
 8004eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8004eb2:	d107      	bne.n	8004ec4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004eb4:	f248 0102 	movw	r1, #32770	; 0x8002
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fc21 	bl	8005700 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2222      	movs	r2, #34	; 0x22
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ed2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6859      	ldr	r1, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4b64      	ldr	r3, [pc, #400]	; (8005070 <I2C_ITSlaveCplt+0x20c>)
 8004ee0:	400b      	ands	r3, r1
 8004ee2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fa14 	bl	8005312 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	0b9b      	lsrs	r3, r3, #14
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d013      	beq.n	8004f1e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f04:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d020      	beq.n	8004f50 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f1c:	e018      	b.n	8004f50 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	0bdb      	lsrs	r3, r3, #15
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d012      	beq.n	8004f50 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f38:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d006      	beq.n	8004f50 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	089b      	lsrs	r3, r3, #2
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d020      	beq.n	8004f9e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f023 0304 	bic.w	r3, r3, #4
 8004f62:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00c      	beq.n	8004f9e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fac:	f043 0204 	orr.w	r2, r3, #4
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d010      	beq.n	8004fec <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	4619      	mov	r1, r3
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f8a7 	bl	8005124 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b28      	cmp	r3, #40	; 0x28
 8004fe0:	d141      	bne.n	8005066 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004fe2:	6979      	ldr	r1, [r7, #20]
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f847 	bl	8005078 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fea:	e03c      	b.n	8005066 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ff4:	d014      	beq.n	8005020 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff fe0c 	bl	8004c14 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <I2C_ITSlaveCplt+0x210>)
 8005000:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff f909 	bl	8004230 <HAL_I2C_ListenCpltCallback>
}
 800501e:	e022      	b.n	8005066 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b22      	cmp	r3, #34	; 0x22
 800502a:	d10e      	bne.n	800504a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff f8dc 	bl	8004200 <HAL_I2C_SlaveRxCpltCallback>
}
 8005048:	e00d      	b.n	8005066 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7ff f8c3 	bl	80041ec <HAL_I2C_SlaveTxCpltCallback>
}
 8005066:	bf00      	nop
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	fe00e800 	.word	0xfe00e800
 8005074:	ffff0000 	.word	0xffff0000

08005078 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a26      	ldr	r2, [pc, #152]	; (8005120 <I2C_ITListenCplt+0xa8>)
 8005086:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2220      	movs	r2, #32
 8005092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	089b      	lsrs	r3, r3, #2
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d022      	beq.n	80050f6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d012      	beq.n	80050f6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ee:	f043 0204 	orr.w	r2, r3, #4
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80050f6:	f248 0103 	movw	r1, #32771	; 0x8003
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fb00 	bl	8005700 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2210      	movs	r2, #16
 8005106:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff f88d 	bl	8004230 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	ffff0000 	.word	0xffff0000

08005124 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a5d      	ldr	r2, [pc, #372]	; (80052b8 <I2C_ITError+0x194>)
 8005142:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005156:	7bfb      	ldrb	r3, [r7, #15]
 8005158:	2b28      	cmp	r3, #40	; 0x28
 800515a:	d005      	beq.n	8005168 <I2C_ITError+0x44>
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	2b29      	cmp	r3, #41	; 0x29
 8005160:	d002      	beq.n	8005168 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	2b2a      	cmp	r3, #42	; 0x2a
 8005166:	d10b      	bne.n	8005180 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005168:	2103      	movs	r1, #3
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fac8 	bl	8005700 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2228      	movs	r2, #40	; 0x28
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a50      	ldr	r2, [pc, #320]	; (80052bc <I2C_ITError+0x198>)
 800517c:	635a      	str	r2, [r3, #52]	; 0x34
 800517e:	e011      	b.n	80051a4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005180:	f248 0103 	movw	r1, #32771	; 0x8003
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fabb 	bl	8005700 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b60      	cmp	r3, #96	; 0x60
 8005194:	d003      	beq.n	800519e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d039      	beq.n	8005226 <I2C_ITError+0x102>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b11      	cmp	r3, #17
 80051b6:	d002      	beq.n	80051be <I2C_ITError+0x9a>
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b21      	cmp	r3, #33	; 0x21
 80051bc:	d133      	bne.n	8005226 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051cc:	d107      	bne.n	80051de <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051dc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fe fbbe 	bl	8003964 <HAL_DMA_GetState>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d017      	beq.n	800521e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	4a33      	ldr	r2, [pc, #204]	; (80052c0 <I2C_ITError+0x19c>)
 80051f4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe fabe 	bl	8003784 <HAL_DMA_Abort_IT>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d04d      	beq.n	80052aa <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005218:	4610      	mov	r0, r2
 800521a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800521c:	e045      	b.n	80052aa <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f850 	bl	80052c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005224:	e041      	b.n	80052aa <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d039      	beq.n	80052a2 <I2C_ITError+0x17e>
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b12      	cmp	r3, #18
 8005232:	d002      	beq.n	800523a <I2C_ITError+0x116>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b22      	cmp	r3, #34	; 0x22
 8005238:	d133      	bne.n	80052a2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005248:	d107      	bne.n	800525a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005258:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525e:	4618      	mov	r0, r3
 8005260:	f7fe fb80 	bl	8003964 <HAL_DMA_GetState>
 8005264:	4603      	mov	r3, r0
 8005266:	2b01      	cmp	r3, #1
 8005268:	d017      	beq.n	800529a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526e:	4a14      	ldr	r2, [pc, #80]	; (80052c0 <I2C_ITError+0x19c>)
 8005270:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	4618      	mov	r0, r3
 8005280:	f7fe fa80 	bl	8003784 <HAL_DMA_Abort_IT>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d011      	beq.n	80052ae <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005294:	4610      	mov	r0, r2
 8005296:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005298:	e009      	b.n	80052ae <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f812 	bl	80052c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052a0:	e005      	b.n	80052ae <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f80e 	bl	80052c4 <I2C_TreatErrorCallback>
  }
}
 80052a8:	e002      	b.n	80052b0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052aa:	bf00      	nop
 80052ac:	e000      	b.n	80052b0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052ae:	bf00      	nop
}
 80052b0:	bf00      	nop
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	ffff0000 	.word	0xffff0000
 80052bc:	080044e7 	.word	0x080044e7
 80052c0:	0800535b 	.word	0x0800535b

080052c4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b60      	cmp	r3, #96	; 0x60
 80052d6:	d10e      	bne.n	80052f6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fe ffc6 	bl	8004280 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052f4:	e009      	b.n	800530a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7fe ffb1 	bl	800426c <HAL_I2C_ErrorCallback>
}
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b02      	cmp	r3, #2
 8005326:	d103      	bne.n	8005330 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2200      	movs	r2, #0
 800532e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b01      	cmp	r3, #1
 800533c:	d007      	beq.n	800534e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	699a      	ldr	r2, [r3, #24]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 0201 	orr.w	r2, r2, #1
 800534c:	619a      	str	r2, [r3, #24]
  }
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	2200      	movs	r2, #0
 8005376:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005384:	2200      	movs	r2, #0
 8005386:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff ff9b 	bl	80052c4 <I2C_TreatErrorCallback>
}
 800538e:	bf00      	nop
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	603b      	str	r3, [r7, #0]
 80053a2:	4613      	mov	r3, r2
 80053a4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053a6:	e022      	b.n	80053ee <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ae:	d01e      	beq.n	80053ee <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b0:	f7fd fe46 	bl	8003040 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d302      	bcc.n	80053c6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d113      	bne.n	80053ee <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	f043 0220 	orr.w	r2, r3, #32
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e00f      	b.n	800540e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699a      	ldr	r2, [r3, #24]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4013      	ands	r3, r2
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	bf0c      	ite	eq
 80053fe:	2301      	moveq	r3, #1
 8005400:	2300      	movne	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	429a      	cmp	r2, r3
 800540a:	d0cd      	beq.n	80053a8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005422:	e02c      	b.n	800547e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f871 	bl	8005510 <I2C_IsAcknowledgeFailed>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e02a      	b.n	800548e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800543e:	d01e      	beq.n	800547e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005440:	f7fd fdfe 	bl	8003040 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	d302      	bcc.n	8005456 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d113      	bne.n	800547e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545a:	f043 0220 	orr.w	r2, r3, #32
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e007      	b.n	800548e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b02      	cmp	r3, #2
 800548a:	d1cb      	bne.n	8005424 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	60f8      	str	r0, [r7, #12]
 800549e:	60b9      	str	r1, [r7, #8]
 80054a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054a2:	e028      	b.n	80054f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 f831 	bl	8005510 <I2C_IsAcknowledgeFailed>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e026      	b.n	8005506 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b8:	f7fd fdc2 	bl	8003040 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d302      	bcc.n	80054ce <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d113      	bne.n	80054f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d2:	f043 0220 	orr.w	r2, r3, #32
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e007      	b.n	8005506 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b20      	cmp	r3, #32
 8005502:	d1cf      	bne.n	80054a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b10      	cmp	r3, #16
 8005528:	d151      	bne.n	80055ce <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800552a:	e022      	b.n	8005572 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005532:	d01e      	beq.n	8005572 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005534:	f7fd fd84 	bl	8003040 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	429a      	cmp	r2, r3
 8005542:	d302      	bcc.n	800554a <I2C_IsAcknowledgeFailed+0x3a>
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d113      	bne.n	8005572 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	f043 0220 	orr.w	r2, r3, #32
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2220      	movs	r2, #32
 800555a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e02e      	b.n	80055d0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b20      	cmp	r3, #32
 800557e:	d1d5      	bne.n	800552c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2210      	movs	r2, #16
 8005586:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2220      	movs	r2, #32
 800558e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f7ff febe 	bl	8005312 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6859      	ldr	r1, [r3, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <I2C_IsAcknowledgeFailed+0xc8>)
 80055a2:	400b      	ands	r3, r1
 80055a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	f043 0204 	orr.w	r2, r3, #4
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	fe00e800 	.word	0xfe00e800

080055dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	607b      	str	r3, [r7, #4]
 80055e6:	460b      	mov	r3, r1
 80055e8:	817b      	strh	r3, [r7, #10]
 80055ea:	4613      	mov	r3, r2
 80055ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	0d5b      	lsrs	r3, r3, #21
 80055f8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80055fc:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <I2C_TransferConfig+0x58>)
 80055fe:	430b      	orrs	r3, r1
 8005600:	43db      	mvns	r3, r3
 8005602:	ea02 0103 	and.w	r1, r2, r3
 8005606:	897b      	ldrh	r3, [r7, #10]
 8005608:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800560c:	7a7b      	ldrb	r3, [r7, #9]
 800560e:	041b      	lsls	r3, r3, #16
 8005610:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	431a      	orrs	r2, r3
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	431a      	orrs	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	03ff63ff 	.word	0x03ff63ff

08005638 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564c:	4a2a      	ldr	r2, [pc, #168]	; (80056f8 <I2C_Enable_IRQ+0xc0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d004      	beq.n	800565c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005656:	4a29      	ldr	r2, [pc, #164]	; (80056fc <I2C_Enable_IRQ+0xc4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d11d      	bne.n	8005698 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800565c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005660:	2b00      	cmp	r3, #0
 8005662:	da03      	bge.n	800566c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800566a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800566c:	887b      	ldrh	r3, [r7, #2]
 800566e:	2b10      	cmp	r3, #16
 8005670:	d103      	bne.n	800567a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005678:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800567a:	887b      	ldrh	r3, [r7, #2]
 800567c:	2b20      	cmp	r3, #32
 800567e:	d103      	bne.n	8005688 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005686:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005688:	887b      	ldrh	r3, [r7, #2]
 800568a:	2b40      	cmp	r3, #64	; 0x40
 800568c:	d125      	bne.n	80056da <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005694:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005696:	e020      	b.n	80056da <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005698:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800569c:	2b00      	cmp	r3, #0
 800569e:	da03      	bge.n	80056a8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80056a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80056a8:	887b      	ldrh	r3, [r7, #2]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80056b8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80056ba:	887b      	ldrh	r3, [r7, #2]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80056ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80056cc:	887b      	ldrh	r3, [r7, #2]
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d103      	bne.n	80056da <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f043 0320 	orr.w	r3, r3, #32
 80056d8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6819      	ldr	r1, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	601a      	str	r2, [r3, #0]
}
 80056ea:	bf00      	nop
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	080046ed 	.word	0x080046ed
 80056fc:	080048d3 	.word	0x080048d3

08005700 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005710:	887b      	ldrh	r3, [r7, #2]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00f      	beq.n	800573a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005720:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005728:	b2db      	uxtb	r3, r3
 800572a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800572e:	2b28      	cmp	r3, #40	; 0x28
 8005730:	d003      	beq.n	800573a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005738:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800573a:	887b      	ldrh	r3, [r7, #2]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00f      	beq.n	8005764 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800574a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005752:	b2db      	uxtb	r3, r3
 8005754:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005758:	2b28      	cmp	r3, #40	; 0x28
 800575a:	d003      	beq.n	8005764 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005762:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005764:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005768:	2b00      	cmp	r3, #0
 800576a:	da03      	bge.n	8005774 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005772:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005774:	887b      	ldrh	r3, [r7, #2]
 8005776:	2b10      	cmp	r3, #16
 8005778:	d103      	bne.n	8005782 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005780:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005782:	887b      	ldrh	r3, [r7, #2]
 8005784:	2b20      	cmp	r3, #32
 8005786:	d103      	bne.n	8005790 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f043 0320 	orr.w	r3, r3, #32
 800578e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005790:	887b      	ldrh	r3, [r7, #2]
 8005792:	2b40      	cmp	r3, #64	; 0x40
 8005794:	d103      	bne.n	800579e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800579c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6819      	ldr	r1, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	43da      	mvns	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	400a      	ands	r2, r1
 80057ae:	601a      	str	r2, [r3, #0]
}
 80057b0:	bf00      	nop
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d138      	bne.n	8005844 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057dc:	2302      	movs	r3, #2
 80057de:	e032      	b.n	8005846 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2224      	movs	r2, #36	; 0x24
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0201 	bic.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800580e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6819      	ldr	r1, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	e000      	b.n	8005846 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005844:	2302      	movs	r3, #2
  }
}
 8005846:	4618      	mov	r0, r3
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005852:	b480      	push	{r7}
 8005854:	b085      	sub	sp, #20
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b20      	cmp	r3, #32
 8005866:	d139      	bne.n	80058dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005872:	2302      	movs	r3, #2
 8005874:	e033      	b.n	80058de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2224      	movs	r2, #36	; 0x24
 8005882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0201 	bic.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 0201 	orr.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058d8:	2300      	movs	r3, #0
 80058da:	e000      	b.n	80058de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058dc:	2302      	movs	r3, #2
  }
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80058ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ec:	b08f      	sub	sp, #60	; 0x3c
 80058ee:	af0a      	add	r7, sp, #40	; 0x28
 80058f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e116      	b.n	8005b2a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fd f928 	bl	8002b6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2203      	movs	r2, #3
 8005920:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d102      	bne.n	8005936 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f002 ff90 	bl	8008860 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	687e      	ldr	r6, [r7, #4]
 8005948:	466d      	mov	r5, sp
 800594a:	f106 0410 	add.w	r4, r6, #16
 800594e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005956:	e894 0003 	ldmia.w	r4, {r0, r1}
 800595a:	e885 0003 	stmia.w	r5, {r0, r1}
 800595e:	1d33      	adds	r3, r6, #4
 8005960:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005962:	6838      	ldr	r0, [r7, #0]
 8005964:	f002 ff2a 	bl	80087bc <USB_CoreInit>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d005      	beq.n	800597a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2202      	movs	r2, #2
 8005972:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e0d7      	b.n	8005b2a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2100      	movs	r1, #0
 8005980:	4618      	mov	r0, r3
 8005982:	f002 ff7e 	bl	8008882 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005986:	2300      	movs	r3, #0
 8005988:	73fb      	strb	r3, [r7, #15]
 800598a:	e04a      	b.n	8005a22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800598c:	7bfa      	ldrb	r2, [r7, #15]
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4613      	mov	r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	1a9b      	subs	r3, r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	333d      	adds	r3, #61	; 0x3d
 800599c:	2201      	movs	r2, #1
 800599e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059a0:	7bfa      	ldrb	r2, [r7, #15]
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	333c      	adds	r3, #60	; 0x3c
 80059b0:	7bfa      	ldrb	r2, [r7, #15]
 80059b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80059b4:	7bfa      	ldrb	r2, [r7, #15]
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	b298      	uxth	r0, r3
 80059ba:	6879      	ldr	r1, [r7, #4]
 80059bc:	4613      	mov	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	1a9b      	subs	r3, r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	440b      	add	r3, r1
 80059c6:	3342      	adds	r3, #66	; 0x42
 80059c8:	4602      	mov	r2, r0
 80059ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80059cc:	7bfa      	ldrb	r2, [r7, #15]
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	4613      	mov	r3, r2
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	333f      	adds	r3, #63	; 0x3f
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80059e0:	7bfa      	ldrb	r2, [r7, #15]
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	4613      	mov	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	1a9b      	subs	r3, r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	3344      	adds	r3, #68	; 0x44
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80059f4:	7bfa      	ldrb	r2, [r7, #15]
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	1a9b      	subs	r3, r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	3348      	adds	r3, #72	; 0x48
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a08:	7bfa      	ldrb	r2, [r7, #15]
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	3350      	adds	r3, #80	; 0x50
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	73fb      	strb	r3, [r7, #15]
 8005a22:	7bfa      	ldrb	r2, [r7, #15]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d3af      	bcc.n	800598c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	73fb      	strb	r3, [r7, #15]
 8005a30:	e044      	b.n	8005abc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a32:	7bfa      	ldrb	r2, [r7, #15]
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	1a9b      	subs	r3, r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005a44:	2200      	movs	r2, #0
 8005a46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a48:	7bfa      	ldrb	r2, [r7, #15]
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	1a9b      	subs	r3, r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	440b      	add	r3, r1
 8005a56:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005a5a:	7bfa      	ldrb	r2, [r7, #15]
 8005a5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a5e:	7bfa      	ldrb	r2, [r7, #15]
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	1a9b      	subs	r3, r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a74:	7bfa      	ldrb	r2, [r7, #15]
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a8a:	7bfa      	ldrb	r2, [r7, #15]
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	1a9b      	subs	r3, r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005aa0:	7bfa      	ldrb	r2, [r7, #15]
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]
 8005abc:	7bfa      	ldrb	r2, [r7, #15]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d3b5      	bcc.n	8005a32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	687e      	ldr	r6, [r7, #4]
 8005ace:	466d      	mov	r5, sp
 8005ad0:	f106 0410 	add.w	r4, r6, #16
 8005ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005adc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ae0:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ae4:	1d33      	adds	r3, r6, #4
 8005ae6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ae8:	6838      	ldr	r0, [r7, #0]
 8005aea:	f002 fef5 	bl	80088d8 <USB_DevInit>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e014      	b.n	8005b2a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d102      	bne.n	8005b1e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f80a 	bl	8005b32 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f003 f885 	bl	8008c32 <USB_DevDisconnect>

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b32 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b64:	f043 0303 	orr.w	r3, r3, #3
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b80:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a04      	ldr	r2, [pc, #16]	; (8005b98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b8a:	6013      	str	r3, [r2, #0]
}
 8005b8c:	bf00      	nop
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40007000 	.word	0x40007000

08005b9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005ba0:	4b04      	ldr	r3, [pc, #16]	; (8005bb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40007000 	.word	0x40007000

08005bb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bc6:	d130      	bne.n	8005c2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bc8:	4b23      	ldr	r3, [pc, #140]	; (8005c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd4:	d038      	beq.n	8005c48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bd6:	4b20      	ldr	r3, [pc, #128]	; (8005c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005bde:	4a1e      	ldr	r2, [pc, #120]	; (8005c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005be0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005be4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005be6:	4b1d      	ldr	r3, [pc, #116]	; (8005c5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2232      	movs	r2, #50	; 0x32
 8005bec:	fb02 f303 	mul.w	r3, r2, r3
 8005bf0:	4a1b      	ldr	r2, [pc, #108]	; (8005c60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	0c9b      	lsrs	r3, r3, #18
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bfc:	e002      	b.n	8005c04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c04:	4b14      	ldr	r3, [pc, #80]	; (8005c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c10:	d102      	bne.n	8005c18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1f2      	bne.n	8005bfe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c18:	4b0f      	ldr	r3, [pc, #60]	; (8005c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c24:	d110      	bne.n	8005c48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e00f      	b.n	8005c4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c2a:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c36:	d007      	beq.n	8005c48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c38:	4b07      	ldr	r3, [pc, #28]	; (8005c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c40:	4a05      	ldr	r2, [pc, #20]	; (8005c58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40007000 	.word	0x40007000
 8005c5c:	20000000 	.word	0x20000000
 8005c60:	431bde83 	.word	0x431bde83

08005c64 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005c68:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	4a04      	ldr	r2, [pc, #16]	; (8005c80 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c72:	6053      	str	r3, [r2, #4]
}
 8005c74:	bf00      	nop
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40007000 	.word	0x40007000

08005c84 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005c8c:	f7fd f9d8 	bl	8003040 <HAL_GetTick>
 8005c90:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e063      	b.n	8005d64 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10b      	bne.n	8005cc0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7fc fdef 	bl	8002894 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005cb6:	f241 3188 	movw	r1, #5000	; 0x1388
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f858 	bl	8005d70 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	021a      	lsls	r2, r3, #8
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2120      	movs	r1, #32
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f850 	bl	8005d8c <QSPI_WaitFlagStateUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005cf0:	7afb      	ldrb	r3, [r7, #11]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d131      	bne.n	8005d5a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d00:	f023 0310 	bic.w	r3, r3, #16
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6852      	ldr	r2, [r2, #4]
 8005d08:	0611      	lsls	r1, r2, #24
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	68d2      	ldr	r2, [r2, #12]
 8005d0e:	4311      	orrs	r1, r2
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6812      	ldr	r2, [r2, #0]
 8005d14:	430b      	orrs	r3, r1
 8005d16:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <HAL_QSPI_Init+0xe8>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	6912      	ldr	r2, [r2, #16]
 8005d26:	0411      	lsls	r1, r2, #16
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6952      	ldr	r2, [r2, #20]
 8005d2c:	4311      	orrs	r1, r2
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6992      	ldr	r2, [r2, #24]
 8005d32:	4311      	orrs	r1, r2
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6812      	ldr	r2, [r2, #0]
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8005d62:	7afb      	ldrb	r3, [r7, #11]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	ffe0f8fe 	.word	0xffe0f8fe

08005d70 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005d9c:	e01a      	b.n	8005dd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005da4:	d016      	beq.n	8005dd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da6:	f7fd f94b 	bl	8003040 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d302      	bcc.n	8005dbc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10b      	bne.n	8005dd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2204      	movs	r2, #4
 8005dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc8:	f043 0201 	orr.w	r2, r3, #1
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e00e      	b.n	8005df2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	bf14      	ite	ne
 8005de2:	2301      	movne	r3, #1
 8005de4:	2300      	moveq	r3, #0
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	461a      	mov	r2, r3
 8005dea:	79fb      	ldrb	r3, [r7, #7]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d1d6      	bne.n	8005d9e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e3d4      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e0e:	4ba1      	ldr	r3, [pc, #644]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 030c 	and.w	r3, r3, #12
 8005e16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e18:	4b9e      	ldr	r3, [pc, #632]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0303 	and.w	r3, r3, #3
 8005e20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0310 	and.w	r3, r3, #16
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 80e4 	beq.w	8005ff8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <HAL_RCC_OscConfig+0x4a>
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b0c      	cmp	r3, #12
 8005e3a:	f040 808b 	bne.w	8005f54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	f040 8087 	bne.w	8005f54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e46:	4b93      	ldr	r3, [pc, #588]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d005      	beq.n	8005e5e <HAL_RCC_OscConfig+0x62>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e3ac      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1a      	ldr	r2, [r3, #32]
 8005e62:	4b8c      	ldr	r3, [pc, #560]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d004      	beq.n	8005e78 <HAL_RCC_OscConfig+0x7c>
 8005e6e:	4b89      	ldr	r3, [pc, #548]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e76:	e005      	b.n	8005e84 <HAL_RCC_OscConfig+0x88>
 8005e78:	4b86      	ldr	r3, [pc, #536]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e7e:	091b      	lsrs	r3, r3, #4
 8005e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d223      	bcs.n	8005ed0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 fd3f 	bl	8006910 <RCC_SetFlashLatencyFromMSIRange>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e38d      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e9c:	4b7d      	ldr	r3, [pc, #500]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a7c      	ldr	r2, [pc, #496]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005ea2:	f043 0308 	orr.w	r3, r3, #8
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	4b7a      	ldr	r3, [pc, #488]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	4977      	ldr	r1, [pc, #476]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005eba:	4b76      	ldr	r3, [pc, #472]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	021b      	lsls	r3, r3, #8
 8005ec8:	4972      	ldr	r1, [pc, #456]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	604b      	str	r3, [r1, #4]
 8005ece:	e025      	b.n	8005f1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ed0:	4b70      	ldr	r3, [pc, #448]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a6f      	ldr	r2, [pc, #444]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005ed6:	f043 0308 	orr.w	r3, r3, #8
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	4b6d      	ldr	r3, [pc, #436]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	496a      	ldr	r1, [pc, #424]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005eee:	4b69      	ldr	r3, [pc, #420]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	021b      	lsls	r3, r3, #8
 8005efc:	4965      	ldr	r1, [pc, #404]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d109      	bne.n	8005f1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fcff 	bl	8006910 <RCC_SetFlashLatencyFromMSIRange>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e34d      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f1c:	f000 fc36 	bl	800678c <HAL_RCC_GetSysClockFreq>
 8005f20:	4601      	mov	r1, r0
 8005f22:	4b5c      	ldr	r3, [pc, #368]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	091b      	lsrs	r3, r3, #4
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	4a5a      	ldr	r2, [pc, #360]	; (8006098 <HAL_RCC_OscConfig+0x29c>)
 8005f2e:	5cd3      	ldrb	r3, [r2, r3]
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	fa21 f303 	lsr.w	r3, r1, r3
 8005f38:	4a58      	ldr	r2, [pc, #352]	; (800609c <HAL_RCC_OscConfig+0x2a0>)
 8005f3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005f3c:	4b58      	ldr	r3, [pc, #352]	; (80060a0 <HAL_RCC_OscConfig+0x2a4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fd f82d 	bl	8002fa0 <HAL_InitTick>
 8005f46:	4603      	mov	r3, r0
 8005f48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d052      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	e331      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d032      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f5c:	4b4d      	ldr	r3, [pc, #308]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a4c      	ldr	r2, [pc, #304]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005f62:	f043 0301 	orr.w	r3, r3, #1
 8005f66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f68:	f7fd f86a 	bl	8003040 <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f70:	f7fd f866 	bl	8003040 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e31a      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f82:	4b44      	ldr	r3, [pc, #272]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0f0      	beq.n	8005f70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f8e:	4b41      	ldr	r3, [pc, #260]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a40      	ldr	r2, [pc, #256]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005f94:	f043 0308 	orr.w	r3, r3, #8
 8005f98:	6013      	str	r3, [r2, #0]
 8005f9a:	4b3e      	ldr	r3, [pc, #248]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	493b      	ldr	r1, [pc, #236]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fac:	4b39      	ldr	r3, [pc, #228]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	4936      	ldr	r1, [pc, #216]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	604b      	str	r3, [r1, #4]
 8005fc0:	e01a      	b.n	8005ff8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005fc2:	4b34      	ldr	r3, [pc, #208]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a33      	ldr	r2, [pc, #204]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005fc8:	f023 0301 	bic.w	r3, r3, #1
 8005fcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005fce:	f7fd f837 	bl	8003040 <HAL_GetTick>
 8005fd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005fd6:	f7fd f833 	bl	8003040 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e2e7      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005fe8:	4b2a      	ldr	r3, [pc, #168]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1f0      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x1da>
 8005ff4:	e000      	b.n	8005ff8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ff6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d074      	beq.n	80060ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	2b08      	cmp	r3, #8
 8006008:	d005      	beq.n	8006016 <HAL_RCC_OscConfig+0x21a>
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	2b0c      	cmp	r3, #12
 800600e:	d10e      	bne.n	800602e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2b03      	cmp	r3, #3
 8006014:	d10b      	bne.n	800602e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006016:	4b1f      	ldr	r3, [pc, #124]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d064      	beq.n	80060ec <HAL_RCC_OscConfig+0x2f0>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d160      	bne.n	80060ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e2c4      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006036:	d106      	bne.n	8006046 <HAL_RCC_OscConfig+0x24a>
 8006038:	4b16      	ldr	r3, [pc, #88]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a15      	ldr	r2, [pc, #84]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 800603e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	e01d      	b.n	8006082 <HAL_RCC_OscConfig+0x286>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800604e:	d10c      	bne.n	800606a <HAL_RCC_OscConfig+0x26e>
 8006050:	4b10      	ldr	r3, [pc, #64]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a0f      	ldr	r2, [pc, #60]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8006056:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a0c      	ldr	r2, [pc, #48]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8006062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006066:	6013      	str	r3, [r2, #0]
 8006068:	e00b      	b.n	8006082 <HAL_RCC_OscConfig+0x286>
 800606a:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a09      	ldr	r2, [pc, #36]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8006070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	4b07      	ldr	r3, [pc, #28]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a06      	ldr	r2, [pc, #24]	; (8006094 <HAL_RCC_OscConfig+0x298>)
 800607c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006080:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d01c      	beq.n	80060c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608a:	f7fc ffd9 	bl	8003040 <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006090:	e011      	b.n	80060b6 <HAL_RCC_OscConfig+0x2ba>
 8006092:	bf00      	nop
 8006094:	40021000 	.word	0x40021000
 8006098:	0800c504 	.word	0x0800c504
 800609c:	20000000 	.word	0x20000000
 80060a0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060a4:	f7fc ffcc 	bl	8003040 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b64      	cmp	r3, #100	; 0x64
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e280      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060b6:	4baf      	ldr	r3, [pc, #700]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0f0      	beq.n	80060a4 <HAL_RCC_OscConfig+0x2a8>
 80060c2:	e014      	b.n	80060ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c4:	f7fc ffbc 	bl	8003040 <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060cc:	f7fc ffb8 	bl	8003040 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b64      	cmp	r3, #100	; 0x64
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e26c      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060de:	4ba5      	ldr	r3, [pc, #660]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1f0      	bne.n	80060cc <HAL_RCC_OscConfig+0x2d0>
 80060ea:	e000      	b.n	80060ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d060      	beq.n	80061bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d005      	beq.n	800610c <HAL_RCC_OscConfig+0x310>
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	2b0c      	cmp	r3, #12
 8006104:	d119      	bne.n	800613a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d116      	bne.n	800613a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800610c:	4b99      	ldr	r3, [pc, #612]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006114:	2b00      	cmp	r3, #0
 8006116:	d005      	beq.n	8006124 <HAL_RCC_OscConfig+0x328>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e249      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006124:	4b93      	ldr	r3, [pc, #588]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	061b      	lsls	r3, r3, #24
 8006132:	4990      	ldr	r1, [pc, #576]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006134:	4313      	orrs	r3, r2
 8006136:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006138:	e040      	b.n	80061bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d023      	beq.n	800618a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006142:	4b8c      	ldr	r3, [pc, #560]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a8b      	ldr	r2, [pc, #556]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800614c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614e:	f7fc ff77 	bl	8003040 <HAL_GetTick>
 8006152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006154:	e008      	b.n	8006168 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006156:	f7fc ff73 	bl	8003040 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d901      	bls.n	8006168 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e227      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006168:	4b82      	ldr	r3, [pc, #520]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0f0      	beq.n	8006156 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006174:	4b7f      	ldr	r3, [pc, #508]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	061b      	lsls	r3, r3, #24
 8006182:	497c      	ldr	r1, [pc, #496]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006184:	4313      	orrs	r3, r2
 8006186:	604b      	str	r3, [r1, #4]
 8006188:	e018      	b.n	80061bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800618a:	4b7a      	ldr	r3, [pc, #488]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a79      	ldr	r2, [pc, #484]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006196:	f7fc ff53 	bl	8003040 <HAL_GetTick>
 800619a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800619c:	e008      	b.n	80061b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800619e:	f7fc ff4f 	bl	8003040 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e203      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061b0:	4b70      	ldr	r3, [pc, #448]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1f0      	bne.n	800619e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d03c      	beq.n	8006242 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01c      	beq.n	800620a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061d0:	4b68      	ldr	r3, [pc, #416]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 80061d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061d6:	4a67      	ldr	r2, [pc, #412]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 80061d8:	f043 0301 	orr.w	r3, r3, #1
 80061dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e0:	f7fc ff2e 	bl	8003040 <HAL_GetTick>
 80061e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061e6:	e008      	b.n	80061fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061e8:	f7fc ff2a 	bl	8003040 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e1de      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061fa:	4b5e      	ldr	r3, [pc, #376]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 80061fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0ef      	beq.n	80061e8 <HAL_RCC_OscConfig+0x3ec>
 8006208:	e01b      	b.n	8006242 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800620a:	4b5a      	ldr	r3, [pc, #360]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 800620c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006210:	4a58      	ldr	r2, [pc, #352]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006212:	f023 0301 	bic.w	r3, r3, #1
 8006216:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800621a:	f7fc ff11 	bl	8003040 <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006220:	e008      	b.n	8006234 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006222:	f7fc ff0d 	bl	8003040 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e1c1      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006234:	4b4f      	ldr	r3, [pc, #316]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1ef      	bne.n	8006222 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0304 	and.w	r3, r3, #4
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 80a6 	beq.w	800639c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006250:	2300      	movs	r3, #0
 8006252:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006254:	4b47      	ldr	r3, [pc, #284]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10d      	bne.n	800627c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006260:	4b44      	ldr	r3, [pc, #272]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006264:	4a43      	ldr	r2, [pc, #268]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800626a:	6593      	str	r3, [r2, #88]	; 0x58
 800626c:	4b41      	ldr	r3, [pc, #260]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 800626e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006278:	2301      	movs	r3, #1
 800627a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800627c:	4b3e      	ldr	r3, [pc, #248]	; (8006378 <HAL_RCC_OscConfig+0x57c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006284:	2b00      	cmp	r3, #0
 8006286:	d118      	bne.n	80062ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006288:	4b3b      	ldr	r3, [pc, #236]	; (8006378 <HAL_RCC_OscConfig+0x57c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a3a      	ldr	r2, [pc, #232]	; (8006378 <HAL_RCC_OscConfig+0x57c>)
 800628e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006292:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006294:	f7fc fed4 	bl	8003040 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800629c:	f7fc fed0 	bl	8003040 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e184      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062ae:	4b32      	ldr	r3, [pc, #200]	; (8006378 <HAL_RCC_OscConfig+0x57c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0f0      	beq.n	800629c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d108      	bne.n	80062d4 <HAL_RCC_OscConfig+0x4d8>
 80062c2:	4b2c      	ldr	r3, [pc, #176]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 80062c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c8:	4a2a      	ldr	r2, [pc, #168]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 80062ca:	f043 0301 	orr.w	r3, r3, #1
 80062ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062d2:	e024      	b.n	800631e <HAL_RCC_OscConfig+0x522>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	2b05      	cmp	r3, #5
 80062da:	d110      	bne.n	80062fe <HAL_RCC_OscConfig+0x502>
 80062dc:	4b25      	ldr	r3, [pc, #148]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 80062de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e2:	4a24      	ldr	r2, [pc, #144]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 80062e4:	f043 0304 	orr.w	r3, r3, #4
 80062e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062ec:	4b21      	ldr	r3, [pc, #132]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f2:	4a20      	ldr	r2, [pc, #128]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 80062f4:	f043 0301 	orr.w	r3, r3, #1
 80062f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062fc:	e00f      	b.n	800631e <HAL_RCC_OscConfig+0x522>
 80062fe:	4b1d      	ldr	r3, [pc, #116]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006304:	4a1b      	ldr	r2, [pc, #108]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006306:	f023 0301 	bic.w	r3, r3, #1
 800630a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800630e:	4b19      	ldr	r3, [pc, #100]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006314:	4a17      	ldr	r2, [pc, #92]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006316:	f023 0304 	bic.w	r3, r3, #4
 800631a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d016      	beq.n	8006354 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006326:	f7fc fe8b 	bl	8003040 <HAL_GetTick>
 800632a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800632c:	e00a      	b.n	8006344 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800632e:	f7fc fe87 	bl	8003040 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	f241 3288 	movw	r2, #5000	; 0x1388
 800633c:	4293      	cmp	r3, r2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e139      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006344:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <HAL_RCC_OscConfig+0x578>)
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0ed      	beq.n	800632e <HAL_RCC_OscConfig+0x532>
 8006352:	e01a      	b.n	800638a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006354:	f7fc fe74 	bl	8003040 <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800635a:	e00f      	b.n	800637c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800635c:	f7fc fe70 	bl	8003040 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	f241 3288 	movw	r2, #5000	; 0x1388
 800636a:	4293      	cmp	r3, r2
 800636c:	d906      	bls.n	800637c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e122      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
 8006372:	bf00      	nop
 8006374:	40021000 	.word	0x40021000
 8006378:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800637c:	4b90      	ldr	r3, [pc, #576]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 800637e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e8      	bne.n	800635c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800638a:	7ffb      	ldrb	r3, [r7, #31]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d105      	bne.n	800639c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006390:	4b8b      	ldr	r3, [pc, #556]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 8006392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006394:	4a8a      	ldr	r2, [pc, #552]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 8006396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800639a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 8108 	beq.w	80065b6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	f040 80d0 	bne.w	8006550 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80063b0:	4b83      	ldr	r3, [pc, #524]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f003 0203 	and.w	r2, r3, #3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d130      	bne.n	8006426 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	3b01      	subs	r3, #1
 80063d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d127      	bne.n	8006426 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d11f      	bne.n	8006426 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063f0:	2a07      	cmp	r2, #7
 80063f2:	bf14      	ite	ne
 80063f4:	2201      	movne	r2, #1
 80063f6:	2200      	moveq	r2, #0
 80063f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d113      	bne.n	8006426 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006408:	085b      	lsrs	r3, r3, #1
 800640a:	3b01      	subs	r3, #1
 800640c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800640e:	429a      	cmp	r2, r3
 8006410:	d109      	bne.n	8006426 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641c:	085b      	lsrs	r3, r3, #1
 800641e:	3b01      	subs	r3, #1
 8006420:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006422:	429a      	cmp	r2, r3
 8006424:	d06e      	beq.n	8006504 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	2b0c      	cmp	r3, #12
 800642a:	d069      	beq.n	8006500 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800642c:	4b64      	ldr	r3, [pc, #400]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d105      	bne.n	8006444 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006438:	4b61      	ldr	r3, [pc, #388]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e0b7      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006448:	4b5d      	ldr	r3, [pc, #372]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a5c      	ldr	r2, [pc, #368]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 800644e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006452:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006454:	f7fc fdf4 	bl	8003040 <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800645c:	f7fc fdf0 	bl	8003040 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b02      	cmp	r3, #2
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e0a4      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800646e:	4b54      	ldr	r3, [pc, #336]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f0      	bne.n	800645c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800647a:	4b51      	ldr	r3, [pc, #324]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	4b51      	ldr	r3, [pc, #324]	; (80065c4 <HAL_RCC_OscConfig+0x7c8>)
 8006480:	4013      	ands	r3, r2
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800648a:	3a01      	subs	r2, #1
 800648c:	0112      	lsls	r2, r2, #4
 800648e:	4311      	orrs	r1, r2
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006494:	0212      	lsls	r2, r2, #8
 8006496:	4311      	orrs	r1, r2
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800649c:	0852      	lsrs	r2, r2, #1
 800649e:	3a01      	subs	r2, #1
 80064a0:	0552      	lsls	r2, r2, #21
 80064a2:	4311      	orrs	r1, r2
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80064a8:	0852      	lsrs	r2, r2, #1
 80064aa:	3a01      	subs	r2, #1
 80064ac:	0652      	lsls	r2, r2, #25
 80064ae:	4311      	orrs	r1, r2
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064b4:	0912      	lsrs	r2, r2, #4
 80064b6:	0452      	lsls	r2, r2, #17
 80064b8:	430a      	orrs	r2, r1
 80064ba:	4941      	ldr	r1, [pc, #260]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80064c0:	4b3f      	ldr	r3, [pc, #252]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a3e      	ldr	r2, [pc, #248]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 80064c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064cc:	4b3c      	ldr	r3, [pc, #240]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	4a3b      	ldr	r2, [pc, #236]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 80064d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80064d8:	f7fc fdb2 	bl	8003040 <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064de:	e008      	b.n	80064f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064e0:	f7fc fdae 	bl	8003040 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e062      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064f2:	4b33      	ldr	r3, [pc, #204]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d0f0      	beq.n	80064e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064fe:	e05a      	b.n	80065b6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e059      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006504:	4b2e      	ldr	r3, [pc, #184]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d152      	bne.n	80065b6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006510:	4b2b      	ldr	r3, [pc, #172]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a2a      	ldr	r2, [pc, #168]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 8006516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800651a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800651c:	4b28      	ldr	r3, [pc, #160]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 8006522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006526:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006528:	f7fc fd8a 	bl	8003040 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006530:	f7fc fd86 	bl	8003040 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e03a      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006542:	4b1f      	ldr	r3, [pc, #124]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0f0      	beq.n	8006530 <HAL_RCC_OscConfig+0x734>
 800654e:	e032      	b.n	80065b6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	2b0c      	cmp	r3, #12
 8006554:	d02d      	beq.n	80065b2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006556:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a19      	ldr	r2, [pc, #100]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 800655c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006560:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006562:	4b17      	ldr	r3, [pc, #92]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d105      	bne.n	800657a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800656e:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	4a13      	ldr	r2, [pc, #76]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 8006574:	f023 0303 	bic.w	r3, r3, #3
 8006578:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800657a:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	4a10      	ldr	r2, [pc, #64]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 8006580:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006588:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658a:	f7fc fd59 	bl	8003040 <HAL_GetTick>
 800658e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006590:	e008      	b.n	80065a4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006592:	f7fc fd55 	bl	8003040 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e009      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065a4:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <HAL_RCC_OscConfig+0x7c4>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1f0      	bne.n	8006592 <HAL_RCC_OscConfig+0x796>
 80065b0:	e001      	b.n	80065b6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3720      	adds	r7, #32
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	40021000 	.word	0x40021000
 80065c4:	f99d808c 	.word	0xf99d808c

080065c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e0c8      	b.n	800676e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065dc:	4b66      	ldr	r3, [pc, #408]	; (8006778 <HAL_RCC_ClockConfig+0x1b0>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0307 	and.w	r3, r3, #7
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d910      	bls.n	800660c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ea:	4b63      	ldr	r3, [pc, #396]	; (8006778 <HAL_RCC_ClockConfig+0x1b0>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f023 0207 	bic.w	r2, r3, #7
 80065f2:	4961      	ldr	r1, [pc, #388]	; (8006778 <HAL_RCC_ClockConfig+0x1b0>)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065fa:	4b5f      	ldr	r3, [pc, #380]	; (8006778 <HAL_RCC_ClockConfig+0x1b0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	429a      	cmp	r2, r3
 8006606:	d001      	beq.n	800660c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e0b0      	b.n	800676e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d04c      	beq.n	80066b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	2b03      	cmp	r3, #3
 800661e:	d107      	bne.n	8006630 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006620:	4b56      	ldr	r3, [pc, #344]	; (800677c <HAL_RCC_ClockConfig+0x1b4>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d121      	bne.n	8006670 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e09e      	b.n	800676e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2b02      	cmp	r3, #2
 8006636:	d107      	bne.n	8006648 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006638:	4b50      	ldr	r3, [pc, #320]	; (800677c <HAL_RCC_ClockConfig+0x1b4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d115      	bne.n	8006670 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e092      	b.n	800676e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d107      	bne.n	8006660 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006650:	4b4a      	ldr	r3, [pc, #296]	; (800677c <HAL_RCC_ClockConfig+0x1b4>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d109      	bne.n	8006670 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e086      	b.n	800676e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006660:	4b46      	ldr	r3, [pc, #280]	; (800677c <HAL_RCC_ClockConfig+0x1b4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e07e      	b.n	800676e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006670:	4b42      	ldr	r3, [pc, #264]	; (800677c <HAL_RCC_ClockConfig+0x1b4>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f023 0203 	bic.w	r2, r3, #3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	493f      	ldr	r1, [pc, #252]	; (800677c <HAL_RCC_ClockConfig+0x1b4>)
 800667e:	4313      	orrs	r3, r2
 8006680:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006682:	f7fc fcdd 	bl	8003040 <HAL_GetTick>
 8006686:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006688:	e00a      	b.n	80066a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800668a:	f7fc fcd9 	bl	8003040 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	f241 3288 	movw	r2, #5000	; 0x1388
 8006698:	4293      	cmp	r3, r2
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e066      	b.n	800676e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066a0:	4b36      	ldr	r3, [pc, #216]	; (800677c <HAL_RCC_ClockConfig+0x1b4>)
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f003 020c 	and.w	r2, r3, #12
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d1eb      	bne.n	800668a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d008      	beq.n	80066d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066be:	4b2f      	ldr	r3, [pc, #188]	; (800677c <HAL_RCC_ClockConfig+0x1b4>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	492c      	ldr	r1, [pc, #176]	; (800677c <HAL_RCC_ClockConfig+0x1b4>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066d0:	4b29      	ldr	r3, [pc, #164]	; (8006778 <HAL_RCC_ClockConfig+0x1b0>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d210      	bcs.n	8006700 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066de:	4b26      	ldr	r3, [pc, #152]	; (8006778 <HAL_RCC_ClockConfig+0x1b0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f023 0207 	bic.w	r2, r3, #7
 80066e6:	4924      	ldr	r1, [pc, #144]	; (8006778 <HAL_RCC_ClockConfig+0x1b0>)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ee:	4b22      	ldr	r3, [pc, #136]	; (8006778 <HAL_RCC_ClockConfig+0x1b0>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d001      	beq.n	8006700 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e036      	b.n	800676e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b00      	cmp	r3, #0
 800670a:	d008      	beq.n	800671e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800670c:	4b1b      	ldr	r3, [pc, #108]	; (800677c <HAL_RCC_ClockConfig+0x1b4>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	4918      	ldr	r1, [pc, #96]	; (800677c <HAL_RCC_ClockConfig+0x1b4>)
 800671a:	4313      	orrs	r3, r2
 800671c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b00      	cmp	r3, #0
 8006728:	d009      	beq.n	800673e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800672a:	4b14      	ldr	r3, [pc, #80]	; (800677c <HAL_RCC_ClockConfig+0x1b4>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	4910      	ldr	r1, [pc, #64]	; (800677c <HAL_RCC_ClockConfig+0x1b4>)
 800673a:	4313      	orrs	r3, r2
 800673c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800673e:	f000 f825 	bl	800678c <HAL_RCC_GetSysClockFreq>
 8006742:	4601      	mov	r1, r0
 8006744:	4b0d      	ldr	r3, [pc, #52]	; (800677c <HAL_RCC_ClockConfig+0x1b4>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	091b      	lsrs	r3, r3, #4
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	4a0c      	ldr	r2, [pc, #48]	; (8006780 <HAL_RCC_ClockConfig+0x1b8>)
 8006750:	5cd3      	ldrb	r3, [r2, r3]
 8006752:	f003 031f 	and.w	r3, r3, #31
 8006756:	fa21 f303 	lsr.w	r3, r1, r3
 800675a:	4a0a      	ldr	r2, [pc, #40]	; (8006784 <HAL_RCC_ClockConfig+0x1bc>)
 800675c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800675e:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <HAL_RCC_ClockConfig+0x1c0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4618      	mov	r0, r3
 8006764:	f7fc fc1c 	bl	8002fa0 <HAL_InitTick>
 8006768:	4603      	mov	r3, r0
 800676a:	72fb      	strb	r3, [r7, #11]

  return status;
 800676c:	7afb      	ldrb	r3, [r7, #11]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	40022000 	.word	0x40022000
 800677c:	40021000 	.word	0x40021000
 8006780:	0800c504 	.word	0x0800c504
 8006784:	20000000 	.word	0x20000000
 8006788:	20000004 	.word	0x20000004

0800678c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800678c:	b480      	push	{r7}
 800678e:	b089      	sub	sp, #36	; 0x24
 8006790:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	61fb      	str	r3, [r7, #28]
 8006796:	2300      	movs	r3, #0
 8006798:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800679a:	4b3d      	ldr	r3, [pc, #244]	; (8006890 <HAL_RCC_GetSysClockFreq+0x104>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 030c 	and.w	r3, r3, #12
 80067a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067a4:	4b3a      	ldr	r3, [pc, #232]	; (8006890 <HAL_RCC_GetSysClockFreq+0x104>)
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f003 0303 	and.w	r3, r3, #3
 80067ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d005      	beq.n	80067c0 <HAL_RCC_GetSysClockFreq+0x34>
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	2b0c      	cmp	r3, #12
 80067b8:	d121      	bne.n	80067fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d11e      	bne.n	80067fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80067c0:	4b33      	ldr	r3, [pc, #204]	; (8006890 <HAL_RCC_GetSysClockFreq+0x104>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0308 	and.w	r3, r3, #8
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d107      	bne.n	80067dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80067cc:	4b30      	ldr	r3, [pc, #192]	; (8006890 <HAL_RCC_GetSysClockFreq+0x104>)
 80067ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067d2:	0a1b      	lsrs	r3, r3, #8
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	61fb      	str	r3, [r7, #28]
 80067da:	e005      	b.n	80067e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80067dc:	4b2c      	ldr	r3, [pc, #176]	; (8006890 <HAL_RCC_GetSysClockFreq+0x104>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	091b      	lsrs	r3, r3, #4
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80067e8:	4a2a      	ldr	r2, [pc, #168]	; (8006894 <HAL_RCC_GetSysClockFreq+0x108>)
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10d      	bne.n	8006814 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067fc:	e00a      	b.n	8006814 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	2b04      	cmp	r3, #4
 8006802:	d102      	bne.n	800680a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006804:	4b24      	ldr	r3, [pc, #144]	; (8006898 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006806:	61bb      	str	r3, [r7, #24]
 8006808:	e004      	b.n	8006814 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	2b08      	cmp	r3, #8
 800680e:	d101      	bne.n	8006814 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006810:	4b22      	ldr	r3, [pc, #136]	; (800689c <HAL_RCC_GetSysClockFreq+0x110>)
 8006812:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2b0c      	cmp	r3, #12
 8006818:	d133      	bne.n	8006882 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800681a:	4b1d      	ldr	r3, [pc, #116]	; (8006890 <HAL_RCC_GetSysClockFreq+0x104>)
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d002      	beq.n	8006830 <HAL_RCC_GetSysClockFreq+0xa4>
 800682a:	2b03      	cmp	r3, #3
 800682c:	d003      	beq.n	8006836 <HAL_RCC_GetSysClockFreq+0xaa>
 800682e:	e005      	b.n	800683c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006830:	4b19      	ldr	r3, [pc, #100]	; (8006898 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006832:	617b      	str	r3, [r7, #20]
      break;
 8006834:	e005      	b.n	8006842 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006836:	4b19      	ldr	r3, [pc, #100]	; (800689c <HAL_RCC_GetSysClockFreq+0x110>)
 8006838:	617b      	str	r3, [r7, #20]
      break;
 800683a:	e002      	b.n	8006842 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	617b      	str	r3, [r7, #20]
      break;
 8006840:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006842:	4b13      	ldr	r3, [pc, #76]	; (8006890 <HAL_RCC_GetSysClockFreq+0x104>)
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	091b      	lsrs	r3, r3, #4
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	3301      	adds	r3, #1
 800684e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006850:	4b0f      	ldr	r3, [pc, #60]	; (8006890 <HAL_RCC_GetSysClockFreq+0x104>)
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	0a1b      	lsrs	r3, r3, #8
 8006856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	fb02 f203 	mul.w	r2, r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	fbb2 f3f3 	udiv	r3, r2, r3
 8006866:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006868:	4b09      	ldr	r3, [pc, #36]	; (8006890 <HAL_RCC_GetSysClockFreq+0x104>)
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	0e5b      	lsrs	r3, r3, #25
 800686e:	f003 0303 	and.w	r3, r3, #3
 8006872:	3301      	adds	r3, #1
 8006874:	005b      	lsls	r3, r3, #1
 8006876:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006880:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006882:	69bb      	ldr	r3, [r7, #24]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3724      	adds	r7, #36	; 0x24
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	40021000 	.word	0x40021000
 8006894:	0800c51c 	.word	0x0800c51c
 8006898:	00f42400 	.word	0x00f42400
 800689c:	007a1200 	.word	0x007a1200

080068a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068a4:	4b03      	ldr	r3, [pc, #12]	; (80068b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80068a6:	681b      	ldr	r3, [r3, #0]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	20000000 	.word	0x20000000

080068b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80068bc:	f7ff fff0 	bl	80068a0 <HAL_RCC_GetHCLKFreq>
 80068c0:	4601      	mov	r1, r0
 80068c2:	4b06      	ldr	r3, [pc, #24]	; (80068dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	0a1b      	lsrs	r3, r3, #8
 80068c8:	f003 0307 	and.w	r3, r3, #7
 80068cc:	4a04      	ldr	r2, [pc, #16]	; (80068e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068ce:	5cd3      	ldrb	r3, [r2, r3]
 80068d0:	f003 031f 	and.w	r3, r3, #31
 80068d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80068d8:	4618      	mov	r0, r3
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	40021000 	.word	0x40021000
 80068e0:	0800c514 	.word	0x0800c514

080068e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80068e8:	f7ff ffda 	bl	80068a0 <HAL_RCC_GetHCLKFreq>
 80068ec:	4601      	mov	r1, r0
 80068ee:	4b06      	ldr	r3, [pc, #24]	; (8006908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	0adb      	lsrs	r3, r3, #11
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	4a04      	ldr	r2, [pc, #16]	; (800690c <HAL_RCC_GetPCLK2Freq+0x28>)
 80068fa:	5cd3      	ldrb	r3, [r2, r3]
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006904:	4618      	mov	r0, r3
 8006906:	bd80      	pop	{r7, pc}
 8006908:	40021000 	.word	0x40021000
 800690c:	0800c514 	.word	0x0800c514

08006910 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006918:	2300      	movs	r3, #0
 800691a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800691c:	4b2a      	ldr	r3, [pc, #168]	; (80069c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800691e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006928:	f7ff f938 	bl	8005b9c <HAL_PWREx_GetVoltageRange>
 800692c:	6178      	str	r0, [r7, #20]
 800692e:	e014      	b.n	800695a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006930:	4b25      	ldr	r3, [pc, #148]	; (80069c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006934:	4a24      	ldr	r2, [pc, #144]	; (80069c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800693a:	6593      	str	r3, [r2, #88]	; 0x58
 800693c:	4b22      	ldr	r3, [pc, #136]	; (80069c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800693e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006948:	f7ff f928 	bl	8005b9c <HAL_PWREx_GetVoltageRange>
 800694c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800694e:	4b1e      	ldr	r3, [pc, #120]	; (80069c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006952:	4a1d      	ldr	r2, [pc, #116]	; (80069c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006958:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006960:	d10b      	bne.n	800697a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b80      	cmp	r3, #128	; 0x80
 8006966:	d919      	bls.n	800699c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2ba0      	cmp	r3, #160	; 0xa0
 800696c:	d902      	bls.n	8006974 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800696e:	2302      	movs	r3, #2
 8006970:	613b      	str	r3, [r7, #16]
 8006972:	e013      	b.n	800699c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006974:	2301      	movs	r3, #1
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	e010      	b.n	800699c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b80      	cmp	r3, #128	; 0x80
 800697e:	d902      	bls.n	8006986 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006980:	2303      	movs	r3, #3
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	e00a      	b.n	800699c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b80      	cmp	r3, #128	; 0x80
 800698a:	d102      	bne.n	8006992 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800698c:	2302      	movs	r3, #2
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	e004      	b.n	800699c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b70      	cmp	r3, #112	; 0x70
 8006996:	d101      	bne.n	800699c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006998:	2301      	movs	r3, #1
 800699a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800699c:	4b0b      	ldr	r3, [pc, #44]	; (80069cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f023 0207 	bic.w	r2, r3, #7
 80069a4:	4909      	ldr	r1, [pc, #36]	; (80069cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80069ac:	4b07      	ldr	r3, [pc, #28]	; (80069cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0307 	and.w	r3, r3, #7
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d001      	beq.n	80069be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e000      	b.n	80069c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	40021000 	.word	0x40021000
 80069cc:	40022000 	.word	0x40022000

080069d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069d8:	2300      	movs	r3, #0
 80069da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069dc:	2300      	movs	r3, #0
 80069de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d03f      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069f4:	d01c      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80069f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069fa:	d802      	bhi.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00e      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006a00:	e01f      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006a02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a06:	d003      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006a08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a0c:	d01c      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006a0e:	e018      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a10:	4b85      	ldr	r3, [pc, #532]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	4a84      	ldr	r2, [pc, #528]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006a1c:	e015      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3304      	adds	r3, #4
 8006a22:	2100      	movs	r1, #0
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fac9 	bl	8006fbc <RCCEx_PLLSAI1_Config>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006a2e:	e00c      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3320      	adds	r3, #32
 8006a34:	2100      	movs	r1, #0
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fbb0 	bl	800719c <RCCEx_PLLSAI2_Config>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006a40:	e003      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	74fb      	strb	r3, [r7, #19]
      break;
 8006a46:	e000      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006a48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a4a:	7cfb      	ldrb	r3, [r7, #19]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10b      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a50:	4b75      	ldr	r3, [pc, #468]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a5e:	4972      	ldr	r1, [pc, #456]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006a66:	e001      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a68:	7cfb      	ldrb	r3, [r7, #19]
 8006a6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d03f      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a80:	d01c      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006a82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a86:	d802      	bhi.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00e      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xda>
 8006a8c:	e01f      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006a8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a92:	d003      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8006a94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a98:	d01c      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8006a9a:	e018      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a9c:	4b62      	ldr	r3, [pc, #392]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	4a61      	ldr	r2, [pc, #388]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aa6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006aa8:	e015      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3304      	adds	r3, #4
 8006aae:	2100      	movs	r1, #0
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fa83 	bl	8006fbc <RCCEx_PLLSAI1_Config>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006aba:	e00c      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3320      	adds	r3, #32
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fb6a 	bl	800719c <RCCEx_PLLSAI2_Config>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006acc:	e003      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	74fb      	strb	r3, [r7, #19]
      break;
 8006ad2:	e000      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ad6:	7cfb      	ldrb	r3, [r7, #19]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10b      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006adc:	4b52      	ldr	r3, [pc, #328]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aea:	494f      	ldr	r1, [pc, #316]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006af2:	e001      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af4:	7cfb      	ldrb	r3, [r7, #19]
 8006af6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 80a0 	beq.w	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b06:	2300      	movs	r3, #0
 8006b08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b0a:	4b47      	ldr	r3, [pc, #284]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00d      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b20:	4b41      	ldr	r3, [pc, #260]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b24:	4a40      	ldr	r2, [pc, #256]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8006b2c:	4b3e      	ldr	r3, [pc, #248]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b34:	60bb      	str	r3, [r7, #8]
 8006b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b3c:	4b3b      	ldr	r3, [pc, #236]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a3a      	ldr	r2, [pc, #232]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b48:	f7fc fa7a 	bl	8003040 <HAL_GetTick>
 8006b4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b4e:	e009      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b50:	f7fc fa76 	bl	8003040 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d902      	bls.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	74fb      	strb	r3, [r7, #19]
        break;
 8006b62:	e005      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b64:	4b31      	ldr	r3, [pc, #196]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0ef      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8006b70:	7cfb      	ldrb	r3, [r7, #19]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d15c      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b76:	4b2c      	ldr	r3, [pc, #176]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d01f      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d019      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b94:	4b24      	ldr	r3, [pc, #144]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ba0:	4b21      	ldr	r3, [pc, #132]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba6:	4a20      	ldr	r2, [pc, #128]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bb0:	4b1d      	ldr	r3, [pc, #116]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb6:	4a1c      	ldr	r2, [pc, #112]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006bc0:	4a19      	ldr	r2, [pc, #100]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d016      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd2:	f7fc fa35 	bl	8003040 <HAL_GetTick>
 8006bd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bd8:	e00b      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bda:	f7fc fa31 	bl	8003040 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d902      	bls.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	74fb      	strb	r3, [r7, #19]
            break;
 8006bf0:	e006      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bf2:	4b0d      	ldr	r3, [pc, #52]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d0ec      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8006c00:	7cfb      	ldrb	r3, [r7, #19]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10c      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c06:	4b08      	ldr	r3, [pc, #32]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c16:	4904      	ldr	r1, [pc, #16]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006c1e:	e009      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c20:	7cfb      	ldrb	r3, [r7, #19]
 8006c22:	74bb      	strb	r3, [r7, #18]
 8006c24:	e006      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8006c26:	bf00      	nop
 8006c28:	40021000 	.word	0x40021000
 8006c2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c30:	7cfb      	ldrb	r3, [r7, #19]
 8006c32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c34:	7c7b      	ldrb	r3, [r7, #17]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d105      	bne.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c3a:	4b9e      	ldr	r3, [pc, #632]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3e:	4a9d      	ldr	r2, [pc, #628]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00a      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c52:	4b98      	ldr	r3, [pc, #608]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c58:	f023 0203 	bic.w	r2, r3, #3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	4994      	ldr	r1, [pc, #592]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0302 	and.w	r3, r3, #2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00a      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c74:	4b8f      	ldr	r3, [pc, #572]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7a:	f023 020c 	bic.w	r2, r3, #12
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c82:	498c      	ldr	r1, [pc, #560]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0304 	and.w	r3, r3, #4
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c96:	4b87      	ldr	r3, [pc, #540]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca4:	4983      	ldr	r1, [pc, #524]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0308 	and.w	r3, r3, #8
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00a      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006cb8:	4b7e      	ldr	r3, [pc, #504]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc6:	497b      	ldr	r1, [pc, #492]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0310 	and.w	r3, r3, #16
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006cda:	4b76      	ldr	r3, [pc, #472]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce8:	4972      	ldr	r1, [pc, #456]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006cfc:	4b6d      	ldr	r3, [pc, #436]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0a:	496a      	ldr	r1, [pc, #424]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d1e:	4b65      	ldr	r3, [pc, #404]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d2c:	4961      	ldr	r1, [pc, #388]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d40:	4b5c      	ldr	r3, [pc, #368]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d4e:	4959      	ldr	r1, [pc, #356]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00a      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d62:	4b54      	ldr	r3, [pc, #336]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d68:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d70:	4950      	ldr	r1, [pc, #320]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00a      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d84:	4b4b      	ldr	r3, [pc, #300]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d92:	4948      	ldr	r1, [pc, #288]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00a      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006da6:	4b43      	ldr	r3, [pc, #268]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db4:	493f      	ldr	r1, [pc, #252]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d028      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006dc8:	4b3a      	ldr	r3, [pc, #232]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd6:	4937      	ldr	r1, [pc, #220]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006de2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006de6:	d106      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006de8:	4b32      	ldr	r3, [pc, #200]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	4a31      	ldr	r2, [pc, #196]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006df2:	60d3      	str	r3, [r2, #12]
 8006df4:	e011      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006dfe:	d10c      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3304      	adds	r3, #4
 8006e04:	2101      	movs	r1, #1
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 f8d8 	bl	8006fbc <RCCEx_PLLSAI1_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006e10:	7cfb      	ldrb	r3, [r7, #19]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8006e16:	7cfb      	ldrb	r3, [r7, #19]
 8006e18:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d028      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006e26:	4b23      	ldr	r3, [pc, #140]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e34:	491f      	ldr	r1, [pc, #124]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e44:	d106      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e46:	4b1b      	ldr	r3, [pc, #108]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	4a1a      	ldr	r2, [pc, #104]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e50:	60d3      	str	r3, [r2, #12]
 8006e52:	e011      	b.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e5c:	d10c      	bne.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3304      	adds	r3, #4
 8006e62:	2101      	movs	r1, #1
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 f8a9 	bl	8006fbc <RCCEx_PLLSAI1_Config>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e6e:	7cfb      	ldrb	r3, [r7, #19]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8006e74:	7cfb      	ldrb	r3, [r7, #19]
 8006e76:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d02b      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e84:	4b0b      	ldr	r3, [pc, #44]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e92:	4908      	ldr	r1, [pc, #32]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ea2:	d109      	bne.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ea4:	4b03      	ldr	r3, [pc, #12]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	4a02      	ldr	r2, [pc, #8]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8006eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006eae:	60d3      	str	r3, [r2, #12]
 8006eb0:	e014      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006eb2:	bf00      	nop
 8006eb4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ec0:	d10c      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 f877 	bl	8006fbc <RCCEx_PLLSAI1_Config>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ed2:	7cfb      	ldrb	r3, [r7, #19]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8006ed8:	7cfb      	ldrb	r3, [r7, #19]
 8006eda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d02f      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ee8:	4b2b      	ldr	r3, [pc, #172]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ef6:	4928      	ldr	r1, [pc, #160]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f06:	d10d      	bne.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	2102      	movs	r1, #2
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 f854 	bl	8006fbc <RCCEx_PLLSAI1_Config>
 8006f14:	4603      	mov	r3, r0
 8006f16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f18:	7cfb      	ldrb	r3, [r7, #19]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d014      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8006f1e:	7cfb      	ldrb	r3, [r7, #19]
 8006f20:	74bb      	strb	r3, [r7, #18]
 8006f22:	e011      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f2c:	d10c      	bne.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	3320      	adds	r3, #32
 8006f32:	2102      	movs	r1, #2
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 f931 	bl	800719c <RCCEx_PLLSAI2_Config>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f3e:	7cfb      	ldrb	r3, [r7, #19]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d001      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8006f44:	7cfb      	ldrb	r3, [r7, #19]
 8006f46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00a      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f54:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f62:	490d      	ldr	r1, [pc, #52]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00b      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f76:	4b08      	ldr	r3, [pc, #32]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f86:	4904      	ldr	r1, [pc, #16]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006f8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3718      	adds	r7, #24
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40021000 	.word	0x40021000

08006f9c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006fa0:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a04      	ldr	r2, [pc, #16]	; (8006fb8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006fa6:	f043 0304 	orr.w	r3, r3, #4
 8006faa:	6013      	str	r3, [r2, #0]
}
 8006fac:	bf00      	nop
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	40021000 	.word	0x40021000

08006fbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006fca:	4b73      	ldr	r3, [pc, #460]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	f003 0303 	and.w	r3, r3, #3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d018      	beq.n	8007008 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006fd6:	4b70      	ldr	r3, [pc, #448]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f003 0203 	and.w	r2, r3, #3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d10d      	bne.n	8007002 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
       ||
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d009      	beq.n	8007002 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006fee:	4b6a      	ldr	r3, [pc, #424]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	091b      	lsrs	r3, r3, #4
 8006ff4:	f003 0307 	and.w	r3, r3, #7
 8006ff8:	1c5a      	adds	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
       ||
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d044      	beq.n	800708c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	73fb      	strb	r3, [r7, #15]
 8007006:	e041      	b.n	800708c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d00c      	beq.n	800702a <RCCEx_PLLSAI1_Config+0x6e>
 8007010:	2b03      	cmp	r3, #3
 8007012:	d013      	beq.n	800703c <RCCEx_PLLSAI1_Config+0x80>
 8007014:	2b01      	cmp	r3, #1
 8007016:	d120      	bne.n	800705a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007018:	4b5f      	ldr	r3, [pc, #380]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d11d      	bne.n	8007060 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007028:	e01a      	b.n	8007060 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800702a:	4b5b      	ldr	r3, [pc, #364]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007032:	2b00      	cmp	r3, #0
 8007034:	d116      	bne.n	8007064 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800703a:	e013      	b.n	8007064 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800703c:	4b56      	ldr	r3, [pc, #344]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10f      	bne.n	8007068 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007048:	4b53      	ldr	r3, [pc, #332]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d109      	bne.n	8007068 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007058:	e006      	b.n	8007068 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	73fb      	strb	r3, [r7, #15]
      break;
 800705e:	e004      	b.n	800706a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007060:	bf00      	nop
 8007062:	e002      	b.n	800706a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007064:	bf00      	nop
 8007066:	e000      	b.n	800706a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007068:	bf00      	nop
    }

    if(status == HAL_OK)
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10d      	bne.n	800708c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007070:	4b49      	ldr	r3, [pc, #292]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6819      	ldr	r1, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	3b01      	subs	r3, #1
 8007082:	011b      	lsls	r3, r3, #4
 8007084:	430b      	orrs	r3, r1
 8007086:	4944      	ldr	r1, [pc, #272]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007088:	4313      	orrs	r3, r2
 800708a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800708c:	7bfb      	ldrb	r3, [r7, #15]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d17d      	bne.n	800718e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007092:	4b41      	ldr	r3, [pc, #260]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a40      	ldr	r2, [pc, #256]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007098:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800709c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800709e:	f7fb ffcf 	bl	8003040 <HAL_GetTick>
 80070a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80070a4:	e009      	b.n	80070ba <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070a6:	f7fb ffcb 	bl	8003040 <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d902      	bls.n	80070ba <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	73fb      	strb	r3, [r7, #15]
        break;
 80070b8:	e005      	b.n	80070c6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80070ba:	4b37      	ldr	r3, [pc, #220]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1ef      	bne.n	80070a6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d160      	bne.n	800718e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d111      	bne.n	80070f6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80070d2:	4b31      	ldr	r3, [pc, #196]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80070da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	6892      	ldr	r2, [r2, #8]
 80070e2:	0211      	lsls	r1, r2, #8
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	68d2      	ldr	r2, [r2, #12]
 80070e8:	0912      	lsrs	r2, r2, #4
 80070ea:	0452      	lsls	r2, r2, #17
 80070ec:	430a      	orrs	r2, r1
 80070ee:	492a      	ldr	r1, [pc, #168]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070f0:	4313      	orrs	r3, r2
 80070f2:	610b      	str	r3, [r1, #16]
 80070f4:	e027      	b.n	8007146 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d112      	bne.n	8007122 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80070fc:	4b26      	ldr	r3, [pc, #152]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007104:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6892      	ldr	r2, [r2, #8]
 800710c:	0211      	lsls	r1, r2, #8
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	6912      	ldr	r2, [r2, #16]
 8007112:	0852      	lsrs	r2, r2, #1
 8007114:	3a01      	subs	r2, #1
 8007116:	0552      	lsls	r2, r2, #21
 8007118:	430a      	orrs	r2, r1
 800711a:	491f      	ldr	r1, [pc, #124]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 800711c:	4313      	orrs	r3, r2
 800711e:	610b      	str	r3, [r1, #16]
 8007120:	e011      	b.n	8007146 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007122:	4b1d      	ldr	r3, [pc, #116]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800712a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6892      	ldr	r2, [r2, #8]
 8007132:	0211      	lsls	r1, r2, #8
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6952      	ldr	r2, [r2, #20]
 8007138:	0852      	lsrs	r2, r2, #1
 800713a:	3a01      	subs	r2, #1
 800713c:	0652      	lsls	r2, r2, #25
 800713e:	430a      	orrs	r2, r1
 8007140:	4915      	ldr	r1, [pc, #84]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007142:	4313      	orrs	r3, r2
 8007144:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007146:	4b14      	ldr	r3, [pc, #80]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a13      	ldr	r2, [pc, #76]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 800714c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007150:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007152:	f7fb ff75 	bl	8003040 <HAL_GetTick>
 8007156:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007158:	e009      	b.n	800716e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800715a:	f7fb ff71 	bl	8003040 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d902      	bls.n	800716e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	73fb      	strb	r3, [r7, #15]
          break;
 800716c:	e005      	b.n	800717a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800716e:	4b0a      	ldr	r3, [pc, #40]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0ef      	beq.n	800715a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d106      	bne.n	800718e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007180:	4b05      	ldr	r3, [pc, #20]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007182:	691a      	ldr	r2, [r3, #16]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	4903      	ldr	r1, [pc, #12]	; (8007198 <RCCEx_PLLSAI1_Config+0x1dc>)
 800718a:	4313      	orrs	r3, r2
 800718c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800718e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	40021000 	.word	0x40021000

0800719c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80071aa:	4b68      	ldr	r3, [pc, #416]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d018      	beq.n	80071e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80071b6:	4b65      	ldr	r3, [pc, #404]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f003 0203 	and.w	r2, r3, #3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d10d      	bne.n	80071e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
       ||
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80071ce:	4b5f      	ldr	r3, [pc, #380]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	091b      	lsrs	r3, r3, #4
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
       ||
 80071de:	429a      	cmp	r2, r3
 80071e0:	d044      	beq.n	800726c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	73fb      	strb	r3, [r7, #15]
 80071e6:	e041      	b.n	800726c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d00c      	beq.n	800720a <RCCEx_PLLSAI2_Config+0x6e>
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d013      	beq.n	800721c <RCCEx_PLLSAI2_Config+0x80>
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d120      	bne.n	800723a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80071f8:	4b54      	ldr	r3, [pc, #336]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d11d      	bne.n	8007240 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007208:	e01a      	b.n	8007240 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800720a:	4b50      	ldr	r3, [pc, #320]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007212:	2b00      	cmp	r3, #0
 8007214:	d116      	bne.n	8007244 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800721a:	e013      	b.n	8007244 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800721c:	4b4b      	ldr	r3, [pc, #300]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10f      	bne.n	8007248 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007228:	4b48      	ldr	r3, [pc, #288]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d109      	bne.n	8007248 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007238:	e006      	b.n	8007248 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	73fb      	strb	r3, [r7, #15]
      break;
 800723e:	e004      	b.n	800724a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007240:	bf00      	nop
 8007242:	e002      	b.n	800724a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007244:	bf00      	nop
 8007246:	e000      	b.n	800724a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8007248:	bf00      	nop
    }

    if(status == HAL_OK)
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10d      	bne.n	800726c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007250:	4b3e      	ldr	r3, [pc, #248]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6819      	ldr	r1, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	3b01      	subs	r3, #1
 8007262:	011b      	lsls	r3, r3, #4
 8007264:	430b      	orrs	r3, r1
 8007266:	4939      	ldr	r1, [pc, #228]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 8007268:	4313      	orrs	r3, r2
 800726a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800726c:	7bfb      	ldrb	r3, [r7, #15]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d167      	bne.n	8007342 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007272:	4b36      	ldr	r3, [pc, #216]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a35      	ldr	r2, [pc, #212]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 8007278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800727c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800727e:	f7fb fedf 	bl	8003040 <HAL_GetTick>
 8007282:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007284:	e009      	b.n	800729a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007286:	f7fb fedb 	bl	8003040 <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	2b02      	cmp	r3, #2
 8007292:	d902      	bls.n	800729a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007294:	2303      	movs	r3, #3
 8007296:	73fb      	strb	r3, [r7, #15]
        break;
 8007298:	e005      	b.n	80072a6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800729a:	4b2c      	ldr	r3, [pc, #176]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1ef      	bne.n	8007286 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d14a      	bne.n	8007342 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d111      	bne.n	80072d6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80072b2:	4b26      	ldr	r3, [pc, #152]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80072ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	6892      	ldr	r2, [r2, #8]
 80072c2:	0211      	lsls	r1, r2, #8
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	68d2      	ldr	r2, [r2, #12]
 80072c8:	0912      	lsrs	r2, r2, #4
 80072ca:	0452      	lsls	r2, r2, #17
 80072cc:	430a      	orrs	r2, r1
 80072ce:	491f      	ldr	r1, [pc, #124]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	614b      	str	r3, [r1, #20]
 80072d4:	e011      	b.n	80072fa <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80072d6:	4b1d      	ldr	r3, [pc, #116]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80072de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6892      	ldr	r2, [r2, #8]
 80072e6:	0211      	lsls	r1, r2, #8
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	6912      	ldr	r2, [r2, #16]
 80072ec:	0852      	lsrs	r2, r2, #1
 80072ee:	3a01      	subs	r2, #1
 80072f0:	0652      	lsls	r2, r2, #25
 80072f2:	430a      	orrs	r2, r1
 80072f4:	4915      	ldr	r1, [pc, #84]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80072fa:	4b14      	ldr	r3, [pc, #80]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a13      	ldr	r2, [pc, #76]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 8007300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007304:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007306:	f7fb fe9b 	bl	8003040 <HAL_GetTick>
 800730a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800730c:	e009      	b.n	8007322 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800730e:	f7fb fe97 	bl	8003040 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	2b02      	cmp	r3, #2
 800731a:	d902      	bls.n	8007322 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	73fb      	strb	r3, [r7, #15]
          break;
 8007320:	e005      	b.n	800732e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007322:	4b0a      	ldr	r3, [pc, #40]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d0ef      	beq.n	800730e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d106      	bne.n	8007342 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007334:	4b05      	ldr	r3, [pc, #20]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 8007336:	695a      	ldr	r2, [r3, #20]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	4903      	ldr	r1, [pc, #12]	; (800734c <RCCEx_PLLSAI2_Config+0x1b0>)
 800733e:	4313      	orrs	r3, r2
 8007340:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007342:	7bfb      	ldrb	r3, [r7, #15]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	40021000 	.word	0x40021000

08007350 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e095      	b.n	800748e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	2b00      	cmp	r3, #0
 8007368:	d108      	bne.n	800737c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007372:	d009      	beq.n	8007388 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	61da      	str	r2, [r3, #28]
 800737a:	e005      	b.n	8007388 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fb faba 	bl	800291c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073c8:	d902      	bls.n	80073d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80073ca:	2300      	movs	r3, #0
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	e002      	b.n	80073d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80073d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80073de:	d007      	beq.n	80073f0 <HAL_SPI_Init+0xa0>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073e8:	d002      	beq.n	80073f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007400:	431a      	orrs	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	431a      	orrs	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800741e:	431a      	orrs	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007428:	431a      	orrs	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007432:	ea42 0103 	orr.w	r1, r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	0c1b      	lsrs	r3, r3, #16
 800744c:	f003 0204 	and.w	r2, r3, #4
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	431a      	orrs	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745e:	f003 0308 	and.w	r3, r3, #8
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800746c:	ea42 0103 	orr.w	r1, r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e040      	b.n	800752a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d106      	bne.n	80074be <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7fb fa73 	bl	80029a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2224      	movs	r2, #36	; 0x24
 80074c2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 0201 	bic.w	r2, r2, #1
 80074d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fb77 	bl	8007bc8 <UART_SetConfig>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d101      	bne.n	80074e4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e022      	b.n	800752a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fdf5 	bl	80080dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007500:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007510:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f042 0201 	orr.w	r2, r2, #1
 8007520:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fe7c 	bl	8008220 <UART_CheckIdleState>
 8007528:	4603      	mov	r3, r0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	4613      	mov	r3, r2
 8007540:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007546:	2b20      	cmp	r3, #32
 8007548:	d144      	bne.n	80075d4 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <HAL_UART_Transmit_IT+0x22>
 8007550:	88fb      	ldrh	r3, [r7, #6]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e03d      	b.n	80075d6 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007560:	2b01      	cmp	r3, #1
 8007562:	d101      	bne.n	8007568 <HAL_UART_Transmit_IT+0x34>
 8007564:	2302      	movs	r3, #2
 8007566:	e036      	b.n	80075d6 <HAL_UART_Transmit_IT+0xa2>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	88fa      	ldrh	r2, [r7, #6]
 800757a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	88fa      	ldrh	r2, [r7, #6]
 8007582:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2221      	movs	r2, #33	; 0x21
 8007596:	675a      	str	r2, [r3, #116]	; 0x74
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a0:	d107      	bne.n	80075b2 <HAL_UART_Transmit_IT+0x7e>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d103      	bne.n	80075b2 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4a0d      	ldr	r2, [pc, #52]	; (80075e4 <HAL_UART_Transmit_IT+0xb0>)
 80075ae:	665a      	str	r2, [r3, #100]	; 0x64
 80075b0:	e002      	b.n	80075b8 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	4a0c      	ldr	r2, [pc, #48]	; (80075e8 <HAL_UART_Transmit_IT+0xb4>)
 80075b6:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80075ce:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	e000      	b.n	80075d6 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80075d4:	2302      	movs	r3, #2
  }
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	080085a7 	.word	0x080085a7
 80075e8:	08008533 	.word	0x08008533

080075ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	4613      	mov	r3, r2
 80075f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075fe:	2b20      	cmp	r3, #32
 8007600:	f040 808a 	bne.w	8007718 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d002      	beq.n	8007610 <HAL_UART_Receive_IT+0x24>
 800760a:	88fb      	ldrh	r3, [r7, #6]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e082      	b.n	800771a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <HAL_UART_Receive_IT+0x36>
 800761e:	2302      	movs	r3, #2
 8007620:	e07b      	b.n	800771a <HAL_UART_Receive_IT+0x12e>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	88fa      	ldrh	r2, [r7, #6]
 8007634:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	88fa      	ldrh	r2, [r7, #6]
 800763c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764e:	d10e      	bne.n	800766e <HAL_UART_Receive_IT+0x82>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d105      	bne.n	8007664 <HAL_UART_Receive_IT+0x78>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800765e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007662:	e02d      	b.n	80076c0 <HAL_UART_Receive_IT+0xd4>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	22ff      	movs	r2, #255	; 0xff
 8007668:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800766c:	e028      	b.n	80076c0 <HAL_UART_Receive_IT+0xd4>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10d      	bne.n	8007692 <HAL_UART_Receive_IT+0xa6>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d104      	bne.n	8007688 <HAL_UART_Receive_IT+0x9c>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	22ff      	movs	r2, #255	; 0xff
 8007682:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007686:	e01b      	b.n	80076c0 <HAL_UART_Receive_IT+0xd4>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	227f      	movs	r2, #127	; 0x7f
 800768c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007690:	e016      	b.n	80076c0 <HAL_UART_Receive_IT+0xd4>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800769a:	d10d      	bne.n	80076b8 <HAL_UART_Receive_IT+0xcc>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d104      	bne.n	80076ae <HAL_UART_Receive_IT+0xc2>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	227f      	movs	r2, #127	; 0x7f
 80076a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076ac:	e008      	b.n	80076c0 <HAL_UART_Receive_IT+0xd4>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	223f      	movs	r2, #63	; 0x3f
 80076b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076b6:	e003      	b.n	80076c0 <HAL_UART_Receive_IT+0xd4>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2222      	movs	r2, #34	; 0x22
 80076ca:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689a      	ldr	r2, [r3, #8]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0201 	orr.w	r2, r2, #1
 80076da:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e4:	d107      	bne.n	80076f6 <HAL_UART_Receive_IT+0x10a>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d103      	bne.n	80076f6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4a0d      	ldr	r2, [pc, #52]	; (8007728 <HAL_UART_Receive_IT+0x13c>)
 80076f2:	661a      	str	r2, [r3, #96]	; 0x60
 80076f4:	e002      	b.n	80076fc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	4a0c      	ldr	r2, [pc, #48]	; (800772c <HAL_UART_Receive_IT+0x140>)
 80076fa:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007712:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	e000      	b.n	800771a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007718:	2302      	movs	r3, #2
  }
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	080086ff 	.word	0x080086ff
 800772c:	08008655 	.word	0x08008655

08007730 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	4613      	mov	r3, r2
 800773c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007742:	2b20      	cmp	r3, #32
 8007744:	d16c      	bne.n	8007820 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <HAL_UART_Receive_DMA+0x22>
 800774c:	88fb      	ldrh	r3, [r7, #6]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e065      	b.n	8007822 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_UART_Receive_DMA+0x34>
 8007760:	2302      	movs	r3, #2
 8007762:	e05e      	b.n	8007822 <HAL_UART_Receive_DMA+0xf2>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	88fa      	ldrh	r2, [r7, #6]
 8007776:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2222      	movs	r2, #34	; 0x22
 8007784:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800778a:	2b00      	cmp	r3, #0
 800778c:	d02a      	beq.n	80077e4 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007792:	4a26      	ldr	r2, [pc, #152]	; (800782c <HAL_UART_Receive_DMA+0xfc>)
 8007794:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800779a:	4a25      	ldr	r2, [pc, #148]	; (8007830 <HAL_UART_Receive_DMA+0x100>)
 800779c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077a2:	4a24      	ldr	r2, [pc, #144]	; (8007834 <HAL_UART_Receive_DMA+0x104>)
 80077a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077aa:	2200      	movs	r2, #0
 80077ac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3324      	adds	r3, #36	; 0x24
 80077b8:	4619      	mov	r1, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077be:	461a      	mov	r2, r3
 80077c0:	88fb      	ldrh	r3, [r7, #6]
 80077c2:	f7fb ff41 	bl	8003648 <HAL_DMA_Start_IT>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00b      	beq.n	80077e4 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2210      	movs	r2, #16
 80077d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2220      	movs	r2, #32
 80077de:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e01e      	b.n	8007822 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077fa:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0201 	orr.w	r2, r2, #1
 800780a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800781a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	e000      	b.n	8007822 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8007820:	2302      	movs	r3, #2
  }
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	0800840b 	.word	0x0800840b
 8007830:	08008473 	.word	0x08008473
 8007834:	0800848f 	.word	0x0800848f

08007838 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007844:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800784a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007856:	2b80      	cmp	r3, #128	; 0x80
 8007858:	d126      	bne.n	80078a8 <HAL_UART_DMAStop+0x70>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2b21      	cmp	r3, #33	; 0x21
 800785e:	d123      	bne.n	80078a8 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689a      	ldr	r2, [r3, #8]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800786e:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007874:	2b00      	cmp	r3, #0
 8007876:	d014      	beq.n	80078a2 <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800787c:	4618      	mov	r0, r3
 800787e:	f7fb ff43 	bl	8003708 <HAL_DMA_Abort>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00c      	beq.n	80078a2 <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800788c:	4618      	mov	r0, r3
 800788e:	f7fc f877 	bl	8003980 <HAL_DMA_GetError>
 8007892:	4603      	mov	r3, r0
 8007894:	2b20      	cmp	r3, #32
 8007896:	d104      	bne.n	80078a2 <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2210      	movs	r2, #16
 800789c:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e031      	b.n	8007906 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fd7c 	bl	80083a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b2:	2b40      	cmp	r3, #64	; 0x40
 80078b4:	d126      	bne.n	8007904 <HAL_UART_DMAStop+0xcc>
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b22      	cmp	r3, #34	; 0x22
 80078ba:	d123      	bne.n	8007904 <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689a      	ldr	r2, [r3, #8]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078ca:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d014      	beq.n	80078fe <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fb ff15 	bl	8003708 <HAL_DMA_Abort>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00c      	beq.n	80078fe <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fc f849 	bl	8003980 <HAL_DMA_GetError>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b20      	cmp	r3, #32
 80078f2:	d104      	bne.n	80078fe <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2210      	movs	r2, #16
 80078f8:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e003      	b.n	8007906 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fd63 	bl	80083ca <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
	...

08007910 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	f640 030f 	movw	r3, #2063	; 0x80f
 8007936:	4013      	ands	r3, r2
 8007938:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d113      	bne.n	8007968 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	f003 0320 	and.w	r3, r3, #32
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00e      	beq.n	8007968 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	f003 0320 	and.w	r3, r3, #32
 8007950:	2b00      	cmp	r3, #0
 8007952:	d009      	beq.n	8007968 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 8114 	beq.w	8007b86 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	4798      	blx	r3
      }
      return;
 8007966:	e10e      	b.n	8007b86 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 80d6 	beq.w	8007b1c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d105      	bne.n	8007986 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	4b86      	ldr	r3, [pc, #536]	; (8007b98 <HAL_UART_IRQHandler+0x288>)
 800797e:	4013      	ands	r3, r2
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 80cb 	beq.w	8007b1c <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00e      	beq.n	80079ae <HAL_UART_IRQHandler+0x9e>
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007996:	2b00      	cmp	r3, #0
 8007998:	d009      	beq.n	80079ae <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2201      	movs	r2, #1
 80079a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079a6:	f043 0201 	orr.w	r2, r3, #1
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	f003 0302 	and.w	r3, r3, #2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00e      	beq.n	80079d6 <HAL_UART_IRQHandler+0xc6>
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2202      	movs	r2, #2
 80079c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ce:	f043 0204 	orr.w	r2, r3, #4
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00e      	beq.n	80079fe <HAL_UART_IRQHandler+0xee>
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d009      	beq.n	80079fe <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2204      	movs	r2, #4
 80079f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079f6:	f043 0202 	orr.w	r2, r3, #2
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	f003 0308 	and.w	r3, r3, #8
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d013      	beq.n	8007a30 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	f003 0320 	and.w	r3, r3, #32
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d104      	bne.n	8007a1c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d009      	beq.n	8007a30 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2208      	movs	r2, #8
 8007a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a28:	f043 0208 	orr.w	r2, r3, #8
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00f      	beq.n	8007a5a <HAL_UART_IRQHandler+0x14a>
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00a      	beq.n	8007a5a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a52:	f043 0220 	orr.w	r2, r3, #32
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 8093 	beq.w	8007b8a <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00c      	beq.n	8007a88 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	f003 0320 	and.w	r3, r3, #32
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d007      	beq.n	8007a88 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d003      	beq.n	8007a88 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a8c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a98:	2b40      	cmp	r3, #64	; 0x40
 8007a9a:	d004      	beq.n	8007aa6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d031      	beq.n	8007b0a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fc8f 	bl	80083ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab6:	2b40      	cmp	r3, #64	; 0x40
 8007ab8:	d123      	bne.n	8007b02 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689a      	ldr	r2, [r3, #8]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ac8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d013      	beq.n	8007afa <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ad6:	4a31      	ldr	r2, [pc, #196]	; (8007b9c <HAL_UART_IRQHandler+0x28c>)
 8007ad8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fb fe50 	bl	8003784 <HAL_DMA_Abort_IT>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d016      	beq.n	8007b18 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007af4:	4610      	mov	r0, r2
 8007af6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af8:	e00e      	b.n	8007b18 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f85a 	bl	8007bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b00:	e00a      	b.n	8007b18 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f856 	bl	8007bb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b08:	e006      	b.n	8007b18 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f852 	bl	8007bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007b16:	e038      	b.n	8007b8a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b18:	bf00      	nop
    return;
 8007b1a:	e036      	b.n	8007b8a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00d      	beq.n	8007b42 <HAL_UART_IRQHandler+0x232>
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d008      	beq.n	8007b42 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fe34 	bl	80087a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b40:	e026      	b.n	8007b90 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00d      	beq.n	8007b68 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d008      	beq.n	8007b68 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d017      	beq.n	8007b8e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	4798      	blx	r3
    }
    return;
 8007b66:	e012      	b.n	8007b8e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00e      	beq.n	8007b90 <HAL_UART_IRQHandler+0x280>
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d009      	beq.n	8007b90 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fd50 	bl	8008622 <UART_EndTransmit_IT>
    return;
 8007b82:	bf00      	nop
 8007b84:	e004      	b.n	8007b90 <HAL_UART_IRQHandler+0x280>
      return;
 8007b86:	bf00      	nop
 8007b88:	e002      	b.n	8007b90 <HAL_UART_IRQHandler+0x280>
    return;
 8007b8a:	bf00      	nop
 8007b8c:	e000      	b.n	8007b90 <HAL_UART_IRQHandler+0x280>
    return;
 8007b8e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007b90:	3720      	adds	r7, #32
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	04000120 	.word	0x04000120
 8007b9c:	08008507 	.word	0x08008507

08007ba0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bc8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007bcc:	b088      	sub	sp, #32
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	689a      	ldr	r2, [r3, #8]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	431a      	orrs	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	431a      	orrs	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	4bac      	ldr	r3, [pc, #688]	; (8007ea8 <UART_SetConfig+0x2e0>)
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6812      	ldr	r2, [r2, #0]
 8007bfc:	69f9      	ldr	r1, [r7, #28]
 8007bfe:	430b      	orrs	r3, r1
 8007c00:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68da      	ldr	r2, [r3, #12]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	430a      	orrs	r2, r1
 8007c16:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4aa2      	ldr	r2, [pc, #648]	; (8007eac <UART_SetConfig+0x2e4>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d004      	beq.n	8007c32 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	69fa      	ldr	r2, [r7, #28]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	69fa      	ldr	r2, [r7, #28]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a99      	ldr	r2, [pc, #612]	; (8007eb0 <UART_SetConfig+0x2e8>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d121      	bne.n	8007c94 <UART_SetConfig+0xcc>
 8007c50:	4b98      	ldr	r3, [pc, #608]	; (8007eb4 <UART_SetConfig+0x2ec>)
 8007c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c56:	f003 0303 	and.w	r3, r3, #3
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d816      	bhi.n	8007c8c <UART_SetConfig+0xc4>
 8007c5e:	a201      	add	r2, pc, #4	; (adr r2, 8007c64 <UART_SetConfig+0x9c>)
 8007c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c64:	08007c75 	.word	0x08007c75
 8007c68:	08007c81 	.word	0x08007c81
 8007c6c:	08007c7b 	.word	0x08007c7b
 8007c70:	08007c87 	.word	0x08007c87
 8007c74:	2301      	movs	r3, #1
 8007c76:	76fb      	strb	r3, [r7, #27]
 8007c78:	e0e8      	b.n	8007e4c <UART_SetConfig+0x284>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	76fb      	strb	r3, [r7, #27]
 8007c7e:	e0e5      	b.n	8007e4c <UART_SetConfig+0x284>
 8007c80:	2304      	movs	r3, #4
 8007c82:	76fb      	strb	r3, [r7, #27]
 8007c84:	e0e2      	b.n	8007e4c <UART_SetConfig+0x284>
 8007c86:	2308      	movs	r3, #8
 8007c88:	76fb      	strb	r3, [r7, #27]
 8007c8a:	e0df      	b.n	8007e4c <UART_SetConfig+0x284>
 8007c8c:	2310      	movs	r3, #16
 8007c8e:	76fb      	strb	r3, [r7, #27]
 8007c90:	bf00      	nop
 8007c92:	e0db      	b.n	8007e4c <UART_SetConfig+0x284>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a87      	ldr	r2, [pc, #540]	; (8007eb8 <UART_SetConfig+0x2f0>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d134      	bne.n	8007d08 <UART_SetConfig+0x140>
 8007c9e:	4b85      	ldr	r3, [pc, #532]	; (8007eb4 <UART_SetConfig+0x2ec>)
 8007ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca4:	f003 030c 	and.w	r3, r3, #12
 8007ca8:	2b0c      	cmp	r3, #12
 8007caa:	d829      	bhi.n	8007d00 <UART_SetConfig+0x138>
 8007cac:	a201      	add	r2, pc, #4	; (adr r2, 8007cb4 <UART_SetConfig+0xec>)
 8007cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb2:	bf00      	nop
 8007cb4:	08007ce9 	.word	0x08007ce9
 8007cb8:	08007d01 	.word	0x08007d01
 8007cbc:	08007d01 	.word	0x08007d01
 8007cc0:	08007d01 	.word	0x08007d01
 8007cc4:	08007cf5 	.word	0x08007cf5
 8007cc8:	08007d01 	.word	0x08007d01
 8007ccc:	08007d01 	.word	0x08007d01
 8007cd0:	08007d01 	.word	0x08007d01
 8007cd4:	08007cef 	.word	0x08007cef
 8007cd8:	08007d01 	.word	0x08007d01
 8007cdc:	08007d01 	.word	0x08007d01
 8007ce0:	08007d01 	.word	0x08007d01
 8007ce4:	08007cfb 	.word	0x08007cfb
 8007ce8:	2300      	movs	r3, #0
 8007cea:	76fb      	strb	r3, [r7, #27]
 8007cec:	e0ae      	b.n	8007e4c <UART_SetConfig+0x284>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	76fb      	strb	r3, [r7, #27]
 8007cf2:	e0ab      	b.n	8007e4c <UART_SetConfig+0x284>
 8007cf4:	2304      	movs	r3, #4
 8007cf6:	76fb      	strb	r3, [r7, #27]
 8007cf8:	e0a8      	b.n	8007e4c <UART_SetConfig+0x284>
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	76fb      	strb	r3, [r7, #27]
 8007cfe:	e0a5      	b.n	8007e4c <UART_SetConfig+0x284>
 8007d00:	2310      	movs	r3, #16
 8007d02:	76fb      	strb	r3, [r7, #27]
 8007d04:	bf00      	nop
 8007d06:	e0a1      	b.n	8007e4c <UART_SetConfig+0x284>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a6b      	ldr	r2, [pc, #428]	; (8007ebc <UART_SetConfig+0x2f4>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d120      	bne.n	8007d54 <UART_SetConfig+0x18c>
 8007d12:	4b68      	ldr	r3, [pc, #416]	; (8007eb4 <UART_SetConfig+0x2ec>)
 8007d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007d1c:	2b10      	cmp	r3, #16
 8007d1e:	d00f      	beq.n	8007d40 <UART_SetConfig+0x178>
 8007d20:	2b10      	cmp	r3, #16
 8007d22:	d802      	bhi.n	8007d2a <UART_SetConfig+0x162>
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <UART_SetConfig+0x16c>
 8007d28:	e010      	b.n	8007d4c <UART_SetConfig+0x184>
 8007d2a:	2b20      	cmp	r3, #32
 8007d2c:	d005      	beq.n	8007d3a <UART_SetConfig+0x172>
 8007d2e:	2b30      	cmp	r3, #48	; 0x30
 8007d30:	d009      	beq.n	8007d46 <UART_SetConfig+0x17e>
 8007d32:	e00b      	b.n	8007d4c <UART_SetConfig+0x184>
 8007d34:	2300      	movs	r3, #0
 8007d36:	76fb      	strb	r3, [r7, #27]
 8007d38:	e088      	b.n	8007e4c <UART_SetConfig+0x284>
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	76fb      	strb	r3, [r7, #27]
 8007d3e:	e085      	b.n	8007e4c <UART_SetConfig+0x284>
 8007d40:	2304      	movs	r3, #4
 8007d42:	76fb      	strb	r3, [r7, #27]
 8007d44:	e082      	b.n	8007e4c <UART_SetConfig+0x284>
 8007d46:	2308      	movs	r3, #8
 8007d48:	76fb      	strb	r3, [r7, #27]
 8007d4a:	e07f      	b.n	8007e4c <UART_SetConfig+0x284>
 8007d4c:	2310      	movs	r3, #16
 8007d4e:	76fb      	strb	r3, [r7, #27]
 8007d50:	bf00      	nop
 8007d52:	e07b      	b.n	8007e4c <UART_SetConfig+0x284>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a59      	ldr	r2, [pc, #356]	; (8007ec0 <UART_SetConfig+0x2f8>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d120      	bne.n	8007da0 <UART_SetConfig+0x1d8>
 8007d5e:	4b55      	ldr	r3, [pc, #340]	; (8007eb4 <UART_SetConfig+0x2ec>)
 8007d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d68:	2b40      	cmp	r3, #64	; 0x40
 8007d6a:	d00f      	beq.n	8007d8c <UART_SetConfig+0x1c4>
 8007d6c:	2b40      	cmp	r3, #64	; 0x40
 8007d6e:	d802      	bhi.n	8007d76 <UART_SetConfig+0x1ae>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d005      	beq.n	8007d80 <UART_SetConfig+0x1b8>
 8007d74:	e010      	b.n	8007d98 <UART_SetConfig+0x1d0>
 8007d76:	2b80      	cmp	r3, #128	; 0x80
 8007d78:	d005      	beq.n	8007d86 <UART_SetConfig+0x1be>
 8007d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d7c:	d009      	beq.n	8007d92 <UART_SetConfig+0x1ca>
 8007d7e:	e00b      	b.n	8007d98 <UART_SetConfig+0x1d0>
 8007d80:	2300      	movs	r3, #0
 8007d82:	76fb      	strb	r3, [r7, #27]
 8007d84:	e062      	b.n	8007e4c <UART_SetConfig+0x284>
 8007d86:	2302      	movs	r3, #2
 8007d88:	76fb      	strb	r3, [r7, #27]
 8007d8a:	e05f      	b.n	8007e4c <UART_SetConfig+0x284>
 8007d8c:	2304      	movs	r3, #4
 8007d8e:	76fb      	strb	r3, [r7, #27]
 8007d90:	e05c      	b.n	8007e4c <UART_SetConfig+0x284>
 8007d92:	2308      	movs	r3, #8
 8007d94:	76fb      	strb	r3, [r7, #27]
 8007d96:	e059      	b.n	8007e4c <UART_SetConfig+0x284>
 8007d98:	2310      	movs	r3, #16
 8007d9a:	76fb      	strb	r3, [r7, #27]
 8007d9c:	bf00      	nop
 8007d9e:	e055      	b.n	8007e4c <UART_SetConfig+0x284>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a47      	ldr	r2, [pc, #284]	; (8007ec4 <UART_SetConfig+0x2fc>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d124      	bne.n	8007df4 <UART_SetConfig+0x22c>
 8007daa:	4b42      	ldr	r3, [pc, #264]	; (8007eb4 <UART_SetConfig+0x2ec>)
 8007dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db8:	d012      	beq.n	8007de0 <UART_SetConfig+0x218>
 8007dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbe:	d802      	bhi.n	8007dc6 <UART_SetConfig+0x1fe>
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d007      	beq.n	8007dd4 <UART_SetConfig+0x20c>
 8007dc4:	e012      	b.n	8007dec <UART_SetConfig+0x224>
 8007dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dca:	d006      	beq.n	8007dda <UART_SetConfig+0x212>
 8007dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dd0:	d009      	beq.n	8007de6 <UART_SetConfig+0x21e>
 8007dd2:	e00b      	b.n	8007dec <UART_SetConfig+0x224>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	76fb      	strb	r3, [r7, #27]
 8007dd8:	e038      	b.n	8007e4c <UART_SetConfig+0x284>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	76fb      	strb	r3, [r7, #27]
 8007dde:	e035      	b.n	8007e4c <UART_SetConfig+0x284>
 8007de0:	2304      	movs	r3, #4
 8007de2:	76fb      	strb	r3, [r7, #27]
 8007de4:	e032      	b.n	8007e4c <UART_SetConfig+0x284>
 8007de6:	2308      	movs	r3, #8
 8007de8:	76fb      	strb	r3, [r7, #27]
 8007dea:	e02f      	b.n	8007e4c <UART_SetConfig+0x284>
 8007dec:	2310      	movs	r3, #16
 8007dee:	76fb      	strb	r3, [r7, #27]
 8007df0:	bf00      	nop
 8007df2:	e02b      	b.n	8007e4c <UART_SetConfig+0x284>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a2c      	ldr	r2, [pc, #176]	; (8007eac <UART_SetConfig+0x2e4>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d124      	bne.n	8007e48 <UART_SetConfig+0x280>
 8007dfe:	4b2d      	ldr	r3, [pc, #180]	; (8007eb4 <UART_SetConfig+0x2ec>)
 8007e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e0c:	d012      	beq.n	8007e34 <UART_SetConfig+0x26c>
 8007e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e12:	d802      	bhi.n	8007e1a <UART_SetConfig+0x252>
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d007      	beq.n	8007e28 <UART_SetConfig+0x260>
 8007e18:	e012      	b.n	8007e40 <UART_SetConfig+0x278>
 8007e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e1e:	d006      	beq.n	8007e2e <UART_SetConfig+0x266>
 8007e20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e24:	d009      	beq.n	8007e3a <UART_SetConfig+0x272>
 8007e26:	e00b      	b.n	8007e40 <UART_SetConfig+0x278>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	76fb      	strb	r3, [r7, #27]
 8007e2c:	e00e      	b.n	8007e4c <UART_SetConfig+0x284>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	76fb      	strb	r3, [r7, #27]
 8007e32:	e00b      	b.n	8007e4c <UART_SetConfig+0x284>
 8007e34:	2304      	movs	r3, #4
 8007e36:	76fb      	strb	r3, [r7, #27]
 8007e38:	e008      	b.n	8007e4c <UART_SetConfig+0x284>
 8007e3a:	2308      	movs	r3, #8
 8007e3c:	76fb      	strb	r3, [r7, #27]
 8007e3e:	e005      	b.n	8007e4c <UART_SetConfig+0x284>
 8007e40:	2310      	movs	r3, #16
 8007e42:	76fb      	strb	r3, [r7, #27]
 8007e44:	bf00      	nop
 8007e46:	e001      	b.n	8007e4c <UART_SetConfig+0x284>
 8007e48:	2310      	movs	r3, #16
 8007e4a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a16      	ldr	r2, [pc, #88]	; (8007eac <UART_SetConfig+0x2e4>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	f040 8087 	bne.w	8007f66 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e58:	7efb      	ldrb	r3, [r7, #27]
 8007e5a:	2b08      	cmp	r3, #8
 8007e5c:	d836      	bhi.n	8007ecc <UART_SetConfig+0x304>
 8007e5e:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <UART_SetConfig+0x29c>)
 8007e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e64:	08007e89 	.word	0x08007e89
 8007e68:	08007ecd 	.word	0x08007ecd
 8007e6c:	08007e91 	.word	0x08007e91
 8007e70:	08007ecd 	.word	0x08007ecd
 8007e74:	08007e97 	.word	0x08007e97
 8007e78:	08007ecd 	.word	0x08007ecd
 8007e7c:	08007ecd 	.word	0x08007ecd
 8007e80:	08007ecd 	.word	0x08007ecd
 8007e84:	08007e9f 	.word	0x08007e9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e88:	f7fe fd16 	bl	80068b8 <HAL_RCC_GetPCLK1Freq>
 8007e8c:	6178      	str	r0, [r7, #20]
        break;
 8007e8e:	e022      	b.n	8007ed6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e90:	4b0d      	ldr	r3, [pc, #52]	; (8007ec8 <UART_SetConfig+0x300>)
 8007e92:	617b      	str	r3, [r7, #20]
        break;
 8007e94:	e01f      	b.n	8007ed6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e96:	f7fe fc79 	bl	800678c <HAL_RCC_GetSysClockFreq>
 8007e9a:	6178      	str	r0, [r7, #20]
        break;
 8007e9c:	e01b      	b.n	8007ed6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ea2:	617b      	str	r3, [r7, #20]
        break;
 8007ea4:	e017      	b.n	8007ed6 <UART_SetConfig+0x30e>
 8007ea6:	bf00      	nop
 8007ea8:	efff69f3 	.word	0xefff69f3
 8007eac:	40008000 	.word	0x40008000
 8007eb0:	40013800 	.word	0x40013800
 8007eb4:	40021000 	.word	0x40021000
 8007eb8:	40004400 	.word	0x40004400
 8007ebc:	40004800 	.word	0x40004800
 8007ec0:	40004c00 	.word	0x40004c00
 8007ec4:	40005000 	.word	0x40005000
 8007ec8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	76bb      	strb	r3, [r7, #26]
        break;
 8007ed4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 80f1 	beq.w	80080c0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	4413      	add	r3, r2
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d305      	bcc.n	8007efa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d902      	bls.n	8007f00 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	76bb      	strb	r3, [r7, #26]
 8007efe:	e0df      	b.n	80080c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	4619      	mov	r1, r3
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	f04f 0300 	mov.w	r3, #0
 8007f0c:	f04f 0400 	mov.w	r4, #0
 8007f10:	0214      	lsls	r4, r2, #8
 8007f12:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007f16:	020b      	lsls	r3, r1, #8
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	6852      	ldr	r2, [r2, #4]
 8007f1c:	0852      	lsrs	r2, r2, #1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	f04f 0200 	mov.w	r2, #0
 8007f24:	eb13 0b01 	adds.w	fp, r3, r1
 8007f28:	eb44 0c02 	adc.w	ip, r4, r2
 8007f2c:	4658      	mov	r0, fp
 8007f2e:	4661      	mov	r1, ip
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f04f 0400 	mov.w	r4, #0
 8007f38:	461a      	mov	r2, r3
 8007f3a:	4623      	mov	r3, r4
 8007f3c:	f7f8 feb4 	bl	8000ca8 <__aeabi_uldivmod>
 8007f40:	4603      	mov	r3, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f4c:	d308      	bcc.n	8007f60 <UART_SetConfig+0x398>
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f54:	d204      	bcs.n	8007f60 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	60da      	str	r2, [r3, #12]
 8007f5e:	e0af      	b.n	80080c0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	76bb      	strb	r3, [r7, #26]
 8007f64:	e0ac      	b.n	80080c0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f6e:	d15b      	bne.n	8008028 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8007f70:	7efb      	ldrb	r3, [r7, #27]
 8007f72:	2b08      	cmp	r3, #8
 8007f74:	d827      	bhi.n	8007fc6 <UART_SetConfig+0x3fe>
 8007f76:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <UART_SetConfig+0x3b4>)
 8007f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7c:	08007fa1 	.word	0x08007fa1
 8007f80:	08007fa9 	.word	0x08007fa9
 8007f84:	08007fb1 	.word	0x08007fb1
 8007f88:	08007fc7 	.word	0x08007fc7
 8007f8c:	08007fb7 	.word	0x08007fb7
 8007f90:	08007fc7 	.word	0x08007fc7
 8007f94:	08007fc7 	.word	0x08007fc7
 8007f98:	08007fc7 	.word	0x08007fc7
 8007f9c:	08007fbf 	.word	0x08007fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fa0:	f7fe fc8a 	bl	80068b8 <HAL_RCC_GetPCLK1Freq>
 8007fa4:	6178      	str	r0, [r7, #20]
        break;
 8007fa6:	e013      	b.n	8007fd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fa8:	f7fe fc9c 	bl	80068e4 <HAL_RCC_GetPCLK2Freq>
 8007fac:	6178      	str	r0, [r7, #20]
        break;
 8007fae:	e00f      	b.n	8007fd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fb0:	4b49      	ldr	r3, [pc, #292]	; (80080d8 <UART_SetConfig+0x510>)
 8007fb2:	617b      	str	r3, [r7, #20]
        break;
 8007fb4:	e00c      	b.n	8007fd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fb6:	f7fe fbe9 	bl	800678c <HAL_RCC_GetSysClockFreq>
 8007fba:	6178      	str	r0, [r7, #20]
        break;
 8007fbc:	e008      	b.n	8007fd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fc2:	617b      	str	r3, [r7, #20]
        break;
 8007fc4:	e004      	b.n	8007fd0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	76bb      	strb	r3, [r7, #26]
        break;
 8007fce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d074      	beq.n	80080c0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	005a      	lsls	r2, r3, #1
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	085b      	lsrs	r3, r3, #1
 8007fe0:	441a      	add	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	2b0f      	cmp	r3, #15
 8007ff2:	d916      	bls.n	8008022 <UART_SetConfig+0x45a>
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ffa:	d212      	bcs.n	8008022 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	f023 030f 	bic.w	r3, r3, #15
 8008004:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	085b      	lsrs	r3, r3, #1
 800800a:	b29b      	uxth	r3, r3
 800800c:	f003 0307 	and.w	r3, r3, #7
 8008010:	b29a      	uxth	r2, r3
 8008012:	89fb      	ldrh	r3, [r7, #14]
 8008014:	4313      	orrs	r3, r2
 8008016:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	89fa      	ldrh	r2, [r7, #14]
 800801e:	60da      	str	r2, [r3, #12]
 8008020:	e04e      	b.n	80080c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	76bb      	strb	r3, [r7, #26]
 8008026:	e04b      	b.n	80080c0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008028:	7efb      	ldrb	r3, [r7, #27]
 800802a:	2b08      	cmp	r3, #8
 800802c:	d827      	bhi.n	800807e <UART_SetConfig+0x4b6>
 800802e:	a201      	add	r2, pc, #4	; (adr r2, 8008034 <UART_SetConfig+0x46c>)
 8008030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008034:	08008059 	.word	0x08008059
 8008038:	08008061 	.word	0x08008061
 800803c:	08008069 	.word	0x08008069
 8008040:	0800807f 	.word	0x0800807f
 8008044:	0800806f 	.word	0x0800806f
 8008048:	0800807f 	.word	0x0800807f
 800804c:	0800807f 	.word	0x0800807f
 8008050:	0800807f 	.word	0x0800807f
 8008054:	08008077 	.word	0x08008077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008058:	f7fe fc2e 	bl	80068b8 <HAL_RCC_GetPCLK1Freq>
 800805c:	6178      	str	r0, [r7, #20]
        break;
 800805e:	e013      	b.n	8008088 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008060:	f7fe fc40 	bl	80068e4 <HAL_RCC_GetPCLK2Freq>
 8008064:	6178      	str	r0, [r7, #20]
        break;
 8008066:	e00f      	b.n	8008088 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008068:	4b1b      	ldr	r3, [pc, #108]	; (80080d8 <UART_SetConfig+0x510>)
 800806a:	617b      	str	r3, [r7, #20]
        break;
 800806c:	e00c      	b.n	8008088 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800806e:	f7fe fb8d 	bl	800678c <HAL_RCC_GetSysClockFreq>
 8008072:	6178      	str	r0, [r7, #20]
        break;
 8008074:	e008      	b.n	8008088 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800807a:	617b      	str	r3, [r7, #20]
        break;
 800807c:	e004      	b.n	8008088 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	76bb      	strb	r3, [r7, #26]
        break;
 8008086:	bf00      	nop
    }

    if (pclk != 0U)
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d018      	beq.n	80080c0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	085a      	lsrs	r2, r3, #1
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	441a      	add	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	2b0f      	cmp	r3, #15
 80080a8:	d908      	bls.n	80080bc <UART_SetConfig+0x4f4>
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080b0:	d204      	bcs.n	80080bc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	60da      	str	r2, [r3, #12]
 80080ba:	e001      	b.n	80080c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80080cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3720      	adds	r7, #32
 80080d2:	46bd      	mov	sp, r7
 80080d4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80080d8:	00f42400 	.word	0x00f42400

080080dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	f003 0301 	and.w	r3, r3, #1
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00a      	beq.n	8008106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	430a      	orrs	r2, r1
 8008104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	430a      	orrs	r2, r1
 8008126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	f003 0304 	and.w	r3, r3, #4
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00a      	beq.n	800814a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	f003 0308 	and.w	r3, r3, #8
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	430a      	orrs	r2, r1
 800816a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008170:	f003 0310 	and.w	r3, r3, #16
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00a      	beq.n	800818e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	f003 0320 	and.w	r3, r3, #32
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d01a      	beq.n	80081f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081da:	d10a      	bne.n	80081f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00a      	beq.n	8008214 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	605a      	str	r2, [r3, #4]
  }
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af02      	add	r7, sp, #8
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800822e:	f7fa ff07 	bl	8003040 <HAL_GetTick>
 8008232:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0308 	and.w	r3, r3, #8
 800823e:	2b08      	cmp	r3, #8
 8008240:	d10e      	bne.n	8008260 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008242:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f82a 	bl	80082aa <UART_WaitOnFlagUntilTimeout>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e020      	b.n	80082a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b04      	cmp	r3, #4
 800826c:	d10e      	bne.n	800828c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800826e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f814 	bl	80082aa <UART_WaitOnFlagUntilTimeout>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008288:	2303      	movs	r3, #3
 800828a:	e00a      	b.n	80082a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2220      	movs	r2, #32
 8008290:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2220      	movs	r2, #32
 8008296:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	60f8      	str	r0, [r7, #12]
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	603b      	str	r3, [r7, #0]
 80082b6:	4613      	mov	r3, r2
 80082b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082ba:	e05d      	b.n	8008378 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082c2:	d059      	beq.n	8008378 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082c4:	f7fa febc 	bl	8003040 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d302      	bcc.n	80082da <UART_WaitOnFlagUntilTimeout+0x30>
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d11b      	bne.n	8008312 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80082e8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f022 0201 	bic.w	r2, r2, #1
 80082f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2220      	movs	r2, #32
 80082fe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2220      	movs	r2, #32
 8008304:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e042      	b.n	8008398 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b00      	cmp	r3, #0
 800831e:	d02b      	beq.n	8008378 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800832a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832e:	d123      	bne.n	8008378 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008338:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008348:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0201 	bic.w	r2, r2, #1
 8008358:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2220      	movs	r2, #32
 800835e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2220      	movs	r2, #32
 8008364:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2220      	movs	r2, #32
 800836a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e00f      	b.n	8008398 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	69da      	ldr	r2, [r3, #28]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	4013      	ands	r3, r2
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	429a      	cmp	r2, r3
 8008386:	bf0c      	ite	eq
 8008388:	2301      	moveq	r3, #1
 800838a:	2300      	movne	r3, #0
 800838c:	b2db      	uxtb	r3, r3
 800838e:	461a      	mov	r2, r3
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	429a      	cmp	r2, r3
 8008394:	d092      	beq.n	80082bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80083b6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2220      	movs	r2, #32
 80083bc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80083be:	bf00      	nop
 80083c0:	370c      	adds	r7, #12
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80083e0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	689a      	ldr	r2, [r3, #8]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f022 0201 	bic.w	r2, r2, #1
 80083f0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2220      	movs	r2, #32
 80083f6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	661a      	str	r2, [r3, #96]	; 0x60
}
 80083fe:	bf00      	nop
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008416:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0320 	and.w	r3, r3, #32
 8008422:	2b00      	cmp	r3, #0
 8008424:	d11e      	bne.n	8008464 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800843c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 0201 	bic.w	r2, r2, #1
 800844c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	689a      	ldr	r2, [r3, #8]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800845c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2220      	movs	r2, #32
 8008462:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f7f9 fb2b 	bl	8001ac0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800846a:	bf00      	nop
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f7ff fb8d 	bl	8007ba0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008486:	bf00      	nop
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b086      	sub	sp, #24
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b2:	2b80      	cmp	r3, #128	; 0x80
 80084b4:	d109      	bne.n	80084ca <UART_DMAError+0x3c>
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	2b21      	cmp	r3, #33	; 0x21
 80084ba:	d106      	bne.n	80084ca <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	2200      	movs	r2, #0
 80084c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80084c4:	6978      	ldr	r0, [r7, #20]
 80084c6:	f7ff ff6b 	bl	80083a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d4:	2b40      	cmp	r3, #64	; 0x40
 80084d6:	d109      	bne.n	80084ec <UART_DMAError+0x5e>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2b22      	cmp	r3, #34	; 0x22
 80084dc:	d106      	bne.n	80084ec <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80084e6:	6978      	ldr	r0, [r7, #20]
 80084e8:	f7ff ff6f 	bl	80083ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084f0:	f043 0210 	orr.w	r2, r3, #16
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084f8:	6978      	ldr	r0, [r7, #20]
 80084fa:	f7ff fb5b 	bl	8007bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084fe:	bf00      	nop
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008512:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f7ff fb45 	bl	8007bb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800852a:	bf00      	nop
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008532:	b480      	push	{r7}
 8008534:	b083      	sub	sp, #12
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800853e:	2b21      	cmp	r3, #33	; 0x21
 8008540:	d12b      	bne.n	800859a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008548:	b29b      	uxth	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d110      	bne.n	8008570 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800855c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800856c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800856e:	e014      	b.n	800859a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008574:	781a      	ldrb	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	b292      	uxth	r2, r2
 800857c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800858e:	b29b      	uxth	r3, r3
 8008590:	3b01      	subs	r3, #1
 8008592:	b29a      	uxth	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800859a:	bf00      	nop
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b085      	sub	sp, #20
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085b2:	2b21      	cmp	r3, #33	; 0x21
 80085b4:	d12f      	bne.n	8008616 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80085bc:	b29b      	uxth	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d110      	bne.n	80085e4 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085d0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085e0:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80085e2:	e018      	b.n	8008616 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	881a      	ldrh	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085f6:	b292      	uxth	r2, r2
 80085f8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fe:	1c9a      	adds	r2, r3, #2
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800860a:	b29b      	uxth	r3, r3
 800860c:	3b01      	subs	r3, #1
 800860e:	b29a      	uxth	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008616:	bf00      	nop
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008638:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2220      	movs	r2, #32
 800863e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7f9 fa4a 	bl	8001ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800864c:	bf00      	nop
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008662:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008668:	2b22      	cmp	r3, #34	; 0x22
 800866a:	d13a      	bne.n	80086e2 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008672:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008674:	89bb      	ldrh	r3, [r7, #12]
 8008676:	b2d9      	uxtb	r1, r3
 8008678:	89fb      	ldrh	r3, [r7, #14]
 800867a:	b2da      	uxtb	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008680:	400a      	ands	r2, r1
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008696:	b29b      	uxth	r3, r3
 8008698:	3b01      	subs	r3, #1
 800869a:	b29a      	uxth	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d123      	bne.n	80086f6 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80086bc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f022 0201 	bic.w	r2, r2, #1
 80086cc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2220      	movs	r2, #32
 80086d2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7f9 f9f0 	bl	8001ac0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086e0:	e009      	b.n	80086f6 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	8b1b      	ldrh	r3, [r3, #24]
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0208 	orr.w	r2, r2, #8
 80086f2:	b292      	uxth	r2, r2
 80086f4:	831a      	strh	r2, [r3, #24]
}
 80086f6:	bf00      	nop
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800870c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008712:	2b22      	cmp	r3, #34	; 0x22
 8008714:	d13a      	bne.n	800878c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800871c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008722:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008724:	89ba      	ldrh	r2, [r7, #12]
 8008726:	89fb      	ldrh	r3, [r7, #14]
 8008728:	4013      	ands	r3, r2
 800872a:	b29a      	uxth	r2, r3
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008734:	1c9a      	adds	r2, r3, #2
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008740:	b29b      	uxth	r3, r3
 8008742:	3b01      	subs	r3, #1
 8008744:	b29a      	uxth	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008752:	b29b      	uxth	r3, r3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d123      	bne.n	80087a0 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008766:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689a      	ldr	r2, [r3, #8]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f022 0201 	bic.w	r2, r2, #1
 8008776:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2220      	movs	r2, #32
 800877c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7f9 f99b 	bl	8001ac0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800878a:	e009      	b.n	80087a0 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	8b1b      	ldrh	r3, [r3, #24]
 8008792:	b29a      	uxth	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f042 0208 	orr.w	r2, r2, #8
 800879c:	b292      	uxth	r2, r2
 800879e:	831a      	strh	r2, [r3, #24]
}
 80087a0:	bf00      	nop
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087bc:	b084      	sub	sp, #16
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	f107 001c 	add.w	r0, r7, #28
 80087ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d122      	bne.n	800881a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80087e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80087fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d105      	bne.n	800880e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa30 	bl	8008c74 <USB_CoreReset>
 8008814:	4603      	mov	r3, r0
 8008816:	73fb      	strb	r3, [r7, #15]
 8008818:	e01a      	b.n	8008850 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fa24 	bl	8008c74 <USB_CoreReset>
 800882c:	4603      	mov	r3, r0
 800882e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008832:	2b00      	cmp	r3, #0
 8008834:	d106      	bne.n	8008844 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	639a      	str	r2, [r3, #56]	; 0x38
 8008842:	e005      	b.n	8008850 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008848:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800885c:	b004      	add	sp, #16
 800885e:	4770      	bx	lr

08008860 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f023 0201 	bic.w	r2, r3, #1
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	460b      	mov	r3, r1
 800888c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800889a:	78fb      	ldrb	r3, [r7, #3]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d106      	bne.n	80088ae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	60da      	str	r2, [r3, #12]
 80088ac:	e00b      	b.n	80088c6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80088ae:	78fb      	ldrb	r3, [r7, #3]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d106      	bne.n	80088c2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	60da      	str	r2, [r3, #12]
 80088c0:	e001      	b.n	80088c6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e003      	b.n	80088ce <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80088c6:	2032      	movs	r0, #50	; 0x32
 80088c8:	f7fa fbc6 	bl	8003058 <HAL_Delay>

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088d8:	b084      	sub	sp, #16
 80088da:	b580      	push	{r7, lr}
 80088dc:	b086      	sub	sp, #24
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80088e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80088f2:	2300      	movs	r3, #0
 80088f4:	613b      	str	r3, [r7, #16]
 80088f6:	e009      	b.n	800890c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	3340      	adds	r3, #64	; 0x40
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	2200      	movs	r2, #0
 8008904:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	3301      	adds	r3, #1
 800890a:	613b      	str	r3, [r7, #16]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2b0e      	cmp	r3, #14
 8008910:	d9f2      	bls.n	80088f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008914:	2b00      	cmp	r3, #0
 8008916:	d11c      	bne.n	8008952 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008926:	f043 0302 	orr.w	r3, r3, #2
 800892a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008930:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	601a      	str	r2, [r3, #0]
 8008950:	e005      	b.n	800895e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008956:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008964:	461a      	mov	r2, r3
 8008966:	2300      	movs	r3, #0
 8008968:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008970:	4619      	mov	r1, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008978:	461a      	mov	r2, r3
 800897a:	680b      	ldr	r3, [r1, #0]
 800897c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800897e:	2103      	movs	r1, #3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f93d 	bl	8008c00 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008986:	2110      	movs	r1, #16
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f8f1 	bl	8008b70 <USB_FlushTxFifo>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f90f 	bl	8008bbc <USB_FlushRxFifo>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d001      	beq.n	80089a8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ae:	461a      	mov	r2, r3
 80089b0:	2300      	movs	r3, #0
 80089b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ba:	461a      	mov	r2, r3
 80089bc:	2300      	movs	r3, #0
 80089be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c6:	461a      	mov	r2, r3
 80089c8:	2300      	movs	r3, #0
 80089ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089cc:	2300      	movs	r3, #0
 80089ce:	613b      	str	r3, [r7, #16]
 80089d0:	e043      	b.n	8008a5a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	015a      	lsls	r2, r3, #5
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	4413      	add	r3, r2
 80089da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089e8:	d118      	bne.n	8008a1c <USB_DevInit+0x144>
    {
      if (i == 0U)
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10a      	bne.n	8008a06 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089fc:	461a      	mov	r2, r3
 80089fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	e013      	b.n	8008a2e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a12:	461a      	mov	r2, r3
 8008a14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	e008      	b.n	8008a2e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a28:	461a      	mov	r2, r3
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	3301      	adds	r3, #1
 8008a58:	613b      	str	r3, [r7, #16]
 8008a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d3b7      	bcc.n	80089d2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a62:	2300      	movs	r3, #0
 8008a64:	613b      	str	r3, [r7, #16]
 8008a66:	e043      	b.n	8008af0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a7e:	d118      	bne.n	8008ab2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10a      	bne.n	8008a9c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a92:	461a      	mov	r2, r3
 8008a94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a98:	6013      	str	r3, [r2, #0]
 8008a9a:	e013      	b.n	8008ac4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008aae:	6013      	str	r3, [r2, #0]
 8008ab0:	e008      	b.n	8008ac4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008abe:	461a      	mov	r2, r3
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	015a      	lsls	r2, r3, #5
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4413      	add	r3, r2
 8008acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ae8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	3301      	adds	r3, #1
 8008aee:	613b      	str	r3, [r7, #16]
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d3b7      	bcc.n	8008a68 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008b18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	f043 0210 	orr.w	r2, r3, #16
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	699a      	ldr	r2, [r3, #24]
 8008b2a:	4b10      	ldr	r3, [pc, #64]	; (8008b6c <USB_DevInit+0x294>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d005      	beq.n	8008b44 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	f043 0208 	orr.w	r2, r3, #8
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d107      	bne.n	8008b5a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b52:	f043 0304 	orr.w	r3, r3, #4
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3718      	adds	r7, #24
 8008b60:	46bd      	mov	sp, r7
 8008b62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b66:	b004      	add	sp, #16
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	803c3800 	.word	0x803c3800

08008b70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	019b      	lsls	r3, r3, #6
 8008b82:	f043 0220 	orr.w	r2, r3, #32
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	60fb      	str	r3, [r7, #12]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4a09      	ldr	r2, [pc, #36]	; (8008bb8 <USB_FlushTxFifo+0x48>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d901      	bls.n	8008b9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e006      	b.n	8008baa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	f003 0320 	and.w	r3, r3, #32
 8008ba4:	2b20      	cmp	r3, #32
 8008ba6:	d0f0      	beq.n	8008b8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	00030d40 	.word	0x00030d40

08008bbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2210      	movs	r2, #16
 8008bcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4a09      	ldr	r2, [pc, #36]	; (8008bfc <USB_FlushRxFifo+0x40>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d901      	bls.n	8008be0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e006      	b.n	8008bee <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	f003 0310 	and.w	r3, r3, #16
 8008be8:	2b10      	cmp	r3, #16
 8008bea:	d0f0      	beq.n	8008bce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	00030d40 	.word	0x00030d40

08008c00 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	78fb      	ldrb	r3, [r7, #3]
 8008c1a:	68f9      	ldr	r1, [r7, #12]
 8008c1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c20:	4313      	orrs	r3, r2
 8008c22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b085      	sub	sp, #20
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c4c:	f023 0303 	bic.w	r3, r3, #3
 8008c50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c60:	f043 0302 	orr.w	r3, r3, #2
 8008c64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	3301      	adds	r3, #1
 8008c84:	60fb      	str	r3, [r7, #12]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4a13      	ldr	r2, [pc, #76]	; (8008cd8 <USB_CoreReset+0x64>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d901      	bls.n	8008c92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e01b      	b.n	8008cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	daf2      	bge.n	8008c80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	f043 0201 	orr.w	r2, r3, #1
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3301      	adds	r3, #1
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4a09      	ldr	r2, [pc, #36]	; (8008cd8 <USB_CoreReset+0x64>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d901      	bls.n	8008cbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e006      	b.n	8008cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d0f0      	beq.n	8008caa <USB_CoreReset+0x36>

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	00030d40 	.word	0x00030d40

08008cdc <atof>:
 8008cdc:	2100      	movs	r1, #0
 8008cde:	f001 bad3 	b.w	800a288 <strtod>

08008ce2 <atoi>:
 8008ce2:	220a      	movs	r2, #10
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	f001 bb5f 	b.w	800a3a8 <strtol>
	...

08008cec <__errno>:
 8008cec:	4b01      	ldr	r3, [pc, #4]	; (8008cf4 <__errno+0x8>)
 8008cee:	6818      	ldr	r0, [r3, #0]
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	2000000c 	.word	0x2000000c

08008cf8 <__libc_init_array>:
 8008cf8:	b570      	push	{r4, r5, r6, lr}
 8008cfa:	4e0d      	ldr	r6, [pc, #52]	; (8008d30 <__libc_init_array+0x38>)
 8008cfc:	4c0d      	ldr	r4, [pc, #52]	; (8008d34 <__libc_init_array+0x3c>)
 8008cfe:	1ba4      	subs	r4, r4, r6
 8008d00:	10a4      	asrs	r4, r4, #2
 8008d02:	2500      	movs	r5, #0
 8008d04:	42a5      	cmp	r5, r4
 8008d06:	d109      	bne.n	8008d1c <__libc_init_array+0x24>
 8008d08:	4e0b      	ldr	r6, [pc, #44]	; (8008d38 <__libc_init_array+0x40>)
 8008d0a:	4c0c      	ldr	r4, [pc, #48]	; (8008d3c <__libc_init_array+0x44>)
 8008d0c:	f003 fb86 	bl	800c41c <_init>
 8008d10:	1ba4      	subs	r4, r4, r6
 8008d12:	10a4      	asrs	r4, r4, #2
 8008d14:	2500      	movs	r5, #0
 8008d16:	42a5      	cmp	r5, r4
 8008d18:	d105      	bne.n	8008d26 <__libc_init_array+0x2e>
 8008d1a:	bd70      	pop	{r4, r5, r6, pc}
 8008d1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d20:	4798      	blx	r3
 8008d22:	3501      	adds	r5, #1
 8008d24:	e7ee      	b.n	8008d04 <__libc_init_array+0xc>
 8008d26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d2a:	4798      	blx	r3
 8008d2c:	3501      	adds	r5, #1
 8008d2e:	e7f2      	b.n	8008d16 <__libc_init_array+0x1e>
 8008d30:	0800c800 	.word	0x0800c800
 8008d34:	0800c800 	.word	0x0800c800
 8008d38:	0800c800 	.word	0x0800c800
 8008d3c:	0800c804 	.word	0x0800c804

08008d40 <memset>:
 8008d40:	4402      	add	r2, r0
 8008d42:	4603      	mov	r3, r0
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d100      	bne.n	8008d4a <memset+0xa>
 8008d48:	4770      	bx	lr
 8008d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d4e:	e7f9      	b.n	8008d44 <memset+0x4>

08008d50 <__cvt>:
 8008d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d54:	ec55 4b10 	vmov	r4, r5, d0
 8008d58:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008d5a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d5e:	2d00      	cmp	r5, #0
 8008d60:	460e      	mov	r6, r1
 8008d62:	4691      	mov	r9, r2
 8008d64:	4619      	mov	r1, r3
 8008d66:	bfb8      	it	lt
 8008d68:	4622      	movlt	r2, r4
 8008d6a:	462b      	mov	r3, r5
 8008d6c:	f027 0720 	bic.w	r7, r7, #32
 8008d70:	bfbb      	ittet	lt
 8008d72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d76:	461d      	movlt	r5, r3
 8008d78:	2300      	movge	r3, #0
 8008d7a:	232d      	movlt	r3, #45	; 0x2d
 8008d7c:	bfb8      	it	lt
 8008d7e:	4614      	movlt	r4, r2
 8008d80:	2f46      	cmp	r7, #70	; 0x46
 8008d82:	700b      	strb	r3, [r1, #0]
 8008d84:	d004      	beq.n	8008d90 <__cvt+0x40>
 8008d86:	2f45      	cmp	r7, #69	; 0x45
 8008d88:	d100      	bne.n	8008d8c <__cvt+0x3c>
 8008d8a:	3601      	adds	r6, #1
 8008d8c:	2102      	movs	r1, #2
 8008d8e:	e000      	b.n	8008d92 <__cvt+0x42>
 8008d90:	2103      	movs	r1, #3
 8008d92:	ab03      	add	r3, sp, #12
 8008d94:	9301      	str	r3, [sp, #4]
 8008d96:	ab02      	add	r3, sp, #8
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	4632      	mov	r2, r6
 8008d9c:	4653      	mov	r3, sl
 8008d9e:	ec45 4b10 	vmov	d0, r4, r5
 8008da2:	f001 fba5 	bl	800a4f0 <_dtoa_r>
 8008da6:	2f47      	cmp	r7, #71	; 0x47
 8008da8:	4680      	mov	r8, r0
 8008daa:	d102      	bne.n	8008db2 <__cvt+0x62>
 8008dac:	f019 0f01 	tst.w	r9, #1
 8008db0:	d026      	beq.n	8008e00 <__cvt+0xb0>
 8008db2:	2f46      	cmp	r7, #70	; 0x46
 8008db4:	eb08 0906 	add.w	r9, r8, r6
 8008db8:	d111      	bne.n	8008dde <__cvt+0x8e>
 8008dba:	f898 3000 	ldrb.w	r3, [r8]
 8008dbe:	2b30      	cmp	r3, #48	; 0x30
 8008dc0:	d10a      	bne.n	8008dd8 <__cvt+0x88>
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	4629      	mov	r1, r5
 8008dca:	f7f7 fe8d 	bl	8000ae8 <__aeabi_dcmpeq>
 8008dce:	b918      	cbnz	r0, 8008dd8 <__cvt+0x88>
 8008dd0:	f1c6 0601 	rsb	r6, r6, #1
 8008dd4:	f8ca 6000 	str.w	r6, [sl]
 8008dd8:	f8da 3000 	ldr.w	r3, [sl]
 8008ddc:	4499      	add	r9, r3
 8008dde:	2200      	movs	r2, #0
 8008de0:	2300      	movs	r3, #0
 8008de2:	4620      	mov	r0, r4
 8008de4:	4629      	mov	r1, r5
 8008de6:	f7f7 fe7f 	bl	8000ae8 <__aeabi_dcmpeq>
 8008dea:	b938      	cbnz	r0, 8008dfc <__cvt+0xac>
 8008dec:	2230      	movs	r2, #48	; 0x30
 8008dee:	9b03      	ldr	r3, [sp, #12]
 8008df0:	454b      	cmp	r3, r9
 8008df2:	d205      	bcs.n	8008e00 <__cvt+0xb0>
 8008df4:	1c59      	adds	r1, r3, #1
 8008df6:	9103      	str	r1, [sp, #12]
 8008df8:	701a      	strb	r2, [r3, #0]
 8008dfa:	e7f8      	b.n	8008dee <__cvt+0x9e>
 8008dfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e04:	eba3 0308 	sub.w	r3, r3, r8
 8008e08:	4640      	mov	r0, r8
 8008e0a:	6013      	str	r3, [r2, #0]
 8008e0c:	b004      	add	sp, #16
 8008e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008e12 <__exponent>:
 8008e12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e14:	2900      	cmp	r1, #0
 8008e16:	4604      	mov	r4, r0
 8008e18:	bfba      	itte	lt
 8008e1a:	4249      	neglt	r1, r1
 8008e1c:	232d      	movlt	r3, #45	; 0x2d
 8008e1e:	232b      	movge	r3, #43	; 0x2b
 8008e20:	2909      	cmp	r1, #9
 8008e22:	f804 2b02 	strb.w	r2, [r4], #2
 8008e26:	7043      	strb	r3, [r0, #1]
 8008e28:	dd20      	ble.n	8008e6c <__exponent+0x5a>
 8008e2a:	f10d 0307 	add.w	r3, sp, #7
 8008e2e:	461f      	mov	r7, r3
 8008e30:	260a      	movs	r6, #10
 8008e32:	fb91 f5f6 	sdiv	r5, r1, r6
 8008e36:	fb06 1115 	mls	r1, r6, r5, r1
 8008e3a:	3130      	adds	r1, #48	; 0x30
 8008e3c:	2d09      	cmp	r5, #9
 8008e3e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008e42:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008e46:	4629      	mov	r1, r5
 8008e48:	dc09      	bgt.n	8008e5e <__exponent+0x4c>
 8008e4a:	3130      	adds	r1, #48	; 0x30
 8008e4c:	3b02      	subs	r3, #2
 8008e4e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008e52:	42bb      	cmp	r3, r7
 8008e54:	4622      	mov	r2, r4
 8008e56:	d304      	bcc.n	8008e62 <__exponent+0x50>
 8008e58:	1a10      	subs	r0, r2, r0
 8008e5a:	b003      	add	sp, #12
 8008e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e5e:	4613      	mov	r3, r2
 8008e60:	e7e7      	b.n	8008e32 <__exponent+0x20>
 8008e62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e66:	f804 2b01 	strb.w	r2, [r4], #1
 8008e6a:	e7f2      	b.n	8008e52 <__exponent+0x40>
 8008e6c:	2330      	movs	r3, #48	; 0x30
 8008e6e:	4419      	add	r1, r3
 8008e70:	7083      	strb	r3, [r0, #2]
 8008e72:	1d02      	adds	r2, r0, #4
 8008e74:	70c1      	strb	r1, [r0, #3]
 8008e76:	e7ef      	b.n	8008e58 <__exponent+0x46>

08008e78 <_printf_float>:
 8008e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7c:	b08d      	sub	sp, #52	; 0x34
 8008e7e:	460c      	mov	r4, r1
 8008e80:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008e84:	4616      	mov	r6, r2
 8008e86:	461f      	mov	r7, r3
 8008e88:	4605      	mov	r5, r0
 8008e8a:	f002 fc15 	bl	800b6b8 <_localeconv_r>
 8008e8e:	6803      	ldr	r3, [r0, #0]
 8008e90:	9304      	str	r3, [sp, #16]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7f7 f9a6 	bl	80001e4 <strlen>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8008ea0:	9005      	str	r0, [sp, #20]
 8008ea2:	3307      	adds	r3, #7
 8008ea4:	f023 0307 	bic.w	r3, r3, #7
 8008ea8:	f103 0208 	add.w	r2, r3, #8
 8008eac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008eb0:	f8d4 b000 	ldr.w	fp, [r4]
 8008eb4:	f8c8 2000 	str.w	r2, [r8]
 8008eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008ec0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008ec4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ec8:	9307      	str	r3, [sp, #28]
 8008eca:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ed2:	4ba7      	ldr	r3, [pc, #668]	; (8009170 <_printf_float+0x2f8>)
 8008ed4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ed8:	f7f7 fe38 	bl	8000b4c <__aeabi_dcmpun>
 8008edc:	bb70      	cbnz	r0, 8008f3c <_printf_float+0xc4>
 8008ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ee2:	4ba3      	ldr	r3, [pc, #652]	; (8009170 <_printf_float+0x2f8>)
 8008ee4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ee8:	f7f7 fe12 	bl	8000b10 <__aeabi_dcmple>
 8008eec:	bb30      	cbnz	r0, 8008f3c <_printf_float+0xc4>
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	4649      	mov	r1, r9
 8008ef6:	f7f7 fe01 	bl	8000afc <__aeabi_dcmplt>
 8008efa:	b110      	cbz	r0, 8008f02 <_printf_float+0x8a>
 8008efc:	232d      	movs	r3, #45	; 0x2d
 8008efe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f02:	4a9c      	ldr	r2, [pc, #624]	; (8009174 <_printf_float+0x2fc>)
 8008f04:	4b9c      	ldr	r3, [pc, #624]	; (8009178 <_printf_float+0x300>)
 8008f06:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008f0a:	bf8c      	ite	hi
 8008f0c:	4690      	movhi	r8, r2
 8008f0e:	4698      	movls	r8, r3
 8008f10:	2303      	movs	r3, #3
 8008f12:	f02b 0204 	bic.w	r2, fp, #4
 8008f16:	6123      	str	r3, [r4, #16]
 8008f18:	6022      	str	r2, [r4, #0]
 8008f1a:	f04f 0900 	mov.w	r9, #0
 8008f1e:	9700      	str	r7, [sp, #0]
 8008f20:	4633      	mov	r3, r6
 8008f22:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f24:	4621      	mov	r1, r4
 8008f26:	4628      	mov	r0, r5
 8008f28:	f000 f9e6 	bl	80092f8 <_printf_common>
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	f040 808d 	bne.w	800904c <_printf_float+0x1d4>
 8008f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f36:	b00d      	add	sp, #52	; 0x34
 8008f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f3c:	4642      	mov	r2, r8
 8008f3e:	464b      	mov	r3, r9
 8008f40:	4640      	mov	r0, r8
 8008f42:	4649      	mov	r1, r9
 8008f44:	f7f7 fe02 	bl	8000b4c <__aeabi_dcmpun>
 8008f48:	b110      	cbz	r0, 8008f50 <_printf_float+0xd8>
 8008f4a:	4a8c      	ldr	r2, [pc, #560]	; (800917c <_printf_float+0x304>)
 8008f4c:	4b8c      	ldr	r3, [pc, #560]	; (8009180 <_printf_float+0x308>)
 8008f4e:	e7da      	b.n	8008f06 <_printf_float+0x8e>
 8008f50:	6861      	ldr	r1, [r4, #4]
 8008f52:	1c4b      	adds	r3, r1, #1
 8008f54:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008f58:	a80a      	add	r0, sp, #40	; 0x28
 8008f5a:	d13e      	bne.n	8008fda <_printf_float+0x162>
 8008f5c:	2306      	movs	r3, #6
 8008f5e:	6063      	str	r3, [r4, #4]
 8008f60:	2300      	movs	r3, #0
 8008f62:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008f66:	ab09      	add	r3, sp, #36	; 0x24
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	ec49 8b10 	vmov	d0, r8, r9
 8008f6e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f72:	6022      	str	r2, [r4, #0]
 8008f74:	f8cd a004 	str.w	sl, [sp, #4]
 8008f78:	6861      	ldr	r1, [r4, #4]
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	f7ff fee8 	bl	8008d50 <__cvt>
 8008f80:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008f84:	2b47      	cmp	r3, #71	; 0x47
 8008f86:	4680      	mov	r8, r0
 8008f88:	d109      	bne.n	8008f9e <_printf_float+0x126>
 8008f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8c:	1cd8      	adds	r0, r3, #3
 8008f8e:	db02      	blt.n	8008f96 <_printf_float+0x11e>
 8008f90:	6862      	ldr	r2, [r4, #4]
 8008f92:	4293      	cmp	r3, r2
 8008f94:	dd47      	ble.n	8009026 <_printf_float+0x1ae>
 8008f96:	f1aa 0a02 	sub.w	sl, sl, #2
 8008f9a:	fa5f fa8a 	uxtb.w	sl, sl
 8008f9e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008fa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fa4:	d824      	bhi.n	8008ff0 <_printf_float+0x178>
 8008fa6:	3901      	subs	r1, #1
 8008fa8:	4652      	mov	r2, sl
 8008faa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008fae:	9109      	str	r1, [sp, #36]	; 0x24
 8008fb0:	f7ff ff2f 	bl	8008e12 <__exponent>
 8008fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fb6:	1813      	adds	r3, r2, r0
 8008fb8:	2a01      	cmp	r2, #1
 8008fba:	4681      	mov	r9, r0
 8008fbc:	6123      	str	r3, [r4, #16]
 8008fbe:	dc02      	bgt.n	8008fc6 <_printf_float+0x14e>
 8008fc0:	6822      	ldr	r2, [r4, #0]
 8008fc2:	07d1      	lsls	r1, r2, #31
 8008fc4:	d501      	bpl.n	8008fca <_printf_float+0x152>
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	6123      	str	r3, [r4, #16]
 8008fca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0a5      	beq.n	8008f1e <_printf_float+0xa6>
 8008fd2:	232d      	movs	r3, #45	; 0x2d
 8008fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fd8:	e7a1      	b.n	8008f1e <_printf_float+0xa6>
 8008fda:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008fde:	f000 8177 	beq.w	80092d0 <_printf_float+0x458>
 8008fe2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008fe6:	d1bb      	bne.n	8008f60 <_printf_float+0xe8>
 8008fe8:	2900      	cmp	r1, #0
 8008fea:	d1b9      	bne.n	8008f60 <_printf_float+0xe8>
 8008fec:	2301      	movs	r3, #1
 8008fee:	e7b6      	b.n	8008f5e <_printf_float+0xe6>
 8008ff0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008ff4:	d119      	bne.n	800902a <_printf_float+0x1b2>
 8008ff6:	2900      	cmp	r1, #0
 8008ff8:	6863      	ldr	r3, [r4, #4]
 8008ffa:	dd0c      	ble.n	8009016 <_printf_float+0x19e>
 8008ffc:	6121      	str	r1, [r4, #16]
 8008ffe:	b913      	cbnz	r3, 8009006 <_printf_float+0x18e>
 8009000:	6822      	ldr	r2, [r4, #0]
 8009002:	07d2      	lsls	r2, r2, #31
 8009004:	d502      	bpl.n	800900c <_printf_float+0x194>
 8009006:	3301      	adds	r3, #1
 8009008:	440b      	add	r3, r1
 800900a:	6123      	str	r3, [r4, #16]
 800900c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800900e:	65a3      	str	r3, [r4, #88]	; 0x58
 8009010:	f04f 0900 	mov.w	r9, #0
 8009014:	e7d9      	b.n	8008fca <_printf_float+0x152>
 8009016:	b913      	cbnz	r3, 800901e <_printf_float+0x1a6>
 8009018:	6822      	ldr	r2, [r4, #0]
 800901a:	07d0      	lsls	r0, r2, #31
 800901c:	d501      	bpl.n	8009022 <_printf_float+0x1aa>
 800901e:	3302      	adds	r3, #2
 8009020:	e7f3      	b.n	800900a <_printf_float+0x192>
 8009022:	2301      	movs	r3, #1
 8009024:	e7f1      	b.n	800900a <_printf_float+0x192>
 8009026:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800902a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800902e:	4293      	cmp	r3, r2
 8009030:	db05      	blt.n	800903e <_printf_float+0x1c6>
 8009032:	6822      	ldr	r2, [r4, #0]
 8009034:	6123      	str	r3, [r4, #16]
 8009036:	07d1      	lsls	r1, r2, #31
 8009038:	d5e8      	bpl.n	800900c <_printf_float+0x194>
 800903a:	3301      	adds	r3, #1
 800903c:	e7e5      	b.n	800900a <_printf_float+0x192>
 800903e:	2b00      	cmp	r3, #0
 8009040:	bfd4      	ite	le
 8009042:	f1c3 0302 	rsble	r3, r3, #2
 8009046:	2301      	movgt	r3, #1
 8009048:	4413      	add	r3, r2
 800904a:	e7de      	b.n	800900a <_printf_float+0x192>
 800904c:	6823      	ldr	r3, [r4, #0]
 800904e:	055a      	lsls	r2, r3, #21
 8009050:	d407      	bmi.n	8009062 <_printf_float+0x1ea>
 8009052:	6923      	ldr	r3, [r4, #16]
 8009054:	4642      	mov	r2, r8
 8009056:	4631      	mov	r1, r6
 8009058:	4628      	mov	r0, r5
 800905a:	47b8      	blx	r7
 800905c:	3001      	adds	r0, #1
 800905e:	d12b      	bne.n	80090b8 <_printf_float+0x240>
 8009060:	e767      	b.n	8008f32 <_printf_float+0xba>
 8009062:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009066:	f240 80dc 	bls.w	8009222 <_printf_float+0x3aa>
 800906a:	2200      	movs	r2, #0
 800906c:	2300      	movs	r3, #0
 800906e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009072:	f7f7 fd39 	bl	8000ae8 <__aeabi_dcmpeq>
 8009076:	2800      	cmp	r0, #0
 8009078:	d033      	beq.n	80090e2 <_printf_float+0x26a>
 800907a:	2301      	movs	r3, #1
 800907c:	4a41      	ldr	r2, [pc, #260]	; (8009184 <_printf_float+0x30c>)
 800907e:	4631      	mov	r1, r6
 8009080:	4628      	mov	r0, r5
 8009082:	47b8      	blx	r7
 8009084:	3001      	adds	r0, #1
 8009086:	f43f af54 	beq.w	8008f32 <_printf_float+0xba>
 800908a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800908e:	429a      	cmp	r2, r3
 8009090:	db02      	blt.n	8009098 <_printf_float+0x220>
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	07d8      	lsls	r0, r3, #31
 8009096:	d50f      	bpl.n	80090b8 <_printf_float+0x240>
 8009098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800909c:	4631      	mov	r1, r6
 800909e:	4628      	mov	r0, r5
 80090a0:	47b8      	blx	r7
 80090a2:	3001      	adds	r0, #1
 80090a4:	f43f af45 	beq.w	8008f32 <_printf_float+0xba>
 80090a8:	f04f 0800 	mov.w	r8, #0
 80090ac:	f104 091a 	add.w	r9, r4, #26
 80090b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090b2:	3b01      	subs	r3, #1
 80090b4:	4543      	cmp	r3, r8
 80090b6:	dc09      	bgt.n	80090cc <_printf_float+0x254>
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	079b      	lsls	r3, r3, #30
 80090bc:	f100 8103 	bmi.w	80092c6 <_printf_float+0x44e>
 80090c0:	68e0      	ldr	r0, [r4, #12]
 80090c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090c4:	4298      	cmp	r0, r3
 80090c6:	bfb8      	it	lt
 80090c8:	4618      	movlt	r0, r3
 80090ca:	e734      	b.n	8008f36 <_printf_float+0xbe>
 80090cc:	2301      	movs	r3, #1
 80090ce:	464a      	mov	r2, r9
 80090d0:	4631      	mov	r1, r6
 80090d2:	4628      	mov	r0, r5
 80090d4:	47b8      	blx	r7
 80090d6:	3001      	adds	r0, #1
 80090d8:	f43f af2b 	beq.w	8008f32 <_printf_float+0xba>
 80090dc:	f108 0801 	add.w	r8, r8, #1
 80090e0:	e7e6      	b.n	80090b0 <_printf_float+0x238>
 80090e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	dc2b      	bgt.n	8009140 <_printf_float+0x2c8>
 80090e8:	2301      	movs	r3, #1
 80090ea:	4a26      	ldr	r2, [pc, #152]	; (8009184 <_printf_float+0x30c>)
 80090ec:	4631      	mov	r1, r6
 80090ee:	4628      	mov	r0, r5
 80090f0:	47b8      	blx	r7
 80090f2:	3001      	adds	r0, #1
 80090f4:	f43f af1d 	beq.w	8008f32 <_printf_float+0xba>
 80090f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090fa:	b923      	cbnz	r3, 8009106 <_printf_float+0x28e>
 80090fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090fe:	b913      	cbnz	r3, 8009106 <_printf_float+0x28e>
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	07d9      	lsls	r1, r3, #31
 8009104:	d5d8      	bpl.n	80090b8 <_printf_float+0x240>
 8009106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800910a:	4631      	mov	r1, r6
 800910c:	4628      	mov	r0, r5
 800910e:	47b8      	blx	r7
 8009110:	3001      	adds	r0, #1
 8009112:	f43f af0e 	beq.w	8008f32 <_printf_float+0xba>
 8009116:	f04f 0900 	mov.w	r9, #0
 800911a:	f104 0a1a 	add.w	sl, r4, #26
 800911e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009120:	425b      	negs	r3, r3
 8009122:	454b      	cmp	r3, r9
 8009124:	dc01      	bgt.n	800912a <_printf_float+0x2b2>
 8009126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009128:	e794      	b.n	8009054 <_printf_float+0x1dc>
 800912a:	2301      	movs	r3, #1
 800912c:	4652      	mov	r2, sl
 800912e:	4631      	mov	r1, r6
 8009130:	4628      	mov	r0, r5
 8009132:	47b8      	blx	r7
 8009134:	3001      	adds	r0, #1
 8009136:	f43f aefc 	beq.w	8008f32 <_printf_float+0xba>
 800913a:	f109 0901 	add.w	r9, r9, #1
 800913e:	e7ee      	b.n	800911e <_printf_float+0x2a6>
 8009140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009144:	429a      	cmp	r2, r3
 8009146:	bfa8      	it	ge
 8009148:	461a      	movge	r2, r3
 800914a:	2a00      	cmp	r2, #0
 800914c:	4691      	mov	r9, r2
 800914e:	dd07      	ble.n	8009160 <_printf_float+0x2e8>
 8009150:	4613      	mov	r3, r2
 8009152:	4631      	mov	r1, r6
 8009154:	4642      	mov	r2, r8
 8009156:	4628      	mov	r0, r5
 8009158:	47b8      	blx	r7
 800915a:	3001      	adds	r0, #1
 800915c:	f43f aee9 	beq.w	8008f32 <_printf_float+0xba>
 8009160:	f104 031a 	add.w	r3, r4, #26
 8009164:	f04f 0b00 	mov.w	fp, #0
 8009168:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800916c:	9306      	str	r3, [sp, #24]
 800916e:	e015      	b.n	800919c <_printf_float+0x324>
 8009170:	7fefffff 	.word	0x7fefffff
 8009174:	0800c550 	.word	0x0800c550
 8009178:	0800c54c 	.word	0x0800c54c
 800917c:	0800c558 	.word	0x0800c558
 8009180:	0800c554 	.word	0x0800c554
 8009184:	0800c55c 	.word	0x0800c55c
 8009188:	2301      	movs	r3, #1
 800918a:	9a06      	ldr	r2, [sp, #24]
 800918c:	4631      	mov	r1, r6
 800918e:	4628      	mov	r0, r5
 8009190:	47b8      	blx	r7
 8009192:	3001      	adds	r0, #1
 8009194:	f43f aecd 	beq.w	8008f32 <_printf_float+0xba>
 8009198:	f10b 0b01 	add.w	fp, fp, #1
 800919c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80091a0:	ebaa 0309 	sub.w	r3, sl, r9
 80091a4:	455b      	cmp	r3, fp
 80091a6:	dcef      	bgt.n	8009188 <_printf_float+0x310>
 80091a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091ac:	429a      	cmp	r2, r3
 80091ae:	44d0      	add	r8, sl
 80091b0:	db15      	blt.n	80091de <_printf_float+0x366>
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	07da      	lsls	r2, r3, #31
 80091b6:	d412      	bmi.n	80091de <_printf_float+0x366>
 80091b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091bc:	eba3 020a 	sub.w	r2, r3, sl
 80091c0:	eba3 0a01 	sub.w	sl, r3, r1
 80091c4:	4592      	cmp	sl, r2
 80091c6:	bfa8      	it	ge
 80091c8:	4692      	movge	sl, r2
 80091ca:	f1ba 0f00 	cmp.w	sl, #0
 80091ce:	dc0e      	bgt.n	80091ee <_printf_float+0x376>
 80091d0:	f04f 0800 	mov.w	r8, #0
 80091d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091d8:	f104 091a 	add.w	r9, r4, #26
 80091dc:	e019      	b.n	8009212 <_printf_float+0x39a>
 80091de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091e2:	4631      	mov	r1, r6
 80091e4:	4628      	mov	r0, r5
 80091e6:	47b8      	blx	r7
 80091e8:	3001      	adds	r0, #1
 80091ea:	d1e5      	bne.n	80091b8 <_printf_float+0x340>
 80091ec:	e6a1      	b.n	8008f32 <_printf_float+0xba>
 80091ee:	4653      	mov	r3, sl
 80091f0:	4642      	mov	r2, r8
 80091f2:	4631      	mov	r1, r6
 80091f4:	4628      	mov	r0, r5
 80091f6:	47b8      	blx	r7
 80091f8:	3001      	adds	r0, #1
 80091fa:	d1e9      	bne.n	80091d0 <_printf_float+0x358>
 80091fc:	e699      	b.n	8008f32 <_printf_float+0xba>
 80091fe:	2301      	movs	r3, #1
 8009200:	464a      	mov	r2, r9
 8009202:	4631      	mov	r1, r6
 8009204:	4628      	mov	r0, r5
 8009206:	47b8      	blx	r7
 8009208:	3001      	adds	r0, #1
 800920a:	f43f ae92 	beq.w	8008f32 <_printf_float+0xba>
 800920e:	f108 0801 	add.w	r8, r8, #1
 8009212:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009216:	1a9b      	subs	r3, r3, r2
 8009218:	eba3 030a 	sub.w	r3, r3, sl
 800921c:	4543      	cmp	r3, r8
 800921e:	dcee      	bgt.n	80091fe <_printf_float+0x386>
 8009220:	e74a      	b.n	80090b8 <_printf_float+0x240>
 8009222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009224:	2a01      	cmp	r2, #1
 8009226:	dc01      	bgt.n	800922c <_printf_float+0x3b4>
 8009228:	07db      	lsls	r3, r3, #31
 800922a:	d53a      	bpl.n	80092a2 <_printf_float+0x42a>
 800922c:	2301      	movs	r3, #1
 800922e:	4642      	mov	r2, r8
 8009230:	4631      	mov	r1, r6
 8009232:	4628      	mov	r0, r5
 8009234:	47b8      	blx	r7
 8009236:	3001      	adds	r0, #1
 8009238:	f43f ae7b 	beq.w	8008f32 <_printf_float+0xba>
 800923c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009240:	4631      	mov	r1, r6
 8009242:	4628      	mov	r0, r5
 8009244:	47b8      	blx	r7
 8009246:	3001      	adds	r0, #1
 8009248:	f108 0801 	add.w	r8, r8, #1
 800924c:	f43f ae71 	beq.w	8008f32 <_printf_float+0xba>
 8009250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009252:	2200      	movs	r2, #0
 8009254:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8009258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800925c:	2300      	movs	r3, #0
 800925e:	f7f7 fc43 	bl	8000ae8 <__aeabi_dcmpeq>
 8009262:	b9c8      	cbnz	r0, 8009298 <_printf_float+0x420>
 8009264:	4653      	mov	r3, sl
 8009266:	4642      	mov	r2, r8
 8009268:	4631      	mov	r1, r6
 800926a:	4628      	mov	r0, r5
 800926c:	47b8      	blx	r7
 800926e:	3001      	adds	r0, #1
 8009270:	d10e      	bne.n	8009290 <_printf_float+0x418>
 8009272:	e65e      	b.n	8008f32 <_printf_float+0xba>
 8009274:	2301      	movs	r3, #1
 8009276:	4652      	mov	r2, sl
 8009278:	4631      	mov	r1, r6
 800927a:	4628      	mov	r0, r5
 800927c:	47b8      	blx	r7
 800927e:	3001      	adds	r0, #1
 8009280:	f43f ae57 	beq.w	8008f32 <_printf_float+0xba>
 8009284:	f108 0801 	add.w	r8, r8, #1
 8009288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800928a:	3b01      	subs	r3, #1
 800928c:	4543      	cmp	r3, r8
 800928e:	dcf1      	bgt.n	8009274 <_printf_float+0x3fc>
 8009290:	464b      	mov	r3, r9
 8009292:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009296:	e6de      	b.n	8009056 <_printf_float+0x1de>
 8009298:	f04f 0800 	mov.w	r8, #0
 800929c:	f104 0a1a 	add.w	sl, r4, #26
 80092a0:	e7f2      	b.n	8009288 <_printf_float+0x410>
 80092a2:	2301      	movs	r3, #1
 80092a4:	e7df      	b.n	8009266 <_printf_float+0x3ee>
 80092a6:	2301      	movs	r3, #1
 80092a8:	464a      	mov	r2, r9
 80092aa:	4631      	mov	r1, r6
 80092ac:	4628      	mov	r0, r5
 80092ae:	47b8      	blx	r7
 80092b0:	3001      	adds	r0, #1
 80092b2:	f43f ae3e 	beq.w	8008f32 <_printf_float+0xba>
 80092b6:	f108 0801 	add.w	r8, r8, #1
 80092ba:	68e3      	ldr	r3, [r4, #12]
 80092bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092be:	1a9b      	subs	r3, r3, r2
 80092c0:	4543      	cmp	r3, r8
 80092c2:	dcf0      	bgt.n	80092a6 <_printf_float+0x42e>
 80092c4:	e6fc      	b.n	80090c0 <_printf_float+0x248>
 80092c6:	f04f 0800 	mov.w	r8, #0
 80092ca:	f104 0919 	add.w	r9, r4, #25
 80092ce:	e7f4      	b.n	80092ba <_printf_float+0x442>
 80092d0:	2900      	cmp	r1, #0
 80092d2:	f43f ae8b 	beq.w	8008fec <_printf_float+0x174>
 80092d6:	2300      	movs	r3, #0
 80092d8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80092dc:	ab09      	add	r3, sp, #36	; 0x24
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	ec49 8b10 	vmov	d0, r8, r9
 80092e4:	6022      	str	r2, [r4, #0]
 80092e6:	f8cd a004 	str.w	sl, [sp, #4]
 80092ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80092ee:	4628      	mov	r0, r5
 80092f0:	f7ff fd2e 	bl	8008d50 <__cvt>
 80092f4:	4680      	mov	r8, r0
 80092f6:	e648      	b.n	8008f8a <_printf_float+0x112>

080092f8 <_printf_common>:
 80092f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092fc:	4691      	mov	r9, r2
 80092fe:	461f      	mov	r7, r3
 8009300:	688a      	ldr	r2, [r1, #8]
 8009302:	690b      	ldr	r3, [r1, #16]
 8009304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009308:	4293      	cmp	r3, r2
 800930a:	bfb8      	it	lt
 800930c:	4613      	movlt	r3, r2
 800930e:	f8c9 3000 	str.w	r3, [r9]
 8009312:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009316:	4606      	mov	r6, r0
 8009318:	460c      	mov	r4, r1
 800931a:	b112      	cbz	r2, 8009322 <_printf_common+0x2a>
 800931c:	3301      	adds	r3, #1
 800931e:	f8c9 3000 	str.w	r3, [r9]
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	0699      	lsls	r1, r3, #26
 8009326:	bf42      	ittt	mi
 8009328:	f8d9 3000 	ldrmi.w	r3, [r9]
 800932c:	3302      	addmi	r3, #2
 800932e:	f8c9 3000 	strmi.w	r3, [r9]
 8009332:	6825      	ldr	r5, [r4, #0]
 8009334:	f015 0506 	ands.w	r5, r5, #6
 8009338:	d107      	bne.n	800934a <_printf_common+0x52>
 800933a:	f104 0a19 	add.w	sl, r4, #25
 800933e:	68e3      	ldr	r3, [r4, #12]
 8009340:	f8d9 2000 	ldr.w	r2, [r9]
 8009344:	1a9b      	subs	r3, r3, r2
 8009346:	42ab      	cmp	r3, r5
 8009348:	dc28      	bgt.n	800939c <_printf_common+0xa4>
 800934a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800934e:	6822      	ldr	r2, [r4, #0]
 8009350:	3300      	adds	r3, #0
 8009352:	bf18      	it	ne
 8009354:	2301      	movne	r3, #1
 8009356:	0692      	lsls	r2, r2, #26
 8009358:	d42d      	bmi.n	80093b6 <_printf_common+0xbe>
 800935a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800935e:	4639      	mov	r1, r7
 8009360:	4630      	mov	r0, r6
 8009362:	47c0      	blx	r8
 8009364:	3001      	adds	r0, #1
 8009366:	d020      	beq.n	80093aa <_printf_common+0xb2>
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	68e5      	ldr	r5, [r4, #12]
 800936c:	f8d9 2000 	ldr.w	r2, [r9]
 8009370:	f003 0306 	and.w	r3, r3, #6
 8009374:	2b04      	cmp	r3, #4
 8009376:	bf08      	it	eq
 8009378:	1aad      	subeq	r5, r5, r2
 800937a:	68a3      	ldr	r3, [r4, #8]
 800937c:	6922      	ldr	r2, [r4, #16]
 800937e:	bf0c      	ite	eq
 8009380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009384:	2500      	movne	r5, #0
 8009386:	4293      	cmp	r3, r2
 8009388:	bfc4      	itt	gt
 800938a:	1a9b      	subgt	r3, r3, r2
 800938c:	18ed      	addgt	r5, r5, r3
 800938e:	f04f 0900 	mov.w	r9, #0
 8009392:	341a      	adds	r4, #26
 8009394:	454d      	cmp	r5, r9
 8009396:	d11a      	bne.n	80093ce <_printf_common+0xd6>
 8009398:	2000      	movs	r0, #0
 800939a:	e008      	b.n	80093ae <_printf_common+0xb6>
 800939c:	2301      	movs	r3, #1
 800939e:	4652      	mov	r2, sl
 80093a0:	4639      	mov	r1, r7
 80093a2:	4630      	mov	r0, r6
 80093a4:	47c0      	blx	r8
 80093a6:	3001      	adds	r0, #1
 80093a8:	d103      	bne.n	80093b2 <_printf_common+0xba>
 80093aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b2:	3501      	adds	r5, #1
 80093b4:	e7c3      	b.n	800933e <_printf_common+0x46>
 80093b6:	18e1      	adds	r1, r4, r3
 80093b8:	1c5a      	adds	r2, r3, #1
 80093ba:	2030      	movs	r0, #48	; 0x30
 80093bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093c0:	4422      	add	r2, r4
 80093c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093ca:	3302      	adds	r3, #2
 80093cc:	e7c5      	b.n	800935a <_printf_common+0x62>
 80093ce:	2301      	movs	r3, #1
 80093d0:	4622      	mov	r2, r4
 80093d2:	4639      	mov	r1, r7
 80093d4:	4630      	mov	r0, r6
 80093d6:	47c0      	blx	r8
 80093d8:	3001      	adds	r0, #1
 80093da:	d0e6      	beq.n	80093aa <_printf_common+0xb2>
 80093dc:	f109 0901 	add.w	r9, r9, #1
 80093e0:	e7d8      	b.n	8009394 <_printf_common+0x9c>
	...

080093e4 <_printf_i>:
 80093e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80093ec:	460c      	mov	r4, r1
 80093ee:	7e09      	ldrb	r1, [r1, #24]
 80093f0:	b085      	sub	sp, #20
 80093f2:	296e      	cmp	r1, #110	; 0x6e
 80093f4:	4617      	mov	r7, r2
 80093f6:	4606      	mov	r6, r0
 80093f8:	4698      	mov	r8, r3
 80093fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093fc:	f000 80b3 	beq.w	8009566 <_printf_i+0x182>
 8009400:	d822      	bhi.n	8009448 <_printf_i+0x64>
 8009402:	2963      	cmp	r1, #99	; 0x63
 8009404:	d036      	beq.n	8009474 <_printf_i+0x90>
 8009406:	d80a      	bhi.n	800941e <_printf_i+0x3a>
 8009408:	2900      	cmp	r1, #0
 800940a:	f000 80b9 	beq.w	8009580 <_printf_i+0x19c>
 800940e:	2958      	cmp	r1, #88	; 0x58
 8009410:	f000 8083 	beq.w	800951a <_printf_i+0x136>
 8009414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009418:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800941c:	e032      	b.n	8009484 <_printf_i+0xa0>
 800941e:	2964      	cmp	r1, #100	; 0x64
 8009420:	d001      	beq.n	8009426 <_printf_i+0x42>
 8009422:	2969      	cmp	r1, #105	; 0x69
 8009424:	d1f6      	bne.n	8009414 <_printf_i+0x30>
 8009426:	6820      	ldr	r0, [r4, #0]
 8009428:	6813      	ldr	r3, [r2, #0]
 800942a:	0605      	lsls	r5, r0, #24
 800942c:	f103 0104 	add.w	r1, r3, #4
 8009430:	d52a      	bpl.n	8009488 <_printf_i+0xa4>
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6011      	str	r1, [r2, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	da03      	bge.n	8009442 <_printf_i+0x5e>
 800943a:	222d      	movs	r2, #45	; 0x2d
 800943c:	425b      	negs	r3, r3
 800943e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009442:	486f      	ldr	r0, [pc, #444]	; (8009600 <_printf_i+0x21c>)
 8009444:	220a      	movs	r2, #10
 8009446:	e039      	b.n	80094bc <_printf_i+0xd8>
 8009448:	2973      	cmp	r1, #115	; 0x73
 800944a:	f000 809d 	beq.w	8009588 <_printf_i+0x1a4>
 800944e:	d808      	bhi.n	8009462 <_printf_i+0x7e>
 8009450:	296f      	cmp	r1, #111	; 0x6f
 8009452:	d020      	beq.n	8009496 <_printf_i+0xb2>
 8009454:	2970      	cmp	r1, #112	; 0x70
 8009456:	d1dd      	bne.n	8009414 <_printf_i+0x30>
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	f043 0320 	orr.w	r3, r3, #32
 800945e:	6023      	str	r3, [r4, #0]
 8009460:	e003      	b.n	800946a <_printf_i+0x86>
 8009462:	2975      	cmp	r1, #117	; 0x75
 8009464:	d017      	beq.n	8009496 <_printf_i+0xb2>
 8009466:	2978      	cmp	r1, #120	; 0x78
 8009468:	d1d4      	bne.n	8009414 <_printf_i+0x30>
 800946a:	2378      	movs	r3, #120	; 0x78
 800946c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009470:	4864      	ldr	r0, [pc, #400]	; (8009604 <_printf_i+0x220>)
 8009472:	e055      	b.n	8009520 <_printf_i+0x13c>
 8009474:	6813      	ldr	r3, [r2, #0]
 8009476:	1d19      	adds	r1, r3, #4
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6011      	str	r1, [r2, #0]
 800947c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009484:	2301      	movs	r3, #1
 8009486:	e08c      	b.n	80095a2 <_printf_i+0x1be>
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	6011      	str	r1, [r2, #0]
 800948c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009490:	bf18      	it	ne
 8009492:	b21b      	sxthne	r3, r3
 8009494:	e7cf      	b.n	8009436 <_printf_i+0x52>
 8009496:	6813      	ldr	r3, [r2, #0]
 8009498:	6825      	ldr	r5, [r4, #0]
 800949a:	1d18      	adds	r0, r3, #4
 800949c:	6010      	str	r0, [r2, #0]
 800949e:	0628      	lsls	r0, r5, #24
 80094a0:	d501      	bpl.n	80094a6 <_printf_i+0xc2>
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	e002      	b.n	80094ac <_printf_i+0xc8>
 80094a6:	0668      	lsls	r0, r5, #25
 80094a8:	d5fb      	bpl.n	80094a2 <_printf_i+0xbe>
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	4854      	ldr	r0, [pc, #336]	; (8009600 <_printf_i+0x21c>)
 80094ae:	296f      	cmp	r1, #111	; 0x6f
 80094b0:	bf14      	ite	ne
 80094b2:	220a      	movne	r2, #10
 80094b4:	2208      	moveq	r2, #8
 80094b6:	2100      	movs	r1, #0
 80094b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094bc:	6865      	ldr	r5, [r4, #4]
 80094be:	60a5      	str	r5, [r4, #8]
 80094c0:	2d00      	cmp	r5, #0
 80094c2:	f2c0 8095 	blt.w	80095f0 <_printf_i+0x20c>
 80094c6:	6821      	ldr	r1, [r4, #0]
 80094c8:	f021 0104 	bic.w	r1, r1, #4
 80094cc:	6021      	str	r1, [r4, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d13d      	bne.n	800954e <_printf_i+0x16a>
 80094d2:	2d00      	cmp	r5, #0
 80094d4:	f040 808e 	bne.w	80095f4 <_printf_i+0x210>
 80094d8:	4665      	mov	r5, ip
 80094da:	2a08      	cmp	r2, #8
 80094dc:	d10b      	bne.n	80094f6 <_printf_i+0x112>
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	07db      	lsls	r3, r3, #31
 80094e2:	d508      	bpl.n	80094f6 <_printf_i+0x112>
 80094e4:	6923      	ldr	r3, [r4, #16]
 80094e6:	6862      	ldr	r2, [r4, #4]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	bfde      	ittt	le
 80094ec:	2330      	movle	r3, #48	; 0x30
 80094ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094f2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80094f6:	ebac 0305 	sub.w	r3, ip, r5
 80094fa:	6123      	str	r3, [r4, #16]
 80094fc:	f8cd 8000 	str.w	r8, [sp]
 8009500:	463b      	mov	r3, r7
 8009502:	aa03      	add	r2, sp, #12
 8009504:	4621      	mov	r1, r4
 8009506:	4630      	mov	r0, r6
 8009508:	f7ff fef6 	bl	80092f8 <_printf_common>
 800950c:	3001      	adds	r0, #1
 800950e:	d14d      	bne.n	80095ac <_printf_i+0x1c8>
 8009510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009514:	b005      	add	sp, #20
 8009516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800951a:	4839      	ldr	r0, [pc, #228]	; (8009600 <_printf_i+0x21c>)
 800951c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009520:	6813      	ldr	r3, [r2, #0]
 8009522:	6821      	ldr	r1, [r4, #0]
 8009524:	1d1d      	adds	r5, r3, #4
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6015      	str	r5, [r2, #0]
 800952a:	060a      	lsls	r2, r1, #24
 800952c:	d50b      	bpl.n	8009546 <_printf_i+0x162>
 800952e:	07ca      	lsls	r2, r1, #31
 8009530:	bf44      	itt	mi
 8009532:	f041 0120 	orrmi.w	r1, r1, #32
 8009536:	6021      	strmi	r1, [r4, #0]
 8009538:	b91b      	cbnz	r3, 8009542 <_printf_i+0x15e>
 800953a:	6822      	ldr	r2, [r4, #0]
 800953c:	f022 0220 	bic.w	r2, r2, #32
 8009540:	6022      	str	r2, [r4, #0]
 8009542:	2210      	movs	r2, #16
 8009544:	e7b7      	b.n	80094b6 <_printf_i+0xd2>
 8009546:	064d      	lsls	r5, r1, #25
 8009548:	bf48      	it	mi
 800954a:	b29b      	uxthmi	r3, r3
 800954c:	e7ef      	b.n	800952e <_printf_i+0x14a>
 800954e:	4665      	mov	r5, ip
 8009550:	fbb3 f1f2 	udiv	r1, r3, r2
 8009554:	fb02 3311 	mls	r3, r2, r1, r3
 8009558:	5cc3      	ldrb	r3, [r0, r3]
 800955a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800955e:	460b      	mov	r3, r1
 8009560:	2900      	cmp	r1, #0
 8009562:	d1f5      	bne.n	8009550 <_printf_i+0x16c>
 8009564:	e7b9      	b.n	80094da <_printf_i+0xf6>
 8009566:	6813      	ldr	r3, [r2, #0]
 8009568:	6825      	ldr	r5, [r4, #0]
 800956a:	6961      	ldr	r1, [r4, #20]
 800956c:	1d18      	adds	r0, r3, #4
 800956e:	6010      	str	r0, [r2, #0]
 8009570:	0628      	lsls	r0, r5, #24
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	d501      	bpl.n	800957a <_printf_i+0x196>
 8009576:	6019      	str	r1, [r3, #0]
 8009578:	e002      	b.n	8009580 <_printf_i+0x19c>
 800957a:	066a      	lsls	r2, r5, #25
 800957c:	d5fb      	bpl.n	8009576 <_printf_i+0x192>
 800957e:	8019      	strh	r1, [r3, #0]
 8009580:	2300      	movs	r3, #0
 8009582:	6123      	str	r3, [r4, #16]
 8009584:	4665      	mov	r5, ip
 8009586:	e7b9      	b.n	80094fc <_printf_i+0x118>
 8009588:	6813      	ldr	r3, [r2, #0]
 800958a:	1d19      	adds	r1, r3, #4
 800958c:	6011      	str	r1, [r2, #0]
 800958e:	681d      	ldr	r5, [r3, #0]
 8009590:	6862      	ldr	r2, [r4, #4]
 8009592:	2100      	movs	r1, #0
 8009594:	4628      	mov	r0, r5
 8009596:	f7f6 fe33 	bl	8000200 <memchr>
 800959a:	b108      	cbz	r0, 80095a0 <_printf_i+0x1bc>
 800959c:	1b40      	subs	r0, r0, r5
 800959e:	6060      	str	r0, [r4, #4]
 80095a0:	6863      	ldr	r3, [r4, #4]
 80095a2:	6123      	str	r3, [r4, #16]
 80095a4:	2300      	movs	r3, #0
 80095a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095aa:	e7a7      	b.n	80094fc <_printf_i+0x118>
 80095ac:	6923      	ldr	r3, [r4, #16]
 80095ae:	462a      	mov	r2, r5
 80095b0:	4639      	mov	r1, r7
 80095b2:	4630      	mov	r0, r6
 80095b4:	47c0      	blx	r8
 80095b6:	3001      	adds	r0, #1
 80095b8:	d0aa      	beq.n	8009510 <_printf_i+0x12c>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	079b      	lsls	r3, r3, #30
 80095be:	d413      	bmi.n	80095e8 <_printf_i+0x204>
 80095c0:	68e0      	ldr	r0, [r4, #12]
 80095c2:	9b03      	ldr	r3, [sp, #12]
 80095c4:	4298      	cmp	r0, r3
 80095c6:	bfb8      	it	lt
 80095c8:	4618      	movlt	r0, r3
 80095ca:	e7a3      	b.n	8009514 <_printf_i+0x130>
 80095cc:	2301      	movs	r3, #1
 80095ce:	464a      	mov	r2, r9
 80095d0:	4639      	mov	r1, r7
 80095d2:	4630      	mov	r0, r6
 80095d4:	47c0      	blx	r8
 80095d6:	3001      	adds	r0, #1
 80095d8:	d09a      	beq.n	8009510 <_printf_i+0x12c>
 80095da:	3501      	adds	r5, #1
 80095dc:	68e3      	ldr	r3, [r4, #12]
 80095de:	9a03      	ldr	r2, [sp, #12]
 80095e0:	1a9b      	subs	r3, r3, r2
 80095e2:	42ab      	cmp	r3, r5
 80095e4:	dcf2      	bgt.n	80095cc <_printf_i+0x1e8>
 80095e6:	e7eb      	b.n	80095c0 <_printf_i+0x1dc>
 80095e8:	2500      	movs	r5, #0
 80095ea:	f104 0919 	add.w	r9, r4, #25
 80095ee:	e7f5      	b.n	80095dc <_printf_i+0x1f8>
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1ac      	bne.n	800954e <_printf_i+0x16a>
 80095f4:	7803      	ldrb	r3, [r0, #0]
 80095f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095fe:	e76c      	b.n	80094da <_printf_i+0xf6>
 8009600:	0800c55e 	.word	0x0800c55e
 8009604:	0800c56f 	.word	0x0800c56f

08009608 <siprintf>:
 8009608:	b40e      	push	{r1, r2, r3}
 800960a:	b500      	push	{lr}
 800960c:	b09c      	sub	sp, #112	; 0x70
 800960e:	ab1d      	add	r3, sp, #116	; 0x74
 8009610:	9002      	str	r0, [sp, #8]
 8009612:	9006      	str	r0, [sp, #24]
 8009614:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009618:	4809      	ldr	r0, [pc, #36]	; (8009640 <siprintf+0x38>)
 800961a:	9107      	str	r1, [sp, #28]
 800961c:	9104      	str	r1, [sp, #16]
 800961e:	4909      	ldr	r1, [pc, #36]	; (8009644 <siprintf+0x3c>)
 8009620:	f853 2b04 	ldr.w	r2, [r3], #4
 8009624:	9105      	str	r1, [sp, #20]
 8009626:	6800      	ldr	r0, [r0, #0]
 8009628:	9301      	str	r3, [sp, #4]
 800962a:	a902      	add	r1, sp, #8
 800962c:	f002 fd86 	bl	800c13c <_svfiprintf_r>
 8009630:	9b02      	ldr	r3, [sp, #8]
 8009632:	2200      	movs	r2, #0
 8009634:	701a      	strb	r2, [r3, #0]
 8009636:	b01c      	add	sp, #112	; 0x70
 8009638:	f85d eb04 	ldr.w	lr, [sp], #4
 800963c:	b003      	add	sp, #12
 800963e:	4770      	bx	lr
 8009640:	2000000c 	.word	0x2000000c
 8009644:	ffff0208 	.word	0xffff0208

08009648 <strchr>:
 8009648:	b2c9      	uxtb	r1, r1
 800964a:	4603      	mov	r3, r0
 800964c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009650:	b11a      	cbz	r2, 800965a <strchr+0x12>
 8009652:	428a      	cmp	r2, r1
 8009654:	d1f9      	bne.n	800964a <strchr+0x2>
 8009656:	4618      	mov	r0, r3
 8009658:	4770      	bx	lr
 800965a:	2900      	cmp	r1, #0
 800965c:	bf18      	it	ne
 800965e:	2300      	movne	r3, #0
 8009660:	e7f9      	b.n	8009656 <strchr+0xe>

08009662 <sulp>:
 8009662:	b570      	push	{r4, r5, r6, lr}
 8009664:	4604      	mov	r4, r0
 8009666:	460d      	mov	r5, r1
 8009668:	ec45 4b10 	vmov	d0, r4, r5
 800966c:	4616      	mov	r6, r2
 800966e:	f002 fb21 	bl	800bcb4 <__ulp>
 8009672:	ec51 0b10 	vmov	r0, r1, d0
 8009676:	b17e      	cbz	r6, 8009698 <sulp+0x36>
 8009678:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800967c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009680:	2b00      	cmp	r3, #0
 8009682:	dd09      	ble.n	8009698 <sulp+0x36>
 8009684:	051b      	lsls	r3, r3, #20
 8009686:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800968a:	2400      	movs	r4, #0
 800968c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009690:	4622      	mov	r2, r4
 8009692:	462b      	mov	r3, r5
 8009694:	f7f6 ffc0 	bl	8000618 <__aeabi_dmul>
 8009698:	bd70      	pop	{r4, r5, r6, pc}
 800969a:	0000      	movs	r0, r0
 800969c:	0000      	movs	r0, r0
	...

080096a0 <_strtod_l>:
 80096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	461f      	mov	r7, r3
 80096a6:	b0a1      	sub	sp, #132	; 0x84
 80096a8:	2300      	movs	r3, #0
 80096aa:	4681      	mov	r9, r0
 80096ac:	4638      	mov	r0, r7
 80096ae:	460e      	mov	r6, r1
 80096b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80096b2:	931c      	str	r3, [sp, #112]	; 0x70
 80096b4:	f001 fffd 	bl	800b6b2 <__localeconv_l>
 80096b8:	4680      	mov	r8, r0
 80096ba:	6800      	ldr	r0, [r0, #0]
 80096bc:	f7f6 fd92 	bl	80001e4 <strlen>
 80096c0:	f04f 0a00 	mov.w	sl, #0
 80096c4:	4604      	mov	r4, r0
 80096c6:	f04f 0b00 	mov.w	fp, #0
 80096ca:	961b      	str	r6, [sp, #108]	; 0x6c
 80096cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096ce:	781a      	ldrb	r2, [r3, #0]
 80096d0:	2a0d      	cmp	r2, #13
 80096d2:	d832      	bhi.n	800973a <_strtod_l+0x9a>
 80096d4:	2a09      	cmp	r2, #9
 80096d6:	d236      	bcs.n	8009746 <_strtod_l+0xa6>
 80096d8:	2a00      	cmp	r2, #0
 80096da:	d03e      	beq.n	800975a <_strtod_l+0xba>
 80096dc:	2300      	movs	r3, #0
 80096de:	930d      	str	r3, [sp, #52]	; 0x34
 80096e0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80096e2:	782b      	ldrb	r3, [r5, #0]
 80096e4:	2b30      	cmp	r3, #48	; 0x30
 80096e6:	f040 80ac 	bne.w	8009842 <_strtod_l+0x1a2>
 80096ea:	786b      	ldrb	r3, [r5, #1]
 80096ec:	2b58      	cmp	r3, #88	; 0x58
 80096ee:	d001      	beq.n	80096f4 <_strtod_l+0x54>
 80096f0:	2b78      	cmp	r3, #120	; 0x78
 80096f2:	d167      	bne.n	80097c4 <_strtod_l+0x124>
 80096f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	ab1c      	add	r3, sp, #112	; 0x70
 80096fa:	9300      	str	r3, [sp, #0]
 80096fc:	9702      	str	r7, [sp, #8]
 80096fe:	ab1d      	add	r3, sp, #116	; 0x74
 8009700:	4a88      	ldr	r2, [pc, #544]	; (8009924 <_strtod_l+0x284>)
 8009702:	a91b      	add	r1, sp, #108	; 0x6c
 8009704:	4648      	mov	r0, r9
 8009706:	f001 fcfa 	bl	800b0fe <__gethex>
 800970a:	f010 0407 	ands.w	r4, r0, #7
 800970e:	4606      	mov	r6, r0
 8009710:	d005      	beq.n	800971e <_strtod_l+0x7e>
 8009712:	2c06      	cmp	r4, #6
 8009714:	d12b      	bne.n	800976e <_strtod_l+0xce>
 8009716:	3501      	adds	r5, #1
 8009718:	2300      	movs	r3, #0
 800971a:	951b      	str	r5, [sp, #108]	; 0x6c
 800971c:	930d      	str	r3, [sp, #52]	; 0x34
 800971e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009720:	2b00      	cmp	r3, #0
 8009722:	f040 859a 	bne.w	800a25a <_strtod_l+0xbba>
 8009726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009728:	b1e3      	cbz	r3, 8009764 <_strtod_l+0xc4>
 800972a:	4652      	mov	r2, sl
 800972c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009730:	ec43 2b10 	vmov	d0, r2, r3
 8009734:	b021      	add	sp, #132	; 0x84
 8009736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973a:	2a2b      	cmp	r2, #43	; 0x2b
 800973c:	d015      	beq.n	800976a <_strtod_l+0xca>
 800973e:	2a2d      	cmp	r2, #45	; 0x2d
 8009740:	d004      	beq.n	800974c <_strtod_l+0xac>
 8009742:	2a20      	cmp	r2, #32
 8009744:	d1ca      	bne.n	80096dc <_strtod_l+0x3c>
 8009746:	3301      	adds	r3, #1
 8009748:	931b      	str	r3, [sp, #108]	; 0x6c
 800974a:	e7bf      	b.n	80096cc <_strtod_l+0x2c>
 800974c:	2201      	movs	r2, #1
 800974e:	920d      	str	r2, [sp, #52]	; 0x34
 8009750:	1c5a      	adds	r2, r3, #1
 8009752:	921b      	str	r2, [sp, #108]	; 0x6c
 8009754:	785b      	ldrb	r3, [r3, #1]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1c2      	bne.n	80096e0 <_strtod_l+0x40>
 800975a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800975c:	961b      	str	r6, [sp, #108]	; 0x6c
 800975e:	2b00      	cmp	r3, #0
 8009760:	f040 8579 	bne.w	800a256 <_strtod_l+0xbb6>
 8009764:	4652      	mov	r2, sl
 8009766:	465b      	mov	r3, fp
 8009768:	e7e2      	b.n	8009730 <_strtod_l+0x90>
 800976a:	2200      	movs	r2, #0
 800976c:	e7ef      	b.n	800974e <_strtod_l+0xae>
 800976e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009770:	b13a      	cbz	r2, 8009782 <_strtod_l+0xe2>
 8009772:	2135      	movs	r1, #53	; 0x35
 8009774:	a81e      	add	r0, sp, #120	; 0x78
 8009776:	f002 fb95 	bl	800bea4 <__copybits>
 800977a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800977c:	4648      	mov	r0, r9
 800977e:	f002 f802 	bl	800b786 <_Bfree>
 8009782:	3c01      	subs	r4, #1
 8009784:	2c04      	cmp	r4, #4
 8009786:	d806      	bhi.n	8009796 <_strtod_l+0xf6>
 8009788:	e8df f004 	tbb	[pc, r4]
 800978c:	1714030a 	.word	0x1714030a
 8009790:	0a          	.byte	0x0a
 8009791:	00          	.byte	0x00
 8009792:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8009796:	0730      	lsls	r0, r6, #28
 8009798:	d5c1      	bpl.n	800971e <_strtod_l+0x7e>
 800979a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800979e:	e7be      	b.n	800971e <_strtod_l+0x7e>
 80097a0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80097a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80097a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80097aa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80097ae:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80097b2:	e7f0      	b.n	8009796 <_strtod_l+0xf6>
 80097b4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009928 <_strtod_l+0x288>
 80097b8:	e7ed      	b.n	8009796 <_strtod_l+0xf6>
 80097ba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80097be:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80097c2:	e7e8      	b.n	8009796 <_strtod_l+0xf6>
 80097c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097c6:	1c5a      	adds	r2, r3, #1
 80097c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80097ca:	785b      	ldrb	r3, [r3, #1]
 80097cc:	2b30      	cmp	r3, #48	; 0x30
 80097ce:	d0f9      	beq.n	80097c4 <_strtod_l+0x124>
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d0a4      	beq.n	800971e <_strtod_l+0x7e>
 80097d4:	2301      	movs	r3, #1
 80097d6:	2500      	movs	r5, #0
 80097d8:	9306      	str	r3, [sp, #24]
 80097da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097dc:	9308      	str	r3, [sp, #32]
 80097de:	9507      	str	r5, [sp, #28]
 80097e0:	9505      	str	r5, [sp, #20]
 80097e2:	220a      	movs	r2, #10
 80097e4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80097e6:	7807      	ldrb	r7, [r0, #0]
 80097e8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80097ec:	b2d9      	uxtb	r1, r3
 80097ee:	2909      	cmp	r1, #9
 80097f0:	d929      	bls.n	8009846 <_strtod_l+0x1a6>
 80097f2:	4622      	mov	r2, r4
 80097f4:	f8d8 1000 	ldr.w	r1, [r8]
 80097f8:	f002 fda8 	bl	800c34c <strncmp>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d031      	beq.n	8009864 <_strtod_l+0x1c4>
 8009800:	2000      	movs	r0, #0
 8009802:	9c05      	ldr	r4, [sp, #20]
 8009804:	9004      	str	r0, [sp, #16]
 8009806:	463b      	mov	r3, r7
 8009808:	4602      	mov	r2, r0
 800980a:	2b65      	cmp	r3, #101	; 0x65
 800980c:	d001      	beq.n	8009812 <_strtod_l+0x172>
 800980e:	2b45      	cmp	r3, #69	; 0x45
 8009810:	d114      	bne.n	800983c <_strtod_l+0x19c>
 8009812:	b924      	cbnz	r4, 800981e <_strtod_l+0x17e>
 8009814:	b910      	cbnz	r0, 800981c <_strtod_l+0x17c>
 8009816:	9b06      	ldr	r3, [sp, #24]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d09e      	beq.n	800975a <_strtod_l+0xba>
 800981c:	2400      	movs	r4, #0
 800981e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009820:	1c73      	adds	r3, r6, #1
 8009822:	931b      	str	r3, [sp, #108]	; 0x6c
 8009824:	7873      	ldrb	r3, [r6, #1]
 8009826:	2b2b      	cmp	r3, #43	; 0x2b
 8009828:	d078      	beq.n	800991c <_strtod_l+0x27c>
 800982a:	2b2d      	cmp	r3, #45	; 0x2d
 800982c:	d070      	beq.n	8009910 <_strtod_l+0x270>
 800982e:	f04f 0c00 	mov.w	ip, #0
 8009832:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009836:	2f09      	cmp	r7, #9
 8009838:	d97c      	bls.n	8009934 <_strtod_l+0x294>
 800983a:	961b      	str	r6, [sp, #108]	; 0x6c
 800983c:	f04f 0e00 	mov.w	lr, #0
 8009840:	e09a      	b.n	8009978 <_strtod_l+0x2d8>
 8009842:	2300      	movs	r3, #0
 8009844:	e7c7      	b.n	80097d6 <_strtod_l+0x136>
 8009846:	9905      	ldr	r1, [sp, #20]
 8009848:	2908      	cmp	r1, #8
 800984a:	bfdd      	ittte	le
 800984c:	9907      	ldrle	r1, [sp, #28]
 800984e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009852:	9307      	strle	r3, [sp, #28]
 8009854:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009858:	9b05      	ldr	r3, [sp, #20]
 800985a:	3001      	adds	r0, #1
 800985c:	3301      	adds	r3, #1
 800985e:	9305      	str	r3, [sp, #20]
 8009860:	901b      	str	r0, [sp, #108]	; 0x6c
 8009862:	e7bf      	b.n	80097e4 <_strtod_l+0x144>
 8009864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009866:	191a      	adds	r2, r3, r4
 8009868:	921b      	str	r2, [sp, #108]	; 0x6c
 800986a:	9a05      	ldr	r2, [sp, #20]
 800986c:	5d1b      	ldrb	r3, [r3, r4]
 800986e:	2a00      	cmp	r2, #0
 8009870:	d037      	beq.n	80098e2 <_strtod_l+0x242>
 8009872:	9c05      	ldr	r4, [sp, #20]
 8009874:	4602      	mov	r2, r0
 8009876:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800987a:	2909      	cmp	r1, #9
 800987c:	d913      	bls.n	80098a6 <_strtod_l+0x206>
 800987e:	2101      	movs	r1, #1
 8009880:	9104      	str	r1, [sp, #16]
 8009882:	e7c2      	b.n	800980a <_strtod_l+0x16a>
 8009884:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009886:	1c5a      	adds	r2, r3, #1
 8009888:	921b      	str	r2, [sp, #108]	; 0x6c
 800988a:	785b      	ldrb	r3, [r3, #1]
 800988c:	3001      	adds	r0, #1
 800988e:	2b30      	cmp	r3, #48	; 0x30
 8009890:	d0f8      	beq.n	8009884 <_strtod_l+0x1e4>
 8009892:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009896:	2a08      	cmp	r2, #8
 8009898:	f200 84e4 	bhi.w	800a264 <_strtod_l+0xbc4>
 800989c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800989e:	9208      	str	r2, [sp, #32]
 80098a0:	4602      	mov	r2, r0
 80098a2:	2000      	movs	r0, #0
 80098a4:	4604      	mov	r4, r0
 80098a6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80098aa:	f100 0101 	add.w	r1, r0, #1
 80098ae:	d012      	beq.n	80098d6 <_strtod_l+0x236>
 80098b0:	440a      	add	r2, r1
 80098b2:	eb00 0c04 	add.w	ip, r0, r4
 80098b6:	4621      	mov	r1, r4
 80098b8:	270a      	movs	r7, #10
 80098ba:	458c      	cmp	ip, r1
 80098bc:	d113      	bne.n	80098e6 <_strtod_l+0x246>
 80098be:	1821      	adds	r1, r4, r0
 80098c0:	2908      	cmp	r1, #8
 80098c2:	f104 0401 	add.w	r4, r4, #1
 80098c6:	4404      	add	r4, r0
 80098c8:	dc19      	bgt.n	80098fe <_strtod_l+0x25e>
 80098ca:	9b07      	ldr	r3, [sp, #28]
 80098cc:	210a      	movs	r1, #10
 80098ce:	fb01 e303 	mla	r3, r1, r3, lr
 80098d2:	9307      	str	r3, [sp, #28]
 80098d4:	2100      	movs	r1, #0
 80098d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80098d8:	1c58      	adds	r0, r3, #1
 80098da:	901b      	str	r0, [sp, #108]	; 0x6c
 80098dc:	785b      	ldrb	r3, [r3, #1]
 80098de:	4608      	mov	r0, r1
 80098e0:	e7c9      	b.n	8009876 <_strtod_l+0x1d6>
 80098e2:	9805      	ldr	r0, [sp, #20]
 80098e4:	e7d3      	b.n	800988e <_strtod_l+0x1ee>
 80098e6:	2908      	cmp	r1, #8
 80098e8:	f101 0101 	add.w	r1, r1, #1
 80098ec:	dc03      	bgt.n	80098f6 <_strtod_l+0x256>
 80098ee:	9b07      	ldr	r3, [sp, #28]
 80098f0:	437b      	muls	r3, r7
 80098f2:	9307      	str	r3, [sp, #28]
 80098f4:	e7e1      	b.n	80098ba <_strtod_l+0x21a>
 80098f6:	2910      	cmp	r1, #16
 80098f8:	bfd8      	it	le
 80098fa:	437d      	mulle	r5, r7
 80098fc:	e7dd      	b.n	80098ba <_strtod_l+0x21a>
 80098fe:	2c10      	cmp	r4, #16
 8009900:	bfdc      	itt	le
 8009902:	210a      	movle	r1, #10
 8009904:	fb01 e505 	mlale	r5, r1, r5, lr
 8009908:	e7e4      	b.n	80098d4 <_strtod_l+0x234>
 800990a:	2301      	movs	r3, #1
 800990c:	9304      	str	r3, [sp, #16]
 800990e:	e781      	b.n	8009814 <_strtod_l+0x174>
 8009910:	f04f 0c01 	mov.w	ip, #1
 8009914:	1cb3      	adds	r3, r6, #2
 8009916:	931b      	str	r3, [sp, #108]	; 0x6c
 8009918:	78b3      	ldrb	r3, [r6, #2]
 800991a:	e78a      	b.n	8009832 <_strtod_l+0x192>
 800991c:	f04f 0c00 	mov.w	ip, #0
 8009920:	e7f8      	b.n	8009914 <_strtod_l+0x274>
 8009922:	bf00      	nop
 8009924:	0800c580 	.word	0x0800c580
 8009928:	7ff00000 	.word	0x7ff00000
 800992c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800992e:	1c5f      	adds	r7, r3, #1
 8009930:	971b      	str	r7, [sp, #108]	; 0x6c
 8009932:	785b      	ldrb	r3, [r3, #1]
 8009934:	2b30      	cmp	r3, #48	; 0x30
 8009936:	d0f9      	beq.n	800992c <_strtod_l+0x28c>
 8009938:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800993c:	2f08      	cmp	r7, #8
 800993e:	f63f af7d 	bhi.w	800983c <_strtod_l+0x19c>
 8009942:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009946:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009948:	930a      	str	r3, [sp, #40]	; 0x28
 800994a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800994c:	1c5f      	adds	r7, r3, #1
 800994e:	971b      	str	r7, [sp, #108]	; 0x6c
 8009950:	785b      	ldrb	r3, [r3, #1]
 8009952:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8009956:	f1b8 0f09 	cmp.w	r8, #9
 800995a:	d937      	bls.n	80099cc <_strtod_l+0x32c>
 800995c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800995e:	1a7f      	subs	r7, r7, r1
 8009960:	2f08      	cmp	r7, #8
 8009962:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009966:	dc37      	bgt.n	80099d8 <_strtod_l+0x338>
 8009968:	45be      	cmp	lr, r7
 800996a:	bfa8      	it	ge
 800996c:	46be      	movge	lr, r7
 800996e:	f1bc 0f00 	cmp.w	ip, #0
 8009972:	d001      	beq.n	8009978 <_strtod_l+0x2d8>
 8009974:	f1ce 0e00 	rsb	lr, lr, #0
 8009978:	2c00      	cmp	r4, #0
 800997a:	d151      	bne.n	8009a20 <_strtod_l+0x380>
 800997c:	2800      	cmp	r0, #0
 800997e:	f47f aece 	bne.w	800971e <_strtod_l+0x7e>
 8009982:	9a06      	ldr	r2, [sp, #24]
 8009984:	2a00      	cmp	r2, #0
 8009986:	f47f aeca 	bne.w	800971e <_strtod_l+0x7e>
 800998a:	9a04      	ldr	r2, [sp, #16]
 800998c:	2a00      	cmp	r2, #0
 800998e:	f47f aee4 	bne.w	800975a <_strtod_l+0xba>
 8009992:	2b4e      	cmp	r3, #78	; 0x4e
 8009994:	d027      	beq.n	80099e6 <_strtod_l+0x346>
 8009996:	dc21      	bgt.n	80099dc <_strtod_l+0x33c>
 8009998:	2b49      	cmp	r3, #73	; 0x49
 800999a:	f47f aede 	bne.w	800975a <_strtod_l+0xba>
 800999e:	49a0      	ldr	r1, [pc, #640]	; (8009c20 <_strtod_l+0x580>)
 80099a0:	a81b      	add	r0, sp, #108	; 0x6c
 80099a2:	f001 fddf 	bl	800b564 <__match>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	f43f aed7 	beq.w	800975a <_strtod_l+0xba>
 80099ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099ae:	499d      	ldr	r1, [pc, #628]	; (8009c24 <_strtod_l+0x584>)
 80099b0:	3b01      	subs	r3, #1
 80099b2:	a81b      	add	r0, sp, #108	; 0x6c
 80099b4:	931b      	str	r3, [sp, #108]	; 0x6c
 80099b6:	f001 fdd5 	bl	800b564 <__match>
 80099ba:	b910      	cbnz	r0, 80099c2 <_strtod_l+0x322>
 80099bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099be:	3301      	adds	r3, #1
 80099c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80099c2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009c38 <_strtod_l+0x598>
 80099c6:	f04f 0a00 	mov.w	sl, #0
 80099ca:	e6a8      	b.n	800971e <_strtod_l+0x7e>
 80099cc:	210a      	movs	r1, #10
 80099ce:	fb01 3e0e 	mla	lr, r1, lr, r3
 80099d2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80099d6:	e7b8      	b.n	800994a <_strtod_l+0x2aa>
 80099d8:	46be      	mov	lr, r7
 80099da:	e7c8      	b.n	800996e <_strtod_l+0x2ce>
 80099dc:	2b69      	cmp	r3, #105	; 0x69
 80099de:	d0de      	beq.n	800999e <_strtod_l+0x2fe>
 80099e0:	2b6e      	cmp	r3, #110	; 0x6e
 80099e2:	f47f aeba 	bne.w	800975a <_strtod_l+0xba>
 80099e6:	4990      	ldr	r1, [pc, #576]	; (8009c28 <_strtod_l+0x588>)
 80099e8:	a81b      	add	r0, sp, #108	; 0x6c
 80099ea:	f001 fdbb 	bl	800b564 <__match>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	f43f aeb3 	beq.w	800975a <_strtod_l+0xba>
 80099f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	2b28      	cmp	r3, #40	; 0x28
 80099fa:	d10e      	bne.n	8009a1a <_strtod_l+0x37a>
 80099fc:	aa1e      	add	r2, sp, #120	; 0x78
 80099fe:	498b      	ldr	r1, [pc, #556]	; (8009c2c <_strtod_l+0x58c>)
 8009a00:	a81b      	add	r0, sp, #108	; 0x6c
 8009a02:	f001 fdc3 	bl	800b58c <__hexnan>
 8009a06:	2805      	cmp	r0, #5
 8009a08:	d107      	bne.n	8009a1a <_strtod_l+0x37a>
 8009a0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a0c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009a10:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009a14:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009a18:	e681      	b.n	800971e <_strtod_l+0x7e>
 8009a1a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009c40 <_strtod_l+0x5a0>
 8009a1e:	e7d2      	b.n	80099c6 <_strtod_l+0x326>
 8009a20:	ebae 0302 	sub.w	r3, lr, r2
 8009a24:	9306      	str	r3, [sp, #24]
 8009a26:	9b05      	ldr	r3, [sp, #20]
 8009a28:	9807      	ldr	r0, [sp, #28]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	bf08      	it	eq
 8009a2e:	4623      	moveq	r3, r4
 8009a30:	2c10      	cmp	r4, #16
 8009a32:	9305      	str	r3, [sp, #20]
 8009a34:	46a0      	mov	r8, r4
 8009a36:	bfa8      	it	ge
 8009a38:	f04f 0810 	movge.w	r8, #16
 8009a3c:	f7f6 fd72 	bl	8000524 <__aeabi_ui2d>
 8009a40:	2c09      	cmp	r4, #9
 8009a42:	4682      	mov	sl, r0
 8009a44:	468b      	mov	fp, r1
 8009a46:	dc13      	bgt.n	8009a70 <_strtod_l+0x3d0>
 8009a48:	9b06      	ldr	r3, [sp, #24]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f43f ae67 	beq.w	800971e <_strtod_l+0x7e>
 8009a50:	9b06      	ldr	r3, [sp, #24]
 8009a52:	dd7a      	ble.n	8009b4a <_strtod_l+0x4aa>
 8009a54:	2b16      	cmp	r3, #22
 8009a56:	dc61      	bgt.n	8009b1c <_strtod_l+0x47c>
 8009a58:	4a75      	ldr	r2, [pc, #468]	; (8009c30 <_strtod_l+0x590>)
 8009a5a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009a5e:	e9de 0100 	ldrd	r0, r1, [lr]
 8009a62:	4652      	mov	r2, sl
 8009a64:	465b      	mov	r3, fp
 8009a66:	f7f6 fdd7 	bl	8000618 <__aeabi_dmul>
 8009a6a:	4682      	mov	sl, r0
 8009a6c:	468b      	mov	fp, r1
 8009a6e:	e656      	b.n	800971e <_strtod_l+0x7e>
 8009a70:	4b6f      	ldr	r3, [pc, #444]	; (8009c30 <_strtod_l+0x590>)
 8009a72:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009a76:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009a7a:	f7f6 fdcd 	bl	8000618 <__aeabi_dmul>
 8009a7e:	4606      	mov	r6, r0
 8009a80:	4628      	mov	r0, r5
 8009a82:	460f      	mov	r7, r1
 8009a84:	f7f6 fd4e 	bl	8000524 <__aeabi_ui2d>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	4639      	mov	r1, r7
 8009a90:	f7f6 fc0c 	bl	80002ac <__adddf3>
 8009a94:	2c0f      	cmp	r4, #15
 8009a96:	4682      	mov	sl, r0
 8009a98:	468b      	mov	fp, r1
 8009a9a:	ddd5      	ble.n	8009a48 <_strtod_l+0x3a8>
 8009a9c:	9b06      	ldr	r3, [sp, #24]
 8009a9e:	eba4 0808 	sub.w	r8, r4, r8
 8009aa2:	4498      	add	r8, r3
 8009aa4:	f1b8 0f00 	cmp.w	r8, #0
 8009aa8:	f340 8096 	ble.w	8009bd8 <_strtod_l+0x538>
 8009aac:	f018 030f 	ands.w	r3, r8, #15
 8009ab0:	d00a      	beq.n	8009ac8 <_strtod_l+0x428>
 8009ab2:	495f      	ldr	r1, [pc, #380]	; (8009c30 <_strtod_l+0x590>)
 8009ab4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ab8:	4652      	mov	r2, sl
 8009aba:	465b      	mov	r3, fp
 8009abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ac0:	f7f6 fdaa 	bl	8000618 <__aeabi_dmul>
 8009ac4:	4682      	mov	sl, r0
 8009ac6:	468b      	mov	fp, r1
 8009ac8:	f038 080f 	bics.w	r8, r8, #15
 8009acc:	d073      	beq.n	8009bb6 <_strtod_l+0x516>
 8009ace:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009ad2:	dd47      	ble.n	8009b64 <_strtod_l+0x4c4>
 8009ad4:	2400      	movs	r4, #0
 8009ad6:	46a0      	mov	r8, r4
 8009ad8:	9407      	str	r4, [sp, #28]
 8009ada:	9405      	str	r4, [sp, #20]
 8009adc:	2322      	movs	r3, #34	; 0x22
 8009ade:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009c38 <_strtod_l+0x598>
 8009ae2:	f8c9 3000 	str.w	r3, [r9]
 8009ae6:	f04f 0a00 	mov.w	sl, #0
 8009aea:	9b07      	ldr	r3, [sp, #28]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f43f ae16 	beq.w	800971e <_strtod_l+0x7e>
 8009af2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009af4:	4648      	mov	r0, r9
 8009af6:	f001 fe46 	bl	800b786 <_Bfree>
 8009afa:	9905      	ldr	r1, [sp, #20]
 8009afc:	4648      	mov	r0, r9
 8009afe:	f001 fe42 	bl	800b786 <_Bfree>
 8009b02:	4641      	mov	r1, r8
 8009b04:	4648      	mov	r0, r9
 8009b06:	f001 fe3e 	bl	800b786 <_Bfree>
 8009b0a:	9907      	ldr	r1, [sp, #28]
 8009b0c:	4648      	mov	r0, r9
 8009b0e:	f001 fe3a 	bl	800b786 <_Bfree>
 8009b12:	4621      	mov	r1, r4
 8009b14:	4648      	mov	r0, r9
 8009b16:	f001 fe36 	bl	800b786 <_Bfree>
 8009b1a:	e600      	b.n	800971e <_strtod_l+0x7e>
 8009b1c:	9a06      	ldr	r2, [sp, #24]
 8009b1e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009b22:	4293      	cmp	r3, r2
 8009b24:	dbba      	blt.n	8009a9c <_strtod_l+0x3fc>
 8009b26:	4d42      	ldr	r5, [pc, #264]	; (8009c30 <_strtod_l+0x590>)
 8009b28:	f1c4 040f 	rsb	r4, r4, #15
 8009b2c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009b30:	4652      	mov	r2, sl
 8009b32:	465b      	mov	r3, fp
 8009b34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b38:	f7f6 fd6e 	bl	8000618 <__aeabi_dmul>
 8009b3c:	9b06      	ldr	r3, [sp, #24]
 8009b3e:	1b1c      	subs	r4, r3, r4
 8009b40:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009b44:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b48:	e78d      	b.n	8009a66 <_strtod_l+0x3c6>
 8009b4a:	f113 0f16 	cmn.w	r3, #22
 8009b4e:	dba5      	blt.n	8009a9c <_strtod_l+0x3fc>
 8009b50:	4a37      	ldr	r2, [pc, #220]	; (8009c30 <_strtod_l+0x590>)
 8009b52:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009b56:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009b5a:	4650      	mov	r0, sl
 8009b5c:	4659      	mov	r1, fp
 8009b5e:	f7f6 fe85 	bl	800086c <__aeabi_ddiv>
 8009b62:	e782      	b.n	8009a6a <_strtod_l+0x3ca>
 8009b64:	2300      	movs	r3, #0
 8009b66:	4e33      	ldr	r6, [pc, #204]	; (8009c34 <_strtod_l+0x594>)
 8009b68:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009b6c:	4650      	mov	r0, sl
 8009b6e:	4659      	mov	r1, fp
 8009b70:	461d      	mov	r5, r3
 8009b72:	f1b8 0f01 	cmp.w	r8, #1
 8009b76:	dc21      	bgt.n	8009bbc <_strtod_l+0x51c>
 8009b78:	b10b      	cbz	r3, 8009b7e <_strtod_l+0x4de>
 8009b7a:	4682      	mov	sl, r0
 8009b7c:	468b      	mov	fp, r1
 8009b7e:	4b2d      	ldr	r3, [pc, #180]	; (8009c34 <_strtod_l+0x594>)
 8009b80:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009b84:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009b88:	4652      	mov	r2, sl
 8009b8a:	465b      	mov	r3, fp
 8009b8c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009b90:	f7f6 fd42 	bl	8000618 <__aeabi_dmul>
 8009b94:	4b28      	ldr	r3, [pc, #160]	; (8009c38 <_strtod_l+0x598>)
 8009b96:	460a      	mov	r2, r1
 8009b98:	400b      	ands	r3, r1
 8009b9a:	4928      	ldr	r1, [pc, #160]	; (8009c3c <_strtod_l+0x59c>)
 8009b9c:	428b      	cmp	r3, r1
 8009b9e:	4682      	mov	sl, r0
 8009ba0:	d898      	bhi.n	8009ad4 <_strtod_l+0x434>
 8009ba2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009ba6:	428b      	cmp	r3, r1
 8009ba8:	bf86      	itte	hi
 8009baa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009c44 <_strtod_l+0x5a4>
 8009bae:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8009bb2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	9304      	str	r3, [sp, #16]
 8009bba:	e077      	b.n	8009cac <_strtod_l+0x60c>
 8009bbc:	f018 0f01 	tst.w	r8, #1
 8009bc0:	d006      	beq.n	8009bd0 <_strtod_l+0x530>
 8009bc2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8009bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bca:	f7f6 fd25 	bl	8000618 <__aeabi_dmul>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	3501      	adds	r5, #1
 8009bd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009bd6:	e7cc      	b.n	8009b72 <_strtod_l+0x4d2>
 8009bd8:	d0ed      	beq.n	8009bb6 <_strtod_l+0x516>
 8009bda:	f1c8 0800 	rsb	r8, r8, #0
 8009bde:	f018 020f 	ands.w	r2, r8, #15
 8009be2:	d00a      	beq.n	8009bfa <_strtod_l+0x55a>
 8009be4:	4b12      	ldr	r3, [pc, #72]	; (8009c30 <_strtod_l+0x590>)
 8009be6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bea:	4650      	mov	r0, sl
 8009bec:	4659      	mov	r1, fp
 8009bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf2:	f7f6 fe3b 	bl	800086c <__aeabi_ddiv>
 8009bf6:	4682      	mov	sl, r0
 8009bf8:	468b      	mov	fp, r1
 8009bfa:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009bfe:	d0da      	beq.n	8009bb6 <_strtod_l+0x516>
 8009c00:	f1b8 0f1f 	cmp.w	r8, #31
 8009c04:	dd20      	ble.n	8009c48 <_strtod_l+0x5a8>
 8009c06:	2400      	movs	r4, #0
 8009c08:	46a0      	mov	r8, r4
 8009c0a:	9407      	str	r4, [sp, #28]
 8009c0c:	9405      	str	r4, [sp, #20]
 8009c0e:	2322      	movs	r3, #34	; 0x22
 8009c10:	f04f 0a00 	mov.w	sl, #0
 8009c14:	f04f 0b00 	mov.w	fp, #0
 8009c18:	f8c9 3000 	str.w	r3, [r9]
 8009c1c:	e765      	b.n	8009aea <_strtod_l+0x44a>
 8009c1e:	bf00      	nop
 8009c20:	0800c551 	.word	0x0800c551
 8009c24:	0800c5d3 	.word	0x0800c5d3
 8009c28:	0800c559 	.word	0x0800c559
 8009c2c:	0800c594 	.word	0x0800c594
 8009c30:	0800c610 	.word	0x0800c610
 8009c34:	0800c5e8 	.word	0x0800c5e8
 8009c38:	7ff00000 	.word	0x7ff00000
 8009c3c:	7ca00000 	.word	0x7ca00000
 8009c40:	fff80000 	.word	0xfff80000
 8009c44:	7fefffff 	.word	0x7fefffff
 8009c48:	f018 0310 	ands.w	r3, r8, #16
 8009c4c:	bf18      	it	ne
 8009c4e:	236a      	movne	r3, #106	; 0x6a
 8009c50:	4da0      	ldr	r5, [pc, #640]	; (8009ed4 <_strtod_l+0x834>)
 8009c52:	9304      	str	r3, [sp, #16]
 8009c54:	4650      	mov	r0, sl
 8009c56:	4659      	mov	r1, fp
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f1b8 0f00 	cmp.w	r8, #0
 8009c5e:	f300 810a 	bgt.w	8009e76 <_strtod_l+0x7d6>
 8009c62:	b10b      	cbz	r3, 8009c68 <_strtod_l+0x5c8>
 8009c64:	4682      	mov	sl, r0
 8009c66:	468b      	mov	fp, r1
 8009c68:	9b04      	ldr	r3, [sp, #16]
 8009c6a:	b1bb      	cbz	r3, 8009c9c <_strtod_l+0x5fc>
 8009c6c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009c70:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	4659      	mov	r1, fp
 8009c78:	dd10      	ble.n	8009c9c <_strtod_l+0x5fc>
 8009c7a:	2b1f      	cmp	r3, #31
 8009c7c:	f340 8107 	ble.w	8009e8e <_strtod_l+0x7ee>
 8009c80:	2b34      	cmp	r3, #52	; 0x34
 8009c82:	bfde      	ittt	le
 8009c84:	3b20      	suble	r3, #32
 8009c86:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8009c8a:	fa02 f303 	lslle.w	r3, r2, r3
 8009c8e:	f04f 0a00 	mov.w	sl, #0
 8009c92:	bfcc      	ite	gt
 8009c94:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009c98:	ea03 0b01 	andle.w	fp, r3, r1
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	4650      	mov	r0, sl
 8009ca2:	4659      	mov	r1, fp
 8009ca4:	f7f6 ff20 	bl	8000ae8 <__aeabi_dcmpeq>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	d1ac      	bne.n	8009c06 <_strtod_l+0x566>
 8009cac:	9b07      	ldr	r3, [sp, #28]
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	9a05      	ldr	r2, [sp, #20]
 8009cb2:	9908      	ldr	r1, [sp, #32]
 8009cb4:	4623      	mov	r3, r4
 8009cb6:	4648      	mov	r0, r9
 8009cb8:	f001 fdb7 	bl	800b82a <__s2b>
 8009cbc:	9007      	str	r0, [sp, #28]
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	f43f af08 	beq.w	8009ad4 <_strtod_l+0x434>
 8009cc4:	9a06      	ldr	r2, [sp, #24]
 8009cc6:	9b06      	ldr	r3, [sp, #24]
 8009cc8:	2a00      	cmp	r2, #0
 8009cca:	f1c3 0300 	rsb	r3, r3, #0
 8009cce:	bfa8      	it	ge
 8009cd0:	2300      	movge	r3, #0
 8009cd2:	930e      	str	r3, [sp, #56]	; 0x38
 8009cd4:	2400      	movs	r4, #0
 8009cd6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009cda:	9316      	str	r3, [sp, #88]	; 0x58
 8009cdc:	46a0      	mov	r8, r4
 8009cde:	9b07      	ldr	r3, [sp, #28]
 8009ce0:	4648      	mov	r0, r9
 8009ce2:	6859      	ldr	r1, [r3, #4]
 8009ce4:	f001 fd1b 	bl	800b71e <_Balloc>
 8009ce8:	9005      	str	r0, [sp, #20]
 8009cea:	2800      	cmp	r0, #0
 8009cec:	f43f aef6 	beq.w	8009adc <_strtod_l+0x43c>
 8009cf0:	9b07      	ldr	r3, [sp, #28]
 8009cf2:	691a      	ldr	r2, [r3, #16]
 8009cf4:	3202      	adds	r2, #2
 8009cf6:	f103 010c 	add.w	r1, r3, #12
 8009cfa:	0092      	lsls	r2, r2, #2
 8009cfc:	300c      	adds	r0, #12
 8009cfe:	f001 fd03 	bl	800b708 <memcpy>
 8009d02:	aa1e      	add	r2, sp, #120	; 0x78
 8009d04:	a91d      	add	r1, sp, #116	; 0x74
 8009d06:	ec4b ab10 	vmov	d0, sl, fp
 8009d0a:	4648      	mov	r0, r9
 8009d0c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009d10:	f002 f846 	bl	800bda0 <__d2b>
 8009d14:	901c      	str	r0, [sp, #112]	; 0x70
 8009d16:	2800      	cmp	r0, #0
 8009d18:	f43f aee0 	beq.w	8009adc <_strtod_l+0x43c>
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	4648      	mov	r0, r9
 8009d20:	f001 fe0f 	bl	800b942 <__i2b>
 8009d24:	4680      	mov	r8, r0
 8009d26:	2800      	cmp	r0, #0
 8009d28:	f43f aed8 	beq.w	8009adc <_strtod_l+0x43c>
 8009d2c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009d2e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009d30:	2e00      	cmp	r6, #0
 8009d32:	bfab      	itete	ge
 8009d34:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009d36:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009d38:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009d3a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009d3c:	bfac      	ite	ge
 8009d3e:	18f7      	addge	r7, r6, r3
 8009d40:	1b9d      	sublt	r5, r3, r6
 8009d42:	9b04      	ldr	r3, [sp, #16]
 8009d44:	1af6      	subs	r6, r6, r3
 8009d46:	4416      	add	r6, r2
 8009d48:	4b63      	ldr	r3, [pc, #396]	; (8009ed8 <_strtod_l+0x838>)
 8009d4a:	3e01      	subs	r6, #1
 8009d4c:	429e      	cmp	r6, r3
 8009d4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009d52:	f280 80af 	bge.w	8009eb4 <_strtod_l+0x814>
 8009d56:	1b9b      	subs	r3, r3, r6
 8009d58:	2b1f      	cmp	r3, #31
 8009d5a:	eba2 0203 	sub.w	r2, r2, r3
 8009d5e:	f04f 0101 	mov.w	r1, #1
 8009d62:	f300 809b 	bgt.w	8009e9c <_strtod_l+0x7fc>
 8009d66:	fa01 f303 	lsl.w	r3, r1, r3
 8009d6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d70:	18be      	adds	r6, r7, r2
 8009d72:	9b04      	ldr	r3, [sp, #16]
 8009d74:	42b7      	cmp	r7, r6
 8009d76:	4415      	add	r5, r2
 8009d78:	441d      	add	r5, r3
 8009d7a:	463b      	mov	r3, r7
 8009d7c:	bfa8      	it	ge
 8009d7e:	4633      	movge	r3, r6
 8009d80:	42ab      	cmp	r3, r5
 8009d82:	bfa8      	it	ge
 8009d84:	462b      	movge	r3, r5
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	bfc2      	ittt	gt
 8009d8a:	1af6      	subgt	r6, r6, r3
 8009d8c:	1aed      	subgt	r5, r5, r3
 8009d8e:	1aff      	subgt	r7, r7, r3
 8009d90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d92:	b1bb      	cbz	r3, 8009dc4 <_strtod_l+0x724>
 8009d94:	4641      	mov	r1, r8
 8009d96:	461a      	mov	r2, r3
 8009d98:	4648      	mov	r0, r9
 8009d9a:	f001 fe71 	bl	800ba80 <__pow5mult>
 8009d9e:	4680      	mov	r8, r0
 8009da0:	2800      	cmp	r0, #0
 8009da2:	f43f ae9b 	beq.w	8009adc <_strtod_l+0x43c>
 8009da6:	4601      	mov	r1, r0
 8009da8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009daa:	4648      	mov	r0, r9
 8009dac:	f001 fdd2 	bl	800b954 <__multiply>
 8009db0:	900c      	str	r0, [sp, #48]	; 0x30
 8009db2:	2800      	cmp	r0, #0
 8009db4:	f43f ae92 	beq.w	8009adc <_strtod_l+0x43c>
 8009db8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009dba:	4648      	mov	r0, r9
 8009dbc:	f001 fce3 	bl	800b786 <_Bfree>
 8009dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dc2:	931c      	str	r3, [sp, #112]	; 0x70
 8009dc4:	2e00      	cmp	r6, #0
 8009dc6:	dc7a      	bgt.n	8009ebe <_strtod_l+0x81e>
 8009dc8:	9b06      	ldr	r3, [sp, #24]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	dd08      	ble.n	8009de0 <_strtod_l+0x740>
 8009dce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009dd0:	9905      	ldr	r1, [sp, #20]
 8009dd2:	4648      	mov	r0, r9
 8009dd4:	f001 fe54 	bl	800ba80 <__pow5mult>
 8009dd8:	9005      	str	r0, [sp, #20]
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	f43f ae7e 	beq.w	8009adc <_strtod_l+0x43c>
 8009de0:	2d00      	cmp	r5, #0
 8009de2:	dd08      	ble.n	8009df6 <_strtod_l+0x756>
 8009de4:	462a      	mov	r2, r5
 8009de6:	9905      	ldr	r1, [sp, #20]
 8009de8:	4648      	mov	r0, r9
 8009dea:	f001 fe97 	bl	800bb1c <__lshift>
 8009dee:	9005      	str	r0, [sp, #20]
 8009df0:	2800      	cmp	r0, #0
 8009df2:	f43f ae73 	beq.w	8009adc <_strtod_l+0x43c>
 8009df6:	2f00      	cmp	r7, #0
 8009df8:	dd08      	ble.n	8009e0c <_strtod_l+0x76c>
 8009dfa:	4641      	mov	r1, r8
 8009dfc:	463a      	mov	r2, r7
 8009dfe:	4648      	mov	r0, r9
 8009e00:	f001 fe8c 	bl	800bb1c <__lshift>
 8009e04:	4680      	mov	r8, r0
 8009e06:	2800      	cmp	r0, #0
 8009e08:	f43f ae68 	beq.w	8009adc <_strtod_l+0x43c>
 8009e0c:	9a05      	ldr	r2, [sp, #20]
 8009e0e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009e10:	4648      	mov	r0, r9
 8009e12:	f001 fef1 	bl	800bbf8 <__mdiff>
 8009e16:	4604      	mov	r4, r0
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	f43f ae5f 	beq.w	8009adc <_strtod_l+0x43c>
 8009e1e:	68c3      	ldr	r3, [r0, #12]
 8009e20:	930c      	str	r3, [sp, #48]	; 0x30
 8009e22:	2300      	movs	r3, #0
 8009e24:	60c3      	str	r3, [r0, #12]
 8009e26:	4641      	mov	r1, r8
 8009e28:	f001 fecc 	bl	800bbc4 <__mcmp>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	da55      	bge.n	8009edc <_strtod_l+0x83c>
 8009e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e32:	b9e3      	cbnz	r3, 8009e6e <_strtod_l+0x7ce>
 8009e34:	f1ba 0f00 	cmp.w	sl, #0
 8009e38:	d119      	bne.n	8009e6e <_strtod_l+0x7ce>
 8009e3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e3e:	b9b3      	cbnz	r3, 8009e6e <_strtod_l+0x7ce>
 8009e40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e44:	0d1b      	lsrs	r3, r3, #20
 8009e46:	051b      	lsls	r3, r3, #20
 8009e48:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009e4c:	d90f      	bls.n	8009e6e <_strtod_l+0x7ce>
 8009e4e:	6963      	ldr	r3, [r4, #20]
 8009e50:	b913      	cbnz	r3, 8009e58 <_strtod_l+0x7b8>
 8009e52:	6923      	ldr	r3, [r4, #16]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	dd0a      	ble.n	8009e6e <_strtod_l+0x7ce>
 8009e58:	4621      	mov	r1, r4
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	4648      	mov	r0, r9
 8009e5e:	f001 fe5d 	bl	800bb1c <__lshift>
 8009e62:	4641      	mov	r1, r8
 8009e64:	4604      	mov	r4, r0
 8009e66:	f001 fead 	bl	800bbc4 <__mcmp>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	dc67      	bgt.n	8009f3e <_strtod_l+0x89e>
 8009e6e:	9b04      	ldr	r3, [sp, #16]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d171      	bne.n	8009f58 <_strtod_l+0x8b8>
 8009e74:	e63d      	b.n	8009af2 <_strtod_l+0x452>
 8009e76:	f018 0f01 	tst.w	r8, #1
 8009e7a:	d004      	beq.n	8009e86 <_strtod_l+0x7e6>
 8009e7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e80:	f7f6 fbca 	bl	8000618 <__aeabi_dmul>
 8009e84:	2301      	movs	r3, #1
 8009e86:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009e8a:	3508      	adds	r5, #8
 8009e8c:	e6e5      	b.n	8009c5a <_strtod_l+0x5ba>
 8009e8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e92:	fa02 f303 	lsl.w	r3, r2, r3
 8009e96:	ea03 0a0a 	and.w	sl, r3, sl
 8009e9a:	e6ff      	b.n	8009c9c <_strtod_l+0x5fc>
 8009e9c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009ea0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009ea4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009ea8:	36e2      	adds	r6, #226	; 0xe2
 8009eaa:	fa01 f306 	lsl.w	r3, r1, r6
 8009eae:	930a      	str	r3, [sp, #40]	; 0x28
 8009eb0:	910f      	str	r1, [sp, #60]	; 0x3c
 8009eb2:	e75d      	b.n	8009d70 <_strtod_l+0x6d0>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8009eb8:	2301      	movs	r3, #1
 8009eba:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ebc:	e758      	b.n	8009d70 <_strtod_l+0x6d0>
 8009ebe:	4632      	mov	r2, r6
 8009ec0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009ec2:	4648      	mov	r0, r9
 8009ec4:	f001 fe2a 	bl	800bb1c <__lshift>
 8009ec8:	901c      	str	r0, [sp, #112]	; 0x70
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	f47f af7c 	bne.w	8009dc8 <_strtod_l+0x728>
 8009ed0:	e604      	b.n	8009adc <_strtod_l+0x43c>
 8009ed2:	bf00      	nop
 8009ed4:	0800c5a8 	.word	0x0800c5a8
 8009ed8:	fffffc02 	.word	0xfffffc02
 8009edc:	465d      	mov	r5, fp
 8009ede:	f040 8086 	bne.w	8009fee <_strtod_l+0x94e>
 8009ee2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ee4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ee8:	b32a      	cbz	r2, 8009f36 <_strtod_l+0x896>
 8009eea:	4aaf      	ldr	r2, [pc, #700]	; (800a1a8 <_strtod_l+0xb08>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d153      	bne.n	8009f98 <_strtod_l+0x8f8>
 8009ef0:	9b04      	ldr	r3, [sp, #16]
 8009ef2:	4650      	mov	r0, sl
 8009ef4:	b1d3      	cbz	r3, 8009f2c <_strtod_l+0x88c>
 8009ef6:	4aad      	ldr	r2, [pc, #692]	; (800a1ac <_strtod_l+0xb0c>)
 8009ef8:	402a      	ands	r2, r5
 8009efa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009efe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009f02:	d816      	bhi.n	8009f32 <_strtod_l+0x892>
 8009f04:	0d12      	lsrs	r2, r2, #20
 8009f06:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f0e:	4298      	cmp	r0, r3
 8009f10:	d142      	bne.n	8009f98 <_strtod_l+0x8f8>
 8009f12:	4ba7      	ldr	r3, [pc, #668]	; (800a1b0 <_strtod_l+0xb10>)
 8009f14:	429d      	cmp	r5, r3
 8009f16:	d102      	bne.n	8009f1e <_strtod_l+0x87e>
 8009f18:	3001      	adds	r0, #1
 8009f1a:	f43f addf 	beq.w	8009adc <_strtod_l+0x43c>
 8009f1e:	4ba3      	ldr	r3, [pc, #652]	; (800a1ac <_strtod_l+0xb0c>)
 8009f20:	402b      	ands	r3, r5
 8009f22:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009f26:	f04f 0a00 	mov.w	sl, #0
 8009f2a:	e7a0      	b.n	8009e6e <_strtod_l+0x7ce>
 8009f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f30:	e7ed      	b.n	8009f0e <_strtod_l+0x86e>
 8009f32:	460b      	mov	r3, r1
 8009f34:	e7eb      	b.n	8009f0e <_strtod_l+0x86e>
 8009f36:	bb7b      	cbnz	r3, 8009f98 <_strtod_l+0x8f8>
 8009f38:	f1ba 0f00 	cmp.w	sl, #0
 8009f3c:	d12c      	bne.n	8009f98 <_strtod_l+0x8f8>
 8009f3e:	9904      	ldr	r1, [sp, #16]
 8009f40:	4a9a      	ldr	r2, [pc, #616]	; (800a1ac <_strtod_l+0xb0c>)
 8009f42:	465b      	mov	r3, fp
 8009f44:	b1f1      	cbz	r1, 8009f84 <_strtod_l+0x8e4>
 8009f46:	ea02 010b 	and.w	r1, r2, fp
 8009f4a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009f4e:	dc19      	bgt.n	8009f84 <_strtod_l+0x8e4>
 8009f50:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009f54:	f77f ae5b 	ble.w	8009c0e <_strtod_l+0x56e>
 8009f58:	4a96      	ldr	r2, [pc, #600]	; (800a1b4 <_strtod_l+0xb14>)
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009f60:	4650      	mov	r0, sl
 8009f62:	4659      	mov	r1, fp
 8009f64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009f68:	f7f6 fb56 	bl	8000618 <__aeabi_dmul>
 8009f6c:	4682      	mov	sl, r0
 8009f6e:	468b      	mov	fp, r1
 8009f70:	2900      	cmp	r1, #0
 8009f72:	f47f adbe 	bne.w	8009af2 <_strtod_l+0x452>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	f47f adbb 	bne.w	8009af2 <_strtod_l+0x452>
 8009f7c:	2322      	movs	r3, #34	; 0x22
 8009f7e:	f8c9 3000 	str.w	r3, [r9]
 8009f82:	e5b6      	b.n	8009af2 <_strtod_l+0x452>
 8009f84:	4013      	ands	r3, r2
 8009f86:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009f8a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009f8e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009f92:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009f96:	e76a      	b.n	8009e6e <_strtod_l+0x7ce>
 8009f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f9a:	b193      	cbz	r3, 8009fc2 <_strtod_l+0x922>
 8009f9c:	422b      	tst	r3, r5
 8009f9e:	f43f af66 	beq.w	8009e6e <_strtod_l+0x7ce>
 8009fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fa4:	9a04      	ldr	r2, [sp, #16]
 8009fa6:	4650      	mov	r0, sl
 8009fa8:	4659      	mov	r1, fp
 8009faa:	b173      	cbz	r3, 8009fca <_strtod_l+0x92a>
 8009fac:	f7ff fb59 	bl	8009662 <sulp>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009fb8:	f7f6 f978 	bl	80002ac <__adddf3>
 8009fbc:	4682      	mov	sl, r0
 8009fbe:	468b      	mov	fp, r1
 8009fc0:	e755      	b.n	8009e6e <_strtod_l+0x7ce>
 8009fc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fc4:	ea13 0f0a 	tst.w	r3, sl
 8009fc8:	e7e9      	b.n	8009f9e <_strtod_l+0x8fe>
 8009fca:	f7ff fb4a 	bl	8009662 <sulp>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009fd6:	f7f6 f967 	bl	80002a8 <__aeabi_dsub>
 8009fda:	2200      	movs	r2, #0
 8009fdc:	2300      	movs	r3, #0
 8009fde:	4682      	mov	sl, r0
 8009fe0:	468b      	mov	fp, r1
 8009fe2:	f7f6 fd81 	bl	8000ae8 <__aeabi_dcmpeq>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	f47f ae11 	bne.w	8009c0e <_strtod_l+0x56e>
 8009fec:	e73f      	b.n	8009e6e <_strtod_l+0x7ce>
 8009fee:	4641      	mov	r1, r8
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f001 ff24 	bl	800be3e <__ratio>
 8009ff6:	ec57 6b10 	vmov	r6, r7, d0
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a000:	ee10 0a10 	vmov	r0, s0
 800a004:	4639      	mov	r1, r7
 800a006:	f7f6 fd83 	bl	8000b10 <__aeabi_dcmple>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d077      	beq.n	800a0fe <_strtod_l+0xa5e>
 800a00e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a010:	2b00      	cmp	r3, #0
 800a012:	d04a      	beq.n	800a0aa <_strtod_l+0xa0a>
 800a014:	4b68      	ldr	r3, [pc, #416]	; (800a1b8 <_strtod_l+0xb18>)
 800a016:	2200      	movs	r2, #0
 800a018:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a01c:	4f66      	ldr	r7, [pc, #408]	; (800a1b8 <_strtod_l+0xb18>)
 800a01e:	2600      	movs	r6, #0
 800a020:	4b62      	ldr	r3, [pc, #392]	; (800a1ac <_strtod_l+0xb0c>)
 800a022:	402b      	ands	r3, r5
 800a024:	930f      	str	r3, [sp, #60]	; 0x3c
 800a026:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a028:	4b64      	ldr	r3, [pc, #400]	; (800a1bc <_strtod_l+0xb1c>)
 800a02a:	429a      	cmp	r2, r3
 800a02c:	f040 80ce 	bne.w	800a1cc <_strtod_l+0xb2c>
 800a030:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a034:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a038:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800a03c:	ec4b ab10 	vmov	d0, sl, fp
 800a040:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a044:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a048:	f001 fe34 	bl	800bcb4 <__ulp>
 800a04c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a050:	ec53 2b10 	vmov	r2, r3, d0
 800a054:	f7f6 fae0 	bl	8000618 <__aeabi_dmul>
 800a058:	4652      	mov	r2, sl
 800a05a:	465b      	mov	r3, fp
 800a05c:	f7f6 f926 	bl	80002ac <__adddf3>
 800a060:	460b      	mov	r3, r1
 800a062:	4952      	ldr	r1, [pc, #328]	; (800a1ac <_strtod_l+0xb0c>)
 800a064:	4a56      	ldr	r2, [pc, #344]	; (800a1c0 <_strtod_l+0xb20>)
 800a066:	4019      	ands	r1, r3
 800a068:	4291      	cmp	r1, r2
 800a06a:	4682      	mov	sl, r0
 800a06c:	d95b      	bls.n	800a126 <_strtod_l+0xa86>
 800a06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a070:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a074:	4293      	cmp	r3, r2
 800a076:	d103      	bne.n	800a080 <_strtod_l+0x9e0>
 800a078:	9b08      	ldr	r3, [sp, #32]
 800a07a:	3301      	adds	r3, #1
 800a07c:	f43f ad2e 	beq.w	8009adc <_strtod_l+0x43c>
 800a080:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800a1b0 <_strtod_l+0xb10>
 800a084:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a088:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a08a:	4648      	mov	r0, r9
 800a08c:	f001 fb7b 	bl	800b786 <_Bfree>
 800a090:	9905      	ldr	r1, [sp, #20]
 800a092:	4648      	mov	r0, r9
 800a094:	f001 fb77 	bl	800b786 <_Bfree>
 800a098:	4641      	mov	r1, r8
 800a09a:	4648      	mov	r0, r9
 800a09c:	f001 fb73 	bl	800b786 <_Bfree>
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	4648      	mov	r0, r9
 800a0a4:	f001 fb6f 	bl	800b786 <_Bfree>
 800a0a8:	e619      	b.n	8009cde <_strtod_l+0x63e>
 800a0aa:	f1ba 0f00 	cmp.w	sl, #0
 800a0ae:	d11a      	bne.n	800a0e6 <_strtod_l+0xa46>
 800a0b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0b4:	b9eb      	cbnz	r3, 800a0f2 <_strtod_l+0xa52>
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	4b3f      	ldr	r3, [pc, #252]	; (800a1b8 <_strtod_l+0xb18>)
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	4639      	mov	r1, r7
 800a0be:	f7f6 fd1d 	bl	8000afc <__aeabi_dcmplt>
 800a0c2:	b9c8      	cbnz	r0, 800a0f8 <_strtod_l+0xa58>
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	4639      	mov	r1, r7
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	4b3e      	ldr	r3, [pc, #248]	; (800a1c4 <_strtod_l+0xb24>)
 800a0cc:	f7f6 faa4 	bl	8000618 <__aeabi_dmul>
 800a0d0:	4606      	mov	r6, r0
 800a0d2:	460f      	mov	r7, r1
 800a0d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a0d8:	9618      	str	r6, [sp, #96]	; 0x60
 800a0da:	9319      	str	r3, [sp, #100]	; 0x64
 800a0dc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a0e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a0e4:	e79c      	b.n	800a020 <_strtod_l+0x980>
 800a0e6:	f1ba 0f01 	cmp.w	sl, #1
 800a0ea:	d102      	bne.n	800a0f2 <_strtod_l+0xa52>
 800a0ec:	2d00      	cmp	r5, #0
 800a0ee:	f43f ad8e 	beq.w	8009c0e <_strtod_l+0x56e>
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	4b34      	ldr	r3, [pc, #208]	; (800a1c8 <_strtod_l+0xb28>)
 800a0f6:	e78f      	b.n	800a018 <_strtod_l+0x978>
 800a0f8:	2600      	movs	r6, #0
 800a0fa:	4f32      	ldr	r7, [pc, #200]	; (800a1c4 <_strtod_l+0xb24>)
 800a0fc:	e7ea      	b.n	800a0d4 <_strtod_l+0xa34>
 800a0fe:	4b31      	ldr	r3, [pc, #196]	; (800a1c4 <_strtod_l+0xb24>)
 800a100:	4630      	mov	r0, r6
 800a102:	4639      	mov	r1, r7
 800a104:	2200      	movs	r2, #0
 800a106:	f7f6 fa87 	bl	8000618 <__aeabi_dmul>
 800a10a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a10c:	4606      	mov	r6, r0
 800a10e:	460f      	mov	r7, r1
 800a110:	b933      	cbnz	r3, 800a120 <_strtod_l+0xa80>
 800a112:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a116:	9010      	str	r0, [sp, #64]	; 0x40
 800a118:	9311      	str	r3, [sp, #68]	; 0x44
 800a11a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a11e:	e7df      	b.n	800a0e0 <_strtod_l+0xa40>
 800a120:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a124:	e7f9      	b.n	800a11a <_strtod_l+0xa7a>
 800a126:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a12a:	9b04      	ldr	r3, [sp, #16]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1ab      	bne.n	800a088 <_strtod_l+0x9e8>
 800a130:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a134:	0d1b      	lsrs	r3, r3, #20
 800a136:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a138:	051b      	lsls	r3, r3, #20
 800a13a:	429a      	cmp	r2, r3
 800a13c:	465d      	mov	r5, fp
 800a13e:	d1a3      	bne.n	800a088 <_strtod_l+0x9e8>
 800a140:	4639      	mov	r1, r7
 800a142:	4630      	mov	r0, r6
 800a144:	f7f6 fd18 	bl	8000b78 <__aeabi_d2iz>
 800a148:	f7f6 f9fc 	bl	8000544 <__aeabi_i2d>
 800a14c:	460b      	mov	r3, r1
 800a14e:	4602      	mov	r2, r0
 800a150:	4639      	mov	r1, r7
 800a152:	4630      	mov	r0, r6
 800a154:	f7f6 f8a8 	bl	80002a8 <__aeabi_dsub>
 800a158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a15a:	4606      	mov	r6, r0
 800a15c:	460f      	mov	r7, r1
 800a15e:	b933      	cbnz	r3, 800a16e <_strtod_l+0xace>
 800a160:	f1ba 0f00 	cmp.w	sl, #0
 800a164:	d103      	bne.n	800a16e <_strtod_l+0xace>
 800a166:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800a16a:	2d00      	cmp	r5, #0
 800a16c:	d06d      	beq.n	800a24a <_strtod_l+0xbaa>
 800a16e:	a30a      	add	r3, pc, #40	; (adr r3, 800a198 <_strtod_l+0xaf8>)
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	4630      	mov	r0, r6
 800a176:	4639      	mov	r1, r7
 800a178:	f7f6 fcc0 	bl	8000afc <__aeabi_dcmplt>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	f47f acb8 	bne.w	8009af2 <_strtod_l+0x452>
 800a182:	a307      	add	r3, pc, #28	; (adr r3, 800a1a0 <_strtod_l+0xb00>)
 800a184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a188:	4630      	mov	r0, r6
 800a18a:	4639      	mov	r1, r7
 800a18c:	f7f6 fcd4 	bl	8000b38 <__aeabi_dcmpgt>
 800a190:	2800      	cmp	r0, #0
 800a192:	f43f af79 	beq.w	800a088 <_strtod_l+0x9e8>
 800a196:	e4ac      	b.n	8009af2 <_strtod_l+0x452>
 800a198:	94a03595 	.word	0x94a03595
 800a19c:	3fdfffff 	.word	0x3fdfffff
 800a1a0:	35afe535 	.word	0x35afe535
 800a1a4:	3fe00000 	.word	0x3fe00000
 800a1a8:	000fffff 	.word	0x000fffff
 800a1ac:	7ff00000 	.word	0x7ff00000
 800a1b0:	7fefffff 	.word	0x7fefffff
 800a1b4:	39500000 	.word	0x39500000
 800a1b8:	3ff00000 	.word	0x3ff00000
 800a1bc:	7fe00000 	.word	0x7fe00000
 800a1c0:	7c9fffff 	.word	0x7c9fffff
 800a1c4:	3fe00000 	.word	0x3fe00000
 800a1c8:	bff00000 	.word	0xbff00000
 800a1cc:	9b04      	ldr	r3, [sp, #16]
 800a1ce:	b333      	cbz	r3, 800a21e <_strtod_l+0xb7e>
 800a1d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1d2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a1d6:	d822      	bhi.n	800a21e <_strtod_l+0xb7e>
 800a1d8:	a327      	add	r3, pc, #156	; (adr r3, 800a278 <_strtod_l+0xbd8>)
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	4630      	mov	r0, r6
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	f7f6 fc95 	bl	8000b10 <__aeabi_dcmple>
 800a1e6:	b1a0      	cbz	r0, 800a212 <_strtod_l+0xb72>
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f7f6 fcec 	bl	8000bc8 <__aeabi_d2uiz>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	bf08      	it	eq
 800a1f4:	2001      	moveq	r0, #1
 800a1f6:	f7f6 f995 	bl	8000524 <__aeabi_ui2d>
 800a1fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	460f      	mov	r7, r1
 800a200:	bb03      	cbnz	r3, 800a244 <_strtod_l+0xba4>
 800a202:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a206:	9012      	str	r0, [sp, #72]	; 0x48
 800a208:	9313      	str	r3, [sp, #76]	; 0x4c
 800a20a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a20e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a214:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a216:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a21a:	1a9b      	subs	r3, r3, r2
 800a21c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a21e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a222:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800a226:	f001 fd45 	bl	800bcb4 <__ulp>
 800a22a:	4650      	mov	r0, sl
 800a22c:	ec53 2b10 	vmov	r2, r3, d0
 800a230:	4659      	mov	r1, fp
 800a232:	f7f6 f9f1 	bl	8000618 <__aeabi_dmul>
 800a236:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a23a:	f7f6 f837 	bl	80002ac <__adddf3>
 800a23e:	4682      	mov	sl, r0
 800a240:	468b      	mov	fp, r1
 800a242:	e772      	b.n	800a12a <_strtod_l+0xa8a>
 800a244:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800a248:	e7df      	b.n	800a20a <_strtod_l+0xb6a>
 800a24a:	a30d      	add	r3, pc, #52	; (adr r3, 800a280 <_strtod_l+0xbe0>)
 800a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a250:	f7f6 fc54 	bl	8000afc <__aeabi_dcmplt>
 800a254:	e79c      	b.n	800a190 <_strtod_l+0xaf0>
 800a256:	2300      	movs	r3, #0
 800a258:	930d      	str	r3, [sp, #52]	; 0x34
 800a25a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a25c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a25e:	6013      	str	r3, [r2, #0]
 800a260:	f7ff ba61 	b.w	8009726 <_strtod_l+0x86>
 800a264:	2b65      	cmp	r3, #101	; 0x65
 800a266:	f04f 0200 	mov.w	r2, #0
 800a26a:	f43f ab4e 	beq.w	800990a <_strtod_l+0x26a>
 800a26e:	2101      	movs	r1, #1
 800a270:	4614      	mov	r4, r2
 800a272:	9104      	str	r1, [sp, #16]
 800a274:	f7ff bacb 	b.w	800980e <_strtod_l+0x16e>
 800a278:	ffc00000 	.word	0xffc00000
 800a27c:	41dfffff 	.word	0x41dfffff
 800a280:	94a03595 	.word	0x94a03595
 800a284:	3fcfffff 	.word	0x3fcfffff

0800a288 <strtod>:
 800a288:	4b07      	ldr	r3, [pc, #28]	; (800a2a8 <strtod+0x20>)
 800a28a:	4a08      	ldr	r2, [pc, #32]	; (800a2ac <strtod+0x24>)
 800a28c:	b410      	push	{r4}
 800a28e:	681c      	ldr	r4, [r3, #0]
 800a290:	6a23      	ldr	r3, [r4, #32]
 800a292:	2b00      	cmp	r3, #0
 800a294:	bf08      	it	eq
 800a296:	4613      	moveq	r3, r2
 800a298:	460a      	mov	r2, r1
 800a29a:	4601      	mov	r1, r0
 800a29c:	4620      	mov	r0, r4
 800a29e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2a2:	f7ff b9fd 	b.w	80096a0 <_strtod_l>
 800a2a6:	bf00      	nop
 800a2a8:	2000000c 	.word	0x2000000c
 800a2ac:	20000070 	.word	0x20000070

0800a2b0 <_strtol_l.isra.0>:
 800a2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b4:	4680      	mov	r8, r0
 800a2b6:	4689      	mov	r9, r1
 800a2b8:	4692      	mov	sl, r2
 800a2ba:	461e      	mov	r6, r3
 800a2bc:	460f      	mov	r7, r1
 800a2be:	463d      	mov	r5, r7
 800a2c0:	9808      	ldr	r0, [sp, #32]
 800a2c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2c6:	f001 f9f1 	bl	800b6ac <__locale_ctype_ptr_l>
 800a2ca:	4420      	add	r0, r4
 800a2cc:	7843      	ldrb	r3, [r0, #1]
 800a2ce:	f013 0308 	ands.w	r3, r3, #8
 800a2d2:	d132      	bne.n	800a33a <_strtol_l.isra.0+0x8a>
 800a2d4:	2c2d      	cmp	r4, #45	; 0x2d
 800a2d6:	d132      	bne.n	800a33e <_strtol_l.isra.0+0x8e>
 800a2d8:	787c      	ldrb	r4, [r7, #1]
 800a2da:	1cbd      	adds	r5, r7, #2
 800a2dc:	2201      	movs	r2, #1
 800a2de:	2e00      	cmp	r6, #0
 800a2e0:	d05d      	beq.n	800a39e <_strtol_l.isra.0+0xee>
 800a2e2:	2e10      	cmp	r6, #16
 800a2e4:	d109      	bne.n	800a2fa <_strtol_l.isra.0+0x4a>
 800a2e6:	2c30      	cmp	r4, #48	; 0x30
 800a2e8:	d107      	bne.n	800a2fa <_strtol_l.isra.0+0x4a>
 800a2ea:	782b      	ldrb	r3, [r5, #0]
 800a2ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a2f0:	2b58      	cmp	r3, #88	; 0x58
 800a2f2:	d14f      	bne.n	800a394 <_strtol_l.isra.0+0xe4>
 800a2f4:	786c      	ldrb	r4, [r5, #1]
 800a2f6:	2610      	movs	r6, #16
 800a2f8:	3502      	adds	r5, #2
 800a2fa:	2a00      	cmp	r2, #0
 800a2fc:	bf14      	ite	ne
 800a2fe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a302:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a306:	2700      	movs	r7, #0
 800a308:	fbb1 fcf6 	udiv	ip, r1, r6
 800a30c:	4638      	mov	r0, r7
 800a30e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a312:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a316:	2b09      	cmp	r3, #9
 800a318:	d817      	bhi.n	800a34a <_strtol_l.isra.0+0x9a>
 800a31a:	461c      	mov	r4, r3
 800a31c:	42a6      	cmp	r6, r4
 800a31e:	dd23      	ble.n	800a368 <_strtol_l.isra.0+0xb8>
 800a320:	1c7b      	adds	r3, r7, #1
 800a322:	d007      	beq.n	800a334 <_strtol_l.isra.0+0x84>
 800a324:	4584      	cmp	ip, r0
 800a326:	d31c      	bcc.n	800a362 <_strtol_l.isra.0+0xb2>
 800a328:	d101      	bne.n	800a32e <_strtol_l.isra.0+0x7e>
 800a32a:	45a6      	cmp	lr, r4
 800a32c:	db19      	blt.n	800a362 <_strtol_l.isra.0+0xb2>
 800a32e:	fb00 4006 	mla	r0, r0, r6, r4
 800a332:	2701      	movs	r7, #1
 800a334:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a338:	e7eb      	b.n	800a312 <_strtol_l.isra.0+0x62>
 800a33a:	462f      	mov	r7, r5
 800a33c:	e7bf      	b.n	800a2be <_strtol_l.isra.0+0xe>
 800a33e:	2c2b      	cmp	r4, #43	; 0x2b
 800a340:	bf04      	itt	eq
 800a342:	1cbd      	addeq	r5, r7, #2
 800a344:	787c      	ldrbeq	r4, [r7, #1]
 800a346:	461a      	mov	r2, r3
 800a348:	e7c9      	b.n	800a2de <_strtol_l.isra.0+0x2e>
 800a34a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a34e:	2b19      	cmp	r3, #25
 800a350:	d801      	bhi.n	800a356 <_strtol_l.isra.0+0xa6>
 800a352:	3c37      	subs	r4, #55	; 0x37
 800a354:	e7e2      	b.n	800a31c <_strtol_l.isra.0+0x6c>
 800a356:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a35a:	2b19      	cmp	r3, #25
 800a35c:	d804      	bhi.n	800a368 <_strtol_l.isra.0+0xb8>
 800a35e:	3c57      	subs	r4, #87	; 0x57
 800a360:	e7dc      	b.n	800a31c <_strtol_l.isra.0+0x6c>
 800a362:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a366:	e7e5      	b.n	800a334 <_strtol_l.isra.0+0x84>
 800a368:	1c7b      	adds	r3, r7, #1
 800a36a:	d108      	bne.n	800a37e <_strtol_l.isra.0+0xce>
 800a36c:	2322      	movs	r3, #34	; 0x22
 800a36e:	f8c8 3000 	str.w	r3, [r8]
 800a372:	4608      	mov	r0, r1
 800a374:	f1ba 0f00 	cmp.w	sl, #0
 800a378:	d107      	bne.n	800a38a <_strtol_l.isra.0+0xda>
 800a37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a37e:	b102      	cbz	r2, 800a382 <_strtol_l.isra.0+0xd2>
 800a380:	4240      	negs	r0, r0
 800a382:	f1ba 0f00 	cmp.w	sl, #0
 800a386:	d0f8      	beq.n	800a37a <_strtol_l.isra.0+0xca>
 800a388:	b10f      	cbz	r7, 800a38e <_strtol_l.isra.0+0xde>
 800a38a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800a38e:	f8ca 9000 	str.w	r9, [sl]
 800a392:	e7f2      	b.n	800a37a <_strtol_l.isra.0+0xca>
 800a394:	2430      	movs	r4, #48	; 0x30
 800a396:	2e00      	cmp	r6, #0
 800a398:	d1af      	bne.n	800a2fa <_strtol_l.isra.0+0x4a>
 800a39a:	2608      	movs	r6, #8
 800a39c:	e7ad      	b.n	800a2fa <_strtol_l.isra.0+0x4a>
 800a39e:	2c30      	cmp	r4, #48	; 0x30
 800a3a0:	d0a3      	beq.n	800a2ea <_strtol_l.isra.0+0x3a>
 800a3a2:	260a      	movs	r6, #10
 800a3a4:	e7a9      	b.n	800a2fa <_strtol_l.isra.0+0x4a>
	...

0800a3a8 <strtol>:
 800a3a8:	4b08      	ldr	r3, [pc, #32]	; (800a3cc <strtol+0x24>)
 800a3aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3ac:	681c      	ldr	r4, [r3, #0]
 800a3ae:	4d08      	ldr	r5, [pc, #32]	; (800a3d0 <strtol+0x28>)
 800a3b0:	6a23      	ldr	r3, [r4, #32]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	bf08      	it	eq
 800a3b6:	462b      	moveq	r3, r5
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	460a      	mov	r2, r1
 800a3be:	4601      	mov	r1, r0
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f7ff ff75 	bl	800a2b0 <_strtol_l.isra.0>
 800a3c6:	b003      	add	sp, #12
 800a3c8:	bd30      	pop	{r4, r5, pc}
 800a3ca:	bf00      	nop
 800a3cc:	2000000c 	.word	0x2000000c
 800a3d0:	20000070 	.word	0x20000070

0800a3d4 <quorem>:
 800a3d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d8:	6903      	ldr	r3, [r0, #16]
 800a3da:	690c      	ldr	r4, [r1, #16]
 800a3dc:	42a3      	cmp	r3, r4
 800a3de:	4680      	mov	r8, r0
 800a3e0:	f2c0 8082 	blt.w	800a4e8 <quorem+0x114>
 800a3e4:	3c01      	subs	r4, #1
 800a3e6:	f101 0714 	add.w	r7, r1, #20
 800a3ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a3ee:	f100 0614 	add.w	r6, r0, #20
 800a3f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a3f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a3fa:	eb06 030c 	add.w	r3, r6, ip
 800a3fe:	3501      	adds	r5, #1
 800a400:	eb07 090c 	add.w	r9, r7, ip
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	fbb0 f5f5 	udiv	r5, r0, r5
 800a40a:	b395      	cbz	r5, 800a472 <quorem+0x9e>
 800a40c:	f04f 0a00 	mov.w	sl, #0
 800a410:	4638      	mov	r0, r7
 800a412:	46b6      	mov	lr, r6
 800a414:	46d3      	mov	fp, sl
 800a416:	f850 2b04 	ldr.w	r2, [r0], #4
 800a41a:	b293      	uxth	r3, r2
 800a41c:	fb05 a303 	mla	r3, r5, r3, sl
 800a420:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a424:	b29b      	uxth	r3, r3
 800a426:	ebab 0303 	sub.w	r3, fp, r3
 800a42a:	0c12      	lsrs	r2, r2, #16
 800a42c:	f8de b000 	ldr.w	fp, [lr]
 800a430:	fb05 a202 	mla	r2, r5, r2, sl
 800a434:	fa13 f38b 	uxtah	r3, r3, fp
 800a438:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a43c:	fa1f fb82 	uxth.w	fp, r2
 800a440:	f8de 2000 	ldr.w	r2, [lr]
 800a444:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a448:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a452:	4581      	cmp	r9, r0
 800a454:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a458:	f84e 3b04 	str.w	r3, [lr], #4
 800a45c:	d2db      	bcs.n	800a416 <quorem+0x42>
 800a45e:	f856 300c 	ldr.w	r3, [r6, ip]
 800a462:	b933      	cbnz	r3, 800a472 <quorem+0x9e>
 800a464:	9b01      	ldr	r3, [sp, #4]
 800a466:	3b04      	subs	r3, #4
 800a468:	429e      	cmp	r6, r3
 800a46a:	461a      	mov	r2, r3
 800a46c:	d330      	bcc.n	800a4d0 <quorem+0xfc>
 800a46e:	f8c8 4010 	str.w	r4, [r8, #16]
 800a472:	4640      	mov	r0, r8
 800a474:	f001 fba6 	bl	800bbc4 <__mcmp>
 800a478:	2800      	cmp	r0, #0
 800a47a:	db25      	blt.n	800a4c8 <quorem+0xf4>
 800a47c:	3501      	adds	r5, #1
 800a47e:	4630      	mov	r0, r6
 800a480:	f04f 0c00 	mov.w	ip, #0
 800a484:	f857 2b04 	ldr.w	r2, [r7], #4
 800a488:	f8d0 e000 	ldr.w	lr, [r0]
 800a48c:	b293      	uxth	r3, r2
 800a48e:	ebac 0303 	sub.w	r3, ip, r3
 800a492:	0c12      	lsrs	r2, r2, #16
 800a494:	fa13 f38e 	uxtah	r3, r3, lr
 800a498:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a49c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4a6:	45b9      	cmp	r9, r7
 800a4a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a4ac:	f840 3b04 	str.w	r3, [r0], #4
 800a4b0:	d2e8      	bcs.n	800a484 <quorem+0xb0>
 800a4b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a4b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a4ba:	b92a      	cbnz	r2, 800a4c8 <quorem+0xf4>
 800a4bc:	3b04      	subs	r3, #4
 800a4be:	429e      	cmp	r6, r3
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	d30b      	bcc.n	800a4dc <quorem+0x108>
 800a4c4:	f8c8 4010 	str.w	r4, [r8, #16]
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	b003      	add	sp, #12
 800a4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d0:	6812      	ldr	r2, [r2, #0]
 800a4d2:	3b04      	subs	r3, #4
 800a4d4:	2a00      	cmp	r2, #0
 800a4d6:	d1ca      	bne.n	800a46e <quorem+0x9a>
 800a4d8:	3c01      	subs	r4, #1
 800a4da:	e7c5      	b.n	800a468 <quorem+0x94>
 800a4dc:	6812      	ldr	r2, [r2, #0]
 800a4de:	3b04      	subs	r3, #4
 800a4e0:	2a00      	cmp	r2, #0
 800a4e2:	d1ef      	bne.n	800a4c4 <quorem+0xf0>
 800a4e4:	3c01      	subs	r4, #1
 800a4e6:	e7ea      	b.n	800a4be <quorem+0xea>
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	e7ee      	b.n	800a4ca <quorem+0xf6>
 800a4ec:	0000      	movs	r0, r0
	...

0800a4f0 <_dtoa_r>:
 800a4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f4:	ec57 6b10 	vmov	r6, r7, d0
 800a4f8:	b097      	sub	sp, #92	; 0x5c
 800a4fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a4fc:	9106      	str	r1, [sp, #24]
 800a4fe:	4604      	mov	r4, r0
 800a500:	920b      	str	r2, [sp, #44]	; 0x2c
 800a502:	9312      	str	r3, [sp, #72]	; 0x48
 800a504:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a508:	e9cd 6700 	strd	r6, r7, [sp]
 800a50c:	b93d      	cbnz	r5, 800a51e <_dtoa_r+0x2e>
 800a50e:	2010      	movs	r0, #16
 800a510:	f001 f8e0 	bl	800b6d4 <malloc>
 800a514:	6260      	str	r0, [r4, #36]	; 0x24
 800a516:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a51a:	6005      	str	r5, [r0, #0]
 800a51c:	60c5      	str	r5, [r0, #12]
 800a51e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a520:	6819      	ldr	r1, [r3, #0]
 800a522:	b151      	cbz	r1, 800a53a <_dtoa_r+0x4a>
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	604a      	str	r2, [r1, #4]
 800a528:	2301      	movs	r3, #1
 800a52a:	4093      	lsls	r3, r2
 800a52c:	608b      	str	r3, [r1, #8]
 800a52e:	4620      	mov	r0, r4
 800a530:	f001 f929 	bl	800b786 <_Bfree>
 800a534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a536:	2200      	movs	r2, #0
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	1e3b      	subs	r3, r7, #0
 800a53c:	bfbb      	ittet	lt
 800a53e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a542:	9301      	strlt	r3, [sp, #4]
 800a544:	2300      	movge	r3, #0
 800a546:	2201      	movlt	r2, #1
 800a548:	bfac      	ite	ge
 800a54a:	f8c8 3000 	strge.w	r3, [r8]
 800a54e:	f8c8 2000 	strlt.w	r2, [r8]
 800a552:	4baf      	ldr	r3, [pc, #700]	; (800a810 <_dtoa_r+0x320>)
 800a554:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a558:	ea33 0308 	bics.w	r3, r3, r8
 800a55c:	d114      	bne.n	800a588 <_dtoa_r+0x98>
 800a55e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a560:	f242 730f 	movw	r3, #9999	; 0x270f
 800a564:	6013      	str	r3, [r2, #0]
 800a566:	9b00      	ldr	r3, [sp, #0]
 800a568:	b923      	cbnz	r3, 800a574 <_dtoa_r+0x84>
 800a56a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a56e:	2800      	cmp	r0, #0
 800a570:	f000 8542 	beq.w	800aff8 <_dtoa_r+0xb08>
 800a574:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a576:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a824 <_dtoa_r+0x334>
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f000 8544 	beq.w	800b008 <_dtoa_r+0xb18>
 800a580:	f10b 0303 	add.w	r3, fp, #3
 800a584:	f000 bd3e 	b.w	800b004 <_dtoa_r+0xb14>
 800a588:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a58c:	2200      	movs	r2, #0
 800a58e:	2300      	movs	r3, #0
 800a590:	4630      	mov	r0, r6
 800a592:	4639      	mov	r1, r7
 800a594:	f7f6 faa8 	bl	8000ae8 <__aeabi_dcmpeq>
 800a598:	4681      	mov	r9, r0
 800a59a:	b168      	cbz	r0, 800a5b8 <_dtoa_r+0xc8>
 800a59c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a59e:	2301      	movs	r3, #1
 800a5a0:	6013      	str	r3, [r2, #0]
 800a5a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f000 8524 	beq.w	800aff2 <_dtoa_r+0xb02>
 800a5aa:	4b9a      	ldr	r3, [pc, #616]	; (800a814 <_dtoa_r+0x324>)
 800a5ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a5ae:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	f000 bd28 	b.w	800b008 <_dtoa_r+0xb18>
 800a5b8:	aa14      	add	r2, sp, #80	; 0x50
 800a5ba:	a915      	add	r1, sp, #84	; 0x54
 800a5bc:	ec47 6b10 	vmov	d0, r6, r7
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f001 fbed 	bl	800bda0 <__d2b>
 800a5c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a5ca:	9004      	str	r0, [sp, #16]
 800a5cc:	2d00      	cmp	r5, #0
 800a5ce:	d07c      	beq.n	800a6ca <_dtoa_r+0x1da>
 800a5d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a5d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a5d8:	46b2      	mov	sl, r6
 800a5da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a5de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a5e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	4b8b      	ldr	r3, [pc, #556]	; (800a818 <_dtoa_r+0x328>)
 800a5ea:	4650      	mov	r0, sl
 800a5ec:	4659      	mov	r1, fp
 800a5ee:	f7f5 fe5b 	bl	80002a8 <__aeabi_dsub>
 800a5f2:	a381      	add	r3, pc, #516	; (adr r3, 800a7f8 <_dtoa_r+0x308>)
 800a5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f8:	f7f6 f80e 	bl	8000618 <__aeabi_dmul>
 800a5fc:	a380      	add	r3, pc, #512	; (adr r3, 800a800 <_dtoa_r+0x310>)
 800a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a602:	f7f5 fe53 	bl	80002ac <__adddf3>
 800a606:	4606      	mov	r6, r0
 800a608:	4628      	mov	r0, r5
 800a60a:	460f      	mov	r7, r1
 800a60c:	f7f5 ff9a 	bl	8000544 <__aeabi_i2d>
 800a610:	a37d      	add	r3, pc, #500	; (adr r3, 800a808 <_dtoa_r+0x318>)
 800a612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a616:	f7f5 ffff 	bl	8000618 <__aeabi_dmul>
 800a61a:	4602      	mov	r2, r0
 800a61c:	460b      	mov	r3, r1
 800a61e:	4630      	mov	r0, r6
 800a620:	4639      	mov	r1, r7
 800a622:	f7f5 fe43 	bl	80002ac <__adddf3>
 800a626:	4606      	mov	r6, r0
 800a628:	460f      	mov	r7, r1
 800a62a:	f7f6 faa5 	bl	8000b78 <__aeabi_d2iz>
 800a62e:	2200      	movs	r2, #0
 800a630:	4682      	mov	sl, r0
 800a632:	2300      	movs	r3, #0
 800a634:	4630      	mov	r0, r6
 800a636:	4639      	mov	r1, r7
 800a638:	f7f6 fa60 	bl	8000afc <__aeabi_dcmplt>
 800a63c:	b148      	cbz	r0, 800a652 <_dtoa_r+0x162>
 800a63e:	4650      	mov	r0, sl
 800a640:	f7f5 ff80 	bl	8000544 <__aeabi_i2d>
 800a644:	4632      	mov	r2, r6
 800a646:	463b      	mov	r3, r7
 800a648:	f7f6 fa4e 	bl	8000ae8 <__aeabi_dcmpeq>
 800a64c:	b908      	cbnz	r0, 800a652 <_dtoa_r+0x162>
 800a64e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a652:	f1ba 0f16 	cmp.w	sl, #22
 800a656:	d859      	bhi.n	800a70c <_dtoa_r+0x21c>
 800a658:	4970      	ldr	r1, [pc, #448]	; (800a81c <_dtoa_r+0x32c>)
 800a65a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a65e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a662:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a666:	f7f6 fa67 	bl	8000b38 <__aeabi_dcmpgt>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d050      	beq.n	800a710 <_dtoa_r+0x220>
 800a66e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a672:	2300      	movs	r3, #0
 800a674:	930f      	str	r3, [sp, #60]	; 0x3c
 800a676:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a678:	1b5d      	subs	r5, r3, r5
 800a67a:	f1b5 0801 	subs.w	r8, r5, #1
 800a67e:	bf49      	itett	mi
 800a680:	f1c5 0301 	rsbmi	r3, r5, #1
 800a684:	2300      	movpl	r3, #0
 800a686:	9305      	strmi	r3, [sp, #20]
 800a688:	f04f 0800 	movmi.w	r8, #0
 800a68c:	bf58      	it	pl
 800a68e:	9305      	strpl	r3, [sp, #20]
 800a690:	f1ba 0f00 	cmp.w	sl, #0
 800a694:	db3e      	blt.n	800a714 <_dtoa_r+0x224>
 800a696:	2300      	movs	r3, #0
 800a698:	44d0      	add	r8, sl
 800a69a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a69e:	9307      	str	r3, [sp, #28]
 800a6a0:	9b06      	ldr	r3, [sp, #24]
 800a6a2:	2b09      	cmp	r3, #9
 800a6a4:	f200 8090 	bhi.w	800a7c8 <_dtoa_r+0x2d8>
 800a6a8:	2b05      	cmp	r3, #5
 800a6aa:	bfc4      	itt	gt
 800a6ac:	3b04      	subgt	r3, #4
 800a6ae:	9306      	strgt	r3, [sp, #24]
 800a6b0:	9b06      	ldr	r3, [sp, #24]
 800a6b2:	f1a3 0302 	sub.w	r3, r3, #2
 800a6b6:	bfcc      	ite	gt
 800a6b8:	2500      	movgt	r5, #0
 800a6ba:	2501      	movle	r5, #1
 800a6bc:	2b03      	cmp	r3, #3
 800a6be:	f200 808f 	bhi.w	800a7e0 <_dtoa_r+0x2f0>
 800a6c2:	e8df f003 	tbb	[pc, r3]
 800a6c6:	7f7d      	.short	0x7f7d
 800a6c8:	7131      	.short	0x7131
 800a6ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a6ce:	441d      	add	r5, r3
 800a6d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a6d4:	2820      	cmp	r0, #32
 800a6d6:	dd13      	ble.n	800a700 <_dtoa_r+0x210>
 800a6d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a6dc:	9b00      	ldr	r3, [sp, #0]
 800a6de:	fa08 f800 	lsl.w	r8, r8, r0
 800a6e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a6e6:	fa23 f000 	lsr.w	r0, r3, r0
 800a6ea:	ea48 0000 	orr.w	r0, r8, r0
 800a6ee:	f7f5 ff19 	bl	8000524 <__aeabi_ui2d>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	4682      	mov	sl, r0
 800a6f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a6fa:	3d01      	subs	r5, #1
 800a6fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800a6fe:	e772      	b.n	800a5e6 <_dtoa_r+0xf6>
 800a700:	9b00      	ldr	r3, [sp, #0]
 800a702:	f1c0 0020 	rsb	r0, r0, #32
 800a706:	fa03 f000 	lsl.w	r0, r3, r0
 800a70a:	e7f0      	b.n	800a6ee <_dtoa_r+0x1fe>
 800a70c:	2301      	movs	r3, #1
 800a70e:	e7b1      	b.n	800a674 <_dtoa_r+0x184>
 800a710:	900f      	str	r0, [sp, #60]	; 0x3c
 800a712:	e7b0      	b.n	800a676 <_dtoa_r+0x186>
 800a714:	9b05      	ldr	r3, [sp, #20]
 800a716:	eba3 030a 	sub.w	r3, r3, sl
 800a71a:	9305      	str	r3, [sp, #20]
 800a71c:	f1ca 0300 	rsb	r3, sl, #0
 800a720:	9307      	str	r3, [sp, #28]
 800a722:	2300      	movs	r3, #0
 800a724:	930e      	str	r3, [sp, #56]	; 0x38
 800a726:	e7bb      	b.n	800a6a0 <_dtoa_r+0x1b0>
 800a728:	2301      	movs	r3, #1
 800a72a:	930a      	str	r3, [sp, #40]	; 0x28
 800a72c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a72e:	2b00      	cmp	r3, #0
 800a730:	dd59      	ble.n	800a7e6 <_dtoa_r+0x2f6>
 800a732:	9302      	str	r3, [sp, #8]
 800a734:	4699      	mov	r9, r3
 800a736:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a738:	2200      	movs	r2, #0
 800a73a:	6072      	str	r2, [r6, #4]
 800a73c:	2204      	movs	r2, #4
 800a73e:	f102 0014 	add.w	r0, r2, #20
 800a742:	4298      	cmp	r0, r3
 800a744:	6871      	ldr	r1, [r6, #4]
 800a746:	d953      	bls.n	800a7f0 <_dtoa_r+0x300>
 800a748:	4620      	mov	r0, r4
 800a74a:	f000 ffe8 	bl	800b71e <_Balloc>
 800a74e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a750:	6030      	str	r0, [r6, #0]
 800a752:	f1b9 0f0e 	cmp.w	r9, #14
 800a756:	f8d3 b000 	ldr.w	fp, [r3]
 800a75a:	f200 80e6 	bhi.w	800a92a <_dtoa_r+0x43a>
 800a75e:	2d00      	cmp	r5, #0
 800a760:	f000 80e3 	beq.w	800a92a <_dtoa_r+0x43a>
 800a764:	ed9d 7b00 	vldr	d7, [sp]
 800a768:	f1ba 0f00 	cmp.w	sl, #0
 800a76c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a770:	dd74      	ble.n	800a85c <_dtoa_r+0x36c>
 800a772:	4a2a      	ldr	r2, [pc, #168]	; (800a81c <_dtoa_r+0x32c>)
 800a774:	f00a 030f 	and.w	r3, sl, #15
 800a778:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a77c:	ed93 7b00 	vldr	d7, [r3]
 800a780:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a784:	06f0      	lsls	r0, r6, #27
 800a786:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a78a:	d565      	bpl.n	800a858 <_dtoa_r+0x368>
 800a78c:	4b24      	ldr	r3, [pc, #144]	; (800a820 <_dtoa_r+0x330>)
 800a78e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a792:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a796:	f7f6 f869 	bl	800086c <__aeabi_ddiv>
 800a79a:	e9cd 0100 	strd	r0, r1, [sp]
 800a79e:	f006 060f 	and.w	r6, r6, #15
 800a7a2:	2503      	movs	r5, #3
 800a7a4:	4f1e      	ldr	r7, [pc, #120]	; (800a820 <_dtoa_r+0x330>)
 800a7a6:	e04c      	b.n	800a842 <_dtoa_r+0x352>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a7ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7ae:	4453      	add	r3, sl
 800a7b0:	f103 0901 	add.w	r9, r3, #1
 800a7b4:	9302      	str	r3, [sp, #8]
 800a7b6:	464b      	mov	r3, r9
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	bfb8      	it	lt
 800a7bc:	2301      	movlt	r3, #1
 800a7be:	e7ba      	b.n	800a736 <_dtoa_r+0x246>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	e7b2      	b.n	800a72a <_dtoa_r+0x23a>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	e7f0      	b.n	800a7aa <_dtoa_r+0x2ba>
 800a7c8:	2501      	movs	r5, #1
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	9306      	str	r3, [sp, #24]
 800a7ce:	950a      	str	r5, [sp, #40]	; 0x28
 800a7d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7d4:	9302      	str	r3, [sp, #8]
 800a7d6:	4699      	mov	r9, r3
 800a7d8:	2200      	movs	r2, #0
 800a7da:	2312      	movs	r3, #18
 800a7dc:	920b      	str	r2, [sp, #44]	; 0x2c
 800a7de:	e7aa      	b.n	800a736 <_dtoa_r+0x246>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	930a      	str	r3, [sp, #40]	; 0x28
 800a7e4:	e7f4      	b.n	800a7d0 <_dtoa_r+0x2e0>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	9302      	str	r3, [sp, #8]
 800a7ea:	4699      	mov	r9, r3
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	e7f5      	b.n	800a7dc <_dtoa_r+0x2ec>
 800a7f0:	3101      	adds	r1, #1
 800a7f2:	6071      	str	r1, [r6, #4]
 800a7f4:	0052      	lsls	r2, r2, #1
 800a7f6:	e7a2      	b.n	800a73e <_dtoa_r+0x24e>
 800a7f8:	636f4361 	.word	0x636f4361
 800a7fc:	3fd287a7 	.word	0x3fd287a7
 800a800:	8b60c8b3 	.word	0x8b60c8b3
 800a804:	3fc68a28 	.word	0x3fc68a28
 800a808:	509f79fb 	.word	0x509f79fb
 800a80c:	3fd34413 	.word	0x3fd34413
 800a810:	7ff00000 	.word	0x7ff00000
 800a814:	0800c55d 	.word	0x0800c55d
 800a818:	3ff80000 	.word	0x3ff80000
 800a81c:	0800c610 	.word	0x0800c610
 800a820:	0800c5e8 	.word	0x0800c5e8
 800a824:	0800c5d9 	.word	0x0800c5d9
 800a828:	07f1      	lsls	r1, r6, #31
 800a82a:	d508      	bpl.n	800a83e <_dtoa_r+0x34e>
 800a82c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a830:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a834:	f7f5 fef0 	bl	8000618 <__aeabi_dmul>
 800a838:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a83c:	3501      	adds	r5, #1
 800a83e:	1076      	asrs	r6, r6, #1
 800a840:	3708      	adds	r7, #8
 800a842:	2e00      	cmp	r6, #0
 800a844:	d1f0      	bne.n	800a828 <_dtoa_r+0x338>
 800a846:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a84a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a84e:	f7f6 f80d 	bl	800086c <__aeabi_ddiv>
 800a852:	e9cd 0100 	strd	r0, r1, [sp]
 800a856:	e01a      	b.n	800a88e <_dtoa_r+0x39e>
 800a858:	2502      	movs	r5, #2
 800a85a:	e7a3      	b.n	800a7a4 <_dtoa_r+0x2b4>
 800a85c:	f000 80a0 	beq.w	800a9a0 <_dtoa_r+0x4b0>
 800a860:	f1ca 0600 	rsb	r6, sl, #0
 800a864:	4b9f      	ldr	r3, [pc, #636]	; (800aae4 <_dtoa_r+0x5f4>)
 800a866:	4fa0      	ldr	r7, [pc, #640]	; (800aae8 <_dtoa_r+0x5f8>)
 800a868:	f006 020f 	and.w	r2, r6, #15
 800a86c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a874:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a878:	f7f5 fece 	bl	8000618 <__aeabi_dmul>
 800a87c:	e9cd 0100 	strd	r0, r1, [sp]
 800a880:	1136      	asrs	r6, r6, #4
 800a882:	2300      	movs	r3, #0
 800a884:	2502      	movs	r5, #2
 800a886:	2e00      	cmp	r6, #0
 800a888:	d17f      	bne.n	800a98a <_dtoa_r+0x49a>
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d1e1      	bne.n	800a852 <_dtoa_r+0x362>
 800a88e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 8087 	beq.w	800a9a4 <_dtoa_r+0x4b4>
 800a896:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a89a:	2200      	movs	r2, #0
 800a89c:	4b93      	ldr	r3, [pc, #588]	; (800aaec <_dtoa_r+0x5fc>)
 800a89e:	4630      	mov	r0, r6
 800a8a0:	4639      	mov	r1, r7
 800a8a2:	f7f6 f92b 	bl	8000afc <__aeabi_dcmplt>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d07c      	beq.n	800a9a4 <_dtoa_r+0x4b4>
 800a8aa:	f1b9 0f00 	cmp.w	r9, #0
 800a8ae:	d079      	beq.n	800a9a4 <_dtoa_r+0x4b4>
 800a8b0:	9b02      	ldr	r3, [sp, #8]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	dd35      	ble.n	800a922 <_dtoa_r+0x432>
 800a8b6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a8ba:	9308      	str	r3, [sp, #32]
 800a8bc:	4639      	mov	r1, r7
 800a8be:	2200      	movs	r2, #0
 800a8c0:	4b8b      	ldr	r3, [pc, #556]	; (800aaf0 <_dtoa_r+0x600>)
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	f7f5 fea8 	bl	8000618 <__aeabi_dmul>
 800a8c8:	e9cd 0100 	strd	r0, r1, [sp]
 800a8cc:	9f02      	ldr	r7, [sp, #8]
 800a8ce:	3501      	adds	r5, #1
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	f7f5 fe37 	bl	8000544 <__aeabi_i2d>
 800a8d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8da:	f7f5 fe9d 	bl	8000618 <__aeabi_dmul>
 800a8de:	2200      	movs	r2, #0
 800a8e0:	4b84      	ldr	r3, [pc, #528]	; (800aaf4 <_dtoa_r+0x604>)
 800a8e2:	f7f5 fce3 	bl	80002ac <__adddf3>
 800a8e6:	4605      	mov	r5, r0
 800a8e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a8ec:	2f00      	cmp	r7, #0
 800a8ee:	d15d      	bne.n	800a9ac <_dtoa_r+0x4bc>
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	4b81      	ldr	r3, [pc, #516]	; (800aaf8 <_dtoa_r+0x608>)
 800a8f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8f8:	f7f5 fcd6 	bl	80002a8 <__aeabi_dsub>
 800a8fc:	462a      	mov	r2, r5
 800a8fe:	4633      	mov	r3, r6
 800a900:	e9cd 0100 	strd	r0, r1, [sp]
 800a904:	f7f6 f918 	bl	8000b38 <__aeabi_dcmpgt>
 800a908:	2800      	cmp	r0, #0
 800a90a:	f040 8288 	bne.w	800ae1e <_dtoa_r+0x92e>
 800a90e:	462a      	mov	r2, r5
 800a910:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a914:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a918:	f7f6 f8f0 	bl	8000afc <__aeabi_dcmplt>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	f040 827c 	bne.w	800ae1a <_dtoa_r+0x92a>
 800a922:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a926:	e9cd 2300 	strd	r2, r3, [sp]
 800a92a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f2c0 8150 	blt.w	800abd2 <_dtoa_r+0x6e2>
 800a932:	f1ba 0f0e 	cmp.w	sl, #14
 800a936:	f300 814c 	bgt.w	800abd2 <_dtoa_r+0x6e2>
 800a93a:	4b6a      	ldr	r3, [pc, #424]	; (800aae4 <_dtoa_r+0x5f4>)
 800a93c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a940:	ed93 7b00 	vldr	d7, [r3]
 800a944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a946:	2b00      	cmp	r3, #0
 800a948:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a94c:	f280 80d8 	bge.w	800ab00 <_dtoa_r+0x610>
 800a950:	f1b9 0f00 	cmp.w	r9, #0
 800a954:	f300 80d4 	bgt.w	800ab00 <_dtoa_r+0x610>
 800a958:	f040 825e 	bne.w	800ae18 <_dtoa_r+0x928>
 800a95c:	2200      	movs	r2, #0
 800a95e:	4b66      	ldr	r3, [pc, #408]	; (800aaf8 <_dtoa_r+0x608>)
 800a960:	ec51 0b17 	vmov	r0, r1, d7
 800a964:	f7f5 fe58 	bl	8000618 <__aeabi_dmul>
 800a968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a96c:	f7f6 f8da 	bl	8000b24 <__aeabi_dcmpge>
 800a970:	464f      	mov	r7, r9
 800a972:	464e      	mov	r6, r9
 800a974:	2800      	cmp	r0, #0
 800a976:	f040 8234 	bne.w	800ade2 <_dtoa_r+0x8f2>
 800a97a:	2331      	movs	r3, #49	; 0x31
 800a97c:	f10b 0501 	add.w	r5, fp, #1
 800a980:	f88b 3000 	strb.w	r3, [fp]
 800a984:	f10a 0a01 	add.w	sl, sl, #1
 800a988:	e22f      	b.n	800adea <_dtoa_r+0x8fa>
 800a98a:	07f2      	lsls	r2, r6, #31
 800a98c:	d505      	bpl.n	800a99a <_dtoa_r+0x4aa>
 800a98e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a992:	f7f5 fe41 	bl	8000618 <__aeabi_dmul>
 800a996:	3501      	adds	r5, #1
 800a998:	2301      	movs	r3, #1
 800a99a:	1076      	asrs	r6, r6, #1
 800a99c:	3708      	adds	r7, #8
 800a99e:	e772      	b.n	800a886 <_dtoa_r+0x396>
 800a9a0:	2502      	movs	r5, #2
 800a9a2:	e774      	b.n	800a88e <_dtoa_r+0x39e>
 800a9a4:	f8cd a020 	str.w	sl, [sp, #32]
 800a9a8:	464f      	mov	r7, r9
 800a9aa:	e791      	b.n	800a8d0 <_dtoa_r+0x3e0>
 800a9ac:	4b4d      	ldr	r3, [pc, #308]	; (800aae4 <_dtoa_r+0x5f4>)
 800a9ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a9b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a9b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d047      	beq.n	800aa4c <_dtoa_r+0x55c>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	494e      	ldr	r1, [pc, #312]	; (800aafc <_dtoa_r+0x60c>)
 800a9c4:	f7f5 ff52 	bl	800086c <__aeabi_ddiv>
 800a9c8:	462a      	mov	r2, r5
 800a9ca:	4633      	mov	r3, r6
 800a9cc:	f7f5 fc6c 	bl	80002a8 <__aeabi_dsub>
 800a9d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a9d4:	465d      	mov	r5, fp
 800a9d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9da:	f7f6 f8cd 	bl	8000b78 <__aeabi_d2iz>
 800a9de:	4606      	mov	r6, r0
 800a9e0:	f7f5 fdb0 	bl	8000544 <__aeabi_i2d>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9ec:	f7f5 fc5c 	bl	80002a8 <__aeabi_dsub>
 800a9f0:	3630      	adds	r6, #48	; 0x30
 800a9f2:	f805 6b01 	strb.w	r6, [r5], #1
 800a9f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a9fa:	e9cd 0100 	strd	r0, r1, [sp]
 800a9fe:	f7f6 f87d 	bl	8000afc <__aeabi_dcmplt>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	d163      	bne.n	800aace <_dtoa_r+0x5de>
 800aa06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	4937      	ldr	r1, [pc, #220]	; (800aaec <_dtoa_r+0x5fc>)
 800aa0e:	f7f5 fc4b 	bl	80002a8 <__aeabi_dsub>
 800aa12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aa16:	f7f6 f871 	bl	8000afc <__aeabi_dcmplt>
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	f040 80b7 	bne.w	800ab8e <_dtoa_r+0x69e>
 800aa20:	eba5 030b 	sub.w	r3, r5, fp
 800aa24:	429f      	cmp	r7, r3
 800aa26:	f77f af7c 	ble.w	800a922 <_dtoa_r+0x432>
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	4b30      	ldr	r3, [pc, #192]	; (800aaf0 <_dtoa_r+0x600>)
 800aa2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa32:	f7f5 fdf1 	bl	8000618 <__aeabi_dmul>
 800aa36:	2200      	movs	r2, #0
 800aa38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800aa3c:	4b2c      	ldr	r3, [pc, #176]	; (800aaf0 <_dtoa_r+0x600>)
 800aa3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa42:	f7f5 fde9 	bl	8000618 <__aeabi_dmul>
 800aa46:	e9cd 0100 	strd	r0, r1, [sp]
 800aa4a:	e7c4      	b.n	800a9d6 <_dtoa_r+0x4e6>
 800aa4c:	462a      	mov	r2, r5
 800aa4e:	4633      	mov	r3, r6
 800aa50:	f7f5 fde2 	bl	8000618 <__aeabi_dmul>
 800aa54:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800aa58:	eb0b 0507 	add.w	r5, fp, r7
 800aa5c:	465e      	mov	r6, fp
 800aa5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa62:	f7f6 f889 	bl	8000b78 <__aeabi_d2iz>
 800aa66:	4607      	mov	r7, r0
 800aa68:	f7f5 fd6c 	bl	8000544 <__aeabi_i2d>
 800aa6c:	3730      	adds	r7, #48	; 0x30
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa76:	f7f5 fc17 	bl	80002a8 <__aeabi_dsub>
 800aa7a:	f806 7b01 	strb.w	r7, [r6], #1
 800aa7e:	42ae      	cmp	r6, r5
 800aa80:	e9cd 0100 	strd	r0, r1, [sp]
 800aa84:	f04f 0200 	mov.w	r2, #0
 800aa88:	d126      	bne.n	800aad8 <_dtoa_r+0x5e8>
 800aa8a:	4b1c      	ldr	r3, [pc, #112]	; (800aafc <_dtoa_r+0x60c>)
 800aa8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa90:	f7f5 fc0c 	bl	80002ac <__adddf3>
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa9c:	f7f6 f84c 	bl	8000b38 <__aeabi_dcmpgt>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d174      	bne.n	800ab8e <_dtoa_r+0x69e>
 800aaa4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800aaa8:	2000      	movs	r0, #0
 800aaaa:	4914      	ldr	r1, [pc, #80]	; (800aafc <_dtoa_r+0x60c>)
 800aaac:	f7f5 fbfc 	bl	80002a8 <__aeabi_dsub>
 800aab0:	4602      	mov	r2, r0
 800aab2:	460b      	mov	r3, r1
 800aab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aab8:	f7f6 f820 	bl	8000afc <__aeabi_dcmplt>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	f43f af30 	beq.w	800a922 <_dtoa_r+0x432>
 800aac2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aac6:	2b30      	cmp	r3, #48	; 0x30
 800aac8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800aacc:	d002      	beq.n	800aad4 <_dtoa_r+0x5e4>
 800aace:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aad2:	e04a      	b.n	800ab6a <_dtoa_r+0x67a>
 800aad4:	4615      	mov	r5, r2
 800aad6:	e7f4      	b.n	800aac2 <_dtoa_r+0x5d2>
 800aad8:	4b05      	ldr	r3, [pc, #20]	; (800aaf0 <_dtoa_r+0x600>)
 800aada:	f7f5 fd9d 	bl	8000618 <__aeabi_dmul>
 800aade:	e9cd 0100 	strd	r0, r1, [sp]
 800aae2:	e7bc      	b.n	800aa5e <_dtoa_r+0x56e>
 800aae4:	0800c610 	.word	0x0800c610
 800aae8:	0800c5e8 	.word	0x0800c5e8
 800aaec:	3ff00000 	.word	0x3ff00000
 800aaf0:	40240000 	.word	0x40240000
 800aaf4:	401c0000 	.word	0x401c0000
 800aaf8:	40140000 	.word	0x40140000
 800aafc:	3fe00000 	.word	0x3fe00000
 800ab00:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ab04:	465d      	mov	r5, fp
 800ab06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab0a:	4630      	mov	r0, r6
 800ab0c:	4639      	mov	r1, r7
 800ab0e:	f7f5 fead 	bl	800086c <__aeabi_ddiv>
 800ab12:	f7f6 f831 	bl	8000b78 <__aeabi_d2iz>
 800ab16:	4680      	mov	r8, r0
 800ab18:	f7f5 fd14 	bl	8000544 <__aeabi_i2d>
 800ab1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab20:	f7f5 fd7a 	bl	8000618 <__aeabi_dmul>
 800ab24:	4602      	mov	r2, r0
 800ab26:	460b      	mov	r3, r1
 800ab28:	4630      	mov	r0, r6
 800ab2a:	4639      	mov	r1, r7
 800ab2c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ab30:	f7f5 fbba 	bl	80002a8 <__aeabi_dsub>
 800ab34:	f805 6b01 	strb.w	r6, [r5], #1
 800ab38:	eba5 060b 	sub.w	r6, r5, fp
 800ab3c:	45b1      	cmp	r9, r6
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	d139      	bne.n	800abb8 <_dtoa_r+0x6c8>
 800ab44:	f7f5 fbb2 	bl	80002ac <__adddf3>
 800ab48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab4c:	4606      	mov	r6, r0
 800ab4e:	460f      	mov	r7, r1
 800ab50:	f7f5 fff2 	bl	8000b38 <__aeabi_dcmpgt>
 800ab54:	b9c8      	cbnz	r0, 800ab8a <_dtoa_r+0x69a>
 800ab56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	4639      	mov	r1, r7
 800ab5e:	f7f5 ffc3 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab62:	b110      	cbz	r0, 800ab6a <_dtoa_r+0x67a>
 800ab64:	f018 0f01 	tst.w	r8, #1
 800ab68:	d10f      	bne.n	800ab8a <_dtoa_r+0x69a>
 800ab6a:	9904      	ldr	r1, [sp, #16]
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f000 fe0a 	bl	800b786 <_Bfree>
 800ab72:	2300      	movs	r3, #0
 800ab74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab76:	702b      	strb	r3, [r5, #0]
 800ab78:	f10a 0301 	add.w	r3, sl, #1
 800ab7c:	6013      	str	r3, [r2, #0]
 800ab7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f000 8241 	beq.w	800b008 <_dtoa_r+0xb18>
 800ab86:	601d      	str	r5, [r3, #0]
 800ab88:	e23e      	b.n	800b008 <_dtoa_r+0xb18>
 800ab8a:	f8cd a020 	str.w	sl, [sp, #32]
 800ab8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab92:	2a39      	cmp	r2, #57	; 0x39
 800ab94:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800ab98:	d108      	bne.n	800abac <_dtoa_r+0x6bc>
 800ab9a:	459b      	cmp	fp, r3
 800ab9c:	d10a      	bne.n	800abb4 <_dtoa_r+0x6c4>
 800ab9e:	9b08      	ldr	r3, [sp, #32]
 800aba0:	3301      	adds	r3, #1
 800aba2:	9308      	str	r3, [sp, #32]
 800aba4:	2330      	movs	r3, #48	; 0x30
 800aba6:	f88b 3000 	strb.w	r3, [fp]
 800abaa:	465b      	mov	r3, fp
 800abac:	781a      	ldrb	r2, [r3, #0]
 800abae:	3201      	adds	r2, #1
 800abb0:	701a      	strb	r2, [r3, #0]
 800abb2:	e78c      	b.n	800aace <_dtoa_r+0x5de>
 800abb4:	461d      	mov	r5, r3
 800abb6:	e7ea      	b.n	800ab8e <_dtoa_r+0x69e>
 800abb8:	2200      	movs	r2, #0
 800abba:	4b9b      	ldr	r3, [pc, #620]	; (800ae28 <_dtoa_r+0x938>)
 800abbc:	f7f5 fd2c 	bl	8000618 <__aeabi_dmul>
 800abc0:	2200      	movs	r2, #0
 800abc2:	2300      	movs	r3, #0
 800abc4:	4606      	mov	r6, r0
 800abc6:	460f      	mov	r7, r1
 800abc8:	f7f5 ff8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800abcc:	2800      	cmp	r0, #0
 800abce:	d09a      	beq.n	800ab06 <_dtoa_r+0x616>
 800abd0:	e7cb      	b.n	800ab6a <_dtoa_r+0x67a>
 800abd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abd4:	2a00      	cmp	r2, #0
 800abd6:	f000 808b 	beq.w	800acf0 <_dtoa_r+0x800>
 800abda:	9a06      	ldr	r2, [sp, #24]
 800abdc:	2a01      	cmp	r2, #1
 800abde:	dc6e      	bgt.n	800acbe <_dtoa_r+0x7ce>
 800abe0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800abe2:	2a00      	cmp	r2, #0
 800abe4:	d067      	beq.n	800acb6 <_dtoa_r+0x7c6>
 800abe6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800abea:	9f07      	ldr	r7, [sp, #28]
 800abec:	9d05      	ldr	r5, [sp, #20]
 800abee:	9a05      	ldr	r2, [sp, #20]
 800abf0:	2101      	movs	r1, #1
 800abf2:	441a      	add	r2, r3
 800abf4:	4620      	mov	r0, r4
 800abf6:	9205      	str	r2, [sp, #20]
 800abf8:	4498      	add	r8, r3
 800abfa:	f000 fea2 	bl	800b942 <__i2b>
 800abfe:	4606      	mov	r6, r0
 800ac00:	2d00      	cmp	r5, #0
 800ac02:	dd0c      	ble.n	800ac1e <_dtoa_r+0x72e>
 800ac04:	f1b8 0f00 	cmp.w	r8, #0
 800ac08:	dd09      	ble.n	800ac1e <_dtoa_r+0x72e>
 800ac0a:	4545      	cmp	r5, r8
 800ac0c:	9a05      	ldr	r2, [sp, #20]
 800ac0e:	462b      	mov	r3, r5
 800ac10:	bfa8      	it	ge
 800ac12:	4643      	movge	r3, r8
 800ac14:	1ad2      	subs	r2, r2, r3
 800ac16:	9205      	str	r2, [sp, #20]
 800ac18:	1aed      	subs	r5, r5, r3
 800ac1a:	eba8 0803 	sub.w	r8, r8, r3
 800ac1e:	9b07      	ldr	r3, [sp, #28]
 800ac20:	b1eb      	cbz	r3, 800ac5e <_dtoa_r+0x76e>
 800ac22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d067      	beq.n	800acf8 <_dtoa_r+0x808>
 800ac28:	b18f      	cbz	r7, 800ac4e <_dtoa_r+0x75e>
 800ac2a:	4631      	mov	r1, r6
 800ac2c:	463a      	mov	r2, r7
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f000 ff26 	bl	800ba80 <__pow5mult>
 800ac34:	9a04      	ldr	r2, [sp, #16]
 800ac36:	4601      	mov	r1, r0
 800ac38:	4606      	mov	r6, r0
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f000 fe8a 	bl	800b954 <__multiply>
 800ac40:	9904      	ldr	r1, [sp, #16]
 800ac42:	9008      	str	r0, [sp, #32]
 800ac44:	4620      	mov	r0, r4
 800ac46:	f000 fd9e 	bl	800b786 <_Bfree>
 800ac4a:	9b08      	ldr	r3, [sp, #32]
 800ac4c:	9304      	str	r3, [sp, #16]
 800ac4e:	9b07      	ldr	r3, [sp, #28]
 800ac50:	1bda      	subs	r2, r3, r7
 800ac52:	d004      	beq.n	800ac5e <_dtoa_r+0x76e>
 800ac54:	9904      	ldr	r1, [sp, #16]
 800ac56:	4620      	mov	r0, r4
 800ac58:	f000 ff12 	bl	800ba80 <__pow5mult>
 800ac5c:	9004      	str	r0, [sp, #16]
 800ac5e:	2101      	movs	r1, #1
 800ac60:	4620      	mov	r0, r4
 800ac62:	f000 fe6e 	bl	800b942 <__i2b>
 800ac66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac68:	4607      	mov	r7, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f000 81d0 	beq.w	800b010 <_dtoa_r+0xb20>
 800ac70:	461a      	mov	r2, r3
 800ac72:	4601      	mov	r1, r0
 800ac74:	4620      	mov	r0, r4
 800ac76:	f000 ff03 	bl	800ba80 <__pow5mult>
 800ac7a:	9b06      	ldr	r3, [sp, #24]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	4607      	mov	r7, r0
 800ac80:	dc40      	bgt.n	800ad04 <_dtoa_r+0x814>
 800ac82:	9b00      	ldr	r3, [sp, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d139      	bne.n	800acfc <_dtoa_r+0x80c>
 800ac88:	9b01      	ldr	r3, [sp, #4]
 800ac8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d136      	bne.n	800ad00 <_dtoa_r+0x810>
 800ac92:	9b01      	ldr	r3, [sp, #4]
 800ac94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac98:	0d1b      	lsrs	r3, r3, #20
 800ac9a:	051b      	lsls	r3, r3, #20
 800ac9c:	b12b      	cbz	r3, 800acaa <_dtoa_r+0x7ba>
 800ac9e:	9b05      	ldr	r3, [sp, #20]
 800aca0:	3301      	adds	r3, #1
 800aca2:	9305      	str	r3, [sp, #20]
 800aca4:	f108 0801 	add.w	r8, r8, #1
 800aca8:	2301      	movs	r3, #1
 800acaa:	9307      	str	r3, [sp, #28]
 800acac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d12a      	bne.n	800ad08 <_dtoa_r+0x818>
 800acb2:	2001      	movs	r0, #1
 800acb4:	e030      	b.n	800ad18 <_dtoa_r+0x828>
 800acb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acb8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800acbc:	e795      	b.n	800abea <_dtoa_r+0x6fa>
 800acbe:	9b07      	ldr	r3, [sp, #28]
 800acc0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800acc4:	42bb      	cmp	r3, r7
 800acc6:	bfbf      	itttt	lt
 800acc8:	9b07      	ldrlt	r3, [sp, #28]
 800acca:	9707      	strlt	r7, [sp, #28]
 800accc:	1afa      	sublt	r2, r7, r3
 800acce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800acd0:	bfbb      	ittet	lt
 800acd2:	189b      	addlt	r3, r3, r2
 800acd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800acd6:	1bdf      	subge	r7, r3, r7
 800acd8:	2700      	movlt	r7, #0
 800acda:	f1b9 0f00 	cmp.w	r9, #0
 800acde:	bfb5      	itete	lt
 800ace0:	9b05      	ldrlt	r3, [sp, #20]
 800ace2:	9d05      	ldrge	r5, [sp, #20]
 800ace4:	eba3 0509 	sublt.w	r5, r3, r9
 800ace8:	464b      	movge	r3, r9
 800acea:	bfb8      	it	lt
 800acec:	2300      	movlt	r3, #0
 800acee:	e77e      	b.n	800abee <_dtoa_r+0x6fe>
 800acf0:	9f07      	ldr	r7, [sp, #28]
 800acf2:	9d05      	ldr	r5, [sp, #20]
 800acf4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800acf6:	e783      	b.n	800ac00 <_dtoa_r+0x710>
 800acf8:	9a07      	ldr	r2, [sp, #28]
 800acfa:	e7ab      	b.n	800ac54 <_dtoa_r+0x764>
 800acfc:	2300      	movs	r3, #0
 800acfe:	e7d4      	b.n	800acaa <_dtoa_r+0x7ba>
 800ad00:	9b00      	ldr	r3, [sp, #0]
 800ad02:	e7d2      	b.n	800acaa <_dtoa_r+0x7ba>
 800ad04:	2300      	movs	r3, #0
 800ad06:	9307      	str	r3, [sp, #28]
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ad0e:	6918      	ldr	r0, [r3, #16]
 800ad10:	f000 fdc9 	bl	800b8a6 <__hi0bits>
 800ad14:	f1c0 0020 	rsb	r0, r0, #32
 800ad18:	4440      	add	r0, r8
 800ad1a:	f010 001f 	ands.w	r0, r0, #31
 800ad1e:	d047      	beq.n	800adb0 <_dtoa_r+0x8c0>
 800ad20:	f1c0 0320 	rsb	r3, r0, #32
 800ad24:	2b04      	cmp	r3, #4
 800ad26:	dd3b      	ble.n	800ada0 <_dtoa_r+0x8b0>
 800ad28:	9b05      	ldr	r3, [sp, #20]
 800ad2a:	f1c0 001c 	rsb	r0, r0, #28
 800ad2e:	4403      	add	r3, r0
 800ad30:	9305      	str	r3, [sp, #20]
 800ad32:	4405      	add	r5, r0
 800ad34:	4480      	add	r8, r0
 800ad36:	9b05      	ldr	r3, [sp, #20]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	dd05      	ble.n	800ad48 <_dtoa_r+0x858>
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	9904      	ldr	r1, [sp, #16]
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 feeb 	bl	800bb1c <__lshift>
 800ad46:	9004      	str	r0, [sp, #16]
 800ad48:	f1b8 0f00 	cmp.w	r8, #0
 800ad4c:	dd05      	ble.n	800ad5a <_dtoa_r+0x86a>
 800ad4e:	4639      	mov	r1, r7
 800ad50:	4642      	mov	r2, r8
 800ad52:	4620      	mov	r0, r4
 800ad54:	f000 fee2 	bl	800bb1c <__lshift>
 800ad58:	4607      	mov	r7, r0
 800ad5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad5c:	b353      	cbz	r3, 800adb4 <_dtoa_r+0x8c4>
 800ad5e:	4639      	mov	r1, r7
 800ad60:	9804      	ldr	r0, [sp, #16]
 800ad62:	f000 ff2f 	bl	800bbc4 <__mcmp>
 800ad66:	2800      	cmp	r0, #0
 800ad68:	da24      	bge.n	800adb4 <_dtoa_r+0x8c4>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	220a      	movs	r2, #10
 800ad6e:	9904      	ldr	r1, [sp, #16]
 800ad70:	4620      	mov	r0, r4
 800ad72:	f000 fd1f 	bl	800b7b4 <__multadd>
 800ad76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad78:	9004      	str	r0, [sp, #16]
 800ad7a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f000 814d 	beq.w	800b01e <_dtoa_r+0xb2e>
 800ad84:	2300      	movs	r3, #0
 800ad86:	4631      	mov	r1, r6
 800ad88:	220a      	movs	r2, #10
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f000 fd12 	bl	800b7b4 <__multadd>
 800ad90:	9b02      	ldr	r3, [sp, #8]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	4606      	mov	r6, r0
 800ad96:	dc4f      	bgt.n	800ae38 <_dtoa_r+0x948>
 800ad98:	9b06      	ldr	r3, [sp, #24]
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	dd4c      	ble.n	800ae38 <_dtoa_r+0x948>
 800ad9e:	e011      	b.n	800adc4 <_dtoa_r+0x8d4>
 800ada0:	d0c9      	beq.n	800ad36 <_dtoa_r+0x846>
 800ada2:	9a05      	ldr	r2, [sp, #20]
 800ada4:	331c      	adds	r3, #28
 800ada6:	441a      	add	r2, r3
 800ada8:	9205      	str	r2, [sp, #20]
 800adaa:	441d      	add	r5, r3
 800adac:	4498      	add	r8, r3
 800adae:	e7c2      	b.n	800ad36 <_dtoa_r+0x846>
 800adb0:	4603      	mov	r3, r0
 800adb2:	e7f6      	b.n	800ada2 <_dtoa_r+0x8b2>
 800adb4:	f1b9 0f00 	cmp.w	r9, #0
 800adb8:	dc38      	bgt.n	800ae2c <_dtoa_r+0x93c>
 800adba:	9b06      	ldr	r3, [sp, #24]
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	dd35      	ble.n	800ae2c <_dtoa_r+0x93c>
 800adc0:	f8cd 9008 	str.w	r9, [sp, #8]
 800adc4:	9b02      	ldr	r3, [sp, #8]
 800adc6:	b963      	cbnz	r3, 800ade2 <_dtoa_r+0x8f2>
 800adc8:	4639      	mov	r1, r7
 800adca:	2205      	movs	r2, #5
 800adcc:	4620      	mov	r0, r4
 800adce:	f000 fcf1 	bl	800b7b4 <__multadd>
 800add2:	4601      	mov	r1, r0
 800add4:	4607      	mov	r7, r0
 800add6:	9804      	ldr	r0, [sp, #16]
 800add8:	f000 fef4 	bl	800bbc4 <__mcmp>
 800addc:	2800      	cmp	r0, #0
 800adde:	f73f adcc 	bgt.w	800a97a <_dtoa_r+0x48a>
 800ade2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ade4:	465d      	mov	r5, fp
 800ade6:	ea6f 0a03 	mvn.w	sl, r3
 800adea:	f04f 0900 	mov.w	r9, #0
 800adee:	4639      	mov	r1, r7
 800adf0:	4620      	mov	r0, r4
 800adf2:	f000 fcc8 	bl	800b786 <_Bfree>
 800adf6:	2e00      	cmp	r6, #0
 800adf8:	f43f aeb7 	beq.w	800ab6a <_dtoa_r+0x67a>
 800adfc:	f1b9 0f00 	cmp.w	r9, #0
 800ae00:	d005      	beq.n	800ae0e <_dtoa_r+0x91e>
 800ae02:	45b1      	cmp	r9, r6
 800ae04:	d003      	beq.n	800ae0e <_dtoa_r+0x91e>
 800ae06:	4649      	mov	r1, r9
 800ae08:	4620      	mov	r0, r4
 800ae0a:	f000 fcbc 	bl	800b786 <_Bfree>
 800ae0e:	4631      	mov	r1, r6
 800ae10:	4620      	mov	r0, r4
 800ae12:	f000 fcb8 	bl	800b786 <_Bfree>
 800ae16:	e6a8      	b.n	800ab6a <_dtoa_r+0x67a>
 800ae18:	2700      	movs	r7, #0
 800ae1a:	463e      	mov	r6, r7
 800ae1c:	e7e1      	b.n	800ade2 <_dtoa_r+0x8f2>
 800ae1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ae22:	463e      	mov	r6, r7
 800ae24:	e5a9      	b.n	800a97a <_dtoa_r+0x48a>
 800ae26:	bf00      	nop
 800ae28:	40240000 	.word	0x40240000
 800ae2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae2e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f000 80fa 	beq.w	800b02c <_dtoa_r+0xb3c>
 800ae38:	2d00      	cmp	r5, #0
 800ae3a:	dd05      	ble.n	800ae48 <_dtoa_r+0x958>
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	462a      	mov	r2, r5
 800ae40:	4620      	mov	r0, r4
 800ae42:	f000 fe6b 	bl	800bb1c <__lshift>
 800ae46:	4606      	mov	r6, r0
 800ae48:	9b07      	ldr	r3, [sp, #28]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d04c      	beq.n	800aee8 <_dtoa_r+0x9f8>
 800ae4e:	6871      	ldr	r1, [r6, #4]
 800ae50:	4620      	mov	r0, r4
 800ae52:	f000 fc64 	bl	800b71e <_Balloc>
 800ae56:	6932      	ldr	r2, [r6, #16]
 800ae58:	3202      	adds	r2, #2
 800ae5a:	4605      	mov	r5, r0
 800ae5c:	0092      	lsls	r2, r2, #2
 800ae5e:	f106 010c 	add.w	r1, r6, #12
 800ae62:	300c      	adds	r0, #12
 800ae64:	f000 fc50 	bl	800b708 <memcpy>
 800ae68:	2201      	movs	r2, #1
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f000 fe55 	bl	800bb1c <__lshift>
 800ae72:	9b00      	ldr	r3, [sp, #0]
 800ae74:	f8cd b014 	str.w	fp, [sp, #20]
 800ae78:	f003 0301 	and.w	r3, r3, #1
 800ae7c:	46b1      	mov	r9, r6
 800ae7e:	9307      	str	r3, [sp, #28]
 800ae80:	4606      	mov	r6, r0
 800ae82:	4639      	mov	r1, r7
 800ae84:	9804      	ldr	r0, [sp, #16]
 800ae86:	f7ff faa5 	bl	800a3d4 <quorem>
 800ae8a:	4649      	mov	r1, r9
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ae92:	9804      	ldr	r0, [sp, #16]
 800ae94:	f000 fe96 	bl	800bbc4 <__mcmp>
 800ae98:	4632      	mov	r2, r6
 800ae9a:	9000      	str	r0, [sp, #0]
 800ae9c:	4639      	mov	r1, r7
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f000 feaa 	bl	800bbf8 <__mdiff>
 800aea4:	68c3      	ldr	r3, [r0, #12]
 800aea6:	4602      	mov	r2, r0
 800aea8:	bb03      	cbnz	r3, 800aeec <_dtoa_r+0x9fc>
 800aeaa:	4601      	mov	r1, r0
 800aeac:	9008      	str	r0, [sp, #32]
 800aeae:	9804      	ldr	r0, [sp, #16]
 800aeb0:	f000 fe88 	bl	800bbc4 <__mcmp>
 800aeb4:	9a08      	ldr	r2, [sp, #32]
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	4611      	mov	r1, r2
 800aeba:	4620      	mov	r0, r4
 800aebc:	9308      	str	r3, [sp, #32]
 800aebe:	f000 fc62 	bl	800b786 <_Bfree>
 800aec2:	9b08      	ldr	r3, [sp, #32]
 800aec4:	b9a3      	cbnz	r3, 800aef0 <_dtoa_r+0xa00>
 800aec6:	9a06      	ldr	r2, [sp, #24]
 800aec8:	b992      	cbnz	r2, 800aef0 <_dtoa_r+0xa00>
 800aeca:	9a07      	ldr	r2, [sp, #28]
 800aecc:	b982      	cbnz	r2, 800aef0 <_dtoa_r+0xa00>
 800aece:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aed2:	d029      	beq.n	800af28 <_dtoa_r+0xa38>
 800aed4:	9b00      	ldr	r3, [sp, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	dd01      	ble.n	800aede <_dtoa_r+0x9ee>
 800aeda:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800aede:	9b05      	ldr	r3, [sp, #20]
 800aee0:	1c5d      	adds	r5, r3, #1
 800aee2:	f883 8000 	strb.w	r8, [r3]
 800aee6:	e782      	b.n	800adee <_dtoa_r+0x8fe>
 800aee8:	4630      	mov	r0, r6
 800aeea:	e7c2      	b.n	800ae72 <_dtoa_r+0x982>
 800aeec:	2301      	movs	r3, #1
 800aeee:	e7e3      	b.n	800aeb8 <_dtoa_r+0x9c8>
 800aef0:	9a00      	ldr	r2, [sp, #0]
 800aef2:	2a00      	cmp	r2, #0
 800aef4:	db04      	blt.n	800af00 <_dtoa_r+0xa10>
 800aef6:	d125      	bne.n	800af44 <_dtoa_r+0xa54>
 800aef8:	9a06      	ldr	r2, [sp, #24]
 800aefa:	bb1a      	cbnz	r2, 800af44 <_dtoa_r+0xa54>
 800aefc:	9a07      	ldr	r2, [sp, #28]
 800aefe:	bb0a      	cbnz	r2, 800af44 <_dtoa_r+0xa54>
 800af00:	2b00      	cmp	r3, #0
 800af02:	ddec      	ble.n	800aede <_dtoa_r+0x9ee>
 800af04:	2201      	movs	r2, #1
 800af06:	9904      	ldr	r1, [sp, #16]
 800af08:	4620      	mov	r0, r4
 800af0a:	f000 fe07 	bl	800bb1c <__lshift>
 800af0e:	4639      	mov	r1, r7
 800af10:	9004      	str	r0, [sp, #16]
 800af12:	f000 fe57 	bl	800bbc4 <__mcmp>
 800af16:	2800      	cmp	r0, #0
 800af18:	dc03      	bgt.n	800af22 <_dtoa_r+0xa32>
 800af1a:	d1e0      	bne.n	800aede <_dtoa_r+0x9ee>
 800af1c:	f018 0f01 	tst.w	r8, #1
 800af20:	d0dd      	beq.n	800aede <_dtoa_r+0x9ee>
 800af22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800af26:	d1d8      	bne.n	800aeda <_dtoa_r+0x9ea>
 800af28:	9b05      	ldr	r3, [sp, #20]
 800af2a:	9a05      	ldr	r2, [sp, #20]
 800af2c:	1c5d      	adds	r5, r3, #1
 800af2e:	2339      	movs	r3, #57	; 0x39
 800af30:	7013      	strb	r3, [r2, #0]
 800af32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af36:	2b39      	cmp	r3, #57	; 0x39
 800af38:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800af3c:	d04f      	beq.n	800afde <_dtoa_r+0xaee>
 800af3e:	3301      	adds	r3, #1
 800af40:	7013      	strb	r3, [r2, #0]
 800af42:	e754      	b.n	800adee <_dtoa_r+0x8fe>
 800af44:	9a05      	ldr	r2, [sp, #20]
 800af46:	2b00      	cmp	r3, #0
 800af48:	f102 0501 	add.w	r5, r2, #1
 800af4c:	dd06      	ble.n	800af5c <_dtoa_r+0xa6c>
 800af4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800af52:	d0e9      	beq.n	800af28 <_dtoa_r+0xa38>
 800af54:	f108 0801 	add.w	r8, r8, #1
 800af58:	9b05      	ldr	r3, [sp, #20]
 800af5a:	e7c2      	b.n	800aee2 <_dtoa_r+0x9f2>
 800af5c:	9a02      	ldr	r2, [sp, #8]
 800af5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800af62:	eba5 030b 	sub.w	r3, r5, fp
 800af66:	4293      	cmp	r3, r2
 800af68:	d021      	beq.n	800afae <_dtoa_r+0xabe>
 800af6a:	2300      	movs	r3, #0
 800af6c:	220a      	movs	r2, #10
 800af6e:	9904      	ldr	r1, [sp, #16]
 800af70:	4620      	mov	r0, r4
 800af72:	f000 fc1f 	bl	800b7b4 <__multadd>
 800af76:	45b1      	cmp	r9, r6
 800af78:	9004      	str	r0, [sp, #16]
 800af7a:	f04f 0300 	mov.w	r3, #0
 800af7e:	f04f 020a 	mov.w	r2, #10
 800af82:	4649      	mov	r1, r9
 800af84:	4620      	mov	r0, r4
 800af86:	d105      	bne.n	800af94 <_dtoa_r+0xaa4>
 800af88:	f000 fc14 	bl	800b7b4 <__multadd>
 800af8c:	4681      	mov	r9, r0
 800af8e:	4606      	mov	r6, r0
 800af90:	9505      	str	r5, [sp, #20]
 800af92:	e776      	b.n	800ae82 <_dtoa_r+0x992>
 800af94:	f000 fc0e 	bl	800b7b4 <__multadd>
 800af98:	4631      	mov	r1, r6
 800af9a:	4681      	mov	r9, r0
 800af9c:	2300      	movs	r3, #0
 800af9e:	220a      	movs	r2, #10
 800afa0:	4620      	mov	r0, r4
 800afa2:	f000 fc07 	bl	800b7b4 <__multadd>
 800afa6:	4606      	mov	r6, r0
 800afa8:	e7f2      	b.n	800af90 <_dtoa_r+0xaa0>
 800afaa:	f04f 0900 	mov.w	r9, #0
 800afae:	2201      	movs	r2, #1
 800afb0:	9904      	ldr	r1, [sp, #16]
 800afb2:	4620      	mov	r0, r4
 800afb4:	f000 fdb2 	bl	800bb1c <__lshift>
 800afb8:	4639      	mov	r1, r7
 800afba:	9004      	str	r0, [sp, #16]
 800afbc:	f000 fe02 	bl	800bbc4 <__mcmp>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	dcb6      	bgt.n	800af32 <_dtoa_r+0xa42>
 800afc4:	d102      	bne.n	800afcc <_dtoa_r+0xadc>
 800afc6:	f018 0f01 	tst.w	r8, #1
 800afca:	d1b2      	bne.n	800af32 <_dtoa_r+0xa42>
 800afcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800afd0:	2b30      	cmp	r3, #48	; 0x30
 800afd2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800afd6:	f47f af0a 	bne.w	800adee <_dtoa_r+0x8fe>
 800afda:	4615      	mov	r5, r2
 800afdc:	e7f6      	b.n	800afcc <_dtoa_r+0xadc>
 800afde:	4593      	cmp	fp, r2
 800afe0:	d105      	bne.n	800afee <_dtoa_r+0xafe>
 800afe2:	2331      	movs	r3, #49	; 0x31
 800afe4:	f10a 0a01 	add.w	sl, sl, #1
 800afe8:	f88b 3000 	strb.w	r3, [fp]
 800afec:	e6ff      	b.n	800adee <_dtoa_r+0x8fe>
 800afee:	4615      	mov	r5, r2
 800aff0:	e79f      	b.n	800af32 <_dtoa_r+0xa42>
 800aff2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800b058 <_dtoa_r+0xb68>
 800aff6:	e007      	b.n	800b008 <_dtoa_r+0xb18>
 800aff8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800affa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800b05c <_dtoa_r+0xb6c>
 800affe:	b11b      	cbz	r3, 800b008 <_dtoa_r+0xb18>
 800b000:	f10b 0308 	add.w	r3, fp, #8
 800b004:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b006:	6013      	str	r3, [r2, #0]
 800b008:	4658      	mov	r0, fp
 800b00a:	b017      	add	sp, #92	; 0x5c
 800b00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b010:	9b06      	ldr	r3, [sp, #24]
 800b012:	2b01      	cmp	r3, #1
 800b014:	f77f ae35 	ble.w	800ac82 <_dtoa_r+0x792>
 800b018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b01a:	9307      	str	r3, [sp, #28]
 800b01c:	e649      	b.n	800acb2 <_dtoa_r+0x7c2>
 800b01e:	9b02      	ldr	r3, [sp, #8]
 800b020:	2b00      	cmp	r3, #0
 800b022:	dc03      	bgt.n	800b02c <_dtoa_r+0xb3c>
 800b024:	9b06      	ldr	r3, [sp, #24]
 800b026:	2b02      	cmp	r3, #2
 800b028:	f73f aecc 	bgt.w	800adc4 <_dtoa_r+0x8d4>
 800b02c:	465d      	mov	r5, fp
 800b02e:	4639      	mov	r1, r7
 800b030:	9804      	ldr	r0, [sp, #16]
 800b032:	f7ff f9cf 	bl	800a3d4 <quorem>
 800b036:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b03a:	f805 8b01 	strb.w	r8, [r5], #1
 800b03e:	9a02      	ldr	r2, [sp, #8]
 800b040:	eba5 030b 	sub.w	r3, r5, fp
 800b044:	429a      	cmp	r2, r3
 800b046:	ddb0      	ble.n	800afaa <_dtoa_r+0xaba>
 800b048:	2300      	movs	r3, #0
 800b04a:	220a      	movs	r2, #10
 800b04c:	9904      	ldr	r1, [sp, #16]
 800b04e:	4620      	mov	r0, r4
 800b050:	f000 fbb0 	bl	800b7b4 <__multadd>
 800b054:	9004      	str	r0, [sp, #16]
 800b056:	e7ea      	b.n	800b02e <_dtoa_r+0xb3e>
 800b058:	0800c55c 	.word	0x0800c55c
 800b05c:	0800c5d0 	.word	0x0800c5d0

0800b060 <rshift>:
 800b060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b062:	6906      	ldr	r6, [r0, #16]
 800b064:	114b      	asrs	r3, r1, #5
 800b066:	429e      	cmp	r6, r3
 800b068:	f100 0414 	add.w	r4, r0, #20
 800b06c:	dd30      	ble.n	800b0d0 <rshift+0x70>
 800b06e:	f011 011f 	ands.w	r1, r1, #31
 800b072:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b076:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b07a:	d108      	bne.n	800b08e <rshift+0x2e>
 800b07c:	4621      	mov	r1, r4
 800b07e:	42b2      	cmp	r2, r6
 800b080:	460b      	mov	r3, r1
 800b082:	d211      	bcs.n	800b0a8 <rshift+0x48>
 800b084:	f852 3b04 	ldr.w	r3, [r2], #4
 800b088:	f841 3b04 	str.w	r3, [r1], #4
 800b08c:	e7f7      	b.n	800b07e <rshift+0x1e>
 800b08e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800b092:	f1c1 0c20 	rsb	ip, r1, #32
 800b096:	40cd      	lsrs	r5, r1
 800b098:	3204      	adds	r2, #4
 800b09a:	4623      	mov	r3, r4
 800b09c:	42b2      	cmp	r2, r6
 800b09e:	4617      	mov	r7, r2
 800b0a0:	d30c      	bcc.n	800b0bc <rshift+0x5c>
 800b0a2:	601d      	str	r5, [r3, #0]
 800b0a4:	b105      	cbz	r5, 800b0a8 <rshift+0x48>
 800b0a6:	3304      	adds	r3, #4
 800b0a8:	1b1a      	subs	r2, r3, r4
 800b0aa:	42a3      	cmp	r3, r4
 800b0ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b0b0:	bf08      	it	eq
 800b0b2:	2300      	moveq	r3, #0
 800b0b4:	6102      	str	r2, [r0, #16]
 800b0b6:	bf08      	it	eq
 800b0b8:	6143      	streq	r3, [r0, #20]
 800b0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0bc:	683f      	ldr	r7, [r7, #0]
 800b0be:	fa07 f70c 	lsl.w	r7, r7, ip
 800b0c2:	433d      	orrs	r5, r7
 800b0c4:	f843 5b04 	str.w	r5, [r3], #4
 800b0c8:	f852 5b04 	ldr.w	r5, [r2], #4
 800b0cc:	40cd      	lsrs	r5, r1
 800b0ce:	e7e5      	b.n	800b09c <rshift+0x3c>
 800b0d0:	4623      	mov	r3, r4
 800b0d2:	e7e9      	b.n	800b0a8 <rshift+0x48>

0800b0d4 <__hexdig_fun>:
 800b0d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b0d8:	2b09      	cmp	r3, #9
 800b0da:	d802      	bhi.n	800b0e2 <__hexdig_fun+0xe>
 800b0dc:	3820      	subs	r0, #32
 800b0de:	b2c0      	uxtb	r0, r0
 800b0e0:	4770      	bx	lr
 800b0e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b0e6:	2b05      	cmp	r3, #5
 800b0e8:	d801      	bhi.n	800b0ee <__hexdig_fun+0x1a>
 800b0ea:	3847      	subs	r0, #71	; 0x47
 800b0ec:	e7f7      	b.n	800b0de <__hexdig_fun+0xa>
 800b0ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b0f2:	2b05      	cmp	r3, #5
 800b0f4:	d801      	bhi.n	800b0fa <__hexdig_fun+0x26>
 800b0f6:	3827      	subs	r0, #39	; 0x27
 800b0f8:	e7f1      	b.n	800b0de <__hexdig_fun+0xa>
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	4770      	bx	lr

0800b0fe <__gethex>:
 800b0fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b102:	b08b      	sub	sp, #44	; 0x2c
 800b104:	468a      	mov	sl, r1
 800b106:	9002      	str	r0, [sp, #8]
 800b108:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b10a:	9306      	str	r3, [sp, #24]
 800b10c:	4690      	mov	r8, r2
 800b10e:	f000 fad0 	bl	800b6b2 <__localeconv_l>
 800b112:	6803      	ldr	r3, [r0, #0]
 800b114:	9303      	str	r3, [sp, #12]
 800b116:	4618      	mov	r0, r3
 800b118:	f7f5 f864 	bl	80001e4 <strlen>
 800b11c:	9b03      	ldr	r3, [sp, #12]
 800b11e:	9001      	str	r0, [sp, #4]
 800b120:	4403      	add	r3, r0
 800b122:	f04f 0b00 	mov.w	fp, #0
 800b126:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b12a:	9307      	str	r3, [sp, #28]
 800b12c:	f8da 3000 	ldr.w	r3, [sl]
 800b130:	3302      	adds	r3, #2
 800b132:	461f      	mov	r7, r3
 800b134:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b138:	2830      	cmp	r0, #48	; 0x30
 800b13a:	d06c      	beq.n	800b216 <__gethex+0x118>
 800b13c:	f7ff ffca 	bl	800b0d4 <__hexdig_fun>
 800b140:	4604      	mov	r4, r0
 800b142:	2800      	cmp	r0, #0
 800b144:	d16a      	bne.n	800b21c <__gethex+0x11e>
 800b146:	9a01      	ldr	r2, [sp, #4]
 800b148:	9903      	ldr	r1, [sp, #12]
 800b14a:	4638      	mov	r0, r7
 800b14c:	f001 f8fe 	bl	800c34c <strncmp>
 800b150:	2800      	cmp	r0, #0
 800b152:	d166      	bne.n	800b222 <__gethex+0x124>
 800b154:	9b01      	ldr	r3, [sp, #4]
 800b156:	5cf8      	ldrb	r0, [r7, r3]
 800b158:	18fe      	adds	r6, r7, r3
 800b15a:	f7ff ffbb 	bl	800b0d4 <__hexdig_fun>
 800b15e:	2800      	cmp	r0, #0
 800b160:	d062      	beq.n	800b228 <__gethex+0x12a>
 800b162:	4633      	mov	r3, r6
 800b164:	7818      	ldrb	r0, [r3, #0]
 800b166:	2830      	cmp	r0, #48	; 0x30
 800b168:	461f      	mov	r7, r3
 800b16a:	f103 0301 	add.w	r3, r3, #1
 800b16e:	d0f9      	beq.n	800b164 <__gethex+0x66>
 800b170:	f7ff ffb0 	bl	800b0d4 <__hexdig_fun>
 800b174:	fab0 f580 	clz	r5, r0
 800b178:	096d      	lsrs	r5, r5, #5
 800b17a:	4634      	mov	r4, r6
 800b17c:	f04f 0b01 	mov.w	fp, #1
 800b180:	463a      	mov	r2, r7
 800b182:	4616      	mov	r6, r2
 800b184:	3201      	adds	r2, #1
 800b186:	7830      	ldrb	r0, [r6, #0]
 800b188:	f7ff ffa4 	bl	800b0d4 <__hexdig_fun>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d1f8      	bne.n	800b182 <__gethex+0x84>
 800b190:	9a01      	ldr	r2, [sp, #4]
 800b192:	9903      	ldr	r1, [sp, #12]
 800b194:	4630      	mov	r0, r6
 800b196:	f001 f8d9 	bl	800c34c <strncmp>
 800b19a:	b950      	cbnz	r0, 800b1b2 <__gethex+0xb4>
 800b19c:	b954      	cbnz	r4, 800b1b4 <__gethex+0xb6>
 800b19e:	9b01      	ldr	r3, [sp, #4]
 800b1a0:	18f4      	adds	r4, r6, r3
 800b1a2:	4622      	mov	r2, r4
 800b1a4:	4616      	mov	r6, r2
 800b1a6:	3201      	adds	r2, #1
 800b1a8:	7830      	ldrb	r0, [r6, #0]
 800b1aa:	f7ff ff93 	bl	800b0d4 <__hexdig_fun>
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	d1f8      	bne.n	800b1a4 <__gethex+0xa6>
 800b1b2:	b10c      	cbz	r4, 800b1b8 <__gethex+0xba>
 800b1b4:	1ba4      	subs	r4, r4, r6
 800b1b6:	00a4      	lsls	r4, r4, #2
 800b1b8:	7833      	ldrb	r3, [r6, #0]
 800b1ba:	2b50      	cmp	r3, #80	; 0x50
 800b1bc:	d001      	beq.n	800b1c2 <__gethex+0xc4>
 800b1be:	2b70      	cmp	r3, #112	; 0x70
 800b1c0:	d140      	bne.n	800b244 <__gethex+0x146>
 800b1c2:	7873      	ldrb	r3, [r6, #1]
 800b1c4:	2b2b      	cmp	r3, #43	; 0x2b
 800b1c6:	d031      	beq.n	800b22c <__gethex+0x12e>
 800b1c8:	2b2d      	cmp	r3, #45	; 0x2d
 800b1ca:	d033      	beq.n	800b234 <__gethex+0x136>
 800b1cc:	1c71      	adds	r1, r6, #1
 800b1ce:	f04f 0900 	mov.w	r9, #0
 800b1d2:	7808      	ldrb	r0, [r1, #0]
 800b1d4:	f7ff ff7e 	bl	800b0d4 <__hexdig_fun>
 800b1d8:	1e43      	subs	r3, r0, #1
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	2b18      	cmp	r3, #24
 800b1de:	d831      	bhi.n	800b244 <__gethex+0x146>
 800b1e0:	f1a0 0210 	sub.w	r2, r0, #16
 800b1e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b1e8:	f7ff ff74 	bl	800b0d4 <__hexdig_fun>
 800b1ec:	1e43      	subs	r3, r0, #1
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	2b18      	cmp	r3, #24
 800b1f2:	d922      	bls.n	800b23a <__gethex+0x13c>
 800b1f4:	f1b9 0f00 	cmp.w	r9, #0
 800b1f8:	d000      	beq.n	800b1fc <__gethex+0xfe>
 800b1fa:	4252      	negs	r2, r2
 800b1fc:	4414      	add	r4, r2
 800b1fe:	f8ca 1000 	str.w	r1, [sl]
 800b202:	b30d      	cbz	r5, 800b248 <__gethex+0x14a>
 800b204:	f1bb 0f00 	cmp.w	fp, #0
 800b208:	bf0c      	ite	eq
 800b20a:	2706      	moveq	r7, #6
 800b20c:	2700      	movne	r7, #0
 800b20e:	4638      	mov	r0, r7
 800b210:	b00b      	add	sp, #44	; 0x2c
 800b212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b216:	f10b 0b01 	add.w	fp, fp, #1
 800b21a:	e78a      	b.n	800b132 <__gethex+0x34>
 800b21c:	2500      	movs	r5, #0
 800b21e:	462c      	mov	r4, r5
 800b220:	e7ae      	b.n	800b180 <__gethex+0x82>
 800b222:	463e      	mov	r6, r7
 800b224:	2501      	movs	r5, #1
 800b226:	e7c7      	b.n	800b1b8 <__gethex+0xba>
 800b228:	4604      	mov	r4, r0
 800b22a:	e7fb      	b.n	800b224 <__gethex+0x126>
 800b22c:	f04f 0900 	mov.w	r9, #0
 800b230:	1cb1      	adds	r1, r6, #2
 800b232:	e7ce      	b.n	800b1d2 <__gethex+0xd4>
 800b234:	f04f 0901 	mov.w	r9, #1
 800b238:	e7fa      	b.n	800b230 <__gethex+0x132>
 800b23a:	230a      	movs	r3, #10
 800b23c:	fb03 0202 	mla	r2, r3, r2, r0
 800b240:	3a10      	subs	r2, #16
 800b242:	e7cf      	b.n	800b1e4 <__gethex+0xe6>
 800b244:	4631      	mov	r1, r6
 800b246:	e7da      	b.n	800b1fe <__gethex+0x100>
 800b248:	1bf3      	subs	r3, r6, r7
 800b24a:	3b01      	subs	r3, #1
 800b24c:	4629      	mov	r1, r5
 800b24e:	2b07      	cmp	r3, #7
 800b250:	dc49      	bgt.n	800b2e6 <__gethex+0x1e8>
 800b252:	9802      	ldr	r0, [sp, #8]
 800b254:	f000 fa63 	bl	800b71e <_Balloc>
 800b258:	9b01      	ldr	r3, [sp, #4]
 800b25a:	f100 0914 	add.w	r9, r0, #20
 800b25e:	f04f 0b00 	mov.w	fp, #0
 800b262:	f1c3 0301 	rsb	r3, r3, #1
 800b266:	4605      	mov	r5, r0
 800b268:	f8cd 9010 	str.w	r9, [sp, #16]
 800b26c:	46da      	mov	sl, fp
 800b26e:	9308      	str	r3, [sp, #32]
 800b270:	42b7      	cmp	r7, r6
 800b272:	d33b      	bcc.n	800b2ec <__gethex+0x1ee>
 800b274:	9804      	ldr	r0, [sp, #16]
 800b276:	f840 ab04 	str.w	sl, [r0], #4
 800b27a:	eba0 0009 	sub.w	r0, r0, r9
 800b27e:	1080      	asrs	r0, r0, #2
 800b280:	6128      	str	r0, [r5, #16]
 800b282:	0147      	lsls	r7, r0, #5
 800b284:	4650      	mov	r0, sl
 800b286:	f000 fb0e 	bl	800b8a6 <__hi0bits>
 800b28a:	f8d8 6000 	ldr.w	r6, [r8]
 800b28e:	1a3f      	subs	r7, r7, r0
 800b290:	42b7      	cmp	r7, r6
 800b292:	dd64      	ble.n	800b35e <__gethex+0x260>
 800b294:	1bbf      	subs	r7, r7, r6
 800b296:	4639      	mov	r1, r7
 800b298:	4628      	mov	r0, r5
 800b29a:	f000 fe1d 	bl	800bed8 <__any_on>
 800b29e:	4682      	mov	sl, r0
 800b2a0:	b178      	cbz	r0, 800b2c2 <__gethex+0x1c4>
 800b2a2:	1e7b      	subs	r3, r7, #1
 800b2a4:	1159      	asrs	r1, r3, #5
 800b2a6:	f003 021f 	and.w	r2, r3, #31
 800b2aa:	f04f 0a01 	mov.w	sl, #1
 800b2ae:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b2b2:	fa0a f202 	lsl.w	r2, sl, r2
 800b2b6:	420a      	tst	r2, r1
 800b2b8:	d003      	beq.n	800b2c2 <__gethex+0x1c4>
 800b2ba:	4553      	cmp	r3, sl
 800b2bc:	dc46      	bgt.n	800b34c <__gethex+0x24e>
 800b2be:	f04f 0a02 	mov.w	sl, #2
 800b2c2:	4639      	mov	r1, r7
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	f7ff fecb 	bl	800b060 <rshift>
 800b2ca:	443c      	add	r4, r7
 800b2cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2d0:	42a3      	cmp	r3, r4
 800b2d2:	da52      	bge.n	800b37a <__gethex+0x27c>
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	9802      	ldr	r0, [sp, #8]
 800b2d8:	f000 fa55 	bl	800b786 <_Bfree>
 800b2dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2de:	2300      	movs	r3, #0
 800b2e0:	6013      	str	r3, [r2, #0]
 800b2e2:	27a3      	movs	r7, #163	; 0xa3
 800b2e4:	e793      	b.n	800b20e <__gethex+0x110>
 800b2e6:	3101      	adds	r1, #1
 800b2e8:	105b      	asrs	r3, r3, #1
 800b2ea:	e7b0      	b.n	800b24e <__gethex+0x150>
 800b2ec:	1e73      	subs	r3, r6, #1
 800b2ee:	9305      	str	r3, [sp, #20]
 800b2f0:	9a07      	ldr	r2, [sp, #28]
 800b2f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d018      	beq.n	800b32c <__gethex+0x22e>
 800b2fa:	f1bb 0f20 	cmp.w	fp, #32
 800b2fe:	d107      	bne.n	800b310 <__gethex+0x212>
 800b300:	9b04      	ldr	r3, [sp, #16]
 800b302:	f8c3 a000 	str.w	sl, [r3]
 800b306:	3304      	adds	r3, #4
 800b308:	f04f 0a00 	mov.w	sl, #0
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	46d3      	mov	fp, sl
 800b310:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b314:	f7ff fede 	bl	800b0d4 <__hexdig_fun>
 800b318:	f000 000f 	and.w	r0, r0, #15
 800b31c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b320:	ea4a 0a00 	orr.w	sl, sl, r0
 800b324:	f10b 0b04 	add.w	fp, fp, #4
 800b328:	9b05      	ldr	r3, [sp, #20]
 800b32a:	e00d      	b.n	800b348 <__gethex+0x24a>
 800b32c:	9b05      	ldr	r3, [sp, #20]
 800b32e:	9a08      	ldr	r2, [sp, #32]
 800b330:	4413      	add	r3, r2
 800b332:	42bb      	cmp	r3, r7
 800b334:	d3e1      	bcc.n	800b2fa <__gethex+0x1fc>
 800b336:	4618      	mov	r0, r3
 800b338:	9a01      	ldr	r2, [sp, #4]
 800b33a:	9903      	ldr	r1, [sp, #12]
 800b33c:	9309      	str	r3, [sp, #36]	; 0x24
 800b33e:	f001 f805 	bl	800c34c <strncmp>
 800b342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b344:	2800      	cmp	r0, #0
 800b346:	d1d8      	bne.n	800b2fa <__gethex+0x1fc>
 800b348:	461e      	mov	r6, r3
 800b34a:	e791      	b.n	800b270 <__gethex+0x172>
 800b34c:	1eb9      	subs	r1, r7, #2
 800b34e:	4628      	mov	r0, r5
 800b350:	f000 fdc2 	bl	800bed8 <__any_on>
 800b354:	2800      	cmp	r0, #0
 800b356:	d0b2      	beq.n	800b2be <__gethex+0x1c0>
 800b358:	f04f 0a03 	mov.w	sl, #3
 800b35c:	e7b1      	b.n	800b2c2 <__gethex+0x1c4>
 800b35e:	da09      	bge.n	800b374 <__gethex+0x276>
 800b360:	1bf7      	subs	r7, r6, r7
 800b362:	4629      	mov	r1, r5
 800b364:	463a      	mov	r2, r7
 800b366:	9802      	ldr	r0, [sp, #8]
 800b368:	f000 fbd8 	bl	800bb1c <__lshift>
 800b36c:	1be4      	subs	r4, r4, r7
 800b36e:	4605      	mov	r5, r0
 800b370:	f100 0914 	add.w	r9, r0, #20
 800b374:	f04f 0a00 	mov.w	sl, #0
 800b378:	e7a8      	b.n	800b2cc <__gethex+0x1ce>
 800b37a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b37e:	42a0      	cmp	r0, r4
 800b380:	dd6a      	ble.n	800b458 <__gethex+0x35a>
 800b382:	1b04      	subs	r4, r0, r4
 800b384:	42a6      	cmp	r6, r4
 800b386:	dc2e      	bgt.n	800b3e6 <__gethex+0x2e8>
 800b388:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d022      	beq.n	800b3d6 <__gethex+0x2d8>
 800b390:	2b03      	cmp	r3, #3
 800b392:	d024      	beq.n	800b3de <__gethex+0x2e0>
 800b394:	2b01      	cmp	r3, #1
 800b396:	d115      	bne.n	800b3c4 <__gethex+0x2c6>
 800b398:	42a6      	cmp	r6, r4
 800b39a:	d113      	bne.n	800b3c4 <__gethex+0x2c6>
 800b39c:	2e01      	cmp	r6, #1
 800b39e:	dc0b      	bgt.n	800b3b8 <__gethex+0x2ba>
 800b3a0:	9a06      	ldr	r2, [sp, #24]
 800b3a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	612b      	str	r3, [r5, #16]
 800b3ac:	f8c9 3000 	str.w	r3, [r9]
 800b3b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3b2:	2762      	movs	r7, #98	; 0x62
 800b3b4:	601d      	str	r5, [r3, #0]
 800b3b6:	e72a      	b.n	800b20e <__gethex+0x110>
 800b3b8:	1e71      	subs	r1, r6, #1
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	f000 fd8c 	bl	800bed8 <__any_on>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d1ed      	bne.n	800b3a0 <__gethex+0x2a2>
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	9802      	ldr	r0, [sp, #8]
 800b3c8:	f000 f9dd 	bl	800b786 <_Bfree>
 800b3cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	2750      	movs	r7, #80	; 0x50
 800b3d4:	e71b      	b.n	800b20e <__gethex+0x110>
 800b3d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d0e1      	beq.n	800b3a0 <__gethex+0x2a2>
 800b3dc:	e7f2      	b.n	800b3c4 <__gethex+0x2c6>
 800b3de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1dd      	bne.n	800b3a0 <__gethex+0x2a2>
 800b3e4:	e7ee      	b.n	800b3c4 <__gethex+0x2c6>
 800b3e6:	1e67      	subs	r7, r4, #1
 800b3e8:	f1ba 0f00 	cmp.w	sl, #0
 800b3ec:	d131      	bne.n	800b452 <__gethex+0x354>
 800b3ee:	b127      	cbz	r7, 800b3fa <__gethex+0x2fc>
 800b3f0:	4639      	mov	r1, r7
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	f000 fd70 	bl	800bed8 <__any_on>
 800b3f8:	4682      	mov	sl, r0
 800b3fa:	117a      	asrs	r2, r7, #5
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	f007 071f 	and.w	r7, r7, #31
 800b402:	fa03 f707 	lsl.w	r7, r3, r7
 800b406:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b40a:	4621      	mov	r1, r4
 800b40c:	421f      	tst	r7, r3
 800b40e:	4628      	mov	r0, r5
 800b410:	bf18      	it	ne
 800b412:	f04a 0a02 	orrne.w	sl, sl, #2
 800b416:	1b36      	subs	r6, r6, r4
 800b418:	f7ff fe22 	bl	800b060 <rshift>
 800b41c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b420:	2702      	movs	r7, #2
 800b422:	f1ba 0f00 	cmp.w	sl, #0
 800b426:	d048      	beq.n	800b4ba <__gethex+0x3bc>
 800b428:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	d015      	beq.n	800b45c <__gethex+0x35e>
 800b430:	2b03      	cmp	r3, #3
 800b432:	d017      	beq.n	800b464 <__gethex+0x366>
 800b434:	2b01      	cmp	r3, #1
 800b436:	d109      	bne.n	800b44c <__gethex+0x34e>
 800b438:	f01a 0f02 	tst.w	sl, #2
 800b43c:	d006      	beq.n	800b44c <__gethex+0x34e>
 800b43e:	f8d9 3000 	ldr.w	r3, [r9]
 800b442:	ea4a 0a03 	orr.w	sl, sl, r3
 800b446:	f01a 0f01 	tst.w	sl, #1
 800b44a:	d10e      	bne.n	800b46a <__gethex+0x36c>
 800b44c:	f047 0710 	orr.w	r7, r7, #16
 800b450:	e033      	b.n	800b4ba <__gethex+0x3bc>
 800b452:	f04f 0a01 	mov.w	sl, #1
 800b456:	e7d0      	b.n	800b3fa <__gethex+0x2fc>
 800b458:	2701      	movs	r7, #1
 800b45a:	e7e2      	b.n	800b422 <__gethex+0x324>
 800b45c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b45e:	f1c3 0301 	rsb	r3, r3, #1
 800b462:	9315      	str	r3, [sp, #84]	; 0x54
 800b464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b466:	2b00      	cmp	r3, #0
 800b468:	d0f0      	beq.n	800b44c <__gethex+0x34e>
 800b46a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b46e:	f105 0314 	add.w	r3, r5, #20
 800b472:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b476:	eb03 010a 	add.w	r1, r3, sl
 800b47a:	f04f 0c00 	mov.w	ip, #0
 800b47e:	4618      	mov	r0, r3
 800b480:	f853 2b04 	ldr.w	r2, [r3], #4
 800b484:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b488:	d01c      	beq.n	800b4c4 <__gethex+0x3c6>
 800b48a:	3201      	adds	r2, #1
 800b48c:	6002      	str	r2, [r0, #0]
 800b48e:	2f02      	cmp	r7, #2
 800b490:	f105 0314 	add.w	r3, r5, #20
 800b494:	d138      	bne.n	800b508 <__gethex+0x40a>
 800b496:	f8d8 2000 	ldr.w	r2, [r8]
 800b49a:	3a01      	subs	r2, #1
 800b49c:	42b2      	cmp	r2, r6
 800b49e:	d10a      	bne.n	800b4b6 <__gethex+0x3b8>
 800b4a0:	1171      	asrs	r1, r6, #5
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f006 061f 	and.w	r6, r6, #31
 800b4a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4ac:	fa02 f606 	lsl.w	r6, r2, r6
 800b4b0:	421e      	tst	r6, r3
 800b4b2:	bf18      	it	ne
 800b4b4:	4617      	movne	r7, r2
 800b4b6:	f047 0720 	orr.w	r7, r7, #32
 800b4ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4bc:	601d      	str	r5, [r3, #0]
 800b4be:	9b06      	ldr	r3, [sp, #24]
 800b4c0:	601c      	str	r4, [r3, #0]
 800b4c2:	e6a4      	b.n	800b20e <__gethex+0x110>
 800b4c4:	4299      	cmp	r1, r3
 800b4c6:	f843 cc04 	str.w	ip, [r3, #-4]
 800b4ca:	d8d8      	bhi.n	800b47e <__gethex+0x380>
 800b4cc:	68ab      	ldr	r3, [r5, #8]
 800b4ce:	4599      	cmp	r9, r3
 800b4d0:	db12      	blt.n	800b4f8 <__gethex+0x3fa>
 800b4d2:	6869      	ldr	r1, [r5, #4]
 800b4d4:	9802      	ldr	r0, [sp, #8]
 800b4d6:	3101      	adds	r1, #1
 800b4d8:	f000 f921 	bl	800b71e <_Balloc>
 800b4dc:	692a      	ldr	r2, [r5, #16]
 800b4de:	3202      	adds	r2, #2
 800b4e0:	f105 010c 	add.w	r1, r5, #12
 800b4e4:	4683      	mov	fp, r0
 800b4e6:	0092      	lsls	r2, r2, #2
 800b4e8:	300c      	adds	r0, #12
 800b4ea:	f000 f90d 	bl	800b708 <memcpy>
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	9802      	ldr	r0, [sp, #8]
 800b4f2:	f000 f948 	bl	800b786 <_Bfree>
 800b4f6:	465d      	mov	r5, fp
 800b4f8:	692b      	ldr	r3, [r5, #16]
 800b4fa:	1c5a      	adds	r2, r3, #1
 800b4fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b500:	612a      	str	r2, [r5, #16]
 800b502:	2201      	movs	r2, #1
 800b504:	615a      	str	r2, [r3, #20]
 800b506:	e7c2      	b.n	800b48e <__gethex+0x390>
 800b508:	692a      	ldr	r2, [r5, #16]
 800b50a:	454a      	cmp	r2, r9
 800b50c:	dd0b      	ble.n	800b526 <__gethex+0x428>
 800b50e:	2101      	movs	r1, #1
 800b510:	4628      	mov	r0, r5
 800b512:	f7ff fda5 	bl	800b060 <rshift>
 800b516:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b51a:	3401      	adds	r4, #1
 800b51c:	42a3      	cmp	r3, r4
 800b51e:	f6ff aed9 	blt.w	800b2d4 <__gethex+0x1d6>
 800b522:	2701      	movs	r7, #1
 800b524:	e7c7      	b.n	800b4b6 <__gethex+0x3b8>
 800b526:	f016 061f 	ands.w	r6, r6, #31
 800b52a:	d0fa      	beq.n	800b522 <__gethex+0x424>
 800b52c:	449a      	add	sl, r3
 800b52e:	f1c6 0620 	rsb	r6, r6, #32
 800b532:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b536:	f000 f9b6 	bl	800b8a6 <__hi0bits>
 800b53a:	42b0      	cmp	r0, r6
 800b53c:	dbe7      	blt.n	800b50e <__gethex+0x410>
 800b53e:	e7f0      	b.n	800b522 <__gethex+0x424>

0800b540 <L_shift>:
 800b540:	f1c2 0208 	rsb	r2, r2, #8
 800b544:	0092      	lsls	r2, r2, #2
 800b546:	b570      	push	{r4, r5, r6, lr}
 800b548:	f1c2 0620 	rsb	r6, r2, #32
 800b54c:	6843      	ldr	r3, [r0, #4]
 800b54e:	6804      	ldr	r4, [r0, #0]
 800b550:	fa03 f506 	lsl.w	r5, r3, r6
 800b554:	432c      	orrs	r4, r5
 800b556:	40d3      	lsrs	r3, r2
 800b558:	6004      	str	r4, [r0, #0]
 800b55a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b55e:	4288      	cmp	r0, r1
 800b560:	d3f4      	bcc.n	800b54c <L_shift+0xc>
 800b562:	bd70      	pop	{r4, r5, r6, pc}

0800b564 <__match>:
 800b564:	b530      	push	{r4, r5, lr}
 800b566:	6803      	ldr	r3, [r0, #0]
 800b568:	3301      	adds	r3, #1
 800b56a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b56e:	b914      	cbnz	r4, 800b576 <__match+0x12>
 800b570:	6003      	str	r3, [r0, #0]
 800b572:	2001      	movs	r0, #1
 800b574:	bd30      	pop	{r4, r5, pc}
 800b576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b57a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b57e:	2d19      	cmp	r5, #25
 800b580:	bf98      	it	ls
 800b582:	3220      	addls	r2, #32
 800b584:	42a2      	cmp	r2, r4
 800b586:	d0f0      	beq.n	800b56a <__match+0x6>
 800b588:	2000      	movs	r0, #0
 800b58a:	e7f3      	b.n	800b574 <__match+0x10>

0800b58c <__hexnan>:
 800b58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b590:	680b      	ldr	r3, [r1, #0]
 800b592:	6801      	ldr	r1, [r0, #0]
 800b594:	115f      	asrs	r7, r3, #5
 800b596:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b59a:	f013 031f 	ands.w	r3, r3, #31
 800b59e:	b087      	sub	sp, #28
 800b5a0:	bf18      	it	ne
 800b5a2:	3704      	addne	r7, #4
 800b5a4:	2500      	movs	r5, #0
 800b5a6:	1f3e      	subs	r6, r7, #4
 800b5a8:	4682      	mov	sl, r0
 800b5aa:	4690      	mov	r8, r2
 800b5ac:	9301      	str	r3, [sp, #4]
 800b5ae:	f847 5c04 	str.w	r5, [r7, #-4]
 800b5b2:	46b1      	mov	r9, r6
 800b5b4:	4634      	mov	r4, r6
 800b5b6:	9502      	str	r5, [sp, #8]
 800b5b8:	46ab      	mov	fp, r5
 800b5ba:	784a      	ldrb	r2, [r1, #1]
 800b5bc:	1c4b      	adds	r3, r1, #1
 800b5be:	9303      	str	r3, [sp, #12]
 800b5c0:	b342      	cbz	r2, 800b614 <__hexnan+0x88>
 800b5c2:	4610      	mov	r0, r2
 800b5c4:	9105      	str	r1, [sp, #20]
 800b5c6:	9204      	str	r2, [sp, #16]
 800b5c8:	f7ff fd84 	bl	800b0d4 <__hexdig_fun>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d143      	bne.n	800b658 <__hexnan+0xcc>
 800b5d0:	9a04      	ldr	r2, [sp, #16]
 800b5d2:	9905      	ldr	r1, [sp, #20]
 800b5d4:	2a20      	cmp	r2, #32
 800b5d6:	d818      	bhi.n	800b60a <__hexnan+0x7e>
 800b5d8:	9b02      	ldr	r3, [sp, #8]
 800b5da:	459b      	cmp	fp, r3
 800b5dc:	dd13      	ble.n	800b606 <__hexnan+0x7a>
 800b5de:	454c      	cmp	r4, r9
 800b5e0:	d206      	bcs.n	800b5f0 <__hexnan+0x64>
 800b5e2:	2d07      	cmp	r5, #7
 800b5e4:	dc04      	bgt.n	800b5f0 <__hexnan+0x64>
 800b5e6:	462a      	mov	r2, r5
 800b5e8:	4649      	mov	r1, r9
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f7ff ffa8 	bl	800b540 <L_shift>
 800b5f0:	4544      	cmp	r4, r8
 800b5f2:	d944      	bls.n	800b67e <__hexnan+0xf2>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	f1a4 0904 	sub.w	r9, r4, #4
 800b5fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5fe:	f8cd b008 	str.w	fp, [sp, #8]
 800b602:	464c      	mov	r4, r9
 800b604:	461d      	mov	r5, r3
 800b606:	9903      	ldr	r1, [sp, #12]
 800b608:	e7d7      	b.n	800b5ba <__hexnan+0x2e>
 800b60a:	2a29      	cmp	r2, #41	; 0x29
 800b60c:	d14a      	bne.n	800b6a4 <__hexnan+0x118>
 800b60e:	3102      	adds	r1, #2
 800b610:	f8ca 1000 	str.w	r1, [sl]
 800b614:	f1bb 0f00 	cmp.w	fp, #0
 800b618:	d044      	beq.n	800b6a4 <__hexnan+0x118>
 800b61a:	454c      	cmp	r4, r9
 800b61c:	d206      	bcs.n	800b62c <__hexnan+0xa0>
 800b61e:	2d07      	cmp	r5, #7
 800b620:	dc04      	bgt.n	800b62c <__hexnan+0xa0>
 800b622:	462a      	mov	r2, r5
 800b624:	4649      	mov	r1, r9
 800b626:	4620      	mov	r0, r4
 800b628:	f7ff ff8a 	bl	800b540 <L_shift>
 800b62c:	4544      	cmp	r4, r8
 800b62e:	d928      	bls.n	800b682 <__hexnan+0xf6>
 800b630:	4643      	mov	r3, r8
 800b632:	f854 2b04 	ldr.w	r2, [r4], #4
 800b636:	f843 2b04 	str.w	r2, [r3], #4
 800b63a:	42a6      	cmp	r6, r4
 800b63c:	d2f9      	bcs.n	800b632 <__hexnan+0xa6>
 800b63e:	2200      	movs	r2, #0
 800b640:	f843 2b04 	str.w	r2, [r3], #4
 800b644:	429e      	cmp	r6, r3
 800b646:	d2fb      	bcs.n	800b640 <__hexnan+0xb4>
 800b648:	6833      	ldr	r3, [r6, #0]
 800b64a:	b91b      	cbnz	r3, 800b654 <__hexnan+0xc8>
 800b64c:	4546      	cmp	r6, r8
 800b64e:	d127      	bne.n	800b6a0 <__hexnan+0x114>
 800b650:	2301      	movs	r3, #1
 800b652:	6033      	str	r3, [r6, #0]
 800b654:	2005      	movs	r0, #5
 800b656:	e026      	b.n	800b6a6 <__hexnan+0x11a>
 800b658:	3501      	adds	r5, #1
 800b65a:	2d08      	cmp	r5, #8
 800b65c:	f10b 0b01 	add.w	fp, fp, #1
 800b660:	dd06      	ble.n	800b670 <__hexnan+0xe4>
 800b662:	4544      	cmp	r4, r8
 800b664:	d9cf      	bls.n	800b606 <__hexnan+0x7a>
 800b666:	2300      	movs	r3, #0
 800b668:	f844 3c04 	str.w	r3, [r4, #-4]
 800b66c:	2501      	movs	r5, #1
 800b66e:	3c04      	subs	r4, #4
 800b670:	6822      	ldr	r2, [r4, #0]
 800b672:	f000 000f 	and.w	r0, r0, #15
 800b676:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b67a:	6020      	str	r0, [r4, #0]
 800b67c:	e7c3      	b.n	800b606 <__hexnan+0x7a>
 800b67e:	2508      	movs	r5, #8
 800b680:	e7c1      	b.n	800b606 <__hexnan+0x7a>
 800b682:	9b01      	ldr	r3, [sp, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d0df      	beq.n	800b648 <__hexnan+0xbc>
 800b688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b68c:	f1c3 0320 	rsb	r3, r3, #32
 800b690:	fa22 f303 	lsr.w	r3, r2, r3
 800b694:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b698:	401a      	ands	r2, r3
 800b69a:	f847 2c04 	str.w	r2, [r7, #-4]
 800b69e:	e7d3      	b.n	800b648 <__hexnan+0xbc>
 800b6a0:	3e04      	subs	r6, #4
 800b6a2:	e7d1      	b.n	800b648 <__hexnan+0xbc>
 800b6a4:	2004      	movs	r0, #4
 800b6a6:	b007      	add	sp, #28
 800b6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6ac <__locale_ctype_ptr_l>:
 800b6ac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b6b0:	4770      	bx	lr

0800b6b2 <__localeconv_l>:
 800b6b2:	30f0      	adds	r0, #240	; 0xf0
 800b6b4:	4770      	bx	lr
	...

0800b6b8 <_localeconv_r>:
 800b6b8:	4b04      	ldr	r3, [pc, #16]	; (800b6cc <_localeconv_r+0x14>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	6a18      	ldr	r0, [r3, #32]
 800b6be:	4b04      	ldr	r3, [pc, #16]	; (800b6d0 <_localeconv_r+0x18>)
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	bf08      	it	eq
 800b6c4:	4618      	moveq	r0, r3
 800b6c6:	30f0      	adds	r0, #240	; 0xf0
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	2000000c 	.word	0x2000000c
 800b6d0:	20000070 	.word	0x20000070

0800b6d4 <malloc>:
 800b6d4:	4b02      	ldr	r3, [pc, #8]	; (800b6e0 <malloc+0xc>)
 800b6d6:	4601      	mov	r1, r0
 800b6d8:	6818      	ldr	r0, [r3, #0]
 800b6da:	f000 bc7b 	b.w	800bfd4 <_malloc_r>
 800b6de:	bf00      	nop
 800b6e0:	2000000c 	.word	0x2000000c

0800b6e4 <__ascii_mbtowc>:
 800b6e4:	b082      	sub	sp, #8
 800b6e6:	b901      	cbnz	r1, 800b6ea <__ascii_mbtowc+0x6>
 800b6e8:	a901      	add	r1, sp, #4
 800b6ea:	b142      	cbz	r2, 800b6fe <__ascii_mbtowc+0x1a>
 800b6ec:	b14b      	cbz	r3, 800b702 <__ascii_mbtowc+0x1e>
 800b6ee:	7813      	ldrb	r3, [r2, #0]
 800b6f0:	600b      	str	r3, [r1, #0]
 800b6f2:	7812      	ldrb	r2, [r2, #0]
 800b6f4:	1c10      	adds	r0, r2, #0
 800b6f6:	bf18      	it	ne
 800b6f8:	2001      	movne	r0, #1
 800b6fa:	b002      	add	sp, #8
 800b6fc:	4770      	bx	lr
 800b6fe:	4610      	mov	r0, r2
 800b700:	e7fb      	b.n	800b6fa <__ascii_mbtowc+0x16>
 800b702:	f06f 0001 	mvn.w	r0, #1
 800b706:	e7f8      	b.n	800b6fa <__ascii_mbtowc+0x16>

0800b708 <memcpy>:
 800b708:	b510      	push	{r4, lr}
 800b70a:	1e43      	subs	r3, r0, #1
 800b70c:	440a      	add	r2, r1
 800b70e:	4291      	cmp	r1, r2
 800b710:	d100      	bne.n	800b714 <memcpy+0xc>
 800b712:	bd10      	pop	{r4, pc}
 800b714:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b71c:	e7f7      	b.n	800b70e <memcpy+0x6>

0800b71e <_Balloc>:
 800b71e:	b570      	push	{r4, r5, r6, lr}
 800b720:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b722:	4604      	mov	r4, r0
 800b724:	460e      	mov	r6, r1
 800b726:	b93d      	cbnz	r5, 800b738 <_Balloc+0x1a>
 800b728:	2010      	movs	r0, #16
 800b72a:	f7ff ffd3 	bl	800b6d4 <malloc>
 800b72e:	6260      	str	r0, [r4, #36]	; 0x24
 800b730:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b734:	6005      	str	r5, [r0, #0]
 800b736:	60c5      	str	r5, [r0, #12]
 800b738:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b73a:	68eb      	ldr	r3, [r5, #12]
 800b73c:	b183      	cbz	r3, 800b760 <_Balloc+0x42>
 800b73e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b746:	b9b8      	cbnz	r0, 800b778 <_Balloc+0x5a>
 800b748:	2101      	movs	r1, #1
 800b74a:	fa01 f506 	lsl.w	r5, r1, r6
 800b74e:	1d6a      	adds	r2, r5, #5
 800b750:	0092      	lsls	r2, r2, #2
 800b752:	4620      	mov	r0, r4
 800b754:	f000 fbe1 	bl	800bf1a <_calloc_r>
 800b758:	b160      	cbz	r0, 800b774 <_Balloc+0x56>
 800b75a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b75e:	e00e      	b.n	800b77e <_Balloc+0x60>
 800b760:	2221      	movs	r2, #33	; 0x21
 800b762:	2104      	movs	r1, #4
 800b764:	4620      	mov	r0, r4
 800b766:	f000 fbd8 	bl	800bf1a <_calloc_r>
 800b76a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b76c:	60e8      	str	r0, [r5, #12]
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d1e4      	bne.n	800b73e <_Balloc+0x20>
 800b774:	2000      	movs	r0, #0
 800b776:	bd70      	pop	{r4, r5, r6, pc}
 800b778:	6802      	ldr	r2, [r0, #0]
 800b77a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b77e:	2300      	movs	r3, #0
 800b780:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b784:	e7f7      	b.n	800b776 <_Balloc+0x58>

0800b786 <_Bfree>:
 800b786:	b570      	push	{r4, r5, r6, lr}
 800b788:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b78a:	4606      	mov	r6, r0
 800b78c:	460d      	mov	r5, r1
 800b78e:	b93c      	cbnz	r4, 800b7a0 <_Bfree+0x1a>
 800b790:	2010      	movs	r0, #16
 800b792:	f7ff ff9f 	bl	800b6d4 <malloc>
 800b796:	6270      	str	r0, [r6, #36]	; 0x24
 800b798:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b79c:	6004      	str	r4, [r0, #0]
 800b79e:	60c4      	str	r4, [r0, #12]
 800b7a0:	b13d      	cbz	r5, 800b7b2 <_Bfree+0x2c>
 800b7a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b7a4:	686a      	ldr	r2, [r5, #4]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7ac:	6029      	str	r1, [r5, #0]
 800b7ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b7b2:	bd70      	pop	{r4, r5, r6, pc}

0800b7b4 <__multadd>:
 800b7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b8:	690d      	ldr	r5, [r1, #16]
 800b7ba:	461f      	mov	r7, r3
 800b7bc:	4606      	mov	r6, r0
 800b7be:	460c      	mov	r4, r1
 800b7c0:	f101 0c14 	add.w	ip, r1, #20
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	f8dc 0000 	ldr.w	r0, [ip]
 800b7ca:	b281      	uxth	r1, r0
 800b7cc:	fb02 7101 	mla	r1, r2, r1, r7
 800b7d0:	0c0f      	lsrs	r7, r1, #16
 800b7d2:	0c00      	lsrs	r0, r0, #16
 800b7d4:	fb02 7000 	mla	r0, r2, r0, r7
 800b7d8:	b289      	uxth	r1, r1
 800b7da:	3301      	adds	r3, #1
 800b7dc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b7e0:	429d      	cmp	r5, r3
 800b7e2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b7e6:	f84c 1b04 	str.w	r1, [ip], #4
 800b7ea:	dcec      	bgt.n	800b7c6 <__multadd+0x12>
 800b7ec:	b1d7      	cbz	r7, 800b824 <__multadd+0x70>
 800b7ee:	68a3      	ldr	r3, [r4, #8]
 800b7f0:	42ab      	cmp	r3, r5
 800b7f2:	dc12      	bgt.n	800b81a <__multadd+0x66>
 800b7f4:	6861      	ldr	r1, [r4, #4]
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	3101      	adds	r1, #1
 800b7fa:	f7ff ff90 	bl	800b71e <_Balloc>
 800b7fe:	6922      	ldr	r2, [r4, #16]
 800b800:	3202      	adds	r2, #2
 800b802:	f104 010c 	add.w	r1, r4, #12
 800b806:	4680      	mov	r8, r0
 800b808:	0092      	lsls	r2, r2, #2
 800b80a:	300c      	adds	r0, #12
 800b80c:	f7ff ff7c 	bl	800b708 <memcpy>
 800b810:	4621      	mov	r1, r4
 800b812:	4630      	mov	r0, r6
 800b814:	f7ff ffb7 	bl	800b786 <_Bfree>
 800b818:	4644      	mov	r4, r8
 800b81a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b81e:	3501      	adds	r5, #1
 800b820:	615f      	str	r7, [r3, #20]
 800b822:	6125      	str	r5, [r4, #16]
 800b824:	4620      	mov	r0, r4
 800b826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b82a <__s2b>:
 800b82a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b82e:	460c      	mov	r4, r1
 800b830:	4615      	mov	r5, r2
 800b832:	461f      	mov	r7, r3
 800b834:	2209      	movs	r2, #9
 800b836:	3308      	adds	r3, #8
 800b838:	4606      	mov	r6, r0
 800b83a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b83e:	2100      	movs	r1, #0
 800b840:	2201      	movs	r2, #1
 800b842:	429a      	cmp	r2, r3
 800b844:	db20      	blt.n	800b888 <__s2b+0x5e>
 800b846:	4630      	mov	r0, r6
 800b848:	f7ff ff69 	bl	800b71e <_Balloc>
 800b84c:	9b08      	ldr	r3, [sp, #32]
 800b84e:	6143      	str	r3, [r0, #20]
 800b850:	2d09      	cmp	r5, #9
 800b852:	f04f 0301 	mov.w	r3, #1
 800b856:	6103      	str	r3, [r0, #16]
 800b858:	dd19      	ble.n	800b88e <__s2b+0x64>
 800b85a:	f104 0809 	add.w	r8, r4, #9
 800b85e:	46c1      	mov	r9, r8
 800b860:	442c      	add	r4, r5
 800b862:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b866:	4601      	mov	r1, r0
 800b868:	3b30      	subs	r3, #48	; 0x30
 800b86a:	220a      	movs	r2, #10
 800b86c:	4630      	mov	r0, r6
 800b86e:	f7ff ffa1 	bl	800b7b4 <__multadd>
 800b872:	45a1      	cmp	r9, r4
 800b874:	d1f5      	bne.n	800b862 <__s2b+0x38>
 800b876:	eb08 0405 	add.w	r4, r8, r5
 800b87a:	3c08      	subs	r4, #8
 800b87c:	1b2d      	subs	r5, r5, r4
 800b87e:	1963      	adds	r3, r4, r5
 800b880:	42bb      	cmp	r3, r7
 800b882:	db07      	blt.n	800b894 <__s2b+0x6a>
 800b884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b888:	0052      	lsls	r2, r2, #1
 800b88a:	3101      	adds	r1, #1
 800b88c:	e7d9      	b.n	800b842 <__s2b+0x18>
 800b88e:	340a      	adds	r4, #10
 800b890:	2509      	movs	r5, #9
 800b892:	e7f3      	b.n	800b87c <__s2b+0x52>
 800b894:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b898:	4601      	mov	r1, r0
 800b89a:	3b30      	subs	r3, #48	; 0x30
 800b89c:	220a      	movs	r2, #10
 800b89e:	4630      	mov	r0, r6
 800b8a0:	f7ff ff88 	bl	800b7b4 <__multadd>
 800b8a4:	e7eb      	b.n	800b87e <__s2b+0x54>

0800b8a6 <__hi0bits>:
 800b8a6:	0c02      	lsrs	r2, r0, #16
 800b8a8:	0412      	lsls	r2, r2, #16
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	b9b2      	cbnz	r2, 800b8dc <__hi0bits+0x36>
 800b8ae:	0403      	lsls	r3, r0, #16
 800b8b0:	2010      	movs	r0, #16
 800b8b2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b8b6:	bf04      	itt	eq
 800b8b8:	021b      	lsleq	r3, r3, #8
 800b8ba:	3008      	addeq	r0, #8
 800b8bc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b8c0:	bf04      	itt	eq
 800b8c2:	011b      	lsleq	r3, r3, #4
 800b8c4:	3004      	addeq	r0, #4
 800b8c6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b8ca:	bf04      	itt	eq
 800b8cc:	009b      	lsleq	r3, r3, #2
 800b8ce:	3002      	addeq	r0, #2
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	db06      	blt.n	800b8e2 <__hi0bits+0x3c>
 800b8d4:	005b      	lsls	r3, r3, #1
 800b8d6:	d503      	bpl.n	800b8e0 <__hi0bits+0x3a>
 800b8d8:	3001      	adds	r0, #1
 800b8da:	4770      	bx	lr
 800b8dc:	2000      	movs	r0, #0
 800b8de:	e7e8      	b.n	800b8b2 <__hi0bits+0xc>
 800b8e0:	2020      	movs	r0, #32
 800b8e2:	4770      	bx	lr

0800b8e4 <__lo0bits>:
 800b8e4:	6803      	ldr	r3, [r0, #0]
 800b8e6:	f013 0207 	ands.w	r2, r3, #7
 800b8ea:	4601      	mov	r1, r0
 800b8ec:	d00b      	beq.n	800b906 <__lo0bits+0x22>
 800b8ee:	07da      	lsls	r2, r3, #31
 800b8f0:	d423      	bmi.n	800b93a <__lo0bits+0x56>
 800b8f2:	0798      	lsls	r0, r3, #30
 800b8f4:	bf49      	itett	mi
 800b8f6:	085b      	lsrmi	r3, r3, #1
 800b8f8:	089b      	lsrpl	r3, r3, #2
 800b8fa:	2001      	movmi	r0, #1
 800b8fc:	600b      	strmi	r3, [r1, #0]
 800b8fe:	bf5c      	itt	pl
 800b900:	600b      	strpl	r3, [r1, #0]
 800b902:	2002      	movpl	r0, #2
 800b904:	4770      	bx	lr
 800b906:	b298      	uxth	r0, r3
 800b908:	b9a8      	cbnz	r0, 800b936 <__lo0bits+0x52>
 800b90a:	0c1b      	lsrs	r3, r3, #16
 800b90c:	2010      	movs	r0, #16
 800b90e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b912:	bf04      	itt	eq
 800b914:	0a1b      	lsreq	r3, r3, #8
 800b916:	3008      	addeq	r0, #8
 800b918:	071a      	lsls	r2, r3, #28
 800b91a:	bf04      	itt	eq
 800b91c:	091b      	lsreq	r3, r3, #4
 800b91e:	3004      	addeq	r0, #4
 800b920:	079a      	lsls	r2, r3, #30
 800b922:	bf04      	itt	eq
 800b924:	089b      	lsreq	r3, r3, #2
 800b926:	3002      	addeq	r0, #2
 800b928:	07da      	lsls	r2, r3, #31
 800b92a:	d402      	bmi.n	800b932 <__lo0bits+0x4e>
 800b92c:	085b      	lsrs	r3, r3, #1
 800b92e:	d006      	beq.n	800b93e <__lo0bits+0x5a>
 800b930:	3001      	adds	r0, #1
 800b932:	600b      	str	r3, [r1, #0]
 800b934:	4770      	bx	lr
 800b936:	4610      	mov	r0, r2
 800b938:	e7e9      	b.n	800b90e <__lo0bits+0x2a>
 800b93a:	2000      	movs	r0, #0
 800b93c:	4770      	bx	lr
 800b93e:	2020      	movs	r0, #32
 800b940:	4770      	bx	lr

0800b942 <__i2b>:
 800b942:	b510      	push	{r4, lr}
 800b944:	460c      	mov	r4, r1
 800b946:	2101      	movs	r1, #1
 800b948:	f7ff fee9 	bl	800b71e <_Balloc>
 800b94c:	2201      	movs	r2, #1
 800b94e:	6144      	str	r4, [r0, #20]
 800b950:	6102      	str	r2, [r0, #16]
 800b952:	bd10      	pop	{r4, pc}

0800b954 <__multiply>:
 800b954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b958:	4614      	mov	r4, r2
 800b95a:	690a      	ldr	r2, [r1, #16]
 800b95c:	6923      	ldr	r3, [r4, #16]
 800b95e:	429a      	cmp	r2, r3
 800b960:	bfb8      	it	lt
 800b962:	460b      	movlt	r3, r1
 800b964:	4688      	mov	r8, r1
 800b966:	bfbc      	itt	lt
 800b968:	46a0      	movlt	r8, r4
 800b96a:	461c      	movlt	r4, r3
 800b96c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b970:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b974:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b978:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b97c:	eb07 0609 	add.w	r6, r7, r9
 800b980:	42b3      	cmp	r3, r6
 800b982:	bfb8      	it	lt
 800b984:	3101      	addlt	r1, #1
 800b986:	f7ff feca 	bl	800b71e <_Balloc>
 800b98a:	f100 0514 	add.w	r5, r0, #20
 800b98e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b992:	462b      	mov	r3, r5
 800b994:	2200      	movs	r2, #0
 800b996:	4573      	cmp	r3, lr
 800b998:	d316      	bcc.n	800b9c8 <__multiply+0x74>
 800b99a:	f104 0214 	add.w	r2, r4, #20
 800b99e:	f108 0114 	add.w	r1, r8, #20
 800b9a2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b9a6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	9b00      	ldr	r3, [sp, #0]
 800b9ae:	9201      	str	r2, [sp, #4]
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d80c      	bhi.n	800b9ce <__multiply+0x7a>
 800b9b4:	2e00      	cmp	r6, #0
 800b9b6:	dd03      	ble.n	800b9c0 <__multiply+0x6c>
 800b9b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d05d      	beq.n	800ba7c <__multiply+0x128>
 800b9c0:	6106      	str	r6, [r0, #16]
 800b9c2:	b003      	add	sp, #12
 800b9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c8:	f843 2b04 	str.w	r2, [r3], #4
 800b9cc:	e7e3      	b.n	800b996 <__multiply+0x42>
 800b9ce:	f8b2 b000 	ldrh.w	fp, [r2]
 800b9d2:	f1bb 0f00 	cmp.w	fp, #0
 800b9d6:	d023      	beq.n	800ba20 <__multiply+0xcc>
 800b9d8:	4689      	mov	r9, r1
 800b9da:	46ac      	mov	ip, r5
 800b9dc:	f04f 0800 	mov.w	r8, #0
 800b9e0:	f859 4b04 	ldr.w	r4, [r9], #4
 800b9e4:	f8dc a000 	ldr.w	sl, [ip]
 800b9e8:	b2a3      	uxth	r3, r4
 800b9ea:	fa1f fa8a 	uxth.w	sl, sl
 800b9ee:	fb0b a303 	mla	r3, fp, r3, sl
 800b9f2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b9f6:	f8dc 4000 	ldr.w	r4, [ip]
 800b9fa:	4443      	add	r3, r8
 800b9fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ba00:	fb0b 840a 	mla	r4, fp, sl, r8
 800ba04:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ba08:	46e2      	mov	sl, ip
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ba10:	454f      	cmp	r7, r9
 800ba12:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ba16:	f84a 3b04 	str.w	r3, [sl], #4
 800ba1a:	d82b      	bhi.n	800ba74 <__multiply+0x120>
 800ba1c:	f8cc 8004 	str.w	r8, [ip, #4]
 800ba20:	9b01      	ldr	r3, [sp, #4]
 800ba22:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ba26:	3204      	adds	r2, #4
 800ba28:	f1ba 0f00 	cmp.w	sl, #0
 800ba2c:	d020      	beq.n	800ba70 <__multiply+0x11c>
 800ba2e:	682b      	ldr	r3, [r5, #0]
 800ba30:	4689      	mov	r9, r1
 800ba32:	46a8      	mov	r8, r5
 800ba34:	f04f 0b00 	mov.w	fp, #0
 800ba38:	f8b9 c000 	ldrh.w	ip, [r9]
 800ba3c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ba40:	fb0a 440c 	mla	r4, sl, ip, r4
 800ba44:	445c      	add	r4, fp
 800ba46:	46c4      	mov	ip, r8
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ba4e:	f84c 3b04 	str.w	r3, [ip], #4
 800ba52:	f859 3b04 	ldr.w	r3, [r9], #4
 800ba56:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ba5a:	0c1b      	lsrs	r3, r3, #16
 800ba5c:	fb0a b303 	mla	r3, sl, r3, fp
 800ba60:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ba64:	454f      	cmp	r7, r9
 800ba66:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ba6a:	d805      	bhi.n	800ba78 <__multiply+0x124>
 800ba6c:	f8c8 3004 	str.w	r3, [r8, #4]
 800ba70:	3504      	adds	r5, #4
 800ba72:	e79b      	b.n	800b9ac <__multiply+0x58>
 800ba74:	46d4      	mov	ip, sl
 800ba76:	e7b3      	b.n	800b9e0 <__multiply+0x8c>
 800ba78:	46e0      	mov	r8, ip
 800ba7a:	e7dd      	b.n	800ba38 <__multiply+0xe4>
 800ba7c:	3e01      	subs	r6, #1
 800ba7e:	e799      	b.n	800b9b4 <__multiply+0x60>

0800ba80 <__pow5mult>:
 800ba80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba84:	4615      	mov	r5, r2
 800ba86:	f012 0203 	ands.w	r2, r2, #3
 800ba8a:	4606      	mov	r6, r0
 800ba8c:	460f      	mov	r7, r1
 800ba8e:	d007      	beq.n	800baa0 <__pow5mult+0x20>
 800ba90:	3a01      	subs	r2, #1
 800ba92:	4c21      	ldr	r4, [pc, #132]	; (800bb18 <__pow5mult+0x98>)
 800ba94:	2300      	movs	r3, #0
 800ba96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba9a:	f7ff fe8b 	bl	800b7b4 <__multadd>
 800ba9e:	4607      	mov	r7, r0
 800baa0:	10ad      	asrs	r5, r5, #2
 800baa2:	d035      	beq.n	800bb10 <__pow5mult+0x90>
 800baa4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800baa6:	b93c      	cbnz	r4, 800bab8 <__pow5mult+0x38>
 800baa8:	2010      	movs	r0, #16
 800baaa:	f7ff fe13 	bl	800b6d4 <malloc>
 800baae:	6270      	str	r0, [r6, #36]	; 0x24
 800bab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bab4:	6004      	str	r4, [r0, #0]
 800bab6:	60c4      	str	r4, [r0, #12]
 800bab8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800babc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bac0:	b94c      	cbnz	r4, 800bad6 <__pow5mult+0x56>
 800bac2:	f240 2171 	movw	r1, #625	; 0x271
 800bac6:	4630      	mov	r0, r6
 800bac8:	f7ff ff3b 	bl	800b942 <__i2b>
 800bacc:	2300      	movs	r3, #0
 800bace:	f8c8 0008 	str.w	r0, [r8, #8]
 800bad2:	4604      	mov	r4, r0
 800bad4:	6003      	str	r3, [r0, #0]
 800bad6:	f04f 0800 	mov.w	r8, #0
 800bada:	07eb      	lsls	r3, r5, #31
 800badc:	d50a      	bpl.n	800baf4 <__pow5mult+0x74>
 800bade:	4639      	mov	r1, r7
 800bae0:	4622      	mov	r2, r4
 800bae2:	4630      	mov	r0, r6
 800bae4:	f7ff ff36 	bl	800b954 <__multiply>
 800bae8:	4639      	mov	r1, r7
 800baea:	4681      	mov	r9, r0
 800baec:	4630      	mov	r0, r6
 800baee:	f7ff fe4a 	bl	800b786 <_Bfree>
 800baf2:	464f      	mov	r7, r9
 800baf4:	106d      	asrs	r5, r5, #1
 800baf6:	d00b      	beq.n	800bb10 <__pow5mult+0x90>
 800baf8:	6820      	ldr	r0, [r4, #0]
 800bafa:	b938      	cbnz	r0, 800bb0c <__pow5mult+0x8c>
 800bafc:	4622      	mov	r2, r4
 800bafe:	4621      	mov	r1, r4
 800bb00:	4630      	mov	r0, r6
 800bb02:	f7ff ff27 	bl	800b954 <__multiply>
 800bb06:	6020      	str	r0, [r4, #0]
 800bb08:	f8c0 8000 	str.w	r8, [r0]
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	e7e4      	b.n	800bada <__pow5mult+0x5a>
 800bb10:	4638      	mov	r0, r7
 800bb12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb16:	bf00      	nop
 800bb18:	0800c6d8 	.word	0x0800c6d8

0800bb1c <__lshift>:
 800bb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb20:	460c      	mov	r4, r1
 800bb22:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb26:	6923      	ldr	r3, [r4, #16]
 800bb28:	6849      	ldr	r1, [r1, #4]
 800bb2a:	eb0a 0903 	add.w	r9, sl, r3
 800bb2e:	68a3      	ldr	r3, [r4, #8]
 800bb30:	4607      	mov	r7, r0
 800bb32:	4616      	mov	r6, r2
 800bb34:	f109 0501 	add.w	r5, r9, #1
 800bb38:	42ab      	cmp	r3, r5
 800bb3a:	db32      	blt.n	800bba2 <__lshift+0x86>
 800bb3c:	4638      	mov	r0, r7
 800bb3e:	f7ff fdee 	bl	800b71e <_Balloc>
 800bb42:	2300      	movs	r3, #0
 800bb44:	4680      	mov	r8, r0
 800bb46:	f100 0114 	add.w	r1, r0, #20
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	4553      	cmp	r3, sl
 800bb4e:	db2b      	blt.n	800bba8 <__lshift+0x8c>
 800bb50:	6920      	ldr	r0, [r4, #16]
 800bb52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb56:	f104 0314 	add.w	r3, r4, #20
 800bb5a:	f016 021f 	ands.w	r2, r6, #31
 800bb5e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb62:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb66:	d025      	beq.n	800bbb4 <__lshift+0x98>
 800bb68:	f1c2 0e20 	rsb	lr, r2, #32
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	681e      	ldr	r6, [r3, #0]
 800bb70:	468a      	mov	sl, r1
 800bb72:	4096      	lsls	r6, r2
 800bb74:	4330      	orrs	r0, r6
 800bb76:	f84a 0b04 	str.w	r0, [sl], #4
 800bb7a:	f853 0b04 	ldr.w	r0, [r3], #4
 800bb7e:	459c      	cmp	ip, r3
 800bb80:	fa20 f00e 	lsr.w	r0, r0, lr
 800bb84:	d814      	bhi.n	800bbb0 <__lshift+0x94>
 800bb86:	6048      	str	r0, [r1, #4]
 800bb88:	b108      	cbz	r0, 800bb8e <__lshift+0x72>
 800bb8a:	f109 0502 	add.w	r5, r9, #2
 800bb8e:	3d01      	subs	r5, #1
 800bb90:	4638      	mov	r0, r7
 800bb92:	f8c8 5010 	str.w	r5, [r8, #16]
 800bb96:	4621      	mov	r1, r4
 800bb98:	f7ff fdf5 	bl	800b786 <_Bfree>
 800bb9c:	4640      	mov	r0, r8
 800bb9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bba2:	3101      	adds	r1, #1
 800bba4:	005b      	lsls	r3, r3, #1
 800bba6:	e7c7      	b.n	800bb38 <__lshift+0x1c>
 800bba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bbac:	3301      	adds	r3, #1
 800bbae:	e7cd      	b.n	800bb4c <__lshift+0x30>
 800bbb0:	4651      	mov	r1, sl
 800bbb2:	e7dc      	b.n	800bb6e <__lshift+0x52>
 800bbb4:	3904      	subs	r1, #4
 800bbb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbba:	f841 2f04 	str.w	r2, [r1, #4]!
 800bbbe:	459c      	cmp	ip, r3
 800bbc0:	d8f9      	bhi.n	800bbb6 <__lshift+0x9a>
 800bbc2:	e7e4      	b.n	800bb8e <__lshift+0x72>

0800bbc4 <__mcmp>:
 800bbc4:	6903      	ldr	r3, [r0, #16]
 800bbc6:	690a      	ldr	r2, [r1, #16]
 800bbc8:	1a9b      	subs	r3, r3, r2
 800bbca:	b530      	push	{r4, r5, lr}
 800bbcc:	d10c      	bne.n	800bbe8 <__mcmp+0x24>
 800bbce:	0092      	lsls	r2, r2, #2
 800bbd0:	3014      	adds	r0, #20
 800bbd2:	3114      	adds	r1, #20
 800bbd4:	1884      	adds	r4, r0, r2
 800bbd6:	4411      	add	r1, r2
 800bbd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bbdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bbe0:	4295      	cmp	r5, r2
 800bbe2:	d003      	beq.n	800bbec <__mcmp+0x28>
 800bbe4:	d305      	bcc.n	800bbf2 <__mcmp+0x2e>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	4618      	mov	r0, r3
 800bbea:	bd30      	pop	{r4, r5, pc}
 800bbec:	42a0      	cmp	r0, r4
 800bbee:	d3f3      	bcc.n	800bbd8 <__mcmp+0x14>
 800bbf0:	e7fa      	b.n	800bbe8 <__mcmp+0x24>
 800bbf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbf6:	e7f7      	b.n	800bbe8 <__mcmp+0x24>

0800bbf8 <__mdiff>:
 800bbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbfc:	460d      	mov	r5, r1
 800bbfe:	4607      	mov	r7, r0
 800bc00:	4611      	mov	r1, r2
 800bc02:	4628      	mov	r0, r5
 800bc04:	4614      	mov	r4, r2
 800bc06:	f7ff ffdd 	bl	800bbc4 <__mcmp>
 800bc0a:	1e06      	subs	r6, r0, #0
 800bc0c:	d108      	bne.n	800bc20 <__mdiff+0x28>
 800bc0e:	4631      	mov	r1, r6
 800bc10:	4638      	mov	r0, r7
 800bc12:	f7ff fd84 	bl	800b71e <_Balloc>
 800bc16:	2301      	movs	r3, #1
 800bc18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc20:	bfa4      	itt	ge
 800bc22:	4623      	movge	r3, r4
 800bc24:	462c      	movge	r4, r5
 800bc26:	4638      	mov	r0, r7
 800bc28:	6861      	ldr	r1, [r4, #4]
 800bc2a:	bfa6      	itte	ge
 800bc2c:	461d      	movge	r5, r3
 800bc2e:	2600      	movge	r6, #0
 800bc30:	2601      	movlt	r6, #1
 800bc32:	f7ff fd74 	bl	800b71e <_Balloc>
 800bc36:	692b      	ldr	r3, [r5, #16]
 800bc38:	60c6      	str	r6, [r0, #12]
 800bc3a:	6926      	ldr	r6, [r4, #16]
 800bc3c:	f105 0914 	add.w	r9, r5, #20
 800bc40:	f104 0214 	add.w	r2, r4, #20
 800bc44:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800bc48:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800bc4c:	f100 0514 	add.w	r5, r0, #20
 800bc50:	f04f 0e00 	mov.w	lr, #0
 800bc54:	f852 ab04 	ldr.w	sl, [r2], #4
 800bc58:	f859 4b04 	ldr.w	r4, [r9], #4
 800bc5c:	fa1e f18a 	uxtah	r1, lr, sl
 800bc60:	b2a3      	uxth	r3, r4
 800bc62:	1ac9      	subs	r1, r1, r3
 800bc64:	0c23      	lsrs	r3, r4, #16
 800bc66:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800bc6a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bc6e:	b289      	uxth	r1, r1
 800bc70:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800bc74:	45c8      	cmp	r8, r9
 800bc76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bc7a:	4694      	mov	ip, r2
 800bc7c:	f845 3b04 	str.w	r3, [r5], #4
 800bc80:	d8e8      	bhi.n	800bc54 <__mdiff+0x5c>
 800bc82:	45bc      	cmp	ip, r7
 800bc84:	d304      	bcc.n	800bc90 <__mdiff+0x98>
 800bc86:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800bc8a:	b183      	cbz	r3, 800bcae <__mdiff+0xb6>
 800bc8c:	6106      	str	r6, [r0, #16]
 800bc8e:	e7c5      	b.n	800bc1c <__mdiff+0x24>
 800bc90:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bc94:	fa1e f381 	uxtah	r3, lr, r1
 800bc98:	141a      	asrs	r2, r3, #16
 800bc9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bca4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800bca8:	f845 3b04 	str.w	r3, [r5], #4
 800bcac:	e7e9      	b.n	800bc82 <__mdiff+0x8a>
 800bcae:	3e01      	subs	r6, #1
 800bcb0:	e7e9      	b.n	800bc86 <__mdiff+0x8e>
	...

0800bcb4 <__ulp>:
 800bcb4:	4b12      	ldr	r3, [pc, #72]	; (800bd00 <__ulp+0x4c>)
 800bcb6:	ee10 2a90 	vmov	r2, s1
 800bcba:	401a      	ands	r2, r3
 800bcbc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	dd04      	ble.n	800bcce <__ulp+0x1a>
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	ec41 0b10 	vmov	d0, r0, r1
 800bccc:	4770      	bx	lr
 800bcce:	425b      	negs	r3, r3
 800bcd0:	151b      	asrs	r3, r3, #20
 800bcd2:	2b13      	cmp	r3, #19
 800bcd4:	f04f 0000 	mov.w	r0, #0
 800bcd8:	f04f 0100 	mov.w	r1, #0
 800bcdc:	dc04      	bgt.n	800bce8 <__ulp+0x34>
 800bcde:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800bce2:	fa42 f103 	asr.w	r1, r2, r3
 800bce6:	e7ef      	b.n	800bcc8 <__ulp+0x14>
 800bce8:	3b14      	subs	r3, #20
 800bcea:	2b1e      	cmp	r3, #30
 800bcec:	f04f 0201 	mov.w	r2, #1
 800bcf0:	bfda      	itte	le
 800bcf2:	f1c3 031f 	rsble	r3, r3, #31
 800bcf6:	fa02 f303 	lslle.w	r3, r2, r3
 800bcfa:	4613      	movgt	r3, r2
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	e7e3      	b.n	800bcc8 <__ulp+0x14>
 800bd00:	7ff00000 	.word	0x7ff00000

0800bd04 <__b2d>:
 800bd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd06:	6905      	ldr	r5, [r0, #16]
 800bd08:	f100 0714 	add.w	r7, r0, #20
 800bd0c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bd10:	1f2e      	subs	r6, r5, #4
 800bd12:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bd16:	4620      	mov	r0, r4
 800bd18:	f7ff fdc5 	bl	800b8a6 <__hi0bits>
 800bd1c:	f1c0 0320 	rsb	r3, r0, #32
 800bd20:	280a      	cmp	r0, #10
 800bd22:	600b      	str	r3, [r1, #0]
 800bd24:	f8df c074 	ldr.w	ip, [pc, #116]	; 800bd9c <__b2d+0x98>
 800bd28:	dc14      	bgt.n	800bd54 <__b2d+0x50>
 800bd2a:	f1c0 0e0b 	rsb	lr, r0, #11
 800bd2e:	fa24 f10e 	lsr.w	r1, r4, lr
 800bd32:	42b7      	cmp	r7, r6
 800bd34:	ea41 030c 	orr.w	r3, r1, ip
 800bd38:	bf34      	ite	cc
 800bd3a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bd3e:	2100      	movcs	r1, #0
 800bd40:	3015      	adds	r0, #21
 800bd42:	fa04 f000 	lsl.w	r0, r4, r0
 800bd46:	fa21 f10e 	lsr.w	r1, r1, lr
 800bd4a:	ea40 0201 	orr.w	r2, r0, r1
 800bd4e:	ec43 2b10 	vmov	d0, r2, r3
 800bd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd54:	42b7      	cmp	r7, r6
 800bd56:	bf3a      	itte	cc
 800bd58:	f1a5 0608 	subcc.w	r6, r5, #8
 800bd5c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bd60:	2100      	movcs	r1, #0
 800bd62:	380b      	subs	r0, #11
 800bd64:	d015      	beq.n	800bd92 <__b2d+0x8e>
 800bd66:	4084      	lsls	r4, r0
 800bd68:	f1c0 0520 	rsb	r5, r0, #32
 800bd6c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800bd70:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800bd74:	42be      	cmp	r6, r7
 800bd76:	fa21 fc05 	lsr.w	ip, r1, r5
 800bd7a:	ea44 030c 	orr.w	r3, r4, ip
 800bd7e:	bf8c      	ite	hi
 800bd80:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bd84:	2400      	movls	r4, #0
 800bd86:	fa01 f000 	lsl.w	r0, r1, r0
 800bd8a:	40ec      	lsrs	r4, r5
 800bd8c:	ea40 0204 	orr.w	r2, r0, r4
 800bd90:	e7dd      	b.n	800bd4e <__b2d+0x4a>
 800bd92:	ea44 030c 	orr.w	r3, r4, ip
 800bd96:	460a      	mov	r2, r1
 800bd98:	e7d9      	b.n	800bd4e <__b2d+0x4a>
 800bd9a:	bf00      	nop
 800bd9c:	3ff00000 	.word	0x3ff00000

0800bda0 <__d2b>:
 800bda0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bda4:	460e      	mov	r6, r1
 800bda6:	2101      	movs	r1, #1
 800bda8:	ec59 8b10 	vmov	r8, r9, d0
 800bdac:	4615      	mov	r5, r2
 800bdae:	f7ff fcb6 	bl	800b71e <_Balloc>
 800bdb2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bdb6:	4607      	mov	r7, r0
 800bdb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bdbc:	bb34      	cbnz	r4, 800be0c <__d2b+0x6c>
 800bdbe:	9301      	str	r3, [sp, #4]
 800bdc0:	f1b8 0300 	subs.w	r3, r8, #0
 800bdc4:	d027      	beq.n	800be16 <__d2b+0x76>
 800bdc6:	a802      	add	r0, sp, #8
 800bdc8:	f840 3d08 	str.w	r3, [r0, #-8]!
 800bdcc:	f7ff fd8a 	bl	800b8e4 <__lo0bits>
 800bdd0:	9900      	ldr	r1, [sp, #0]
 800bdd2:	b1f0      	cbz	r0, 800be12 <__d2b+0x72>
 800bdd4:	9a01      	ldr	r2, [sp, #4]
 800bdd6:	f1c0 0320 	rsb	r3, r0, #32
 800bdda:	fa02 f303 	lsl.w	r3, r2, r3
 800bdde:	430b      	orrs	r3, r1
 800bde0:	40c2      	lsrs	r2, r0
 800bde2:	617b      	str	r3, [r7, #20]
 800bde4:	9201      	str	r2, [sp, #4]
 800bde6:	9b01      	ldr	r3, [sp, #4]
 800bde8:	61bb      	str	r3, [r7, #24]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	bf14      	ite	ne
 800bdee:	2102      	movne	r1, #2
 800bdf0:	2101      	moveq	r1, #1
 800bdf2:	6139      	str	r1, [r7, #16]
 800bdf4:	b1c4      	cbz	r4, 800be28 <__d2b+0x88>
 800bdf6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bdfa:	4404      	add	r4, r0
 800bdfc:	6034      	str	r4, [r6, #0]
 800bdfe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be02:	6028      	str	r0, [r5, #0]
 800be04:	4638      	mov	r0, r7
 800be06:	b003      	add	sp, #12
 800be08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be10:	e7d5      	b.n	800bdbe <__d2b+0x1e>
 800be12:	6179      	str	r1, [r7, #20]
 800be14:	e7e7      	b.n	800bde6 <__d2b+0x46>
 800be16:	a801      	add	r0, sp, #4
 800be18:	f7ff fd64 	bl	800b8e4 <__lo0bits>
 800be1c:	9b01      	ldr	r3, [sp, #4]
 800be1e:	617b      	str	r3, [r7, #20]
 800be20:	2101      	movs	r1, #1
 800be22:	6139      	str	r1, [r7, #16]
 800be24:	3020      	adds	r0, #32
 800be26:	e7e5      	b.n	800bdf4 <__d2b+0x54>
 800be28:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800be2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be30:	6030      	str	r0, [r6, #0]
 800be32:	6918      	ldr	r0, [r3, #16]
 800be34:	f7ff fd37 	bl	800b8a6 <__hi0bits>
 800be38:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800be3c:	e7e1      	b.n	800be02 <__d2b+0x62>

0800be3e <__ratio>:
 800be3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be42:	4688      	mov	r8, r1
 800be44:	4669      	mov	r1, sp
 800be46:	4681      	mov	r9, r0
 800be48:	f7ff ff5c 	bl	800bd04 <__b2d>
 800be4c:	a901      	add	r1, sp, #4
 800be4e:	4640      	mov	r0, r8
 800be50:	ec57 6b10 	vmov	r6, r7, d0
 800be54:	f7ff ff56 	bl	800bd04 <__b2d>
 800be58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be5c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800be60:	eba3 0c02 	sub.w	ip, r3, r2
 800be64:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be68:	1a9b      	subs	r3, r3, r2
 800be6a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800be6e:	ec5b ab10 	vmov	sl, fp, d0
 800be72:	2b00      	cmp	r3, #0
 800be74:	bfce      	itee	gt
 800be76:	463a      	movgt	r2, r7
 800be78:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be7c:	465a      	movle	r2, fp
 800be7e:	4659      	mov	r1, fp
 800be80:	463d      	mov	r5, r7
 800be82:	bfd4      	ite	le
 800be84:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800be88:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800be8c:	4630      	mov	r0, r6
 800be8e:	ee10 2a10 	vmov	r2, s0
 800be92:	460b      	mov	r3, r1
 800be94:	4629      	mov	r1, r5
 800be96:	f7f4 fce9 	bl	800086c <__aeabi_ddiv>
 800be9a:	ec41 0b10 	vmov	d0, r0, r1
 800be9e:	b003      	add	sp, #12
 800bea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bea4 <__copybits>:
 800bea4:	3901      	subs	r1, #1
 800bea6:	b510      	push	{r4, lr}
 800bea8:	1149      	asrs	r1, r1, #5
 800beaa:	6914      	ldr	r4, [r2, #16]
 800beac:	3101      	adds	r1, #1
 800beae:	f102 0314 	add.w	r3, r2, #20
 800beb2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800beb6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800beba:	42a3      	cmp	r3, r4
 800bebc:	4602      	mov	r2, r0
 800bebe:	d303      	bcc.n	800bec8 <__copybits+0x24>
 800bec0:	2300      	movs	r3, #0
 800bec2:	428a      	cmp	r2, r1
 800bec4:	d305      	bcc.n	800bed2 <__copybits+0x2e>
 800bec6:	bd10      	pop	{r4, pc}
 800bec8:	f853 2b04 	ldr.w	r2, [r3], #4
 800becc:	f840 2b04 	str.w	r2, [r0], #4
 800bed0:	e7f3      	b.n	800beba <__copybits+0x16>
 800bed2:	f842 3b04 	str.w	r3, [r2], #4
 800bed6:	e7f4      	b.n	800bec2 <__copybits+0x1e>

0800bed8 <__any_on>:
 800bed8:	f100 0214 	add.w	r2, r0, #20
 800bedc:	6900      	ldr	r0, [r0, #16]
 800bede:	114b      	asrs	r3, r1, #5
 800bee0:	4298      	cmp	r0, r3
 800bee2:	b510      	push	{r4, lr}
 800bee4:	db11      	blt.n	800bf0a <__any_on+0x32>
 800bee6:	dd0a      	ble.n	800befe <__any_on+0x26>
 800bee8:	f011 011f 	ands.w	r1, r1, #31
 800beec:	d007      	beq.n	800befe <__any_on+0x26>
 800beee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bef2:	fa24 f001 	lsr.w	r0, r4, r1
 800bef6:	fa00 f101 	lsl.w	r1, r0, r1
 800befa:	428c      	cmp	r4, r1
 800befc:	d10b      	bne.n	800bf16 <__any_on+0x3e>
 800befe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d803      	bhi.n	800bf0e <__any_on+0x36>
 800bf06:	2000      	movs	r0, #0
 800bf08:	bd10      	pop	{r4, pc}
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	e7f7      	b.n	800befe <__any_on+0x26>
 800bf0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf12:	2900      	cmp	r1, #0
 800bf14:	d0f5      	beq.n	800bf02 <__any_on+0x2a>
 800bf16:	2001      	movs	r0, #1
 800bf18:	e7f6      	b.n	800bf08 <__any_on+0x30>

0800bf1a <_calloc_r>:
 800bf1a:	b538      	push	{r3, r4, r5, lr}
 800bf1c:	fb02 f401 	mul.w	r4, r2, r1
 800bf20:	4621      	mov	r1, r4
 800bf22:	f000 f857 	bl	800bfd4 <_malloc_r>
 800bf26:	4605      	mov	r5, r0
 800bf28:	b118      	cbz	r0, 800bf32 <_calloc_r+0x18>
 800bf2a:	4622      	mov	r2, r4
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	f7fc ff07 	bl	8008d40 <memset>
 800bf32:	4628      	mov	r0, r5
 800bf34:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bf38 <_free_r>:
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	4605      	mov	r5, r0
 800bf3c:	2900      	cmp	r1, #0
 800bf3e:	d045      	beq.n	800bfcc <_free_r+0x94>
 800bf40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf44:	1f0c      	subs	r4, r1, #4
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	bfb8      	it	lt
 800bf4a:	18e4      	addlt	r4, r4, r3
 800bf4c:	f000 fa36 	bl	800c3bc <__malloc_lock>
 800bf50:	4a1f      	ldr	r2, [pc, #124]	; (800bfd0 <_free_r+0x98>)
 800bf52:	6813      	ldr	r3, [r2, #0]
 800bf54:	4610      	mov	r0, r2
 800bf56:	b933      	cbnz	r3, 800bf66 <_free_r+0x2e>
 800bf58:	6063      	str	r3, [r4, #4]
 800bf5a:	6014      	str	r4, [r2, #0]
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf62:	f000 ba2c 	b.w	800c3be <__malloc_unlock>
 800bf66:	42a3      	cmp	r3, r4
 800bf68:	d90c      	bls.n	800bf84 <_free_r+0x4c>
 800bf6a:	6821      	ldr	r1, [r4, #0]
 800bf6c:	1862      	adds	r2, r4, r1
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	bf04      	itt	eq
 800bf72:	681a      	ldreq	r2, [r3, #0]
 800bf74:	685b      	ldreq	r3, [r3, #4]
 800bf76:	6063      	str	r3, [r4, #4]
 800bf78:	bf04      	itt	eq
 800bf7a:	1852      	addeq	r2, r2, r1
 800bf7c:	6022      	streq	r2, [r4, #0]
 800bf7e:	6004      	str	r4, [r0, #0]
 800bf80:	e7ec      	b.n	800bf5c <_free_r+0x24>
 800bf82:	4613      	mov	r3, r2
 800bf84:	685a      	ldr	r2, [r3, #4]
 800bf86:	b10a      	cbz	r2, 800bf8c <_free_r+0x54>
 800bf88:	42a2      	cmp	r2, r4
 800bf8a:	d9fa      	bls.n	800bf82 <_free_r+0x4a>
 800bf8c:	6819      	ldr	r1, [r3, #0]
 800bf8e:	1858      	adds	r0, r3, r1
 800bf90:	42a0      	cmp	r0, r4
 800bf92:	d10b      	bne.n	800bfac <_free_r+0x74>
 800bf94:	6820      	ldr	r0, [r4, #0]
 800bf96:	4401      	add	r1, r0
 800bf98:	1858      	adds	r0, r3, r1
 800bf9a:	4282      	cmp	r2, r0
 800bf9c:	6019      	str	r1, [r3, #0]
 800bf9e:	d1dd      	bne.n	800bf5c <_free_r+0x24>
 800bfa0:	6810      	ldr	r0, [r2, #0]
 800bfa2:	6852      	ldr	r2, [r2, #4]
 800bfa4:	605a      	str	r2, [r3, #4]
 800bfa6:	4401      	add	r1, r0
 800bfa8:	6019      	str	r1, [r3, #0]
 800bfaa:	e7d7      	b.n	800bf5c <_free_r+0x24>
 800bfac:	d902      	bls.n	800bfb4 <_free_r+0x7c>
 800bfae:	230c      	movs	r3, #12
 800bfb0:	602b      	str	r3, [r5, #0]
 800bfb2:	e7d3      	b.n	800bf5c <_free_r+0x24>
 800bfb4:	6820      	ldr	r0, [r4, #0]
 800bfb6:	1821      	adds	r1, r4, r0
 800bfb8:	428a      	cmp	r2, r1
 800bfba:	bf04      	itt	eq
 800bfbc:	6811      	ldreq	r1, [r2, #0]
 800bfbe:	6852      	ldreq	r2, [r2, #4]
 800bfc0:	6062      	str	r2, [r4, #4]
 800bfc2:	bf04      	itt	eq
 800bfc4:	1809      	addeq	r1, r1, r0
 800bfc6:	6021      	streq	r1, [r4, #0]
 800bfc8:	605c      	str	r4, [r3, #4]
 800bfca:	e7c7      	b.n	800bf5c <_free_r+0x24>
 800bfcc:	bd38      	pop	{r3, r4, r5, pc}
 800bfce:	bf00      	nop
 800bfd0:	20000990 	.word	0x20000990

0800bfd4 <_malloc_r>:
 800bfd4:	b570      	push	{r4, r5, r6, lr}
 800bfd6:	1ccd      	adds	r5, r1, #3
 800bfd8:	f025 0503 	bic.w	r5, r5, #3
 800bfdc:	3508      	adds	r5, #8
 800bfde:	2d0c      	cmp	r5, #12
 800bfe0:	bf38      	it	cc
 800bfe2:	250c      	movcc	r5, #12
 800bfe4:	2d00      	cmp	r5, #0
 800bfe6:	4606      	mov	r6, r0
 800bfe8:	db01      	blt.n	800bfee <_malloc_r+0x1a>
 800bfea:	42a9      	cmp	r1, r5
 800bfec:	d903      	bls.n	800bff6 <_malloc_r+0x22>
 800bfee:	230c      	movs	r3, #12
 800bff0:	6033      	str	r3, [r6, #0]
 800bff2:	2000      	movs	r0, #0
 800bff4:	bd70      	pop	{r4, r5, r6, pc}
 800bff6:	f000 f9e1 	bl	800c3bc <__malloc_lock>
 800bffa:	4a21      	ldr	r2, [pc, #132]	; (800c080 <_malloc_r+0xac>)
 800bffc:	6814      	ldr	r4, [r2, #0]
 800bffe:	4621      	mov	r1, r4
 800c000:	b991      	cbnz	r1, 800c028 <_malloc_r+0x54>
 800c002:	4c20      	ldr	r4, [pc, #128]	; (800c084 <_malloc_r+0xb0>)
 800c004:	6823      	ldr	r3, [r4, #0]
 800c006:	b91b      	cbnz	r3, 800c010 <_malloc_r+0x3c>
 800c008:	4630      	mov	r0, r6
 800c00a:	f000 f98f 	bl	800c32c <_sbrk_r>
 800c00e:	6020      	str	r0, [r4, #0]
 800c010:	4629      	mov	r1, r5
 800c012:	4630      	mov	r0, r6
 800c014:	f000 f98a 	bl	800c32c <_sbrk_r>
 800c018:	1c43      	adds	r3, r0, #1
 800c01a:	d124      	bne.n	800c066 <_malloc_r+0x92>
 800c01c:	230c      	movs	r3, #12
 800c01e:	6033      	str	r3, [r6, #0]
 800c020:	4630      	mov	r0, r6
 800c022:	f000 f9cc 	bl	800c3be <__malloc_unlock>
 800c026:	e7e4      	b.n	800bff2 <_malloc_r+0x1e>
 800c028:	680b      	ldr	r3, [r1, #0]
 800c02a:	1b5b      	subs	r3, r3, r5
 800c02c:	d418      	bmi.n	800c060 <_malloc_r+0x8c>
 800c02e:	2b0b      	cmp	r3, #11
 800c030:	d90f      	bls.n	800c052 <_malloc_r+0x7e>
 800c032:	600b      	str	r3, [r1, #0]
 800c034:	50cd      	str	r5, [r1, r3]
 800c036:	18cc      	adds	r4, r1, r3
 800c038:	4630      	mov	r0, r6
 800c03a:	f000 f9c0 	bl	800c3be <__malloc_unlock>
 800c03e:	f104 000b 	add.w	r0, r4, #11
 800c042:	1d23      	adds	r3, r4, #4
 800c044:	f020 0007 	bic.w	r0, r0, #7
 800c048:	1ac3      	subs	r3, r0, r3
 800c04a:	d0d3      	beq.n	800bff4 <_malloc_r+0x20>
 800c04c:	425a      	negs	r2, r3
 800c04e:	50e2      	str	r2, [r4, r3]
 800c050:	e7d0      	b.n	800bff4 <_malloc_r+0x20>
 800c052:	428c      	cmp	r4, r1
 800c054:	684b      	ldr	r3, [r1, #4]
 800c056:	bf16      	itet	ne
 800c058:	6063      	strne	r3, [r4, #4]
 800c05a:	6013      	streq	r3, [r2, #0]
 800c05c:	460c      	movne	r4, r1
 800c05e:	e7eb      	b.n	800c038 <_malloc_r+0x64>
 800c060:	460c      	mov	r4, r1
 800c062:	6849      	ldr	r1, [r1, #4]
 800c064:	e7cc      	b.n	800c000 <_malloc_r+0x2c>
 800c066:	1cc4      	adds	r4, r0, #3
 800c068:	f024 0403 	bic.w	r4, r4, #3
 800c06c:	42a0      	cmp	r0, r4
 800c06e:	d005      	beq.n	800c07c <_malloc_r+0xa8>
 800c070:	1a21      	subs	r1, r4, r0
 800c072:	4630      	mov	r0, r6
 800c074:	f000 f95a 	bl	800c32c <_sbrk_r>
 800c078:	3001      	adds	r0, #1
 800c07a:	d0cf      	beq.n	800c01c <_malloc_r+0x48>
 800c07c:	6025      	str	r5, [r4, #0]
 800c07e:	e7db      	b.n	800c038 <_malloc_r+0x64>
 800c080:	20000990 	.word	0x20000990
 800c084:	20000994 	.word	0x20000994

0800c088 <__ssputs_r>:
 800c088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c08c:	688e      	ldr	r6, [r1, #8]
 800c08e:	429e      	cmp	r6, r3
 800c090:	4682      	mov	sl, r0
 800c092:	460c      	mov	r4, r1
 800c094:	4690      	mov	r8, r2
 800c096:	4699      	mov	r9, r3
 800c098:	d837      	bhi.n	800c10a <__ssputs_r+0x82>
 800c09a:	898a      	ldrh	r2, [r1, #12]
 800c09c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0a0:	d031      	beq.n	800c106 <__ssputs_r+0x7e>
 800c0a2:	6825      	ldr	r5, [r4, #0]
 800c0a4:	6909      	ldr	r1, [r1, #16]
 800c0a6:	1a6f      	subs	r7, r5, r1
 800c0a8:	6965      	ldr	r5, [r4, #20]
 800c0aa:	2302      	movs	r3, #2
 800c0ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0b0:	fb95 f5f3 	sdiv	r5, r5, r3
 800c0b4:	f109 0301 	add.w	r3, r9, #1
 800c0b8:	443b      	add	r3, r7
 800c0ba:	429d      	cmp	r5, r3
 800c0bc:	bf38      	it	cc
 800c0be:	461d      	movcc	r5, r3
 800c0c0:	0553      	lsls	r3, r2, #21
 800c0c2:	d530      	bpl.n	800c126 <__ssputs_r+0x9e>
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	f7ff ff85 	bl	800bfd4 <_malloc_r>
 800c0ca:	4606      	mov	r6, r0
 800c0cc:	b950      	cbnz	r0, 800c0e4 <__ssputs_r+0x5c>
 800c0ce:	230c      	movs	r3, #12
 800c0d0:	f8ca 3000 	str.w	r3, [sl]
 800c0d4:	89a3      	ldrh	r3, [r4, #12]
 800c0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0da:	81a3      	strh	r3, [r4, #12]
 800c0dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e4:	463a      	mov	r2, r7
 800c0e6:	6921      	ldr	r1, [r4, #16]
 800c0e8:	f7ff fb0e 	bl	800b708 <memcpy>
 800c0ec:	89a3      	ldrh	r3, [r4, #12]
 800c0ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0f6:	81a3      	strh	r3, [r4, #12]
 800c0f8:	6126      	str	r6, [r4, #16]
 800c0fa:	6165      	str	r5, [r4, #20]
 800c0fc:	443e      	add	r6, r7
 800c0fe:	1bed      	subs	r5, r5, r7
 800c100:	6026      	str	r6, [r4, #0]
 800c102:	60a5      	str	r5, [r4, #8]
 800c104:	464e      	mov	r6, r9
 800c106:	454e      	cmp	r6, r9
 800c108:	d900      	bls.n	800c10c <__ssputs_r+0x84>
 800c10a:	464e      	mov	r6, r9
 800c10c:	4632      	mov	r2, r6
 800c10e:	4641      	mov	r1, r8
 800c110:	6820      	ldr	r0, [r4, #0]
 800c112:	f000 f93a 	bl	800c38a <memmove>
 800c116:	68a3      	ldr	r3, [r4, #8]
 800c118:	1b9b      	subs	r3, r3, r6
 800c11a:	60a3      	str	r3, [r4, #8]
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	441e      	add	r6, r3
 800c120:	6026      	str	r6, [r4, #0]
 800c122:	2000      	movs	r0, #0
 800c124:	e7dc      	b.n	800c0e0 <__ssputs_r+0x58>
 800c126:	462a      	mov	r2, r5
 800c128:	f000 f94a 	bl	800c3c0 <_realloc_r>
 800c12c:	4606      	mov	r6, r0
 800c12e:	2800      	cmp	r0, #0
 800c130:	d1e2      	bne.n	800c0f8 <__ssputs_r+0x70>
 800c132:	6921      	ldr	r1, [r4, #16]
 800c134:	4650      	mov	r0, sl
 800c136:	f7ff feff 	bl	800bf38 <_free_r>
 800c13a:	e7c8      	b.n	800c0ce <__ssputs_r+0x46>

0800c13c <_svfiprintf_r>:
 800c13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c140:	461d      	mov	r5, r3
 800c142:	898b      	ldrh	r3, [r1, #12]
 800c144:	061f      	lsls	r7, r3, #24
 800c146:	b09d      	sub	sp, #116	; 0x74
 800c148:	4680      	mov	r8, r0
 800c14a:	460c      	mov	r4, r1
 800c14c:	4616      	mov	r6, r2
 800c14e:	d50f      	bpl.n	800c170 <_svfiprintf_r+0x34>
 800c150:	690b      	ldr	r3, [r1, #16]
 800c152:	b96b      	cbnz	r3, 800c170 <_svfiprintf_r+0x34>
 800c154:	2140      	movs	r1, #64	; 0x40
 800c156:	f7ff ff3d 	bl	800bfd4 <_malloc_r>
 800c15a:	6020      	str	r0, [r4, #0]
 800c15c:	6120      	str	r0, [r4, #16]
 800c15e:	b928      	cbnz	r0, 800c16c <_svfiprintf_r+0x30>
 800c160:	230c      	movs	r3, #12
 800c162:	f8c8 3000 	str.w	r3, [r8]
 800c166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c16a:	e0c8      	b.n	800c2fe <_svfiprintf_r+0x1c2>
 800c16c:	2340      	movs	r3, #64	; 0x40
 800c16e:	6163      	str	r3, [r4, #20]
 800c170:	2300      	movs	r3, #0
 800c172:	9309      	str	r3, [sp, #36]	; 0x24
 800c174:	2320      	movs	r3, #32
 800c176:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c17a:	2330      	movs	r3, #48	; 0x30
 800c17c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c180:	9503      	str	r5, [sp, #12]
 800c182:	f04f 0b01 	mov.w	fp, #1
 800c186:	4637      	mov	r7, r6
 800c188:	463d      	mov	r5, r7
 800c18a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c18e:	b10b      	cbz	r3, 800c194 <_svfiprintf_r+0x58>
 800c190:	2b25      	cmp	r3, #37	; 0x25
 800c192:	d13e      	bne.n	800c212 <_svfiprintf_r+0xd6>
 800c194:	ebb7 0a06 	subs.w	sl, r7, r6
 800c198:	d00b      	beq.n	800c1b2 <_svfiprintf_r+0x76>
 800c19a:	4653      	mov	r3, sl
 800c19c:	4632      	mov	r2, r6
 800c19e:	4621      	mov	r1, r4
 800c1a0:	4640      	mov	r0, r8
 800c1a2:	f7ff ff71 	bl	800c088 <__ssputs_r>
 800c1a6:	3001      	adds	r0, #1
 800c1a8:	f000 80a4 	beq.w	800c2f4 <_svfiprintf_r+0x1b8>
 800c1ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ae:	4453      	add	r3, sl
 800c1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b2:	783b      	ldrb	r3, [r7, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f000 809d 	beq.w	800c2f4 <_svfiprintf_r+0x1b8>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1c4:	9304      	str	r3, [sp, #16]
 800c1c6:	9307      	str	r3, [sp, #28]
 800c1c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1cc:	931a      	str	r3, [sp, #104]	; 0x68
 800c1ce:	462f      	mov	r7, r5
 800c1d0:	2205      	movs	r2, #5
 800c1d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c1d6:	4850      	ldr	r0, [pc, #320]	; (800c318 <_svfiprintf_r+0x1dc>)
 800c1d8:	f7f4 f812 	bl	8000200 <memchr>
 800c1dc:	9b04      	ldr	r3, [sp, #16]
 800c1de:	b9d0      	cbnz	r0, 800c216 <_svfiprintf_r+0xda>
 800c1e0:	06d9      	lsls	r1, r3, #27
 800c1e2:	bf44      	itt	mi
 800c1e4:	2220      	movmi	r2, #32
 800c1e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c1ea:	071a      	lsls	r2, r3, #28
 800c1ec:	bf44      	itt	mi
 800c1ee:	222b      	movmi	r2, #43	; 0x2b
 800c1f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c1f4:	782a      	ldrb	r2, [r5, #0]
 800c1f6:	2a2a      	cmp	r2, #42	; 0x2a
 800c1f8:	d015      	beq.n	800c226 <_svfiprintf_r+0xea>
 800c1fa:	9a07      	ldr	r2, [sp, #28]
 800c1fc:	462f      	mov	r7, r5
 800c1fe:	2000      	movs	r0, #0
 800c200:	250a      	movs	r5, #10
 800c202:	4639      	mov	r1, r7
 800c204:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c208:	3b30      	subs	r3, #48	; 0x30
 800c20a:	2b09      	cmp	r3, #9
 800c20c:	d94d      	bls.n	800c2aa <_svfiprintf_r+0x16e>
 800c20e:	b1b8      	cbz	r0, 800c240 <_svfiprintf_r+0x104>
 800c210:	e00f      	b.n	800c232 <_svfiprintf_r+0xf6>
 800c212:	462f      	mov	r7, r5
 800c214:	e7b8      	b.n	800c188 <_svfiprintf_r+0x4c>
 800c216:	4a40      	ldr	r2, [pc, #256]	; (800c318 <_svfiprintf_r+0x1dc>)
 800c218:	1a80      	subs	r0, r0, r2
 800c21a:	fa0b f000 	lsl.w	r0, fp, r0
 800c21e:	4318      	orrs	r0, r3
 800c220:	9004      	str	r0, [sp, #16]
 800c222:	463d      	mov	r5, r7
 800c224:	e7d3      	b.n	800c1ce <_svfiprintf_r+0x92>
 800c226:	9a03      	ldr	r2, [sp, #12]
 800c228:	1d11      	adds	r1, r2, #4
 800c22a:	6812      	ldr	r2, [r2, #0]
 800c22c:	9103      	str	r1, [sp, #12]
 800c22e:	2a00      	cmp	r2, #0
 800c230:	db01      	blt.n	800c236 <_svfiprintf_r+0xfa>
 800c232:	9207      	str	r2, [sp, #28]
 800c234:	e004      	b.n	800c240 <_svfiprintf_r+0x104>
 800c236:	4252      	negs	r2, r2
 800c238:	f043 0302 	orr.w	r3, r3, #2
 800c23c:	9207      	str	r2, [sp, #28]
 800c23e:	9304      	str	r3, [sp, #16]
 800c240:	783b      	ldrb	r3, [r7, #0]
 800c242:	2b2e      	cmp	r3, #46	; 0x2e
 800c244:	d10c      	bne.n	800c260 <_svfiprintf_r+0x124>
 800c246:	787b      	ldrb	r3, [r7, #1]
 800c248:	2b2a      	cmp	r3, #42	; 0x2a
 800c24a:	d133      	bne.n	800c2b4 <_svfiprintf_r+0x178>
 800c24c:	9b03      	ldr	r3, [sp, #12]
 800c24e:	1d1a      	adds	r2, r3, #4
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	9203      	str	r2, [sp, #12]
 800c254:	2b00      	cmp	r3, #0
 800c256:	bfb8      	it	lt
 800c258:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c25c:	3702      	adds	r7, #2
 800c25e:	9305      	str	r3, [sp, #20]
 800c260:	4d2e      	ldr	r5, [pc, #184]	; (800c31c <_svfiprintf_r+0x1e0>)
 800c262:	7839      	ldrb	r1, [r7, #0]
 800c264:	2203      	movs	r2, #3
 800c266:	4628      	mov	r0, r5
 800c268:	f7f3 ffca 	bl	8000200 <memchr>
 800c26c:	b138      	cbz	r0, 800c27e <_svfiprintf_r+0x142>
 800c26e:	2340      	movs	r3, #64	; 0x40
 800c270:	1b40      	subs	r0, r0, r5
 800c272:	fa03 f000 	lsl.w	r0, r3, r0
 800c276:	9b04      	ldr	r3, [sp, #16]
 800c278:	4303      	orrs	r3, r0
 800c27a:	3701      	adds	r7, #1
 800c27c:	9304      	str	r3, [sp, #16]
 800c27e:	7839      	ldrb	r1, [r7, #0]
 800c280:	4827      	ldr	r0, [pc, #156]	; (800c320 <_svfiprintf_r+0x1e4>)
 800c282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c286:	2206      	movs	r2, #6
 800c288:	1c7e      	adds	r6, r7, #1
 800c28a:	f7f3 ffb9 	bl	8000200 <memchr>
 800c28e:	2800      	cmp	r0, #0
 800c290:	d038      	beq.n	800c304 <_svfiprintf_r+0x1c8>
 800c292:	4b24      	ldr	r3, [pc, #144]	; (800c324 <_svfiprintf_r+0x1e8>)
 800c294:	bb13      	cbnz	r3, 800c2dc <_svfiprintf_r+0x1a0>
 800c296:	9b03      	ldr	r3, [sp, #12]
 800c298:	3307      	adds	r3, #7
 800c29a:	f023 0307 	bic.w	r3, r3, #7
 800c29e:	3308      	adds	r3, #8
 800c2a0:	9303      	str	r3, [sp, #12]
 800c2a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2a4:	444b      	add	r3, r9
 800c2a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c2a8:	e76d      	b.n	800c186 <_svfiprintf_r+0x4a>
 800c2aa:	fb05 3202 	mla	r2, r5, r2, r3
 800c2ae:	2001      	movs	r0, #1
 800c2b0:	460f      	mov	r7, r1
 800c2b2:	e7a6      	b.n	800c202 <_svfiprintf_r+0xc6>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	3701      	adds	r7, #1
 800c2b8:	9305      	str	r3, [sp, #20]
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	250a      	movs	r5, #10
 800c2be:	4638      	mov	r0, r7
 800c2c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2c4:	3a30      	subs	r2, #48	; 0x30
 800c2c6:	2a09      	cmp	r2, #9
 800c2c8:	d903      	bls.n	800c2d2 <_svfiprintf_r+0x196>
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d0c8      	beq.n	800c260 <_svfiprintf_r+0x124>
 800c2ce:	9105      	str	r1, [sp, #20]
 800c2d0:	e7c6      	b.n	800c260 <_svfiprintf_r+0x124>
 800c2d2:	fb05 2101 	mla	r1, r5, r1, r2
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	4607      	mov	r7, r0
 800c2da:	e7f0      	b.n	800c2be <_svfiprintf_r+0x182>
 800c2dc:	ab03      	add	r3, sp, #12
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	4622      	mov	r2, r4
 800c2e2:	4b11      	ldr	r3, [pc, #68]	; (800c328 <_svfiprintf_r+0x1ec>)
 800c2e4:	a904      	add	r1, sp, #16
 800c2e6:	4640      	mov	r0, r8
 800c2e8:	f7fc fdc6 	bl	8008e78 <_printf_float>
 800c2ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c2f0:	4681      	mov	r9, r0
 800c2f2:	d1d6      	bne.n	800c2a2 <_svfiprintf_r+0x166>
 800c2f4:	89a3      	ldrh	r3, [r4, #12]
 800c2f6:	065b      	lsls	r3, r3, #25
 800c2f8:	f53f af35 	bmi.w	800c166 <_svfiprintf_r+0x2a>
 800c2fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2fe:	b01d      	add	sp, #116	; 0x74
 800c300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c304:	ab03      	add	r3, sp, #12
 800c306:	9300      	str	r3, [sp, #0]
 800c308:	4622      	mov	r2, r4
 800c30a:	4b07      	ldr	r3, [pc, #28]	; (800c328 <_svfiprintf_r+0x1ec>)
 800c30c:	a904      	add	r1, sp, #16
 800c30e:	4640      	mov	r0, r8
 800c310:	f7fd f868 	bl	80093e4 <_printf_i>
 800c314:	e7ea      	b.n	800c2ec <_svfiprintf_r+0x1b0>
 800c316:	bf00      	nop
 800c318:	0800c6e4 	.word	0x0800c6e4
 800c31c:	0800c6ea 	.word	0x0800c6ea
 800c320:	0800c6ee 	.word	0x0800c6ee
 800c324:	08008e79 	.word	0x08008e79
 800c328:	0800c089 	.word	0x0800c089

0800c32c <_sbrk_r>:
 800c32c:	b538      	push	{r3, r4, r5, lr}
 800c32e:	4c06      	ldr	r4, [pc, #24]	; (800c348 <_sbrk_r+0x1c>)
 800c330:	2300      	movs	r3, #0
 800c332:	4605      	mov	r5, r0
 800c334:	4608      	mov	r0, r1
 800c336:	6023      	str	r3, [r4, #0]
 800c338:	f7f6 fd06 	bl	8002d48 <_sbrk>
 800c33c:	1c43      	adds	r3, r0, #1
 800c33e:	d102      	bne.n	800c346 <_sbrk_r+0x1a>
 800c340:	6823      	ldr	r3, [r4, #0]
 800c342:	b103      	cbz	r3, 800c346 <_sbrk_r+0x1a>
 800c344:	602b      	str	r3, [r5, #0]
 800c346:	bd38      	pop	{r3, r4, r5, pc}
 800c348:	20001138 	.word	0x20001138

0800c34c <strncmp>:
 800c34c:	b510      	push	{r4, lr}
 800c34e:	b16a      	cbz	r2, 800c36c <strncmp+0x20>
 800c350:	3901      	subs	r1, #1
 800c352:	1884      	adds	r4, r0, r2
 800c354:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c358:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d103      	bne.n	800c368 <strncmp+0x1c>
 800c360:	42a0      	cmp	r0, r4
 800c362:	d001      	beq.n	800c368 <strncmp+0x1c>
 800c364:	2b00      	cmp	r3, #0
 800c366:	d1f5      	bne.n	800c354 <strncmp+0x8>
 800c368:	1a98      	subs	r0, r3, r2
 800c36a:	bd10      	pop	{r4, pc}
 800c36c:	4610      	mov	r0, r2
 800c36e:	e7fc      	b.n	800c36a <strncmp+0x1e>

0800c370 <__ascii_wctomb>:
 800c370:	b149      	cbz	r1, 800c386 <__ascii_wctomb+0x16>
 800c372:	2aff      	cmp	r2, #255	; 0xff
 800c374:	bf85      	ittet	hi
 800c376:	238a      	movhi	r3, #138	; 0x8a
 800c378:	6003      	strhi	r3, [r0, #0]
 800c37a:	700a      	strbls	r2, [r1, #0]
 800c37c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c380:	bf98      	it	ls
 800c382:	2001      	movls	r0, #1
 800c384:	4770      	bx	lr
 800c386:	4608      	mov	r0, r1
 800c388:	4770      	bx	lr

0800c38a <memmove>:
 800c38a:	4288      	cmp	r0, r1
 800c38c:	b510      	push	{r4, lr}
 800c38e:	eb01 0302 	add.w	r3, r1, r2
 800c392:	d807      	bhi.n	800c3a4 <memmove+0x1a>
 800c394:	1e42      	subs	r2, r0, #1
 800c396:	4299      	cmp	r1, r3
 800c398:	d00a      	beq.n	800c3b0 <memmove+0x26>
 800c39a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c39e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c3a2:	e7f8      	b.n	800c396 <memmove+0xc>
 800c3a4:	4283      	cmp	r3, r0
 800c3a6:	d9f5      	bls.n	800c394 <memmove+0xa>
 800c3a8:	1881      	adds	r1, r0, r2
 800c3aa:	1ad2      	subs	r2, r2, r3
 800c3ac:	42d3      	cmn	r3, r2
 800c3ae:	d100      	bne.n	800c3b2 <memmove+0x28>
 800c3b0:	bd10      	pop	{r4, pc}
 800c3b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c3ba:	e7f7      	b.n	800c3ac <memmove+0x22>

0800c3bc <__malloc_lock>:
 800c3bc:	4770      	bx	lr

0800c3be <__malloc_unlock>:
 800c3be:	4770      	bx	lr

0800c3c0 <_realloc_r>:
 800c3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c2:	4607      	mov	r7, r0
 800c3c4:	4614      	mov	r4, r2
 800c3c6:	460e      	mov	r6, r1
 800c3c8:	b921      	cbnz	r1, 800c3d4 <_realloc_r+0x14>
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c3d0:	f7ff be00 	b.w	800bfd4 <_malloc_r>
 800c3d4:	b922      	cbnz	r2, 800c3e0 <_realloc_r+0x20>
 800c3d6:	f7ff fdaf 	bl	800bf38 <_free_r>
 800c3da:	4625      	mov	r5, r4
 800c3dc:	4628      	mov	r0, r5
 800c3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3e0:	f000 f814 	bl	800c40c <_malloc_usable_size_r>
 800c3e4:	42a0      	cmp	r0, r4
 800c3e6:	d20f      	bcs.n	800c408 <_realloc_r+0x48>
 800c3e8:	4621      	mov	r1, r4
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	f7ff fdf2 	bl	800bfd4 <_malloc_r>
 800c3f0:	4605      	mov	r5, r0
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d0f2      	beq.n	800c3dc <_realloc_r+0x1c>
 800c3f6:	4631      	mov	r1, r6
 800c3f8:	4622      	mov	r2, r4
 800c3fa:	f7ff f985 	bl	800b708 <memcpy>
 800c3fe:	4631      	mov	r1, r6
 800c400:	4638      	mov	r0, r7
 800c402:	f7ff fd99 	bl	800bf38 <_free_r>
 800c406:	e7e9      	b.n	800c3dc <_realloc_r+0x1c>
 800c408:	4635      	mov	r5, r6
 800c40a:	e7e7      	b.n	800c3dc <_realloc_r+0x1c>

0800c40c <_malloc_usable_size_r>:
 800c40c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c410:	1f18      	subs	r0, r3, #4
 800c412:	2b00      	cmp	r3, #0
 800c414:	bfbc      	itt	lt
 800c416:	580b      	ldrlt	r3, [r1, r0]
 800c418:	18c0      	addlt	r0, r0, r3
 800c41a:	4770      	bx	lr

0800c41c <_init>:
 800c41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c41e:	bf00      	nop
 800c420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c422:	bc08      	pop	{r3}
 800c424:	469e      	mov	lr, r3
 800c426:	4770      	bx	lr

0800c428 <_fini>:
 800c428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c42a:	bf00      	nop
 800c42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c42e:	bc08      	pop	{r3}
 800c430:	469e      	mov	lr, r3
 800c432:	4770      	bx	lr
